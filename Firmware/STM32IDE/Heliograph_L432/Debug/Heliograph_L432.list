
Heliograph_L432.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb4  0800c378  0800c378  0001c378  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d02c  0800d02c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d02c  0800d02c  0001d02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d034  0800d034  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d034  0800d034  0001d034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d038  0800d038  0001d038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d03c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bbc  200001e0  0800d21c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d9c  0800d21c  00020d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175ea  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a26  00000000  00000000  000377fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0003b220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  0003c848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a25  00000000  00000000  0003dd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e71  00000000  00000000  0006472d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e33d9  00000000  00000000  0007b59e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e977  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ca4  00000000  00000000  0015e9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c35c 	.word	0x0800c35c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c35c 	.word	0x0800c35c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f043 0201 	orr.w	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	601a      	str	r2, [r3, #0]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <LL_LPUART_EnableClockInStopMode>:
  * @rmtoll CR3          UCESM         LL_LPUART_EnableClockInStopMode
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableClockInStopMode(USART_TypeDef *LPUARTx)
{
 800107e:	b480      	push	{r7}
 8001080:	b089      	sub	sp, #36	; 0x24
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_UCESM);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3308      	adds	r3, #8
 800108a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	e853 3f00 	ldrex	r3, [r3]
 8001092:	60bb      	str	r3, [r7, #8]
   return(result);
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3308      	adds	r3, #8
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	61ba      	str	r2, [r7, #24]
 80010a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010a6:	6979      	ldr	r1, [r7, #20]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	e841 2300 	strex	r3, r2, [r1]
 80010ae:	613b      	str	r3, [r7, #16]
   return(result);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1e7      	bne.n	8001086 <LL_LPUART_EnableClockInStopMode+0x8>
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	3724      	adds	r7, #36	; 0x24
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_LPUART_DisableOverrunDetect>:
  * @rmtoll CR3          OVRDIS        LL_LPUART_DisableOverrunDetect
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableOverrunDetect(USART_TypeDef *LPUARTx)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR3, USART_CR3_OVRDIS);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	609a      	str	r2, [r3, #8]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_LPUART_SetWKUPType>:
  *         @arg @ref LL_LPUART_WAKEUP_ON_STARTBIT
  *         @arg @ref LL_LPUART_WAKEUP_ON_RXNE
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetWKUPType(USART_TypeDef *LPUARTx, uint32_t Type)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_WUS, Type);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	431a      	orrs	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	609a      	str	r2, [r3, #8]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
	...

0800110c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001116:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4313      	orrs	r3, r2
 800111e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001122:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4013      	ands	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40021000 	.word	0x40021000

0800113c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001146:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001148:	4907      	ldr	r1, [pc, #28]	; (8001168 <LL_APB1_GRP2_EnableClock+0x2c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4313      	orrs	r3, r2
 800114e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001152:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4013      	ands	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800115a:	68fb      	ldr	r3, [r7, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40021000 	.word	0x40021000

0800116c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001170:	f002 ff70 	bl	8004054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001174:	f000 f812 	bl	800119c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001178:	f000 fa06 	bl	8001588 <MX_GPIO_Init>
  MX_DMA_Init();
 800117c:	f000 f9de 	bl	800153c <MX_DMA_Init>
  MX_SPI1_Init();
 8001180:	f000 f99e 	bl	80014c0 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001184:	f000 f862 	bl	800124c <MX_ADC1_Init>
  MX_LPUART1_UART_Init();
 8001188:	f000 f8ea 	bl	8001360 <MX_LPUART1_UART_Init>
  MX_RTC_Init();
 800118c:	f000 f964 	bl	8001458 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  myApp_init();
 8001190:	f001 fc30 	bl	80029f4 <myApp_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  myApp_loop();
 8001194:	f001 fc46 	bl	8002a24 <myApp_loop>
 8001198:	e7fc      	b.n	8001194 <main+0x28>
	...

0800119c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b096      	sub	sp, #88	; 0x58
 80011a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	2244      	movs	r2, #68	; 0x44
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f008 fbc6 	bl	800993c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b0:	463b      	mov	r3, r7
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
 80011bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80011be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011c2:	f005 f809 	bl	80061d8 <HAL_PWREx_ControlVoltageScaling>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011cc:	f000 fa9a 	bl	8001704 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011d0:	f004 ff98 	bl	8006104 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80011d4:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <SystemClock_Config+0xac>)
 80011d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011da:	f023 0318 	bic.w	r3, r3, #24
 80011de:	4a1a      	ldr	r2, [pc, #104]	; (8001248 <SystemClock_Config+0xac>)
 80011e0:	f043 0310 	orr.w	r3, r3, #16
 80011e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80011e8:	2314      	movs	r3, #20
 80011ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011f0:	2301      	movs	r3, #1
 80011f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011f8:	2360      	movs	r3, #96	; 0x60
 80011fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4618      	mov	r0, r3
 8001206:	f005 f8db 	bl	80063c0 <HAL_RCC_OscConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001210:	f000 fa78 	bl	8001704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001214:	230f      	movs	r3, #15
 8001216:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f005 fcdb 	bl	8006be8 <HAL_RCC_ClockConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001238:	f000 fa64 	bl	8001704 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800123c:	f006 f8b6 	bl	80073ac <HAL_RCCEx_EnableMSIPLLMode>
}
 8001240:	bf00      	nop
 8001242:	3758      	adds	r7, #88	; 0x58
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40021000 	.word	0x40021000

0800124c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
 8001260:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001262:	4b3a      	ldr	r3, [pc, #232]	; (800134c <MX_ADC1_Init+0x100>)
 8001264:	4a3a      	ldr	r2, [pc, #232]	; (8001350 <MX_ADC1_Init+0x104>)
 8001266:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8001268:	4b38      	ldr	r3, [pc, #224]	; (800134c <MX_ADC1_Init+0x100>)
 800126a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800126e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001270:	4b36      	ldr	r3, [pc, #216]	; (800134c <MX_ADC1_Init+0x100>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001276:	4b35      	ldr	r3, [pc, #212]	; (800134c <MX_ADC1_Init+0x100>)
 8001278:	2200      	movs	r2, #0
 800127a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800127c:	4b33      	ldr	r3, [pc, #204]	; (800134c <MX_ADC1_Init+0x100>)
 800127e:	2201      	movs	r2, #1
 8001280:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001282:	4b32      	ldr	r3, [pc, #200]	; (800134c <MX_ADC1_Init+0x100>)
 8001284:	2208      	movs	r2, #8
 8001286:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001288:	4b30      	ldr	r3, [pc, #192]	; (800134c <MX_ADC1_Init+0x100>)
 800128a:	2200      	movs	r2, #0
 800128c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800128e:	4b2f      	ldr	r3, [pc, #188]	; (800134c <MX_ADC1_Init+0x100>)
 8001290:	2200      	movs	r2, #0
 8001292:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8001294:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MX_ADC1_Init+0x100>)
 8001296:	2203      	movs	r2, #3
 8001298:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <MX_ADC1_Init+0x100>)
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a2:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MX_ADC1_Init+0x100>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a8:	4b28      	ldr	r3, [pc, #160]	; (800134c <MX_ADC1_Init+0x100>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012ae:	4b27      	ldr	r3, [pc, #156]	; (800134c <MX_ADC1_Init+0x100>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <MX_ADC1_Init+0x100>)
 80012b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012bc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <MX_ADC1_Init+0x100>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012c6:	4821      	ldr	r0, [pc, #132]	; (800134c <MX_ADC1_Init+0x100>)
 80012c8:	f003 f96e 	bl	80045a8 <HAL_ADC_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80012d2:	f000 fa17 	bl	8001704 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <MX_ADC1_Init+0x108>)
 80012d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012da:	2306      	movs	r3, #6
 80012dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80012de:	2306      	movs	r3, #6
 80012e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012e2:	237f      	movs	r3, #127	; 0x7f
 80012e4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012e6:	2304      	movs	r3, #4
 80012e8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ee:	463b      	mov	r3, r7
 80012f0:	4619      	mov	r1, r3
 80012f2:	4816      	ldr	r0, [pc, #88]	; (800134c <MX_ADC1_Init+0x100>)
 80012f4:	f003 fb9a 	bl	8004a2c <HAL_ADC_ConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80012fe:	f000 fa01 	bl	8001704 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <MX_ADC1_Init+0x10c>)
 8001304:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001306:	230c      	movs	r3, #12
 8001308:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800130a:	463b      	mov	r3, r7
 800130c:	4619      	mov	r1, r3
 800130e:	480f      	ldr	r0, [pc, #60]	; (800134c <MX_ADC1_Init+0x100>)
 8001310:	f003 fb8c 	bl	8004a2c <HAL_ADC_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800131a:	f000 f9f3 	bl	8001704 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_ADC1_Init+0x110>)
 8001320:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001322:	2312      	movs	r3, #18
 8001324:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	4619      	mov	r1, r3
 800132a:	4808      	ldr	r0, [pc, #32]	; (800134c <MX_ADC1_Init+0x100>)
 800132c:	f003 fb7e 	bl	8004a2c <HAL_ADC_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001336:	f000 f9e5 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800133a:	217f      	movs	r1, #127	; 0x7f
 800133c:	4803      	ldr	r0, [pc, #12]	; (800134c <MX_ADC1_Init+0x100>)
 800133e:	f004 f9b7 	bl	80056b0 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END ADC1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200001fc 	.word	0x200001fc
 8001350:	50040000 	.word	0x50040000
 8001354:	19200040 	.word	0x19200040
 8001358:	c7520000 	.word	0xc7520000
 800135c:	80000001 	.word	0x80000001

08001360 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0a2      	sub	sp, #136	; 0x88
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8001366:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
 8001388:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2254      	movs	r2, #84	; 0x54
 800138e:	2100      	movs	r1, #0
 8001390:	4618      	mov	r0, r3
 8001392:	f008 fad3 	bl	800993c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001396:	2320      	movs	r3, #32
 8001398:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 800139a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4618      	mov	r0, r3
 80013a4:	f005 fe0c 	bl	8006fc0 <HAL_RCCEx_PeriphCLKConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80013ae:	f000 f9a9 	bl	8001704 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f7ff fec2 	bl	800113c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80013b8:	2001      	movs	r0, #1
 80013ba:	f7ff fea7 	bl	800110c <LL_AHB2_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  PA3   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80013be:	230c      	movs	r3, #12
 80013c0:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013c2:	2302      	movs	r3, #2
 80013c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013ce:	2300      	movs	r3, #0
 80013d0:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 80013d2:	2308      	movs	r3, #8
 80013d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013da:	4619      	mov	r1, r3
 80013dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e0:	f007 fb43 	bl	8008a6a <LL_GPIO_Init>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(LPUART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80013e4:	f7ff fdb2 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fe02 	bl	8000ff8 <NVIC_EncodePriority>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4619      	mov	r1, r3
 80013f8:	2046      	movs	r0, #70	; 0x46
 80013fa:	f7ff fdd3 	bl	8000fa4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPUART1_IRQn);
 80013fe:	2046      	movs	r0, #70	; 0x46
 8001400:	f7ff fdb2 	bl	8000f68 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */
  LL_LPUART_DisableOverrunDetect(LPUART1);
 8001404:	4813      	ldr	r0, [pc, #76]	; (8001454 <MX_LPUART1_UART_Init+0xf4>)
 8001406:	f7ff fe5d 	bl	80010c4 <LL_LPUART_DisableOverrunDetect>
  LL_LPUART_EnableClockInStopMode(LPUART1);
 800140a:	4812      	ldr	r0, [pc, #72]	; (8001454 <MX_LPUART1_UART_Init+0xf4>)
 800140c:	f7ff fe37 	bl	800107e <LL_LPUART_EnableClockInStopMode>
  LL_LPUART_SetWKUPType(LPUART1, LL_LPUART_WAKEUP_ON_RXNE); //Set the wake-up event type : specify wake-up on RXNE flag
 8001410:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
 8001414:	480f      	ldr	r0, [pc, #60]	; (8001454 <MX_LPUART1_UART_Init+0xf4>)
 8001416:	f7ff fe65 	bl	80010e4 <LL_LPUART_SetWKUPType>

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.BaudRate = 9600;
 800141a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800141e:	673b      	str	r3, [r7, #112]	; 0x70
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 8001420:	2300      	movs	r3, #0
 8001422:	677b      	str	r3, [r7, #116]	; 0x74
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 8001424:	2300      	movs	r3, #0
 8001426:	67bb      	str	r3, [r7, #120]	; 0x78
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8001428:	2300      	movs	r3, #0
 800142a:	67fb      	str	r3, [r7, #124]	; 0x7c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 800142c:	230c      	movs	r3, #12
 800142e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8001432:	2300      	movs	r3, #0
 8001434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8001438:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800143c:	4619      	mov	r1, r3
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_LPUART1_UART_Init+0xf4>)
 8001440:	f007 fbf0 	bl	8008c24 <LL_LPUART_Init>
  LL_LPUART_Enable(LPUART1);
 8001444:	4803      	ldr	r0, [pc, #12]	; (8001454 <MX_LPUART1_UART_Init+0xf4>)
 8001446:	f7ff fe0a 	bl	800105e <LL_LPUART_Enable>
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	3788      	adds	r7, #136	; 0x88
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40008000 	.word	0x40008000

08001458 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800145c:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_RTC_Init+0x60>)
 800145e:	4a17      	ldr	r2, [pc, #92]	; (80014bc <MX_RTC_Init+0x64>)
 8001460:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_RTC_Init+0x60>)
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <MX_RTC_Init+0x60>)
 800146a:	227f      	movs	r2, #127	; 0x7f
 800146c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800146e:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_RTC_Init+0x60>)
 8001470:	22ff      	movs	r2, #255	; 0xff
 8001472:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001474:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <MX_RTC_Init+0x60>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_RTC_Init+0x60>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001480:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <MX_RTC_Init+0x60>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_RTC_Init+0x60>)
 8001488:	2200      	movs	r2, #0
 800148a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800148c:	480a      	ldr	r0, [pc, #40]	; (80014b8 <MX_RTC_Init+0x60>)
 800148e:	f006 f88f 	bl	80075b0 <HAL_RTC_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001498:	f000 f934 	bl	8001704 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2047, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800149c:	2200      	movs	r2, #0
 800149e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_RTC_Init+0x60>)
 80014a4:	f006 fb9e 	bl	8007be4 <HAL_RTCEx_SetWakeUpTimer_IT>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80014ae:	f000 f929 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200002a8 	.word	0x200002a8
 80014bc:	40002800 	.word	0x40002800

080014c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014c4:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <MX_SPI1_Init+0x74>)
 80014c6:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <MX_SPI1_Init+0x78>)
 80014c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ca:	4b1a      	ldr	r3, [pc, #104]	; (8001534 <MX_SPI1_Init+0x74>)
 80014cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <MX_SPI1_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_SPI1_Init+0x74>)
 80014da:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <MX_SPI1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014e6:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_SPI1_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_SPI1_Init+0x74>)
 80014ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_SPI1_Init+0x74>)
 80014f6:	2208      	movs	r2, #8
 80014f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_SPI1_Init+0x74>)
 80014fc:	2280      	movs	r2, #128	; 0x80
 80014fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_SPI1_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_SPI1_Init+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_SPI1_Init+0x74>)
 800150e:	2207      	movs	r2, #7
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_SPI1_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_SPI1_Init+0x74>)
 800151a:	2200      	movs	r2, #0
 800151c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_SPI1_Init+0x74>)
 8001520:	f006 fc1a 	bl	8007d58 <HAL_SPI_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800152a:	f000 f8eb 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200002cc 	.word	0x200002cc
 8001538:	40013000 	.word	0x40013000

0800153c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <MX_DMA_Init+0x48>)
 8001544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001546:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <MX_DMA_Init+0x48>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6493      	str	r3, [r2, #72]	; 0x48
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <MX_DMA_Init+0x48>)
 8001550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	200b      	movs	r0, #11
 8001560:	f004 f9e1 	bl	8005926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001564:	200b      	movs	r0, #11
 8001566:	f004 f9fa 	bl	800595e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	200d      	movs	r0, #13
 8001570:	f004 f9d9 	bl	8005926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001574:	200d      	movs	r0, #13
 8001576:	f004 f9f2 	bl	800595e <HAL_NVIC_EnableIRQ>

}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000

08001588 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158e:	f107 0314 	add.w	r3, r7, #20
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159e:	4b44      	ldr	r3, [pc, #272]	; (80016b0 <MX_GPIO_Init+0x128>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	4a43      	ldr	r2, [pc, #268]	; (80016b0 <MX_GPIO_Init+0x128>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015aa:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <MX_GPIO_Init+0x128>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b3e      	ldr	r3, [pc, #248]	; (80016b0 <MX_GPIO_Init+0x128>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	4a3d      	ldr	r2, [pc, #244]	; (80016b0 <MX_GPIO_Init+0x128>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c2:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <MX_GPIO_Init+0x128>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <MX_GPIO_Init+0x128>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	4a37      	ldr	r2, [pc, #220]	; (80016b0 <MX_GPIO_Init+0x128>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015da:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <MX_GPIO_Init+0x128>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e6:	4b32      	ldr	r3, [pc, #200]	; (80016b0 <MX_GPIO_Init+0x128>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	4a31      	ldr	r2, [pc, #196]	; (80016b0 <MX_GPIO_Init+0x128>)
 80015ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f2:	4b2f      	ldr	r3, [pc, #188]	; (80016b0 <MX_GPIO_Init+0x128>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GNSS_EXT_Pin|DISP_CS_Pin|DISP_EN_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8001604:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001608:	f004 fd64 	bl	80060d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SolarEN_GPIO_Port, SolarEN_Pin, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001616:	f004 fd5d 	bl	80060d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA11 PA12 PA13
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800161a:	f64f 0301 	movw	r3, #63489	; 0xf801
 800161e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001620:	2303      	movs	r3, #3
 8001622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	4619      	mov	r1, r3
 800162e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001632:	f004 fbe5 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_EXT_Pin DISP_CS_Pin DISP_EN_Pin */
  GPIO_InitStruct.Pin = GNSS_EXT_Pin|DISP_CS_Pin|DISP_EN_Pin;
 8001636:	f44f 63c2 	mov.w	r3, #1552	; 0x610
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163c:	2301      	movs	r3, #1
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001652:	f004 fbd5 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8001656:	23fb      	movs	r3, #251	; 0xfb
 8001658:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800165a:	2303      	movs	r3, #3
 800165c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4812      	ldr	r0, [pc, #72]	; (80016b4 <MX_GPIO_Init+0x12c>)
 800166a:	f004 fbc9 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : SolarEN_Pin */
  GPIO_InitStruct.Pin = SolarEN_Pin;
 800166e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001674:	2311      	movs	r3, #17
 8001676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SolarEN_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168a:	f004 fbb9 	bl	8005e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800168e:	2308      	movs	r3, #8
 8001690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001692:	2303      	movs	r3, #3
 8001694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_GPIO_Init+0x130>)
 80016a2:	f004 fbad 	bl	8005e00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a6:	bf00      	nop
 80016a8:	3728      	adds	r7, #40	; 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	48000400 	.word	0x48000400
 80016b8:	48001c00 	.word	0x48001c00

080016bc <HAL_Delay>:

/* USER CODE BEGIN 4 */
void HAL_Delay(uint32_t Delay)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c4:	f002 fd2e 	bl	8004124 <HAL_GetTick>
 80016c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d4:	d007      	beq.n	80016e6 <HAL_Delay+0x2a>
  {
    wait += (uint32_t)uwTickFreq;
 80016d6:	4b0a      	ldr	r3, [pc, #40]	; (8001700 <HAL_Delay+0x44>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4413      	add	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]

  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e2:	e000      	b.n	80016e6 <HAL_Delay+0x2a>
  {
	  __WFI();
 80016e4:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80016e6:	f002 fd1d 	bl	8004124 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	d8f6      	bhi.n	80016e4 <HAL_Delay+0x28>
  }
}
 80016f6:	bf00      	nop
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000000c 	.word	0x2000000c

08001704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001708:	b672      	cpsid	i
}
 800170a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800170c:	e7fe      	b.n	800170c <Error_Handler+0x8>

0800170e <LL_LPUART_DisableIT_WKUP>:
  * @rmtoll CR3          WUFIE         LL_LPUART_DisableIT_WKUP
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_WKUP(USART_TypeDef *LPUARTx)
{
 800170e:	b480      	push	{r7}
 8001710:	b089      	sub	sp, #36	; 0x24
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(LPUARTx->CR3, USART_CR3_WUFIE);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	3308      	adds	r3, #8
 800171a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	e853 3f00 	ldrex	r3, [r3]
 8001722:	60bb      	str	r3, [r7, #8]
   return(result);
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800172a:	61fb      	str	r3, [r7, #28]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3308      	adds	r3, #8
 8001730:	69fa      	ldr	r2, [r7, #28]
 8001732:	61ba      	str	r2, [r7, #24]
 8001734:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001736:	6979      	ldr	r1, [r7, #20]
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	e841 2300 	strex	r3, r2, [r1]
 800173e:	613b      	str	r3, [r7, #16]
   return(result);
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1e7      	bne.n	8001716 <LL_LPUART_DisableIT_WKUP+0x8>
}
 8001746:	bf00      	nop
 8001748:	bf00      	nop
 800174a:	3724      	adds	r7, #36	; 0x24
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <npf_min>:

#ifdef _MSC_VER
  #include <intrin.h>
#endif

static int npf_min(int x, int y) { return (x < y) ? x : y; }
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4293      	cmp	r3, r2
 8001764:	bfa8      	it	ge
 8001766:	4613      	movge	r3, r2
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <npf_max>:
static int npf_max(int x, int y) { return (x > y) ? x : y; }
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4293      	cmp	r3, r2
 8001784:	bfb8      	it	lt
 8001786:	4613      	movlt	r3, r2
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <npf_parse_format_spec>:

int npf_parse_format_spec(char const *format, npf_format_spec_t *out_spec) {
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  char const *cur = format;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60fb      	str	r3, [r7, #12]

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
  out_spec->left_justified = 0;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	2200      	movs	r2, #0
 80017a6:	721a      	strb	r2, [r3, #8]
  out_spec->leading_zero_pad = 0;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	2200      	movs	r2, #0
 80017ac:	725a      	strb	r2, [r3, #9]
#endif
  out_spec->case_adjust = 'a'-'A'; // lowercase
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	2220      	movs	r2, #32
 80017b2:	749a      	strb	r2, [r3, #18]
  out_spec->prepend = 0;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
  out_spec->alt_form = 0;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	705a      	strb	r2, [r3, #1]

  while (*++cur) { // cur points at the leading '%' character
 80017c0:	e04c      	b.n	800185c <npf_parse_format_spec+0xc8>
    switch (*cur) { // Optional flags
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	3b20      	subs	r3, #32
 80017c8:	2b10      	cmp	r3, #16
 80017ca:	d84f      	bhi.n	800186c <npf_parse_format_spec+0xd8>
 80017cc:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <npf_parse_format_spec+0x40>)
 80017ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d2:	bf00      	nop
 80017d4:	08001845 	.word	0x08001845
 80017d8:	0800186d 	.word	0x0800186d
 80017dc:	0800186d 	.word	0x0800186d
 80017e0:	08001855 	.word	0x08001855
 80017e4:	0800186d 	.word	0x0800186d
 80017e8:	0800186d 	.word	0x0800186d
 80017ec:	0800186d 	.word	0x0800186d
 80017f0:	0800186d 	.word	0x0800186d
 80017f4:	0800186d 	.word	0x0800186d
 80017f8:	0800186d 	.word	0x0800186d
 80017fc:	0800186d 	.word	0x0800186d
 8001800:	0800183d 	.word	0x0800183d
 8001804:	0800186d 	.word	0x0800186d
 8001808:	08001819 	.word	0x08001819
 800180c:	0800186d 	.word	0x0800186d
 8001810:	0800186d 	.word	0x0800186d
 8001814:	08001827 	.word	0x08001827
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
      case '-':
        out_spec->left_justified = '-';
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	222d      	movs	r2, #45	; 0x2d
 800181c:	721a      	strb	r2, [r3, #8]
        out_spec->leading_zero_pad = 0;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2200      	movs	r2, #0
 8001822:	725a      	strb	r2, [r3, #9]
        continue;
 8001824:	e01a      	b.n	800185c <npf_parse_format_spec+0xc8>
      case '0':
        out_spec->leading_zero_pad = !out_spec->left_justified;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	7a1b      	ldrb	r3, [r3, #8]
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf0c      	ite	eq
 800182e:	2301      	moveq	r3, #1
 8001830:	2300      	movne	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	725a      	strb	r2, [r3, #9]
        continue;
 800183a:	e00f      	b.n	800185c <npf_parse_format_spec+0xc8>
#endif
      case '+':
        out_spec->prepend = '+';
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	222b      	movs	r2, #43	; 0x2b
 8001840:	701a      	strb	r2, [r3, #0]
        continue;
 8001842:	e00b      	b.n	800185c <npf_parse_format_spec+0xc8>
      case ' ':
        if (out_spec->prepend == 0) { out_spec->prepend = ' '; }
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d107      	bne.n	800185c <npf_parse_format_spec+0xc8>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	2220      	movs	r2, #32
 8001850:	701a      	strb	r2, [r3, #0]
        continue;
 8001852:	e003      	b.n	800185c <npf_parse_format_spec+0xc8>
      case '#':
        out_spec->alt_form = '#';
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	2223      	movs	r2, #35	; 0x23
 8001858:	705a      	strb	r2, [r3, #1]
        continue;
 800185a:	bf00      	nop
  while (*++cur) { // cur points at the leading '%' character
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1ab      	bne.n	80017c2 <npf_parse_format_spec+0x2e>
 800186a:	e000      	b.n	800186e <npf_parse_format_spec+0xda>
      default: break;
    }
    break;
 800186c:	bf00      	nop
  }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
  out_spec->field_width_opt = NPF_FMT_SPEC_OPT_NONE;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	2200      	movs	r2, #0
 8001872:	709a      	strb	r2, [r3, #2]
  if (*cur == '*') {
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b2a      	cmp	r3, #42	; 0x2a
 800187a:	d106      	bne.n	800188a <npf_parse_format_spec+0xf6>
    out_spec->field_width_opt = NPF_FMT_SPEC_OPT_STAR;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2202      	movs	r2, #2
 8001880:	709a      	strb	r2, [r3, #2]
    ++cur;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3301      	adds	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	e01d      	b.n	80018c6 <npf_parse_format_spec+0x132>
  } else {
    out_spec->field_width = 0;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2200      	movs	r2, #0
 800188e:	605a      	str	r2, [r3, #4]
    while ((*cur >= '0') && (*cur <= '9')) {
 8001890:	e011      	b.n	80018b6 <npf_parse_format_spec+0x122>
      out_spec->field_width_opt = NPF_FMT_SPEC_OPT_LITERAL;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	2201      	movs	r2, #1
 8001896:	709a      	strb	r2, [r3, #2]
      out_spec->field_width = (out_spec->field_width * 10) + (*cur++ - '0');
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4619      	mov	r1, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	60fa      	str	r2, [r7, #12]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	3b30      	subs	r3, #48	; 0x30
 80018b0:	18ca      	adds	r2, r1, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	605a      	str	r2, [r3, #4]
    while ((*cur >= '0') && (*cur <= '9')) {
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b2f      	cmp	r3, #47	; 0x2f
 80018bc:	d903      	bls.n	80018c6 <npf_parse_format_spec+0x132>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b39      	cmp	r3, #57	; 0x39
 80018c4:	d9e5      	bls.n	8001892 <npf_parse_format_spec+0xfe>
    }
  }
#endif

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
  out_spec->prec = 0;
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
  out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	2200      	movs	r2, #0
 80018d0:	729a      	strb	r2, [r3, #10]
  if (*cur == '.') {
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b2e      	cmp	r3, #46	; 0x2e
 80018d8:	d133      	bne.n	8001942 <npf_parse_format_spec+0x1ae>
    ++cur;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3301      	adds	r3, #1
 80018de:	60fb      	str	r3, [r7, #12]
    if (*cur == '*') {
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b2a      	cmp	r3, #42	; 0x2a
 80018e6:	d106      	bne.n	80018f6 <npf_parse_format_spec+0x162>
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_STAR;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	2202      	movs	r2, #2
 80018ec:	729a      	strb	r2, [r3, #10]
      ++cur;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3301      	adds	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	e025      	b.n	8001942 <npf_parse_format_spec+0x1ae>
    } else {
      if (*cur == '-') {
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b2d      	cmp	r3, #45	; 0x2d
 80018fc:	d106      	bne.n	800190c <npf_parse_format_spec+0x178>
        ++cur;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	3301      	adds	r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
        out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	2200      	movs	r2, #0
 8001908:	729a      	strb	r2, [r3, #10]
 800190a:	e012      	b.n	8001932 <npf_parse_format_spec+0x19e>
      } else {
        out_spec->prec_opt = NPF_FMT_SPEC_OPT_LITERAL;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2201      	movs	r2, #1
 8001910:	729a      	strb	r2, [r3, #10]
      }
      while ((*cur >= '0') && (*cur <= '9')) {
 8001912:	e00e      	b.n	8001932 <npf_parse_format_spec+0x19e>
        out_spec->prec = (out_spec->prec * 10) + (*cur++ - '0');
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	4613      	mov	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4413      	add	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4619      	mov	r1, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	1c5a      	adds	r2, r3, #1
 8001926:	60fa      	str	r2, [r7, #12]
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	3b30      	subs	r3, #48	; 0x30
 800192c:	18ca      	adds	r2, r1, r3
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	60da      	str	r2, [r3, #12]
      while ((*cur >= '0') && (*cur <= '9')) {
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b2f      	cmp	r3, #47	; 0x2f
 8001938:	d903      	bls.n	8001942 <npf_parse_format_spec+0x1ae>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b39      	cmp	r3, #57	; 0x39
 8001940:	d9e8      	bls.n	8001914 <npf_parse_format_spec+0x180>
      }
    }
  }
#endif

  out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_NONE;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	2200      	movs	r2, #0
 8001946:	741a      	strb	r2, [r3, #16]
  switch (*cur++) { // Length modifier
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1c5a      	adds	r2, r3, #1
 800194c:	60fa      	str	r2, [r7, #12]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b6c      	cmp	r3, #108	; 0x6c
 8001952:	d013      	beq.n	800197c <npf_parse_format_spec+0x1e8>
 8001954:	2b6c      	cmp	r3, #108	; 0x6c
 8001956:	dc19      	bgt.n	800198c <npf_parse_format_spec+0x1f8>
 8001958:	2b4c      	cmp	r3, #76	; 0x4c
 800195a:	d013      	beq.n	8001984 <npf_parse_format_spec+0x1f0>
 800195c:	2b68      	cmp	r3, #104	; 0x68
 800195e:	d115      	bne.n	800198c <npf_parse_format_spec+0x1f8>
    case 'h':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_SHORT;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2201      	movs	r2, #1
 8001964:	741a      	strb	r2, [r3, #16]
      if (*cur == 'h') {
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b68      	cmp	r3, #104	; 0x68
 800196c:	d112      	bne.n	8001994 <npf_parse_format_spec+0x200>
        out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_CHAR;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2203      	movs	r2, #3
 8001972:	741a      	strb	r2, [r3, #16]
        ++cur;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3301      	adds	r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
      }
      break;
 800197a:	e00b      	b.n	8001994 <npf_parse_format_spec+0x200>
    case 'l':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LONG;
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2204      	movs	r2, #4
 8001980:	741a      	strb	r2, [r3, #16]
      if (*cur == 'l') {
        out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LARGE_LONG_LONG;
        ++cur;
      }
#endif
      break;
 8001982:	e008      	b.n	8001996 <npf_parse_format_spec+0x202>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    case 'L':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LONG_DOUBLE;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	2202      	movs	r2, #2
 8001988:	741a      	strb	r2, [r3, #16]
      break;
 800198a:	e004      	b.n	8001996 <npf_parse_format_spec+0x202>
      break;
    case 't':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LARGE_PTRDIFFT;
      break;
#endif
    default: --cur; break;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3b01      	subs	r3, #1
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	e000      	b.n	8001996 <npf_parse_format_spec+0x202>
      break;
 8001994:	bf00      	nop
  }

  switch (*cur++) { // Conversion specifier
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1c5a      	adds	r2, r3, #1
 800199a:	60fa      	str	r2, [r7, #12]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	3b25      	subs	r3, #37	; 0x25
 80019a0:	2b53      	cmp	r3, #83	; 0x53
 80019a2:	f200 80e8 	bhi.w	8001b76 <npf_parse_format_spec+0x3e2>
 80019a6:	a201      	add	r2, pc, #4	; (adr r2, 80019ac <npf_parse_format_spec+0x218>)
 80019a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ac:	08001afd 	.word	0x08001afd
 80019b0:	08001b77 	.word	0x08001b77
 80019b4:	08001b77 	.word	0x08001b77
 80019b8:	08001b77 	.word	0x08001b77
 80019bc:	08001b77 	.word	0x08001b77
 80019c0:	08001b77 	.word	0x08001b77
 80019c4:	08001b77 	.word	0x08001b77
 80019c8:	08001b77 	.word	0x08001b77
 80019cc:	08001b77 	.word	0x08001b77
 80019d0:	08001b77 	.word	0x08001b77
 80019d4:	08001b77 	.word	0x08001b77
 80019d8:	08001b77 	.word	0x08001b77
 80019dc:	08001b77 	.word	0x08001b77
 80019e0:	08001b77 	.word	0x08001b77
 80019e4:	08001b77 	.word	0x08001b77
 80019e8:	08001b77 	.word	0x08001b77
 80019ec:	08001b77 	.word	0x08001b77
 80019f0:	08001b77 	.word	0x08001b77
 80019f4:	08001b77 	.word	0x08001b77
 80019f8:	08001b77 	.word	0x08001b77
 80019fc:	08001b77 	.word	0x08001b77
 8001a00:	08001b77 	.word	0x08001b77
 8001a04:	08001b77 	.word	0x08001b77
 8001a08:	08001b77 	.word	0x08001b77
 8001a0c:	08001b77 	.word	0x08001b77
 8001a10:	08001b77 	.word	0x08001b77
 8001a14:	08001b77 	.word	0x08001b77
 8001a18:	08001b77 	.word	0x08001b77
 8001a1c:	08001b77 	.word	0x08001b77
 8001a20:	08001b77 	.word	0x08001b77
 8001a24:	08001b77 	.word	0x08001b77
 8001a28:	08001b77 	.word	0x08001b77
 8001a2c:	08001b77 	.word	0x08001b77
 8001a30:	08001b4d 	.word	0x08001b4d
 8001a34:	08001b77 	.word	0x08001b77
 8001a38:	08001b77 	.word	0x08001b77
 8001a3c:	08001b77 	.word	0x08001b77
 8001a40:	08001b77 	.word	0x08001b77
 8001a44:	08001b77 	.word	0x08001b77
 8001a48:	08001b77 	.word	0x08001b77
 8001a4c:	08001b77 	.word	0x08001b77
 8001a50:	08001b77 	.word	0x08001b77
 8001a54:	08001b77 	.word	0x08001b77
 8001a58:	08001b77 	.word	0x08001b77
 8001a5c:	08001b77 	.word	0x08001b77
 8001a60:	08001b77 	.word	0x08001b77
 8001a64:	08001b77 	.word	0x08001b77
 8001a68:	08001b77 	.word	0x08001b77
 8001a6c:	08001b77 	.word	0x08001b77
 8001a70:	08001b77 	.word	0x08001b77
 8001a74:	08001b77 	.word	0x08001b77
 8001a78:	08001b3f 	.word	0x08001b3f
 8001a7c:	08001b77 	.word	0x08001b77
 8001a80:	08001b77 	.word	0x08001b77
 8001a84:	08001b77 	.word	0x08001b77
 8001a88:	08001b77 	.word	0x08001b77
 8001a8c:	08001b77 	.word	0x08001b77
 8001a90:	08001b77 	.word	0x08001b77
 8001a94:	08001b77 	.word	0x08001b77
 8001a98:	08001b77 	.word	0x08001b77
 8001a9c:	08001b77 	.word	0x08001b77
 8001aa0:	08001b77 	.word	0x08001b77
 8001aa4:	08001b0b 	.word	0x08001b0b
 8001aa8:	08001b27 	.word	0x08001b27
 8001aac:	08001b77 	.word	0x08001b77
 8001ab0:	08001b53 	.word	0x08001b53
 8001ab4:	08001b77 	.word	0x08001b77
 8001ab8:	08001b77 	.word	0x08001b77
 8001abc:	08001b27 	.word	0x08001b27
 8001ac0:	08001b77 	.word	0x08001b77
 8001ac4:	08001b77 	.word	0x08001b77
 8001ac8:	08001b77 	.word	0x08001b77
 8001acc:	08001b77 	.word	0x08001b77
 8001ad0:	08001b77 	.word	0x08001b77
 8001ad4:	08001b2f 	.word	0x08001b2f
 8001ad8:	08001b69 	.word	0x08001b69
 8001adc:	08001b77 	.word	0x08001b77
 8001ae0:	08001b77 	.word	0x08001b77
 8001ae4:	08001b19 	.word	0x08001b19
 8001ae8:	08001b77 	.word	0x08001b77
 8001aec:	08001b37 	.word	0x08001b37
 8001af0:	08001b77 	.word	0x08001b77
 8001af4:	08001b77 	.word	0x08001b77
 8001af8:	08001b45 	.word	0x08001b45
    case '%':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_PERCENT;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	2200      	movs	r2, #0
 8001b00:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2200      	movs	r2, #0
 8001b06:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8001b08:	e038      	b.n	8001b7c <npf_parse_format_spec+0x3e8>
    case 'c':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_CHAR;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2200      	movs	r2, #0
 8001b14:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8001b16:	e031      	b.n	8001b7c <npf_parse_format_spec+0x3e8>
    case 's':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_STRING;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
      out_spec->leading_zero_pad = 0;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2200      	movs	r2, #0
 8001b22:	725a      	strb	r2, [r3, #9]
#endif
      break;
 8001b24:	e02a      	b.n	8001b7c <npf_parse_format_spec+0x3e8>

    case 'i':
    case 'd':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_SIGNED_INT;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2203      	movs	r2, #3
 8001b2a:	745a      	strb	r2, [r3, #17]
      break;
 8001b2c:	e026      	b.n	8001b7c <npf_parse_format_spec+0x3e8>

    case 'o':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_OCTAL;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2204      	movs	r2, #4
 8001b32:	745a      	strb	r2, [r3, #17]
      break;
 8001b34:	e022      	b.n	8001b7c <npf_parse_format_spec+0x3e8>
    case 'u':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_UNSIGNED_INT;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2206      	movs	r2, #6
 8001b3a:	745a      	strb	r2, [r3, #17]
      break;
 8001b3c:	e01e      	b.n	8001b7c <npf_parse_format_spec+0x3e8>

    case 'X':
      out_spec->case_adjust = 0;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2200      	movs	r2, #0
 8001b42:	749a      	strb	r2, [r3, #18]
    case 'x':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_HEX_INT;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	2205      	movs	r2, #5
 8001b48:	745a      	strb	r2, [r3, #17]
      break;
 8001b4a:	e017      	b.n	8001b7c <npf_parse_format_spec+0x3e8>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    case 'F':
      out_spec->case_adjust = 0;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	749a      	strb	r2, [r3, #18]
    case 'f':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_FLOAT_DECIMAL;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2208      	movs	r2, #8
 8001b56:	745a      	strb	r2, [r3, #17]
      if (out_spec->prec_opt == NPF_FMT_SPEC_OPT_NONE) { out_spec->prec = 6; }
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	7a9b      	ldrb	r3, [r3, #10]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10c      	bne.n	8001b7a <npf_parse_format_spec+0x3e6>
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	2206      	movs	r2, #6
 8001b64:	60da      	str	r2, [r3, #12]
      break;
 8001b66:	e008      	b.n	8001b7a <npf_parse_format_spec+0x3e6>
#endif
      break;
#endif

    case 'p':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_POINTER;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	2200      	movs	r2, #0
 8001b72:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8001b74:	e002      	b.n	8001b7c <npf_parse_format_spec+0x3e8>
    case 'b':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_BINARY;
      break;
#endif

    default: return 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	e003      	b.n	8001b82 <npf_parse_format_spec+0x3ee>
      break;
 8001b7a:	bf00      	nop
  }

  return (int)(cur - format);
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	1ad3      	subs	r3, r2, r3
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop

08001b90 <npf_itoa_rev>:

int npf_itoa_rev(char *buf, npf_int_t i) {
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  int n = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
  int const sign = (i >= 0) ? 1 : -1;
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	db01      	blt.n	8001ba8 <npf_itoa_rev+0x18>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e001      	b.n	8001bac <npf_itoa_rev+0x1c>
 8001ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bac:	60bb      	str	r3, [r7, #8]
  do { *buf++ = (char)('0' + (sign * (i % 10))); i /= 10; ++n; } while (i);
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	b2d8      	uxtb	r0, r3
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <npf_itoa_rev+0x78>)
 8001bb6:	fb83 1302 	smull	r1, r3, r3, r2
 8001bba:	1099      	asrs	r1, r3, #2
 8001bbc:	17d3      	asrs	r3, r2, #31
 8001bbe:	1ac9      	subs	r1, r1, r3
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	1ad1      	subs	r1, r2, r3
 8001bca:	b2cb      	uxtb	r3, r1
 8001bcc:	fb10 f303 	smulbb	r3, r0, r3
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	1c59      	adds	r1, r3, #1
 8001bd6:	6079      	str	r1, [r7, #4]
 8001bd8:	3230      	adds	r2, #48	; 0x30
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	701a      	strb	r2, [r3, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <npf_itoa_rev+0x78>)
 8001be2:	fb82 1203 	smull	r1, r2, r2, r3
 8001be6:	1092      	asrs	r2, r2, #2
 8001be8:	17db      	asrs	r3, r3, #31
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1d9      	bne.n	8001bae <npf_itoa_rev+0x1e>
  return n;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	66666667 	.word	0x66666667

08001c0c <npf_utoa_rev>:

int npf_utoa_rev(char *buf, npf_uint_t i, unsigned base, unsigned case_adj) {
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
 8001c18:	603b      	str	r3, [r7, #0]
  int n = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  do {
    unsigned const d = (unsigned)(i % base);
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	fbb3 f2f2 	udiv	r2, r3, r2
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	fb01 f202 	mul.w	r2, r1, r2
 8001c2c:	1a9b      	subs	r3, r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
    *buf++ = (char)((d < 10) ? ('0' + d) : ('A' + case_adj + (d - 10)));
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	2b09      	cmp	r3, #9
 8001c34:	d804      	bhi.n	8001c40 <npf_utoa_rev+0x34>
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	3330      	adds	r3, #48	; 0x30
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	e007      	b.n	8001c50 <npf_utoa_rev+0x44>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	3337      	adds	r3, #55	; 0x37
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1c59      	adds	r1, r3, #1
 8001c54:	60f9      	str	r1, [r7, #12]
 8001c56:	701a      	strb	r2, [r3, #0]
    i /= base;
 8001c58:	68ba      	ldr	r2, [r7, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c60:	60bb      	str	r3, [r7, #8]
    ++n;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3301      	adds	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
  } while (i);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1d7      	bne.n	8001c1e <npf_utoa_rev+0x12>
  return n;
 8001c6e:	697b      	ldr	r3, [r7, #20]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	371c      	adds	r7, #28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <npf_fsplit_abs>:
  NPF_FRACTION_BIN_DIGITS = 64,
  NPF_MAX_FRACTION_DEC_DIGITS = 8
};

int npf_fsplit_abs(float f, uint64_t *out_int_part, uint64_t *out_frac_part,
                   int *out_frac_base10_neg_exp) {
 8001c7c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001c80:	b0af      	sub	sp, #188	; 0xbc
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
 8001c88:	6738      	str	r0, [r7, #112]	; 0x70
 8001c8a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001c8c:	66ba      	str	r2, [r7, #104]	; 0x68
     http://0x80.pl/notesen/2015-12-29-float-to-string.html
     grisu2 (https://bit.ly/2JgMggX) and ryu (https://bit.ly/2RLXSg0)
     are fast + precise + round, but require large lookup tables. */

  uint32_t f_bits; { // union-cast is UB, let compiler optimize byte-copy loop.
    char const *src = (char const *)&f;
 8001c8e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001c92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    char *dst = (char *)&f_bits;
 8001c96:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (unsigned i = 0; i < sizeof(f_bits); ++i) { dst[i] = src[i]; }
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001ca4:	e010      	b.n	8001cc8 <npf_fsplit_abs+0x4c>
 8001ca6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001caa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cae:	18d1      	adds	r1, r2, r3
 8001cb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001cb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cb8:	441a      	add	r2, r3
 8001cba:	780b      	ldrb	r3, [r1, #0]
 8001cbc:	7013      	strb	r3, [r2, #0]
 8001cbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001cc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d9ea      	bls.n	8001ca6 <npf_fsplit_abs+0x2a>
  }

  int const exponent =
    ((int)((f_bits >> NPF_MANTISSA_BITS) & ((1u << NPF_EXPONENT_BITS) - 1u)) -
 8001cd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cd2:	0ddb      	lsrs	r3, r3, #23
 8001cd4:	b2db      	uxtb	r3, r3
  int const exponent =
 8001cd6:	3b96      	subs	r3, #150	; 0x96
 8001cd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      NPF_EXPONENT_BIAS) - NPF_MANTISSA_BITS;

  if (exponent >= (64 - NPF_MANTISSA_BITS)) { return 0; } // value is out of range
 8001cdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ce0:	2b28      	cmp	r3, #40	; 0x28
 8001ce2:	dd01      	ble.n	8001ce8 <npf_fsplit_abs+0x6c>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	e15b      	b.n	8001fa0 <npf_fsplit_abs+0x324>

  uint32_t const implicit_one = 1u << NPF_MANTISSA_BITS;
 8001ce8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001cec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t const mantissa = f_bits & (implicit_one - 1);
 8001cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t const mantissa_norm = mantissa | implicit_one;
 8001cfe:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001d02:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d06:	4313      	orrs	r3, r2
 8001d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  if (exponent > 0) {
 8001d0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	dd18      	ble.n	8001d46 <npf_fsplit_abs+0xca>
    *out_int_part = (uint64_t)mantissa_norm << exponent;
 8001d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d18:	2200      	movs	r2, #0
 8001d1a:	469a      	mov	sl, r3
 8001d1c:	4693      	mov	fp, r2
 8001d1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001d22:	f1a1 0320 	sub.w	r3, r1, #32
 8001d26:	f1c1 0220 	rsb	r2, r1, #32
 8001d2a:	fa0b f501 	lsl.w	r5, fp, r1
 8001d2e:	fa0a f303 	lsl.w	r3, sl, r3
 8001d32:	431d      	orrs	r5, r3
 8001d34:	fa2a f202 	lsr.w	r2, sl, r2
 8001d38:	4315      	orrs	r5, r2
 8001d3a:	fa0a f401 	lsl.w	r4, sl, r1
 8001d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d40:	e9c3 4500 	strd	r4, r5, [r3]
 8001d44:	e029      	b.n	8001d9a <npf_fsplit_abs+0x11e>
  } else if (exponent < 0) {
 8001d46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	da1b      	bge.n	8001d86 <npf_fsplit_abs+0x10a>
    if (-exponent > NPF_MANTISSA_BITS) {
 8001d4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d52:	f113 0f17 	cmn.w	r3, #23
 8001d56:	da07      	bge.n	8001d68 <npf_fsplit_abs+0xec>
      *out_int_part = 0;
 8001d58:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	e9c1 2300 	strd	r2, r3, [r1]
 8001d66:	e018      	b.n	8001d9a <npf_fsplit_abs+0x11e>
    } else {
      *out_int_part = mantissa_norm >> -exponent;
 8001d68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d6c:	425a      	negs	r2, r3
 8001d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d72:	40d3      	lsrs	r3, r2
 8001d74:	2200      	movs	r2, #0
 8001d76:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d78:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001d7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d7c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8001d80:	e9c3 1200 	strd	r1, r2, [r3]
 8001d84:	e009      	b.n	8001d9a <npf_fsplit_abs+0x11e>
    }
  } else {
    *out_int_part = mantissa_norm;
 8001d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8001d8e:	647a      	str	r2, [r7, #68]	; 0x44
 8001d90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d92:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001d96:	e9c3 1200 	strd	r1, r2, [r3]
  }

  uint64_t frac; {
    int const shift = NPF_FRACTION_BIN_DIGITS + exponent - 4;
 8001d9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d9e:	333c      	adds	r3, #60	; 0x3c
 8001da0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if ((shift >= (NPF_FRACTION_BIN_DIGITS - 4)) || (shift < 0)) {
 8001da4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001da8:	2b3b      	cmp	r3, #59	; 0x3b
 8001daa:	dc03      	bgt.n	8001db4 <npf_fsplit_abs+0x138>
 8001dac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	da06      	bge.n	8001dc2 <npf_fsplit_abs+0x146>
      frac = 0;
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	f04f 0300 	mov.w	r3, #0
 8001dbc:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8001dc0:	e022      	b.n	8001e08 <npf_fsplit_abs+0x18c>
    } else {
      frac = ((uint64_t)mantissa_norm) << shift;
 8001dc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001dca:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001dcc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001dd0:	f1a1 0320 	sub.w	r3, r1, #32
 8001dd4:	f1c1 0220 	rsb	r2, r1, #32
 8001dd8:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001ddc:	4628      	mov	r0, r5
 8001dde:	4088      	lsls	r0, r1
 8001de0:	6678      	str	r0, [r7, #100]	; 0x64
 8001de2:	4620      	mov	r0, r4
 8001de4:	fa00 f303 	lsl.w	r3, r0, r3
 8001de8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001dea:	4318      	orrs	r0, r3
 8001dec:	6678      	str	r0, [r7, #100]	; 0x64
 8001dee:	4623      	mov	r3, r4
 8001df0:	fa23 f202 	lsr.w	r2, r3, r2
 8001df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001df6:	4313      	orrs	r3, r2
 8001df8:	667b      	str	r3, [r7, #100]	; 0x64
 8001dfa:	4623      	mov	r3, r4
 8001dfc:	408b      	lsls	r3, r1
 8001dfe:	663b      	str	r3, [r7, #96]	; 0x60
 8001e00:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001e04:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    }
    // multiply off the leading one's digit
    frac &= 0x0fffffffffffffffllu;
 8001e08:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001e0c:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e0e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e14:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001e18:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    frac *= 10;
 8001e1c:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8001e20:	4622      	mov	r2, r4
 8001e22:	462b      	mov	r3, r5
 8001e24:	f04f 0000 	mov.w	r0, #0
 8001e28:	f04f 0100 	mov.w	r1, #0
 8001e2c:	0099      	lsls	r1, r3, #2
 8001e2e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001e32:	0090      	lsls	r0, r2, #2
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	eb12 0804 	adds.w	r8, r2, r4
 8001e3c:	eb43 0905 	adc.w	r9, r3, r5
 8001e40:	eb18 0308 	adds.w	r3, r8, r8
 8001e44:	623b      	str	r3, [r7, #32]
 8001e46:	eb49 0309 	adc.w	r3, r9, r9
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e50:	e9c7 892a 	strd	r8, r9, [r7, #168]	; 0xa8
  }

  { // Count the number of 0s at the beginning of the fractional part.
    int frac_base10_neg_exp = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    while (frac && ((frac >> (NPF_FRACTION_BIN_DIGITS - 4))) == 0) {
 8001e5a:	e02f      	b.n	8001ebc <npf_fsplit_abs+0x240>
      ++frac_base10_neg_exp;
 8001e5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e60:	3301      	adds	r3, #1
 8001e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      frac &= 0x0fffffffffffffffllu;
 8001e66:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001e6a:	61ba      	str	r2, [r7, #24]
 8001e6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001e70:	61fb      	str	r3, [r7, #28]
 8001e72:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001e76:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
      frac *= 10;
 8001e7a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8001e7e:	4622      	mov	r2, r4
 8001e80:	462b      	mov	r3, r5
 8001e82:	f04f 0000 	mov.w	r0, #0
 8001e86:	f04f 0100 	mov.w	r1, #0
 8001e8a:	0099      	lsls	r1, r3, #2
 8001e8c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001e90:	0090      	lsls	r0, r2, #2
 8001e92:	4602      	mov	r2, r0
 8001e94:	460b      	mov	r3, r1
 8001e96:	1911      	adds	r1, r2, r4
 8001e98:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e9a:	416b      	adcs	r3, r5
 8001e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e9e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	18db      	adds	r3, r3, r3
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	eb42 0303 	adc.w	r3, r2, r3
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001eb4:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8001eb8:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    while (frac && ((frac >> (NPF_FRACTION_BIN_DIGITS - 4))) == 0) {
 8001ebc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	d00a      	beq.n	8001eda <npf_fsplit_abs+0x25e>
 8001ec4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001ec8:	f04f 0000 	mov.w	r0, #0
 8001ecc:	f04f 0100 	mov.w	r1, #0
 8001ed0:	0f18      	lsrs	r0, r3, #28
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	ea50 0301 	orrs.w	r3, r0, r1
 8001ed8:	d0c0      	beq.n	8001e5c <npf_fsplit_abs+0x1e0>
    }
    *out_frac_base10_neg_exp = frac_base10_neg_exp;
 8001eda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001edc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001ee0:	601a      	str	r2, [r3, #0]
  }

  { // Convert the fractional part to base 10.
    unsigned frac_part = 0;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    for (int i = 0; frac && (i < NPF_MAX_FRACTION_DEC_DIGITS); ++i) {
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001eee:	e044      	b.n	8001f7a <npf_fsplit_abs+0x2fe>
      frac_part *= 10;
 8001ef0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      frac_part += (unsigned)(frac >> (NPF_FRACTION_BIN_DIGITS - 4));
 8001f00:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	0f0a      	lsrs	r2, r1, #28
 8001f0e:	2300      	movs	r3, #0
 8001f10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f14:	4413      	add	r3, r2
 8001f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      frac &= 0x0fffffffffffffffllu;
 8001f1a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001f1e:	60ba      	str	r2, [r7, #8]
 8001f20:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001f2a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
      frac *= 10;
 8001f2e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8001f32:	4622      	mov	r2, r4
 8001f34:	462b      	mov	r3, r5
 8001f36:	f04f 0000 	mov.w	r0, #0
 8001f3a:	f04f 0100 	mov.w	r1, #0
 8001f3e:	0099      	lsls	r1, r3, #2
 8001f40:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f44:	0090      	lsls	r0, r2, #2
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	1911      	adds	r1, r2, r4
 8001f4c:	6539      	str	r1, [r7, #80]	; 0x50
 8001f4e:	416b      	adcs	r3, r5
 8001f50:	657b      	str	r3, [r7, #84]	; 0x54
 8001f52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8001f56:	460b      	mov	r3, r1
 8001f58:	18db      	adds	r3, r3, r3
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	eb42 0303 	adc.w	r3, r2, r3
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001f68:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8001f6c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    for (int i = 0; frac && (i < NPF_MAX_FRACTION_DEC_DIGITS); ++i) {
 8001f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f74:	3301      	adds	r3, #1
 8001f76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001f7a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	d003      	beq.n	8001f8a <npf_fsplit_abs+0x30e>
 8001f82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f86:	2b07      	cmp	r3, #7
 8001f88:	ddb2      	ble.n	8001ef0 <npf_fsplit_abs+0x274>
    }
    *out_frac_part = frac_part;
 8001f8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f8e:	2200      	movs	r2, #0
 8001f90:	633b      	str	r3, [r7, #48]	; 0x30
 8001f92:	637a      	str	r2, [r7, #52]	; 0x34
 8001f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f96:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8001f9a:	e9c3 1200 	strd	r1, r2, [r3]
  }
  return 1;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	37bc      	adds	r7, #188	; 0xbc
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001faa:	4770      	bx	lr

08001fac <npf_ftoa_rev>:

int npf_ftoa_rev(char *buf, float f, char case_adj, int *out_frac_chars) {
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b092      	sub	sp, #72	; 0x48
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001fb8:	460b      	mov	r3, r1
 8001fba:	603a      	str	r2, [r7, #0]
 8001fbc:	71fb      	strb	r3, [r7, #7]
  uint32_t f_bits; { // union-cast is UB, let compiler optimize byte-copy loop.
    char const *src = (char const *)&f;
 8001fbe:	f107 0308 	add.w	r3, r7, #8
 8001fc2:	633b      	str	r3, [r7, #48]	; 0x30
    char *dst = (char *)&f_bits;
 8001fc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (unsigned i = 0; i < sizeof(f_bits); ++i) { dst[i] = src[i]; }
 8001fca:	2300      	movs	r3, #0
 8001fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8001fce:	e00a      	b.n	8001fe6 <npf_ftoa_rev+0x3a>
 8001fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fd4:	441a      	add	r2, r3
 8001fd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fda:	440b      	add	r3, r1
 8001fdc:	7812      	ldrb	r2, [r2, #0]
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8001fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d9f1      	bls.n	8001fd0 <npf_ftoa_rev+0x24>
  }

  if ((uint8_t)(f_bits >> 23) == 0xFF) {
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	0ddb      	lsrs	r3, r3, #23
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2bff      	cmp	r3, #255	; 0xff
 8001ff4:	d130      	bne.n	8002058 <npf_ftoa_rev+0xac>
    if (f_bits & 0x7fffff) {
 8001ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d014      	beq.n	800202a <npf_ftoa_rev+0x7e>
      for (int i = 0; i < 3; ++i) { *buf++ = (char)("NAN"[i] + case_adj); }
 8002000:	2300      	movs	r3, #0
 8002002:	643b      	str	r3, [r7, #64]	; 0x40
 8002004:	e00d      	b.n	8002022 <npf_ftoa_rev+0x76>
 8002006:	4a56      	ldr	r2, [pc, #344]	; (8002160 <npf_ftoa_rev+0x1b4>)
 8002008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800200a:	4413      	add	r3, r2
 800200c:	7819      	ldrb	r1, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	60fa      	str	r2, [r7, #12]
 8002014:	79fa      	ldrb	r2, [r7, #7]
 8002016:	440a      	add	r2, r1
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	701a      	strb	r2, [r3, #0]
 800201c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800201e:	3301      	adds	r3, #1
 8002020:	643b      	str	r3, [r7, #64]	; 0x40
 8002022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002024:	2b02      	cmp	r3, #2
 8002026:	ddee      	ble.n	8002006 <npf_ftoa_rev+0x5a>
 8002028:	e013      	b.n	8002052 <npf_ftoa_rev+0xa6>
    } else {
      for (int i = 0; i < 3; ++i) { *buf++ = (char)("FNI"[i] + case_adj); }
 800202a:	2300      	movs	r3, #0
 800202c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800202e:	e00d      	b.n	800204c <npf_ftoa_rev+0xa0>
 8002030:	4a4c      	ldr	r2, [pc, #304]	; (8002164 <npf_ftoa_rev+0x1b8>)
 8002032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002034:	4413      	add	r3, r2
 8002036:	7819      	ldrb	r1, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	60fa      	str	r2, [r7, #12]
 800203e:	79fa      	ldrb	r2, [r7, #7]
 8002040:	440a      	add	r2, r1
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002048:	3301      	adds	r3, #1
 800204a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800204c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204e:	2b02      	cmp	r3, #2
 8002050:	ddee      	ble.n	8002030 <npf_ftoa_rev+0x84>
    }
    return -3;
 8002052:	f06f 0302 	mvn.w	r3, #2
 8002056:	e07f      	b.n	8002158 <npf_ftoa_rev+0x1ac>
  }

  uint64_t int_part, frac_part;
  int frac_base10_neg_exp;
  if (npf_fsplit_abs(f, &int_part, &frac_part, &frac_base10_neg_exp) == 0) {
 8002058:	edd7 7a02 	vldr	s15, [r7, #8]
 800205c:	f107 0214 	add.w	r2, r7, #20
 8002060:	f107 0118 	add.w	r1, r7, #24
 8002064:	f107 0320 	add.w	r3, r7, #32
 8002068:	4618      	mov	r0, r3
 800206a:	eeb0 0a67 	vmov.f32	s0, s15
 800206e:	f7ff fe05 	bl	8001c7c <npf_fsplit_abs>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d116      	bne.n	80020a6 <npf_ftoa_rev+0xfa>
    for (int i = 0; i < 3; ++i) { *buf++ = (char)("ROO"[i] + case_adj); }
 8002078:	2300      	movs	r3, #0
 800207a:	63bb      	str	r3, [r7, #56]	; 0x38
 800207c:	e00d      	b.n	800209a <npf_ftoa_rev+0xee>
 800207e:	4a3a      	ldr	r2, [pc, #232]	; (8002168 <npf_ftoa_rev+0x1bc>)
 8002080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002082:	4413      	add	r3, r2
 8002084:	7819      	ldrb	r1, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	60fa      	str	r2, [r7, #12]
 800208c:	79fa      	ldrb	r2, [r7, #7]
 800208e:	440a      	add	r2, r1
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002096:	3301      	adds	r3, #1
 8002098:	63bb      	str	r3, [r7, #56]	; 0x38
 800209a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209c:	2b02      	cmp	r3, #2
 800209e:	ddee      	ble.n	800207e <npf_ftoa_rev+0xd2>
    return -3;
 80020a0:	f06f 0302 	mvn.w	r3, #2
 80020a4:	e058      	b.n	8002158 <npf_ftoa_rev+0x1ac>
  }

  char *dst = buf;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34

  while (frac_part) { // write the fractional digits
 80020aa:	e01a      	b.n	80020e2 <npf_ftoa_rev+0x136>
    *dst++ = (char)('0' + (frac_part % 10));
 80020ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020b0:	f04f 020a 	mov.w	r2, #10
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	f7fe fdc6 	bl	8000c48 <__aeabi_uldivmod>
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c0:	1c59      	adds	r1, r3, #1
 80020c2:	6379      	str	r1, [r7, #52]	; 0x34
 80020c4:	3230      	adds	r2, #48	; 0x30
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	701a      	strb	r2, [r3, #0]
    frac_part /= 10;
 80020ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020ce:	f04f 020a 	mov.w	r2, #10
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	f7fe fdb7 	bl	8000c48 <__aeabi_uldivmod>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	e9c7 2306 	strd	r2, r3, [r7, #24]
  while (frac_part) { // write the fractional digits
 80020e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	d1e0      	bne.n	80020ac <npf_ftoa_rev+0x100>
  }

  // write the 0 digits between the . and the first fractional digit
  while (frac_base10_neg_exp-- > 0) { *dst++ = '0'; }
 80020ea:	e004      	b.n	80020f6 <npf_ftoa_rev+0x14a>
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	637a      	str	r2, [r7, #52]	; 0x34
 80020f2:	2230      	movs	r2, #48	; 0x30
 80020f4:	701a      	strb	r2, [r3, #0]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	1e5a      	subs	r2, r3, #1
 80020fa:	617a      	str	r2, [r7, #20]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	dcf5      	bgt.n	80020ec <npf_ftoa_rev+0x140>
  *out_frac_chars = (int)(dst - buf);
 8002100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1ad2      	subs	r2, r2, r3
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	601a      	str	r2, [r3, #0]
  *dst++ = '.';
 800210a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	637a      	str	r2, [r7, #52]	; 0x34
 8002110:	222e      	movs	r2, #46	; 0x2e
 8002112:	701a      	strb	r2, [r3, #0]

  // write the integer digits
  do { *dst++ = (char)('0' + (int_part % 10)); int_part /= 10; } while (int_part);
 8002114:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002118:	f04f 020a 	mov.w	r2, #10
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	f7fe fd92 	bl	8000c48 <__aeabi_uldivmod>
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002128:	1c59      	adds	r1, r3, #1
 800212a:	6379      	str	r1, [r7, #52]	; 0x34
 800212c:	3230      	adds	r2, #48	; 0x30
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002136:	f04f 020a 	mov.w	r2, #10
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	f7fe fd83 	bl	8000c48 <__aeabi_uldivmod>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800214a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800214e:	4313      	orrs	r3, r2
 8002150:	d1e0      	bne.n	8002114 <npf_ftoa_rev+0x168>
  return (int)(dst - buf);
 8002152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	1ad3      	subs	r3, r2, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	3748      	adds	r7, #72	; 0x48
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	0800c378 	.word	0x0800c378
 8002164:	0800c37c 	.word	0x0800c37c
 8002168:	0800c380 	.word	0x0800c380

0800216c <npf_bufputc>:
  #undef NPF_CLZ
#endif
}
#endif

void npf_bufputc(int c, void *ctx) {
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  npf_bufputc_ctx_t *bpc = (npf_bufputc_ctx_t *)ctx;
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	60fb      	str	r3, [r7, #12]
  if (bpc->cur < bpc->len) { bpc->dst[bpc->cur++] = (char)c; }
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	429a      	cmp	r2, r3
 8002184:	d20a      	bcs.n	800219c <npf_bufputc+0x30>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	1c58      	adds	r0, r3, #1
 8002190:	68f9      	ldr	r1, [r7, #12]
 8002192:	6088      	str	r0, [r1, #8]
 8002194:	4413      	add	r3, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	701a      	strb	r2, [r3, #0]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <npf_bufputc_nop>:

void npf_bufputc_nop(int c, void *ctx) { (void)c; (void)ctx; }
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <npf_putc_cnt>:
  npf_putc pc;
  void *ctx;
  int n;
} npf_cnt_putc_ctx_t;

static void npf_putc_cnt(int c, void *ctx) {
 80021be:	b580      	push	{r7, lr}
 80021c0:	b084      	sub	sp, #16
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
  npf_cnt_putc_ctx_t *pc_cnt = (npf_cnt_putc_ctx_t *)ctx;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	60fb      	str	r3, [r7, #12]
  ++pc_cnt->n;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	609a      	str	r2, [r3, #8]
  pc_cnt->pc(c, pc_cnt->ctx); // sibling-call optimization
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	6852      	ldr	r2, [r2, #4]
 80021de:	4611      	mov	r1, r2
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	4798      	blx	r3
}
 80021e4:	bf00      	nop
 80021e6:	3710      	adds	r7, #16
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <npf_vpprintf>:
  case NPF_FMT_SPEC_LEN_MOD_##MOD: val = (CAST_TO)va_arg(args, EXTRACT_AS); break

#define NPF_WRITEBACK(MOD, TYPE) \
  case NPF_FMT_SPEC_LEN_MOD_##MOD: *(va_arg(args, TYPE *)) = (TYPE)pc_cnt.n; break

int npf_vpprintf(npf_putc pc, void *pc_ctx, char const *format, va_list args) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b0a8      	sub	sp, #160	; 0xa0
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  npf_format_spec_t fs;
  char const *cur = format;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  npf_cnt_putc_ctx_t pc_cnt;
  pc_cnt.pc = pc;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
  pc_cnt.ctx = pc_ctx;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	63bb      	str	r3, [r7, #56]	; 0x38
  pc_cnt.n = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c

  while (*cur) {
 800220c:	e3a2      	b.n	8002954 <npf_vpprintf+0x768>
    int const fs_len = (*cur != '%') ? 0 : npf_parse_format_spec(cur, &fs);
 800220e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b25      	cmp	r3, #37	; 0x25
 8002216:	d108      	bne.n	800222a <npf_vpprintf+0x3e>
 8002218:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800221c:	4619      	mov	r1, r3
 800221e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002222:	f7ff fab7 	bl	8001794 <npf_parse_format_spec>
 8002226:	4603      	mov	r3, r0
 8002228:	e000      	b.n	800222c <npf_vpprintf+0x40>
 800222a:	2300      	movs	r3, #0
 800222c:	663b      	str	r3, [r7, #96]	; 0x60
    if (!fs_len) { NPF_PUTC(*cur++); continue; }
 800222e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10d      	bne.n	8002250 <npf_vpprintf+0x64>
 8002234:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002238:	1c5a      	adds	r2, r3, #1
 800223a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002246:	4619      	mov	r1, r3
 8002248:	4610      	mov	r0, r2
 800224a:	f7ff ffb8 	bl	80021be <npf_putc_cnt>
 800224e:	e381      	b.n	8002954 <npf_vpprintf+0x768>
    cur += fs_len;
 8002250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002252:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002256:	4413      	add	r3, r2
 8002258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    // Extract star-args immediately
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    if (fs.field_width_opt == NPF_FMT_SPEC_OPT_STAR) {
 800225c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002260:	2b02      	cmp	r3, #2
 8002262:	d110      	bne.n	8002286 <npf_vpprintf+0x9a>
      fs.field_width_opt = NPF_FMT_SPEC_OPT_LITERAL;
 8002264:	2301      	movs	r3, #1
 8002266:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      fs.field_width = va_arg(args, int);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	1d1a      	adds	r2, r3, #4
 800226e:	603a      	str	r2, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	647b      	str	r3, [r7, #68]	; 0x44
      if (fs.field_width < 0) {
 8002274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002276:	2b00      	cmp	r3, #0
 8002278:	da05      	bge.n	8002286 <npf_vpprintf+0x9a>
        fs.field_width = -fs.field_width;
 800227a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800227c:	425b      	negs	r3, r3
 800227e:	647b      	str	r3, [r7, #68]	; 0x44
        fs.left_justified = 1;
 8002280:	2301      	movs	r3, #1
 8002282:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
      }
    }
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    if (fs.prec_opt == NPF_FMT_SPEC_OPT_STAR) {
 8002286:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800228a:	2b02      	cmp	r3, #2
 800228c:	d10d      	bne.n	80022aa <npf_vpprintf+0xbe>
      fs.prec_opt = NPF_FMT_SPEC_OPT_NONE;
 800228e:	2300      	movs	r3, #0
 8002290:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      fs.prec = va_arg(args, int);
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	1d1a      	adds	r2, r3, #4
 8002298:	603a      	str	r2, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (fs.prec >= 0) { fs.prec_opt = NPF_FMT_SPEC_OPT_LITERAL; }
 800229e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db02      	blt.n	80022aa <npf_vpprintf+0xbe>
 80022a4:	2301      	movs	r3, #1
 80022a6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    }
#endif

    union { char cbuf_mem[32]; npf_uint_t binval; } u;
    char *cbuf = u.cbuf_mem, sign_c = 0;
 80022aa:	f107 0310 	add.w	r3, r7, #16
 80022ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022b2:	2300      	movs	r3, #0
 80022b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    int cbuf_len = 0, need_0x = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80022be:	2300      	movs	r3, #0
 80022c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    int field_pad = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    char pad_c = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    int prec_pad = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    int zero = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
#endif
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    int frac_chars = 0, inf_or_nan = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	633b      	str	r3, [r7, #48]	; 0x30
 80022de:	2300      	movs	r3, #0
 80022e0:	67bb      	str	r3, [r7, #120]	; 0x78
#endif

    // Extract and convert the argument to string, point cbuf at the text.
    switch (fs.conv_spec) {
 80022e2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	f200 81c5 	bhi.w	8002676 <npf_vpprintf+0x48a>
 80022ec:	a201      	add	r2, pc, #4	; (adr r2, 80022f4 <npf_vpprintf+0x108>)
 80022ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f2:	bf00      	nop
 80022f4:	08002319 	.word	0x08002319
 80022f8:	0800232d 	.word	0x0800232d
 80022fc:	08002349 	.word	0x08002349
 8002300:	08002391 	.word	0x08002391
 8002304:	08002447 	.word	0x08002447
 8002308:	08002447 	.word	0x08002447
 800230c:	08002447 	.word	0x08002447
 8002310:	08002583 	.word	0x08002583
 8002314:	080025a5 	.word	0x080025a5
      case NPF_FMT_SPEC_CONV_PERCENT:
        *cbuf = '%';
 8002318:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800231c:	2225      	movs	r2, #37	; 0x25
 800231e:	701a      	strb	r2, [r3, #0]
        ++cbuf_len;
 8002320:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002324:	3301      	adds	r3, #1
 8002326:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        break;
 800232a:	e1a9      	b.n	8002680 <npf_vpprintf+0x494>

      case NPF_FMT_SPEC_CONV_CHAR:
        *cbuf = (char)va_arg(args, int);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	1d1a      	adds	r2, r3, #4
 8002330:	603a      	str	r2, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800233a:	701a      	strb	r2, [r3, #0]
        ++cbuf_len;
 800233c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002340:	3301      	adds	r3, #1
 8002342:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        break;
 8002346:	e19b      	b.n	8002680 <npf_vpprintf+0x494>

      case NPF_FMT_SPEC_CONV_STRING: {
        cbuf = va_arg(args, char *);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	1d1a      	adds	r2, r3, #4
 800234c:	603a      	str	r2, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        for (char const *s = cbuf; *s; ++s, ++cbuf_len); // strlen
 8002354:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002358:	677b      	str	r3, [r7, #116]	; 0x74
 800235a:	e007      	b.n	800236c <npf_vpprintf+0x180>
 800235c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800235e:	3301      	adds	r3, #1
 8002360:	677b      	str	r3, [r7, #116]	; 0x74
 8002362:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002366:	3301      	adds	r3, #1
 8002368:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800236c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f3      	bne.n	800235c <npf_vpprintf+0x170>
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
        if (fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) {
 8002374:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002378:	2b01      	cmp	r3, #1
 800237a:	f040 817e 	bne.w	800267a <npf_vpprintf+0x48e>
          cbuf_len = npf_min(fs.prec, cbuf_len); // prec truncates strings
 800237e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002380:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff f9e5 	bl	8001754 <npf_min>
 800238a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        }
#endif
      } break;
 800238e:	e174      	b.n	800267a <npf_vpprintf+0x48e>

      case NPF_FMT_SPEC_CONV_SIGNED_INT: {
        npf_int_t val = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	673b      	str	r3, [r7, #112]	; 0x70
        switch (fs.length_modifier) {
 8002394:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002398:	2b04      	cmp	r3, #4
 800239a:	d82d      	bhi.n	80023f8 <npf_vpprintf+0x20c>
 800239c:	a201      	add	r2, pc, #4	; (adr r2, 80023a4 <npf_vpprintf+0x1b8>)
 800239e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a2:	bf00      	nop
 80023a4:	080023b9 	.word	0x080023b9
 80023a8:	080023c5 	.word	0x080023c5
 80023ac:	080023d3 	.word	0x080023d3
 80023b0:	080023df 	.word	0x080023df
 80023b4:	080023ed 	.word	0x080023ed
          NPF_EXTRACT(NONE, int, int);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	1d1a      	adds	r2, r3, #4
 80023bc:	603a      	str	r2, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	673b      	str	r3, [r7, #112]	; 0x70
 80023c2:	e01a      	b.n	80023fa <npf_vpprintf+0x20e>
          NPF_EXTRACT(SHORT, short, int);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	1d1a      	adds	r2, r3, #4
 80023c8:	603a      	str	r2, [r7, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	673b      	str	r3, [r7, #112]	; 0x70
 80023d0:	e013      	b.n	80023fa <npf_vpprintf+0x20e>
          NPF_EXTRACT(LONG_DOUBLE, int, int);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	1d1a      	adds	r2, r3, #4
 80023d6:	603a      	str	r2, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	673b      	str	r3, [r7, #112]	; 0x70
 80023dc:	e00d      	b.n	80023fa <npf_vpprintf+0x20e>
          NPF_EXTRACT(CHAR, char, int);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	1d1a      	adds	r2, r3, #4
 80023e2:	603a      	str	r2, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	673b      	str	r3, [r7, #112]	; 0x70
 80023ea:	e006      	b.n	80023fa <npf_vpprintf+0x20e>
          NPF_EXTRACT(LONG, long, long);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	1d1a      	adds	r2, r3, #4
 80023f0:	603a      	str	r2, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	673b      	str	r3, [r7, #112]	; 0x70
 80023f6:	e000      	b.n	80023fa <npf_vpprintf+0x20e>
          NPF_EXTRACT(LARGE_LONG_LONG, long long, long long);
          NPF_EXTRACT(LARGE_INTMAX, intmax_t, intmax_t);
          NPF_EXTRACT(LARGE_SIZET, ssize_t, ssize_t);
          NPF_EXTRACT(LARGE_PTRDIFFT, ptrdiff_t, ptrdiff_t);
#endif
          default: break;
 80023f8:	bf00      	nop
        }

        sign_c = (val < 0) ? '-' : fs.prepend;
 80023fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	db02      	blt.n	8002406 <npf_vpprintf+0x21a>
 8002400:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002404:	e000      	b.n	8002408 <npf_vpprintf+0x21c>
 8002406:	232d      	movs	r3, #45	; 0x2d
 8002408:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = !val;
 800240c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800240e:	2b00      	cmp	r3, #0
 8002410:	bf0c      	ite	eq
 8002412:	2301      	moveq	r3, #1
 8002414:	2300      	movne	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        // special case, if prec and value are 0, skip
        if (!val && (fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec) {
 800241a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <npf_vpprintf+0x24a>
 8002420:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002424:	2b01      	cmp	r3, #1
 8002426:	d106      	bne.n	8002436 <npf_vpprintf+0x24a>
 8002428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800242a:	2b00      	cmp	r3, #0
 800242c:	d103      	bne.n	8002436 <npf_vpprintf+0x24a>
          cbuf_len = 0;
 800242e:	2300      	movs	r3, #0
 8002430:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        } else
#endif
        { cbuf_len = npf_itoa_rev(cbuf, val); }
      } break;
 8002434:	e124      	b.n	8002680 <npf_vpprintf+0x494>
        { cbuf_len = npf_itoa_rev(cbuf, val); }
 8002436:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002438:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800243c:	f7ff fba8 	bl	8001b90 <npf_itoa_rev>
 8002440:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
      } break;
 8002444:	e11c      	b.n	8002680 <npf_vpprintf+0x494>
      case NPF_FMT_SPEC_CONV_BINARY:
#endif
      case NPF_FMT_SPEC_CONV_OCTAL:
      case NPF_FMT_SPEC_CONV_HEX_INT:
      case NPF_FMT_SPEC_CONV_UNSIGNED_INT: {
        npf_uint_t val = 0;
 8002446:	2300      	movs	r3, #0
 8002448:	66fb      	str	r3, [r7, #108]	; 0x6c

        switch (fs.length_modifier) {
 800244a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800244e:	2b04      	cmp	r3, #4
 8002450:	d82c      	bhi.n	80024ac <npf_vpprintf+0x2c0>
 8002452:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <npf_vpprintf+0x26c>)
 8002454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002458:	0800246d 	.word	0x0800246d
 800245c:	08002479 	.word	0x08002479
 8002460:	08002487 	.word	0x08002487
 8002464:	08002493 	.word	0x08002493
 8002468:	080024a1 	.word	0x080024a1
          NPF_EXTRACT(NONE, unsigned, unsigned);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	1d1a      	adds	r2, r3, #4
 8002470:	603a      	str	r2, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002476:	e01a      	b.n	80024ae <npf_vpprintf+0x2c2>
          NPF_EXTRACT(SHORT, unsigned short, unsigned);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	1d1a      	adds	r2, r3, #4
 800247c:	603a      	str	r2, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	b29b      	uxth	r3, r3
 8002482:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002484:	e013      	b.n	80024ae <npf_vpprintf+0x2c2>
          NPF_EXTRACT(LONG_DOUBLE, unsigned, unsigned);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	1d1a      	adds	r2, r3, #4
 800248a:	603a      	str	r2, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002490:	e00d      	b.n	80024ae <npf_vpprintf+0x2c2>
          NPF_EXTRACT(CHAR, unsigned char, unsigned);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	1d1a      	adds	r2, r3, #4
 8002496:	603a      	str	r2, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800249e:	e006      	b.n	80024ae <npf_vpprintf+0x2c2>
          NPF_EXTRACT(LONG, unsigned long, unsigned long);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	1d1a      	adds	r2, r3, #4
 80024a4:	603a      	str	r2, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80024aa:	e000      	b.n	80024ae <npf_vpprintf+0x2c2>
          NPF_EXTRACT(LARGE_LONG_LONG, unsigned long long, unsigned long long);
          NPF_EXTRACT(LARGE_INTMAX, uintmax_t, uintmax_t);
          NPF_EXTRACT(LARGE_SIZET, size_t, size_t);
          NPF_EXTRACT(LARGE_PTRDIFFT, size_t, size_t);
#endif
          default: break;
 80024ac:	bf00      	nop
        }

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = !val;
 80024ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        if (!val && (fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec) {
 80024bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d111      	bne.n	80024e6 <npf_vpprintf+0x2fa>
 80024c2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d10d      	bne.n	80024e6 <npf_vpprintf+0x2fa>
 80024ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10a      	bne.n	80024e6 <npf_vpprintf+0x2fa>
          // Zero value and explicitly-requested zero precision means "print nothing".
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 80024d0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d11f      	bne.n	8002518 <npf_vpprintf+0x32c>
 80024d8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01b      	beq.n	8002518 <npf_vpprintf+0x32c>
            fs.prec = 1; // octal special case, print a single '0'
 80024e0:	2301      	movs	r3, #1
 80024e2:	64fb      	str	r3, [r7, #76]	; 0x4c
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 80024e4:	e018      	b.n	8002518 <npf_vpprintf+0x32c>
        if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) {
          cbuf_len = npf_bin_len(val); u.binval = val;
        } else
#endif
        {
          unsigned const base = (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) ?
 80024e6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
            8u : ((fs.conv_spec == NPF_FMT_SPEC_CONV_HEX_INT) ? 16u : 10u);
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d007      	beq.n	80024fe <npf_vpprintf+0x312>
 80024ee:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80024f2:	2b05      	cmp	r3, #5
 80024f4:	d101      	bne.n	80024fa <npf_vpprintf+0x30e>
 80024f6:	2310      	movs	r3, #16
 80024f8:	e002      	b.n	8002500 <npf_vpprintf+0x314>
 80024fa:	230a      	movs	r3, #10
 80024fc:	e000      	b.n	8002500 <npf_vpprintf+0x314>
 80024fe:	2308      	movs	r3, #8
          unsigned const base = (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) ?
 8002500:	65bb      	str	r3, [r7, #88]	; 0x58
          cbuf_len = npf_utoa_rev(cbuf, val, base, (unsigned)fs.case_adjust);
 8002502:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002506:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002508:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800250a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800250e:	f7ff fb7d 	bl	8001c0c <npf_utoa_rev>
 8002512:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 8002516:	e000      	b.n	800251a <npf_vpprintf+0x32e>
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 8002518:	bf00      	nop
        }

        if (val && fs.alt_form && (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL)) {
 800251a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800251c:	2b00      	cmp	r3, #0
 800251e:	d012      	beq.n	8002546 <npf_vpprintf+0x35a>
 8002520:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00e      	beq.n	8002546 <npf_vpprintf+0x35a>
 8002528:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800252c:	2b04      	cmp	r3, #4
 800252e:	d10a      	bne.n	8002546 <npf_vpprintf+0x35a>
          cbuf[cbuf_len++] = '0'; // OK to add leading octal '0' immediately.
 8002530:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800253a:	461a      	mov	r2, r3
 800253c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002540:	4413      	add	r3, r2
 8002542:	2230      	movs	r2, #48	; 0x30
 8002544:	701a      	strb	r2, [r3, #0]
        }

        if (val && fs.alt_form) { // 0x or 0b but can't write it yet.
 8002546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 8098 	beq.w	800267e <npf_vpprintf+0x492>
 800254e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8093 	beq.w	800267e <npf_vpprintf+0x492>
          if (fs.conv_spec == NPF_FMT_SPEC_CONV_HEX_INT) { need_0x = 'X'; }
 8002558:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800255c:	2b05      	cmp	r3, #5
 800255e:	d102      	bne.n	8002566 <npf_vpprintf+0x37a>
 8002560:	2358      	movs	r3, #88	; 0x58
 8002562:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#if NANOPRINTF_USE_BINARY_FORMAT_SPECIFIERS == 1
          else if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) { need_0x = 'B'; }
#endif
          if (need_0x) { need_0x += fs.case_adjust; }
 8002566:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800256a:	2b00      	cmp	r3, #0
 800256c:	f000 8087 	beq.w	800267e <npf_vpprintf+0x492>
 8002570:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002574:	461a      	mov	r2, r3
 8002576:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800257a:	4413      	add	r3, r2
 800257c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
      } break;
 8002580:	e07d      	b.n	800267e <npf_vpprintf+0x492>

      case NPF_FMT_SPEC_CONV_POINTER: {
        cbuf_len =
          npf_utoa_rev(cbuf, (npf_uint_t)(uintptr_t)va_arg(args, void *), 16, 'a'-'A');
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	1d1a      	adds	r2, r3, #4
 8002586:	603a      	str	r2, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4619      	mov	r1, r3
 800258c:	2320      	movs	r3, #32
 800258e:	2210      	movs	r2, #16
 8002590:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002594:	f7ff fb3a 	bl	8001c0c <npf_utoa_rev>
 8002598:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        need_0x = 'x';
 800259c:	2378      	movs	r3, #120	; 0x78
 800259e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      } break;
 80025a2:	e06d      	b.n	8002680 <npf_vpprintf+0x494>
#endif

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      case NPF_FMT_SPEC_CONV_FLOAT_DECIMAL: {
        float val;
        if (fs.length_modifier == NPF_FMT_SPEC_LEN_MOD_LONG_DOUBLE) {
 80025a4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d10f      	bne.n	80025cc <npf_vpprintf+0x3e0>
          val = (float)va_arg(args, long double);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	3307      	adds	r3, #7
 80025b0:	f023 0307 	bic.w	r3, r3, #7
 80025b4:	f103 0208 	add.w	r2, r3, #8
 80025b8:	603a      	str	r2, [r7, #0]
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	f7fe faf1 	bl	8000ba8 <__aeabi_d2f>
 80025c6:	4603      	mov	r3, r0
 80025c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80025ca:	e00e      	b.n	80025ea <npf_vpprintf+0x3fe>
        } else {
          val = (float)va_arg(args, double);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	3307      	adds	r3, #7
 80025d0:	f023 0307 	bic.w	r3, r3, #7
 80025d4:	f103 0208 	add.w	r2, r3, #8
 80025d8:	603a      	str	r2, [r7, #0]
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f7fe fae1 	bl	8000ba8 <__aeabi_d2f>
 80025e6:	4603      	mov	r3, r0
 80025e8:	66bb      	str	r3, [r7, #104]	; 0x68
        }

        sign_c = (val < 0.f) ? '-' : fs.prepend;
 80025ea:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80025ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f6:	d501      	bpl.n	80025fc <npf_vpprintf+0x410>
 80025f8:	232d      	movs	r3, #45	; 0x2d
 80025fa:	e001      	b.n	8002600 <npf_vpprintf+0x414>
 80025fc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002600:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = (val == 0.f);
 8002604:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8002608:	eef5 7a40 	vcmp.f32	s15, #0.0
 800260c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        cbuf_len = npf_ftoa_rev(cbuf, val, fs.case_adjust, &frac_chars);
 800261a:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800261e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002622:	4619      	mov	r1, r3
 8002624:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 8002628:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800262c:	f7ff fcbe 	bl	8001fac <npf_ftoa_rev>
 8002630:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if (cbuf_len < 0) {
 8002634:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002638:	2b00      	cmp	r3, #0
 800263a:	da07      	bge.n	800264c <npf_vpprintf+0x460>
          cbuf_len = -cbuf_len;
 800263c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002640:	425b      	negs	r3, r3
 8002642:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
          inf_or_nan = 1;
 8002646:	2301      	movs	r3, #1
 8002648:	67bb      	str	r3, [r7, #120]	; 0x78
        } else {
          int const prec_adj = npf_max(0, frac_chars - fs.prec);
          cbuf += prec_adj;
          cbuf_len -= prec_adj;
        }
      } break;
 800264a:	e019      	b.n	8002680 <npf_vpprintf+0x494>
          int const prec_adj = npf_max(0, frac_chars - fs.prec);
 800264c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800264e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	4619      	mov	r1, r3
 8002654:	2000      	movs	r0, #0
 8002656:	f7ff f88d 	bl	8001774 <npf_max>
 800265a:	65f8      	str	r0, [r7, #92]	; 0x5c
          cbuf += prec_adj;
 800265c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800265e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002662:	4413      	add	r3, r2
 8002664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
          cbuf_len -= prec_adj;
 8002668:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800266c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      } break;
 8002674:	e004      	b.n	8002680 <npf_vpprintf+0x494>
#endif
      default: break;
 8002676:	bf00      	nop
 8002678:	e002      	b.n	8002680 <npf_vpprintf+0x494>
      } break;
 800267a:	bf00      	nop
 800267c:	e000      	b.n	8002680 <npf_vpprintf+0x494>
      } break;
 800267e:	bf00      	nop
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Compute the field width pad character
    if (fs.field_width_opt == NPF_FMT_SPEC_OPT_LITERAL) {
 8002680:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002684:	2b01      	cmp	r3, #1
 8002686:	d124      	bne.n	80026d2 <npf_vpprintf+0x4e6>
      if (fs.leading_zero_pad) { // '0' flag is only legal with numeric types
 8002688:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01d      	beq.n	80026cc <npf_vpprintf+0x4e0>
        if ((fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) &&
 8002690:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002694:	2b02      	cmp	r3, #2
 8002696:	d01c      	beq.n	80026d2 <npf_vpprintf+0x4e6>
            (fs.conv_spec != NPF_FMT_SPEC_CONV_CHAR) &&
 8002698:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
        if ((fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) &&
 800269c:	2b01      	cmp	r3, #1
 800269e:	d018      	beq.n	80026d2 <npf_vpprintf+0x4e6>
            (fs.conv_spec != NPF_FMT_SPEC_CONV_PERCENT)) {
 80026a0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
            (fs.conv_spec != NPF_FMT_SPEC_CONV_CHAR) &&
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d014      	beq.n	80026d2 <npf_vpprintf+0x4e6>
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
          if ((fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec && zero) {
 80026a8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d109      	bne.n	80026c4 <npf_vpprintf+0x4d8>
 80026b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <npf_vpprintf+0x4d8>
 80026b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d003      	beq.n	80026c4 <npf_vpprintf+0x4d8>
            pad_c = ' ';
 80026bc:	2320      	movs	r3, #32
 80026be:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80026c2:	e006      	b.n	80026d2 <npf_vpprintf+0x4e6>
          } else
#endif
          { pad_c = '0'; }
 80026c4:	2330      	movs	r3, #48	; 0x30
 80026c6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80026ca:	e002      	b.n	80026d2 <npf_vpprintf+0x4e6>
        }
      } else { pad_c = ' '; }
 80026cc:	2320      	movs	r3, #32
 80026ce:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }
#endif

    // Compute the number of bytes to truncate or '0'-pad.
    if (fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) {
 80026d2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d014      	beq.n	8002704 <npf_vpprintf+0x518>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      if (!inf_or_nan) { // float precision is after the decimal point
 80026da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d111      	bne.n	8002704 <npf_vpprintf+0x518>
        int const prec_start =
          (fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DECIMAL) ? frac_chars : cbuf_len;
 80026e0:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d101      	bne.n	80026ec <npf_vpprintf+0x500>
 80026e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ea:	e001      	b.n	80026f0 <npf_vpprintf+0x504>
 80026ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        int const prec_start =
 80026f0:	657b      	str	r3, [r7, #84]	; 0x54
        prec_pad = npf_max(0, fs.prec - prec_start);
 80026f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	4619      	mov	r1, r3
 80026fa:	2000      	movs	r0, #0
 80026fc:	f7ff f83a 	bl	8001774 <npf_max>
 8002700:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
#endif
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Given the full converted length, how many pad bytes?
    field_pad = fs.field_width - cbuf_len - !!sign_c;
 8002704:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002706:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8002710:	2a00      	cmp	r2, #0
 8002712:	bf14      	ite	ne
 8002714:	2201      	movne	r2, #1
 8002716:	2200      	moveq	r2, #0
 8002718:	b2d2      	uxtb	r2, r2
 800271a:	1a9b      	subs	r3, r3, r2
 800271c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (need_0x) { field_pad -= 2; }
 8002720:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002724:	2b00      	cmp	r3, #0
 8002726:	d004      	beq.n	8002732 <npf_vpprintf+0x546>
 8002728:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800272c:	3b02      	subs	r3, #2
 800272e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    if ((fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DECIMAL) && !fs.prec && !fs.alt_form) {
 8002732:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002736:	2b08      	cmp	r3, #8
 8002738:	d10b      	bne.n	8002752 <npf_vpprintf+0x566>
 800273a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d108      	bne.n	8002752 <npf_vpprintf+0x566>
 8002740:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002744:	2b00      	cmp	r3, #0
 8002746:	d104      	bne.n	8002752 <npf_vpprintf+0x566>
      ++field_pad; // 0-pad, no decimal point.
 8002748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800274c:	3301      	adds	r3, #1
 800274e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    field_pad -= prec_pad;
 8002752:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002756:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#endif
    field_pad = npf_max(0, field_pad);
 8002760:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002764:	2000      	movs	r0, #0
 8002766:	f7ff f805 	bl	8001774 <npf_max>
 800276a:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
#endif // NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Apply right-justified field width if requested
    if (!fs.left_justified && pad_c) { // If leading zeros pad, sign goes first.
 800276e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002772:	2b00      	cmp	r3, #0
 8002774:	d14d      	bne.n	8002812 <npf_vpprintf+0x626>
 8002776:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800277a:	2b00      	cmp	r3, #0
 800277c:	d049      	beq.n	8002812 <npf_vpprintf+0x626>
      if (pad_c == '0') {
 800277e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002782:	2b30      	cmp	r3, #48	; 0x30
 8002784:	d128      	bne.n	80027d8 <npf_vpprintf+0x5ec>
        if (sign_c) { NPF_PUTC(sign_c); sign_c = 0; }
 8002786:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00a      	beq.n	80027a4 <npf_vpprintf+0x5b8>
 800278e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002792:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fd10 	bl	80021be <npf_putc_cnt>
 800279e:	2300      	movs	r3, #0
 80027a0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        // Pad byte is '0', write '0x' before '0' pad chars.
        if (need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 80027a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d015      	beq.n	80027d8 <npf_vpprintf+0x5ec>
 80027ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027b0:	4619      	mov	r1, r3
 80027b2:	2030      	movs	r0, #48	; 0x30
 80027b4:	f7ff fd03 	bl	80021be <npf_putc_cnt>
 80027b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027bc:	4619      	mov	r1, r3
 80027be:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80027c2:	f7ff fcfc 	bl	80021be <npf_putc_cnt>
      }
      while (field_pad-- > 0) { NPF_PUTC(pad_c); }
 80027c6:	e007      	b.n	80027d8 <npf_vpprintf+0x5ec>
 80027c8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80027cc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff fcf3 	bl	80021be <npf_putc_cnt>
 80027d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027dc:	1e5a      	subs	r2, r3, #1
 80027de:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	dcf0      	bgt.n	80027c8 <npf_vpprintf+0x5dc>
      // Pad byte is ' ', write '0x' after ' ' pad chars but before number.
      if ((pad_c != '0') && need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 80027e6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80027ea:	2b30      	cmp	r3, #48	; 0x30
 80027ec:	d023      	beq.n	8002836 <npf_vpprintf+0x64a>
 80027ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d01f      	beq.n	8002836 <npf_vpprintf+0x64a>
 80027f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027fa:	4619      	mov	r1, r3
 80027fc:	2030      	movs	r0, #48	; 0x30
 80027fe:	f7ff fcde 	bl	80021be <npf_putc_cnt>
 8002802:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002806:	4619      	mov	r1, r3
 8002808:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800280c:	f7ff fcd7 	bl	80021be <npf_putc_cnt>
 8002810:	e011      	b.n	8002836 <npf_vpprintf+0x64a>
    } else
#endif
    { if (need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); } } // no pad, '0x' requested.
 8002812:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00e      	beq.n	8002838 <npf_vpprintf+0x64c>
 800281a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800281e:	4619      	mov	r1, r3
 8002820:	2030      	movs	r0, #48	; 0x30
 8002822:	f7ff fccc 	bl	80021be <npf_putc_cnt>
 8002826:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800282a:	4619      	mov	r1, r3
 800282c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002830:	f7ff fcc5 	bl	80021be <npf_putc_cnt>
 8002834:	e000      	b.n	8002838 <npf_vpprintf+0x64c>
      if ((pad_c != '0') && need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 8002836:	bf00      	nop

    // Write the converted payload
    if (fs.conv_spec == NPF_FMT_SPEC_CONV_STRING) {
 8002838:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800283c:	2b02      	cmp	r3, #2
 800283e:	d117      	bne.n	8002870 <npf_vpprintf+0x684>
      for (int i = 0; i < cbuf_len; ++i) { NPF_PUTC(cbuf[i]); }
 8002840:	2300      	movs	r3, #0
 8002842:	667b      	str	r3, [r7, #100]	; 0x64
 8002844:	e00e      	b.n	8002864 <npf_vpprintf+0x678>
 8002846:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002848:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800284c:	4413      	add	r3, r2
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002856:	4619      	mov	r1, r3
 8002858:	4610      	mov	r0, r2
 800285a:	f7ff fcb0 	bl	80021be <npf_putc_cnt>
 800285e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002860:	3301      	adds	r3, #1
 8002862:	667b      	str	r3, [r7, #100]	; 0x64
 8002864:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002866:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800286a:	429a      	cmp	r2, r3
 800286c:	dbeb      	blt.n	8002846 <npf_vpprintf+0x65a>
 800286e:	e059      	b.n	8002924 <npf_vpprintf+0x738>
    } else {
      if (sign_c) { NPF_PUTC(sign_c); }
 8002870:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002874:	2b00      	cmp	r3, #0
 8002876:	d007      	beq.n	8002888 <npf_vpprintf+0x69c>
 8002878:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800287c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff fc9b 	bl	80021be <npf_putc_cnt>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      if (fs.conv_spec != NPF_FMT_SPEC_CONV_FLOAT_DECIMAL) {
 8002888:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800288c:	2b08      	cmp	r3, #8
 800288e:	d00e      	beq.n	80028ae <npf_vpprintf+0x6c2>
#endif

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
        while (prec_pad-- > 0) { NPF_PUTC('0'); } // int precision leads.
 8002890:	e005      	b.n	800289e <npf_vpprintf+0x6b2>
 8002892:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002896:	4619      	mov	r1, r3
 8002898:	2030      	movs	r0, #48	; 0x30
 800289a:	f7ff fc90 	bl	80021be <npf_putc_cnt>
 800289e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028a2:	1e5a      	subs	r2, r3, #1
 80028a4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	dcf2      	bgt.n	8002892 <npf_vpprintf+0x6a6>
 80028ac:	e01e      	b.n	80028ec <npf_vpprintf+0x700>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      } else {
        // if 0 precision, skip the fractional part and '.'
        // if 0 prec + alternative form, keep the '.'
        if (!fs.prec && !fs.alt_form) { ++cbuf; --cbuf_len; }
 80028ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d11b      	bne.n	80028ec <npf_vpprintf+0x700>
 80028b4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d117      	bne.n	80028ec <npf_vpprintf+0x700>
 80028bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028c0:	3301      	adds	r3, #1
 80028c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80028c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028ca:	3b01      	subs	r3, #1
 80028cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#if NANOPRINTF_USE_BINARY_FORMAT_SPECIFIERS == 1
      if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) {
        while (cbuf_len) { NPF_PUTC('0' + ((u.binval >> --cbuf_len) & 1)); }
      } else
#endif
      { while (cbuf_len-- > 0) { NPF_PUTC(cbuf[cbuf_len]); } } // payload is reversed
 80028d0:	e00c      	b.n	80028ec <npf_vpprintf+0x700>
 80028d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028d6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80028da:	4413      	add	r3, r2
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028e4:	4619      	mov	r1, r3
 80028e6:	4610      	mov	r0, r2
 80028e8:	f7ff fc69 	bl	80021be <npf_putc_cnt>
 80028ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028f0:	1e5a      	subs	r2, r3, #1
 80028f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	dceb      	bgt.n	80028d2 <npf_vpprintf+0x6e6>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      // real precision comes after the number.
      if ((fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DECIMAL) && !inf_or_nan) {
 80028fa:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d110      	bne.n	8002924 <npf_vpprintf+0x738>
 8002902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10d      	bne.n	8002924 <npf_vpprintf+0x738>
        while (prec_pad-- > 0) { NPF_PUTC('0'); }
 8002908:	e005      	b.n	8002916 <npf_vpprintf+0x72a>
 800290a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800290e:	4619      	mov	r1, r3
 8002910:	2030      	movs	r0, #48	; 0x30
 8002912:	f7ff fc54 	bl	80021be <npf_putc_cnt>
 8002916:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800291a:	1e5a      	subs	r2, r3, #1
 800291c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002920:	2b00      	cmp	r3, #0
 8002922:	dcf2      	bgt.n	800290a <npf_vpprintf+0x71e>
      }
#endif
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    if (fs.left_justified && pad_c) { // Apply left-justified field width
 8002924:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <npf_vpprintf+0x768>
 800292c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00f      	beq.n	8002954 <npf_vpprintf+0x768>
      while (field_pad-- > 0) { NPF_PUTC(pad_c); }
 8002934:	e007      	b.n	8002946 <npf_vpprintf+0x75a>
 8002936:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800293a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fc3c 	bl	80021be <npf_putc_cnt>
 8002946:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800294a:	1e5a      	subs	r2, r3, #1
 800294c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002950:	2b00      	cmp	r3, #0
 8002952:	dcf0      	bgt.n	8002936 <npf_vpprintf+0x74a>
  while (*cur) {
 8002954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	f47f ac57 	bne.w	800220e <npf_vpprintf+0x22>
    }
#endif
  }

  return pc_cnt.n;
 8002960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002962:	4618      	mov	r0, r3
 8002964:	37a0      	adds	r7, #160	; 0xa0
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop

0800296c <npf_snprintf>:
  int const rv = npf_vpprintf(pc, pc_ctx, format, val);
  va_end(val);
  return rv;
}

int npf_snprintf(char *buffer, size_t bufsz, const char *format, ...) {
 800296c:	b40c      	push	{r2, r3}
 800296e:	b580      	push	{r7, lr}
 8002970:	b084      	sub	sp, #16
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
 8002976:	6039      	str	r1, [r7, #0]
  va_list val;
  va_start(val, format);
 8002978:	f107 031c 	add.w	r3, r7, #28
 800297c:	60bb      	str	r3, [r7, #8]
  int const rv = npf_vsnprintf(buffer, bufsz, format, val);
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	6839      	ldr	r1, [r7, #0]
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f809 	bl	800299c <npf_vsnprintf>
 800298a:	60f8      	str	r0, [r7, #12]
  va_end(val);
  return rv;
 800298c:	68fb      	ldr	r3, [r7, #12]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002998:	b002      	add	sp, #8
 800299a:	4770      	bx	lr

0800299c <npf_vsnprintf>:

int npf_vsnprintf(char *buffer, size_t bufsz, char const *format, va_list vlist) {
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
  npf_bufputc_ctx_t bufputc_ctx;
  bufputc_ctx.dst = buffer;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	617b      	str	r3, [r7, #20]
  bufputc_ctx.len = bufsz;
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	61bb      	str	r3, [r7, #24]
  bufputc_ctx.cur = 0;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]

  npf_putc const pc = buffer ? npf_bufputc : npf_bufputc_nop;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <npf_vsnprintf+0x24>
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <npf_vsnprintf+0x50>)
 80029be:	e000      	b.n	80029c2 <npf_vsnprintf+0x26>
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <npf_vsnprintf+0x54>)
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
  int const n = npf_vpprintf(pc, &bufputc_ctx, format, vlist);
 80029c4:	f107 0114 	add.w	r1, r7, #20
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029ce:	f7ff fc0d 	bl	80021ec <npf_vpprintf>
 80029d2:	6238      	str	r0, [r7, #32]
  pc('\0', &bufputc_ctx);
 80029d4:	f107 0214 	add.w	r2, r7, #20
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	4611      	mov	r1, r2
 80029dc:	2000      	movs	r0, #0
 80029de:	4798      	blx	r3
  if (bufsz && (n >= (int)bufsz)) { buffer[0] = '\0'; }
#elif defined(NANOPRINTF_SNPRINTF_SAFE_TRIM_STRING_ON_OVERFLOW)
  if (bufsz && (n >= (int)bufsz)) { buffer[bufsz - 1] = '\0'; }
#endif

  return n;
 80029e0:	6a3b      	ldr	r3, [r7, #32]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3728      	adds	r7, #40	; 0x28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	0800216d 	.word	0x0800216d
 80029f0:	080021a9 	.word	0x080021a9

080029f4 <myApp_init>:
volatile static uint16_t ADC_raw[adc_Channels];
volatile uint32_t guiTimer;
wakeUpSource lastWakeUpSource;

//functions
void myApp_init() {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
	startADC();
 80029f8:	f000 fa7a 	bl	8002ef0 <startADC>
	//SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP); //Enable debug in stop
	//HAL_PWREx_EnableUltraLowPower();
	//HAL_PWREx_EnableFastWakeUp();

	//GNSS
	GNSS_Init();
 80029fc:	f001 f858 	bl	8003ab0 <GNSS_Init>

	while (ADCrunning) {
 8002a00:	bf00      	nop
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <myApp_init+0x28>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1fa      	bne.n	8002a02 <myApp_init+0xe>
		//wait for ADC
	}

	//LCD
	lcd_init();
 8002a0c:	f006 fba6 	bl	800915c <lcd_init>
	lcd_SetFont((GFXfont*) &FreeSans9pt7bMod);
 8002a10:	4803      	ldr	r0, [pc, #12]	; (8002a20 <myApp_init+0x2c>)
 8002a12:	f006 fc4f 	bl	80092b4 <lcd_SetFont>
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	20000378 	.word	0x20000378
 8002a20:	0800cb78 	.word	0x0800cb78

08002a24 <myApp_loop>:

void myApp_loop() {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
	startADC();
 8002a28:	f000 fa62 	bl	8002ef0 <startADC>
	GNSS_Power();
 8002a2c:	f001 f888 	bl	8003b40 <GNSS_Power>
	if (LCD_Power() == LCD_READY) {
 8002a30:	f006 fb9c 	bl	800916c <LCD_Power>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d10e      	bne.n	8002a58 <myApp_loop+0x34>
		drawHeader();
 8002a3a:	f000 f859 	bl	8002af0 <drawHeader>
		drawGNSS();
 8002a3e:	f000 f907 	bl	8002c50 <drawGNSS>
		while ((lcd_draw() == LCD_SENDING_DATA)) {
 8002a42:	e001      	b.n	8002a48 <myApp_loop+0x24>
			goToIdle(); //wait for DMA services to finish
 8002a44:	f000 f814 	bl	8002a70 <goToIdle>
		while ((lcd_draw() == LCD_SENDING_DATA)) {
 8002a48:	f006 fe70 	bl	800972c <lcd_draw>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d0f8      	beq.n	8002a44 <myApp_loop+0x20>
		}
	}
	while (ADCrunning) {
 8002a52:	e001      	b.n	8002a58 <myApp_loop+0x34>
		goToIdle(); //wait for ADC services to finish
 8002a54:	f000 f80c 	bl	8002a70 <goToIdle>
	while (ADCrunning) {
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <myApp_loop+0x48>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f8      	bne.n	8002a54 <myApp_loop+0x30>
	}
	goToSleep();
 8002a62:	f000 f80d 	bl	8002a80 <goToSleep>
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000378 	.word	0x20000378

08002a70 <goToIdle>:

static void goToIdle() {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002a74:	2101      	movs	r1, #1
 8002a76:	2000      	movs	r0, #0
 8002a78:	f003 fb54 	bl	8006124 <HAL_PWR_EnterSLEEPMode>
}
 8002a7c:	bf00      	nop
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <goToSleep>:

static void goToSleep() {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
	if (superCapmV < mV_OV) {
 8002a84:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <goToSleep+0x60>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002a8c:	d21e      	bcs.n	8002acc <goToSleep+0x4c>
		HAL_GPIO_WritePin(GNSS_EXT_GPIO_Port, GNSS_EXT_Pin, GPIO_PIN_SET); //Allow charging
 8002a8e:	2201      	movs	r2, #1
 8002a90:	2110      	movs	r1, #16
 8002a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a96:	f003 fb1d 	bl	80060d4 <HAL_GPIO_WritePin>
		GNSS_Prep_Stop();
 8002a9a:	f001 f829 	bl	8003af0 <GNSS_Prep_Stop>
		HAL_SuspendTick();
 8002a9e:	f001 fb4d 	bl	800413c <HAL_SuspendTick>
		do {
			lastWakeUpSource = WKUP_CLEAR;
 8002aa2:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <goToSleep+0x64>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002aae:	f003 fb6d 	bl	800618c <HAL_PWR_EnterSTOPMode>
			__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <goToSleep+0x68>)
 8002ab4:	221f      	movs	r2, #31
 8002ab6:	619a      	str	r2, [r3, #24]
		} while (lastWakeUpSource == WKUP_LPUART);
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <goToSleep+0x64>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d0f0      	beq.n	8002aa2 <goToSleep+0x22>
		LL_LPUART_DisableIT_WKUP(LPUART1);
 8002ac0:	480a      	ldr	r0, [pc, #40]	; (8002aec <goToSleep+0x6c>)
 8002ac2:	f7fe fe24 	bl	800170e <LL_LPUART_DisableIT_WKUP>
		HAL_ResumeTick();
 8002ac6:	f001 fb49 	bl	800415c <HAL_ResumeTick>
	}else{
		HAL_GPIO_WritePin(SolarEN_GPIO_Port, SolarEN_Pin, GPIO_PIN_RESET); //disable charging
	}
}
 8002aca:	e006      	b.n	8002ada <goToSleep+0x5a>
		HAL_GPIO_WritePin(SolarEN_GPIO_Port, SolarEN_Pin, GPIO_PIN_RESET); //disable charging
 8002acc:	2200      	movs	r2, #0
 8002ace:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ad6:	f003 fafd 	bl	80060d4 <HAL_GPIO_WritePin>
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	2000037c 	.word	0x2000037c
 8002ae4:	20000390 	.word	0x20000390
 8002ae8:	40007000 	.word	0x40007000
 8002aec:	40008000 	.word	0x40008000

08002af0 <drawHeader>:

static void drawHeader() {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af02      	add	r7, sp, #8
	lcd_clearLines(0, LCD_row_Height * 2);
 8002af6:	2122      	movs	r1, #34	; 0x22
 8002af8:	2000      	movs	r0, #0
 8002afa:	f006 fd7d 	bl	80095f8 <lcd_clearLines>
//Date Time
	printDateTime();
 8002afe:	f000 f863 	bl	8002bc8 <printDateTime>
//Battery
	lcd_SetCursor(80, LCD_row_Height - 2);
 8002b02:	210f      	movs	r1, #15
 8002b04:	2050      	movs	r0, #80	; 0x50
 8002b06:	f006 fbbb 	bl	8009280 <lcd_SetCursor>
	lcd_print(npf_snprintf(strbuffer, strbufferSize, "%3.2fV", (float) superCapmV / 1000.0f));
 8002b0a:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <drawHeader+0xb8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b16:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002bac <drawHeader+0xbc>
 8002b1a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002b1e:	ee16 0a90 	vmov	r0, s13
 8002b22:	f7fd fd11 	bl	8000548 <__aeabi_f2d>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	e9cd 2300 	strd	r2, r3, [sp]
 8002b2e:	4a20      	ldr	r2, [pc, #128]	; (8002bb0 <drawHeader+0xc0>)
 8002b30:	2114      	movs	r1, #20
 8002b32:	4820      	ldr	r0, [pc, #128]	; (8002bb4 <drawHeader+0xc4>)
 8002b34:	f7ff ff1a 	bl	800296c <npf_snprintf>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f006 fc56 	bl	80093ec <lcd_print>
//Temp
	lcd_SetCursor(94, (LCD_row_Height * 2) - 2);
 8002b40:	2120      	movs	r1, #32
 8002b42:	205e      	movs	r0, #94	; 0x5e
 8002b44:	f006 fb9c 	bl	8009280 <lcd_SetCursor>
	lcd_print(npf_snprintf(strbuffer, strbufferSize, "%.2dC", (int) tempC));
 8002b48:	4b1b      	ldr	r3, [pc, #108]	; (8002bb8 <drawHeader+0xc8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1b      	ldr	r2, [pc, #108]	; (8002bbc <drawHeader+0xcc>)
 8002b4e:	2114      	movs	r1, #20
 8002b50:	4818      	ldr	r0, [pc, #96]	; (8002bb4 <drawHeader+0xc4>)
 8002b52:	f7ff ff0b 	bl	800296c <npf_snprintf>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f006 fc47 	bl	80093ec <lcd_print>
	//GNSS Status
	if (GNSSlastRate == GNSS_ON) {
 8002b5e:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <drawHeader+0xd0>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d107      	bne.n	8002b78 <drawHeader+0x88>
		lcd_drawLine(0, 0, 0, 15, LCD_BLACK);
 8002b68:	2300      	movs	r3, #0
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	230f      	movs	r3, #15
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2100      	movs	r1, #0
 8002b72:	2000      	movs	r0, #0
 8002b74:	f006 fcfe 	bl	8009574 <lcd_drawLine>
	}
	if (GNSSAlive) {
 8002b78:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <drawHeader+0xd4>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d007      	beq.n	8002b92 <drawHeader+0xa2>
		lcd_drawLine(0, 16, 0, 32, LCD_BLACK);
 8002b82:	2300      	movs	r3, #0
 8002b84:	9300      	str	r3, [sp, #0]
 8002b86:	2320      	movs	r3, #32
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2110      	movs	r1, #16
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f006 fcf1 	bl	8009574 <lcd_drawLine>
	}
//Div line
	lcd_drawLine(0, LCD_row_Height * 2, 127, LCD_row_Height * 2, LCD_BLACK);
 8002b92:	2300      	movs	r3, #0
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	2322      	movs	r3, #34	; 0x22
 8002b98:	227f      	movs	r2, #127	; 0x7f
 8002b9a:	2122      	movs	r1, #34	; 0x22
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f006 fce9 	bl	8009574 <lcd_drawLine>
}
 8002ba2:	bf00      	nop
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	2000037c 	.word	0x2000037c
 8002bac:	447a0000 	.word	0x447a0000
 8002bb0:	0800c384 	.word	0x0800c384
 8002bb4:	20000d6c 	.word	0x20000d6c
 8002bb8:	20000380 	.word	0x20000380
 8002bbc:	0800c38c 	.word	0x0800c38c
 8002bc0:	20000398 	.word	0x20000398
 8002bc4:	200003a0 	.word	0x200003a0

08002bc8 <printDateTime>:

static void printDateTime() {
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b088      	sub	sp, #32
 8002bcc:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002bce:	1d3b      	adds	r3, r7, #4
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	481a      	ldr	r0, [pc, #104]	; (8002c40 <printDateTime+0x78>)
 8002bd6:	f004 fe03 	bl	80077e0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002bda:	463b      	mov	r3, r7
 8002bdc:	2200      	movs	r2, #0
 8002bde:	4619      	mov	r1, r3
 8002be0:	4817      	ldr	r0, [pc, #92]	; (8002c40 <printDateTime+0x78>)
 8002be2:	f004 fee0 	bl	80079a6 <HAL_RTC_GetDate>
	lcd_SetCursor(1, LCD_row_Height - 2);
 8002be6:	210f      	movs	r1, #15
 8002be8:	2001      	movs	r0, #1
 8002bea:	f006 fb49 	bl	8009280 <lcd_SetCursor>
	lcd_print(npf_snprintf(strbuffer, strbufferSize, "%02d:%02d:%02d ", sTime.Hours, sTime.Minutes, sTime.Seconds));
 8002bee:	793b      	ldrb	r3, [r7, #4]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	797b      	ldrb	r3, [r7, #5]
 8002bf4:	79ba      	ldrb	r2, [r7, #6]
 8002bf6:	9201      	str	r2, [sp, #4]
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4a11      	ldr	r2, [pc, #68]	; (8002c44 <printDateTime+0x7c>)
 8002bfe:	2114      	movs	r1, #20
 8002c00:	4811      	ldr	r0, [pc, #68]	; (8002c48 <printDateTime+0x80>)
 8002c02:	f7ff feb3 	bl	800296c <npf_snprintf>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f006 fbef 	bl	80093ec <lcd_print>
	lcd_SetCursor(1, (LCD_row_Height * 2) - 2);
 8002c0e:	2120      	movs	r1, #32
 8002c10:	2001      	movs	r0, #1
 8002c12:	f006 fb35 	bl	8009280 <lcd_SetCursor>
	lcd_print(npf_snprintf(strbuffer, strbufferSize, "%02d/%02d/%02d", sDate.Date, sDate.Month, sDate.Year));
 8002c16:	78bb      	ldrb	r3, [r7, #2]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	787b      	ldrb	r3, [r7, #1]
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	9201      	str	r2, [sp, #4]
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	460b      	mov	r3, r1
 8002c24:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <printDateTime+0x84>)
 8002c26:	2114      	movs	r1, #20
 8002c28:	4807      	ldr	r0, [pc, #28]	; (8002c48 <printDateTime+0x80>)
 8002c2a:	f7ff fe9f 	bl	800296c <npf_snprintf>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f006 fbdb 	bl	80093ec <lcd_print>
}
 8002c36:	bf00      	nop
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200002a8 	.word	0x200002a8
 8002c44:	0800c394 	.word	0x0800c394
 8002c48:	20000d6c 	.word	0x20000d6c
 8002c4c:	0800c3a4 	.word	0x0800c3a4

08002c50 <drawGNSS>:

static void drawGNSS() {
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af02      	add	r7, sp, #8
	if (GNSSNewData) {
 8002c56:	4b82      	ldr	r3, [pc, #520]	; (8002e60 <drawGNSS+0x210>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 80a3 	beq.w	8002da8 <drawGNSS+0x158>
		lcd_clearLines((LCD_row_Height * 2) + 2, LCD_row_Height * 6);
 8002c62:	2166      	movs	r1, #102	; 0x66
 8002c64:	2024      	movs	r0, #36	; 0x24
 8002c66:	f006 fcc7 	bl	80095f8 <lcd_clearLines>
		lcd_SetCursor(1, LCD_row_Height * 3);
 8002c6a:	2133      	movs	r1, #51	; 0x33
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	f006 fb07 	bl	8009280 <lcd_SetCursor>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "%8.4f ", fabsf(getLat())));
 8002c72:	f000 fe41 	bl	80038f8 <getLat>
 8002c76:	eef0 7a40 	vmov.f32	s15, s0
 8002c7a:	eef0 7ae7 	vabs.f32	s15, s15
 8002c7e:	ee17 0a90 	vmov	r0, s15
 8002c82:	f7fd fc61 	bl	8000548 <__aeabi_f2d>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	e9cd 2300 	strd	r2, r3, [sp]
 8002c8e:	4a75      	ldr	r2, [pc, #468]	; (8002e64 <drawGNSS+0x214>)
 8002c90:	2114      	movs	r1, #20
 8002c92:	4875      	ldr	r0, [pc, #468]	; (8002e68 <drawGNSS+0x218>)
 8002c94:	f7ff fe6a 	bl	800296c <npf_snprintf>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f006 fba6 	bl	80093ec <lcd_print>
		if (getLat() < 0) {
 8002ca0:	f000 fe2a 	bl	80038f8 <getLat>
 8002ca4:	eef0 7a40 	vmov.f32	s15, s0
 8002ca8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb0:	d503      	bpl.n	8002cba <drawGNSS+0x6a>
			lcd_print_char('S');
 8002cb2:	2053      	movs	r0, #83	; 0x53
 8002cb4:	f006 fbc8 	bl	8009448 <lcd_print_char>
 8002cb8:	e002      	b.n	8002cc0 <drawGNSS+0x70>
		} else {
			lcd_print_char('N');
 8002cba:	204e      	movs	r0, #78	; 0x4e
 8002cbc:	f006 fbc4 	bl	8009448 <lcd_print_char>
		}
		lcd_SetCursor(1, LCD_row_Height * 4);
 8002cc0:	2144      	movs	r1, #68	; 0x44
 8002cc2:	2001      	movs	r0, #1
 8002cc4:	f006 fadc 	bl	8009280 <lcd_SetCursor>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "%8.4f ", fabsf(getLong())));
 8002cc8:	f000 fe3e 	bl	8003948 <getLong>
 8002ccc:	eef0 7a40 	vmov.f32	s15, s0
 8002cd0:	eef0 7ae7 	vabs.f32	s15, s15
 8002cd4:	ee17 0a90 	vmov	r0, s15
 8002cd8:	f7fd fc36 	bl	8000548 <__aeabi_f2d>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	e9cd 2300 	strd	r2, r3, [sp]
 8002ce4:	4a5f      	ldr	r2, [pc, #380]	; (8002e64 <drawGNSS+0x214>)
 8002ce6:	2114      	movs	r1, #20
 8002ce8:	485f      	ldr	r0, [pc, #380]	; (8002e68 <drawGNSS+0x218>)
 8002cea:	f7ff fe3f 	bl	800296c <npf_snprintf>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f006 fb7b 	bl	80093ec <lcd_print>
		if (getLong() < 0) {
 8002cf6:	f000 fe27 	bl	8003948 <getLong>
 8002cfa:	eef0 7a40 	vmov.f32	s15, s0
 8002cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d06:	d503      	bpl.n	8002d10 <drawGNSS+0xc0>
			lcd_print_char('W');
 8002d08:	2057      	movs	r0, #87	; 0x57
 8002d0a:	f006 fb9d 	bl	8009448 <lcd_print_char>
 8002d0e:	e002      	b.n	8002d16 <drawGNSS+0xc6>
		} else {
			lcd_print_char('E');
 8002d10:	2045      	movs	r0, #69	; 0x45
 8002d12:	f006 fb99 	bl	8009448 <lcd_print_char>
		}

		lcd_SetCursor(1, LCD_row_Height * 5);
 8002d16:	2155      	movs	r1, #85	; 0x55
 8002d18:	2001      	movs	r0, #1
 8002d1a:	f006 fab1 	bl	8009280 <lcd_SetCursor>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Sat:%d Acc:%2.0fm", getNumSatellites(), getHAcc() > 99.9 ? 99.9 : getHAcc()));
 8002d1e:	f000 fe9d 	bl	8003a5c <getNumSatellites>
 8002d22:	4603      	mov	r3, r0
 8002d24:	461c      	mov	r4, r3
 8002d26:	f000 fe37 	bl	8003998 <getHAcc>
 8002d2a:	ee10 3a10 	vmov	r3, s0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc0a 	bl	8000548 <__aeabi_f2d>
 8002d34:	a348      	add	r3, pc, #288	; (adr r3, 8002e58 <drawGNSS+0x208>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f7fd feed 	bl	8000b18 <__aeabi_dcmpgt>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d003      	beq.n	8002d4c <drawGNSS+0xfc>
 8002d44:	a344      	add	r3, pc, #272	; (adr r3, 8002e58 <drawGNSS+0x208>)
 8002d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4a:	e008      	b.n	8002d5e <drawGNSS+0x10e>
 8002d4c:	f000 fe24 	bl	8003998 <getHAcc>
 8002d50:	ee10 3a10 	vmov	r3, s0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd fbf7 	bl	8000548 <__aeabi_f2d>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	e9cd 2300 	strd	r2, r3, [sp]
 8002d62:	4623      	mov	r3, r4
 8002d64:	4a41      	ldr	r2, [pc, #260]	; (8002e6c <drawGNSS+0x21c>)
 8002d66:	2114      	movs	r1, #20
 8002d68:	483f      	ldr	r0, [pc, #252]	; (8002e68 <drawGNSS+0x218>)
 8002d6a:	f7ff fdff 	bl	800296c <npf_snprintf>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4618      	mov	r0, r3
 8002d72:	f006 fb3b 	bl	80093ec <lcd_print>

		lcd_SetCursor(1, LCD_row_Height * 6);
 8002d76:	2166      	movs	r1, #102	; 0x66
 8002d78:	2001      	movs	r0, #1
 8002d7a:	f006 fa81 	bl	8009280 <lcd_SetCursor>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "%dkph HD:%d", getGroundSpeed_kph(), getMotionHeading_deg()));
 8002d7e:	f000 fe31 	bl	80039e4 <getGroundSpeed_kph>
 8002d82:	4603      	mov	r3, r0
 8002d84:	461c      	mov	r4, r3
 8002d86:	f000 fe55 	bl	8003a34 <getMotionHeading_deg>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	4623      	mov	r3, r4
 8002d90:	4a37      	ldr	r2, [pc, #220]	; (8002e70 <drawGNSS+0x220>)
 8002d92:	2114      	movs	r1, #20
 8002d94:	4834      	ldr	r0, [pc, #208]	; (8002e68 <drawGNSS+0x218>)
 8002d96:	f7ff fde9 	bl	800296c <npf_snprintf>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f006 fb25 	bl	80093ec <lcd_print>
		GNSSNewData = false;
 8002da2:	4b2f      	ldr	r3, [pc, #188]	; (8002e60 <drawGNSS+0x210>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
	}

	//GNSS Age
	lcd_clearLines((LCD_row_Height * 6) + 2, LCD_row_Height * 7);
 8002da8:	2177      	movs	r1, #119	; 0x77
 8002daa:	2068      	movs	r0, #104	; 0x68
 8002dac:	f006 fc24 	bl	80095f8 <lcd_clearLines>
	lcd_SetCursor(2, LCD_row_Height * 7);
 8002db0:	2177      	movs	r1, #119	; 0x77
 8002db2:	2002      	movs	r0, #2
 8002db4:	f006 fa64 	bl	8009280 <lcd_SetCursor>
	if (GNSSlastPacketAge < 90) {
 8002db8:	4b2e      	ldr	r3, [pc, #184]	; (8002e74 <drawGNSS+0x224>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b59      	cmp	r3, #89	; 0x59
 8002dbe:	d80b      	bhi.n	8002dd8 <drawGNSS+0x188>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%lus", GNSSlastPacketAge));
 8002dc0:	4b2c      	ldr	r3, [pc, #176]	; (8002e74 <drawGNSS+0x224>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a2c      	ldr	r2, [pc, #176]	; (8002e78 <drawGNSS+0x228>)
 8002dc6:	2114      	movs	r1, #20
 8002dc8:	4827      	ldr	r0, [pc, #156]	; (8002e68 <drawGNSS+0x218>)
 8002dca:	f7ff fdcf 	bl	800296c <npf_snprintf>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f006 fb0b 	bl	80093ec <lcd_print>
	} else if (GNSSlastPacketAge < 3600) {
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%.1fm", (float) GNSSlastPacketAge / 60.0f));
	} else {
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%.1fh", (float) GNSSlastPacketAge / 3600.0f));
	}
}
 8002dd6:	e03b      	b.n	8002e50 <drawGNSS+0x200>
	} else if (GNSSlastPacketAge < 3600) {
 8002dd8:	4b26      	ldr	r3, [pc, #152]	; (8002e74 <drawGNSS+0x224>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8002de0:	d21b      	bcs.n	8002e1a <drawGNSS+0x1ca>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%.1fm", (float) GNSSlastPacketAge / 60.0f));
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <drawGNSS+0x224>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	ee07 3a90 	vmov	s15, r3
 8002dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dee:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002e7c <drawGNSS+0x22c>
 8002df2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002df6:	ee16 0a90 	vmov	r0, s13
 8002dfa:	f7fd fba5 	bl	8000548 <__aeabi_f2d>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	e9cd 2300 	strd	r2, r3, [sp]
 8002e06:	4a1e      	ldr	r2, [pc, #120]	; (8002e80 <drawGNSS+0x230>)
 8002e08:	2114      	movs	r1, #20
 8002e0a:	4817      	ldr	r0, [pc, #92]	; (8002e68 <drawGNSS+0x218>)
 8002e0c:	f7ff fdae 	bl	800296c <npf_snprintf>
 8002e10:	4603      	mov	r3, r0
 8002e12:	4618      	mov	r0, r3
 8002e14:	f006 faea 	bl	80093ec <lcd_print>
}
 8002e18:	e01a      	b.n	8002e50 <drawGNSS+0x200>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%.1fh", (float) GNSSlastPacketAge / 3600.0f));
 8002e1a:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <drawGNSS+0x224>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	ee07 3a90 	vmov	s15, r3
 8002e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e26:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002e84 <drawGNSS+0x234>
 8002e2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002e2e:	ee16 0a90 	vmov	r0, s13
 8002e32:	f7fd fb89 	bl	8000548 <__aeabi_f2d>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	e9cd 2300 	strd	r2, r3, [sp]
 8002e3e:	4a12      	ldr	r2, [pc, #72]	; (8002e88 <drawGNSS+0x238>)
 8002e40:	2114      	movs	r1, #20
 8002e42:	4809      	ldr	r0, [pc, #36]	; (8002e68 <drawGNSS+0x218>)
 8002e44:	f7ff fd92 	bl	800296c <npf_snprintf>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f006 face 	bl	80093ec <lcd_print>
}
 8002e50:	bf00      	nop
 8002e52:	3704      	adds	r7, #4
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd90      	pop	{r4, r7, pc}
 8002e58:	9999999a 	.word	0x9999999a
 8002e5c:	4058f999 	.word	0x4058f999
 8002e60:	20000004 	.word	0x20000004
 8002e64:	0800c3b4 	.word	0x0800c3b4
 8002e68:	20000d6c 	.word	0x20000d6c
 8002e6c:	0800c3bc 	.word	0x0800c3bc
 8002e70:	0800c3d0 	.word	0x0800c3d0
 8002e74:	2000039c 	.word	0x2000039c
 8002e78:	0800c3dc 	.word	0x0800c3dc
 8002e7c:	42700000 	.word	0x42700000
 8002e80:	0800c3e8 	.word	0x0800c3e8
 8002e84:	45610000 	.word	0x45610000
 8002e88:	0800c3f4 	.word	0x0800c3f4

08002e8c <setTimeGNSS>:

void setTimeGNSS() {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sTime.Hours = GNSS_getHour();
 8002e92:	f000 fd0b 	bl	80038ac <GNSS_getHour>
 8002e96:	4603      	mov	r3, r0
 8002e98:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = GNSS_getMin();
 8002e9a:	f000 fd13 	bl	80038c4 <GNSS_getMin>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = GNSS_getSec();
 8002ea2:	f000 fd1b 	bl	80038dc <GNSS_getSec>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	71bb      	strb	r3, [r7, #6]
	sDate.Year = (uint8_t) (GNSS_getYear() - (uint16_t) 2000);
 8002eaa:	f000 fcdb 	bl	8003864 <GNSS_getYear>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	3330      	adds	r3, #48	; 0x30
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	70fb      	strb	r3, [r7, #3]
	sDate.Month = GNSS_getMonth();
 8002eb8:	f000 fce0 	bl	800387c <GNSS_getMonth>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	707b      	strb	r3, [r7, #1]
	sDate.Date = GNSS_getDay();
 8002ec0:	f000 fce8 	bl	8003894 <GNSS_getDay>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	70bb      	strb	r3, [r7, #2]
	sDate.WeekDay = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	703b      	strb	r3, [r7, #0]

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002ecc:	1d3b      	adds	r3, r7, #4
 8002ece:	2200      	movs	r2, #0
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4806      	ldr	r0, [pc, #24]	; (8002eec <setTimeGNSS+0x60>)
 8002ed4:	f004 fbe7 	bl	80076a6 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002ed8:	463b      	mov	r3, r7
 8002eda:	2200      	movs	r2, #0
 8002edc:	4619      	mov	r1, r3
 8002ede:	4803      	ldr	r0, [pc, #12]	; (8002eec <setTimeGNSS+0x60>)
 8002ee0:	f004 fcda 	bl	8007898 <HAL_RTC_SetDate>
}
 8002ee4:	bf00      	nop
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	200002a8 	.word	0x200002a8

08002ef0 <startADC>:

static void startADC() {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
	if (ADCrunning) {
 8002ef4:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <startADC+0x2c>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10c      	bne.n	8002f18 <startADC+0x28>
		//ADC already running
		return;
	}

	ADCrunning = true;
 8002efe:	4b07      	ldr	r3, [pc, #28]	; (8002f1c <startADC+0x2c>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002f04:	217f      	movs	r1, #127	; 0x7f
 8002f06:	4806      	ldr	r0, [pc, #24]	; (8002f20 <startADC+0x30>)
 8002f08:	f002 fbd2 	bl	80056b0 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_raw, adc_Channels);
 8002f0c:	2203      	movs	r2, #3
 8002f0e:	4905      	ldr	r1, [pc, #20]	; (8002f24 <startADC+0x34>)
 8002f10:	4803      	ldr	r0, [pc, #12]	; (8002f20 <startADC+0x30>)
 8002f12:	f001 fc91 	bl	8004838 <HAL_ADC_Start_DMA>
 8002f16:	e000      	b.n	8002f1a <startADC+0x2a>
		return;
 8002f18:	bf00      	nop
}
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	20000378 	.word	0x20000378
 8002f20:	200001fc 	.word	0x200001fc
 8002f24:	20000384 	.word	0x20000384

08002f28 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 8002f30:	4822      	ldr	r0, [pc, #136]	; (8002fbc <HAL_ADC_ConvCpltCallback+0x94>)
 8002f32:	f001 fd05 	bl	8004940 <HAL_ADC_Stop_DMA>

	uint32_t vref = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(ADC_raw[2], ADC_RESOLUTION_12B);
 8002f36:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <HAL_ADC_ConvCpltCallback+0x98>)
 8002f38:	881b      	ldrh	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002f40:	fb02 f303 	mul.w	r3, r2, r3
 8002f44:	4a1f      	ldr	r2, [pc, #124]	; (8002fc4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8002f46:	8892      	ldrh	r2, [r2, #4]
 8002f48:	b292      	uxth	r2, r2
 8002f4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]

	//solarmV = ADC_raw[0];
	superCapmV = ((uint32_t) ADC_raw[0] * vref * 2) / 4095UL;
 8002f50:	4b1c      	ldr	r3, [pc, #112]	; (8002fc4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8002f52:	881b      	ldrh	r3, [r3, #0]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
 8002f5e:	005a      	lsls	r2, r3, #1
 8002f60:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002f62:	fba3 1302 	umull	r1, r3, r3, r2
 8002f66:	1ad2      	subs	r2, r2, r3
 8002f68:	0852      	lsrs	r2, r2, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	0adb      	lsrs	r3, r3, #11
 8002f6e:	4a17      	ldr	r2, [pc, #92]	; (8002fcc <HAL_ADC_ConvCpltCallback+0xa4>)
 8002f70:	6013      	str	r3, [r2, #0]

	//Temperature, Magic code from Datasheet
	tempC = __HAL_ADC_CALC_TEMPERATURE(vref, ADC_raw[1], ADC_RESOLUTION_12B);
 8002f72:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8002f74:	885b      	ldrh	r3, [r3, #2]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	fb02 f303 	mul.w	r3, r2, r3
 8002f80:	4a13      	ldr	r2, [pc, #76]	; (8002fd0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8002f82:	fba2 2303 	umull	r2, r3, r2, r3
 8002f86:	099b      	lsrs	r3, r3, #6
 8002f88:	461a      	mov	r2, r3
 8002f8a:	4b12      	ldr	r3, [pc, #72]	; (8002fd4 <HAL_ADC_ConvCpltCallback+0xac>)
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	2264      	movs	r2, #100	; 0x64
 8002f92:	fb03 f202 	mul.w	r2, r3, r2
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <HAL_ADC_ConvCpltCallback+0xb0>)
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <HAL_ADC_ConvCpltCallback+0xac>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	1acb      	subs	r3, r1, r3
 8002fa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8002fa6:	331e      	adds	r3, #30
 8002fa8:	4a0c      	ldr	r2, [pc, #48]	; (8002fdc <HAL_ADC_ConvCpltCallback+0xb4>)
 8002faa:	6013      	str	r3, [r2, #0]

	ADCrunning = false;
 8002fac:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <HAL_ADC_ConvCpltCallback+0xb8>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	200001fc 	.word	0x200001fc
 8002fc0:	1fff75aa 	.word	0x1fff75aa
 8002fc4:	20000384 	.word	0x20000384
 8002fc8:	00100101 	.word	0x00100101
 8002fcc:	2000037c 	.word	0x2000037c
 8002fd0:	057619f1 	.word	0x057619f1
 8002fd4:	1fff75a8 	.word	0x1fff75a8
 8002fd8:	1fff75ca 	.word	0x1fff75ca
 8002fdc:	20000380 	.word	0x20000380
 8002fe0:	20000378 	.word	0x20000378

08002fe4 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	guiTimer++;
 8002fec:	4b07      	ldr	r3, [pc, #28]	; (800300c <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	4a06      	ldr	r2, [pc, #24]	; (800300c <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 8002ff4:	6013      	str	r3, [r2, #0]
	GNSSlastPacketAge++;
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 8002ffe:	6013      	str	r3, [r2, #0]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	2000038c 	.word	0x2000038c
 8003010:	2000039c 	.word	0x2000039c

08003014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800301a:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <HAL_MspInit+0x44>)
 800301c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800301e:	4a0e      	ldr	r2, [pc, #56]	; (8003058 <HAL_MspInit+0x44>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6613      	str	r3, [r2, #96]	; 0x60
 8003026:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <HAL_MspInit+0x44>)
 8003028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <HAL_MspInit+0x44>)
 8003034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003036:	4a08      	ldr	r2, [pc, #32]	; (8003058 <HAL_MspInit+0x44>)
 8003038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303c:	6593      	str	r3, [r2, #88]	; 0x58
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <HAL_MspInit+0x44>)
 8003040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000

0800305c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b09e      	sub	sp, #120	; 0x78
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003074:	f107 0310 	add.w	r3, r7, #16
 8003078:	2254      	movs	r2, #84	; 0x54
 800307a:	2100      	movs	r1, #0
 800307c:	4618      	mov	r0, r3
 800307e:	f006 fc5d 	bl	800993c <memset>
  if(hadc->Instance==ADC1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a33      	ldr	r2, [pc, #204]	; (8003154 <HAL_ADC_MspInit+0xf8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d15f      	bne.n	800314c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800308c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003090:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003092:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003096:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003098:	f107 0310 	add.w	r3, r7, #16
 800309c:	4618      	mov	r0, r3
 800309e:	f003 ff8f 	bl	8006fc0 <HAL_RCCEx_PeriphCLKConfig>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80030a8:	f7fe fb2c 	bl	8001704 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80030ac:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <HAL_ADC_MspInit+0xfc>)
 80030ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b0:	4a29      	ldr	r2, [pc, #164]	; (8003158 <HAL_ADC_MspInit+0xfc>)
 80030b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030b8:	4b27      	ldr	r3, [pc, #156]	; (8003158 <HAL_ADC_MspInit+0xfc>)
 80030ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030c4:	4b24      	ldr	r3, [pc, #144]	; (8003158 <HAL_ADC_MspInit+0xfc>)
 80030c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c8:	4a23      	ldr	r2, [pc, #140]	; (8003158 <HAL_ADC_MspInit+0xfc>)
 80030ca:	f043 0301 	orr.w	r3, r3, #1
 80030ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030d0:	4b21      	ldr	r3, [pc, #132]	; (8003158 <HAL_ADC_MspInit+0xfc>)
 80030d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	60bb      	str	r3, [r7, #8]
 80030da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80030dc:	2302      	movs	r3, #2
 80030de:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80030e0:	230b      	movs	r3, #11
 80030e2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80030ec:	4619      	mov	r1, r3
 80030ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030f2:	f002 fe85 	bl	8005e00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80030f6:	4b19      	ldr	r3, [pc, #100]	; (800315c <HAL_ADC_MspInit+0x100>)
 80030f8:	4a19      	ldr	r2, [pc, #100]	; (8003160 <HAL_ADC_MspInit+0x104>)
 80030fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80030fc:	4b17      	ldr	r3, [pc, #92]	; (800315c <HAL_ADC_MspInit+0x100>)
 80030fe:	2200      	movs	r2, #0
 8003100:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003102:	4b16      	ldr	r3, [pc, #88]	; (800315c <HAL_ADC_MspInit+0x100>)
 8003104:	2200      	movs	r2, #0
 8003106:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003108:	4b14      	ldr	r3, [pc, #80]	; (800315c <HAL_ADC_MspInit+0x100>)
 800310a:	2200      	movs	r2, #0
 800310c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800310e:	4b13      	ldr	r3, [pc, #76]	; (800315c <HAL_ADC_MspInit+0x100>)
 8003110:	2280      	movs	r2, #128	; 0x80
 8003112:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003114:	4b11      	ldr	r3, [pc, #68]	; (800315c <HAL_ADC_MspInit+0x100>)
 8003116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800311a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800311c:	4b0f      	ldr	r3, [pc, #60]	; (800315c <HAL_ADC_MspInit+0x100>)
 800311e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003122:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003124:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_ADC_MspInit+0x100>)
 8003126:	2200      	movs	r2, #0
 8003128:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800312a:	4b0c      	ldr	r3, [pc, #48]	; (800315c <HAL_ADC_MspInit+0x100>)
 800312c:	2200      	movs	r2, #0
 800312e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003130:	480a      	ldr	r0, [pc, #40]	; (800315c <HAL_ADC_MspInit+0x100>)
 8003132:	f002 fc2f 	bl	8005994 <HAL_DMA_Init>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800313c:	f7fe fae2 	bl	8001704 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a06      	ldr	r2, [pc, #24]	; (800315c <HAL_ADC_MspInit+0x100>)
 8003144:	64da      	str	r2, [r3, #76]	; 0x4c
 8003146:	4a05      	ldr	r2, [pc, #20]	; (800315c <HAL_ADC_MspInit+0x100>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800314c:	bf00      	nop
 800314e:	3778      	adds	r7, #120	; 0x78
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	50040000 	.word	0x50040000
 8003158:	40021000 	.word	0x40021000
 800315c:	20000260 	.word	0x20000260
 8003160:	40020008 	.word	0x40020008

08003164 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b098      	sub	sp, #96	; 0x60
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800316c:	f107 030c 	add.w	r3, r7, #12
 8003170:	2254      	movs	r2, #84	; 0x54
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f006 fbe1 	bl	800993c <memset>
  if(hrtc->Instance==RTC)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a13      	ldr	r2, [pc, #76]	; (80031cc <HAL_RTC_MspInit+0x68>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d11f      	bne.n	80031c4 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003188:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800318a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800318e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003190:	f107 030c 	add.w	r3, r7, #12
 8003194:	4618      	mov	r0, r3
 8003196:	f003 ff13 	bl	8006fc0 <HAL_RCCEx_PeriphCLKConfig>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80031a0:	f7fe fab0 	bl	8001704 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80031a4:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <HAL_RTC_MspInit+0x6c>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031aa:	4a09      	ldr	r2, [pc, #36]	; (80031d0 <HAL_RTC_MspInit+0x6c>)
 80031ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80031b4:	2200      	movs	r2, #0
 80031b6:	2100      	movs	r1, #0
 80031b8:	2003      	movs	r0, #3
 80031ba:	f002 fbb4 	bl	8005926 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80031be:	2003      	movs	r0, #3
 80031c0:	f002 fbcd 	bl	800595e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80031c4:	bf00      	nop
 80031c6:	3760      	adds	r7, #96	; 0x60
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40002800 	.word	0x40002800
 80031d0:	40021000 	.word	0x40021000

080031d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031dc:	f107 0314 	add.w	r3, r7, #20
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	605a      	str	r2, [r3, #4]
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	60da      	str	r2, [r3, #12]
 80031ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a2c      	ldr	r2, [pc, #176]	; (80032a4 <HAL_SPI_MspInit+0xd0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d151      	bne.n	800329a <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031f6:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <HAL_SPI_MspInit+0xd4>)
 80031f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fa:	4a2b      	ldr	r2, [pc, #172]	; (80032a8 <HAL_SPI_MspInit+0xd4>)
 80031fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003200:	6613      	str	r3, [r2, #96]	; 0x60
 8003202:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <HAL_SPI_MspInit+0xd4>)
 8003204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800320e:	4b26      	ldr	r3, [pc, #152]	; (80032a8 <HAL_SPI_MspInit+0xd4>)
 8003210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003212:	4a25      	ldr	r2, [pc, #148]	; (80032a8 <HAL_SPI_MspInit+0xd4>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800321a:	4b23      	ldr	r3, [pc, #140]	; (80032a8 <HAL_SPI_MspInit+0xd4>)
 800321c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003226:	23e0      	movs	r3, #224	; 0xe0
 8003228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322a:	2302      	movs	r3, #2
 800322c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	2300      	movs	r3, #0
 8003230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003232:	2303      	movs	r3, #3
 8003234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003236:	2305      	movs	r3, #5
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800323a:	f107 0314 	add.w	r3, r7, #20
 800323e:	4619      	mov	r1, r3
 8003240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003244:	f002 fddc 	bl	8005e00 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003248:	4b18      	ldr	r3, [pc, #96]	; (80032ac <HAL_SPI_MspInit+0xd8>)
 800324a:	4a19      	ldr	r2, [pc, #100]	; (80032b0 <HAL_SPI_MspInit+0xdc>)
 800324c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800324e:	4b17      	ldr	r3, [pc, #92]	; (80032ac <HAL_SPI_MspInit+0xd8>)
 8003250:	2201      	movs	r2, #1
 8003252:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003254:	4b15      	ldr	r3, [pc, #84]	; (80032ac <HAL_SPI_MspInit+0xd8>)
 8003256:	2210      	movs	r2, #16
 8003258:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800325a:	4b14      	ldr	r3, [pc, #80]	; (80032ac <HAL_SPI_MspInit+0xd8>)
 800325c:	2200      	movs	r2, #0
 800325e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003260:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_SPI_MspInit+0xd8>)
 8003262:	2280      	movs	r2, #128	; 0x80
 8003264:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003266:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_SPI_MspInit+0xd8>)
 8003268:	2200      	movs	r2, #0
 800326a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800326c:	4b0f      	ldr	r3, [pc, #60]	; (80032ac <HAL_SPI_MspInit+0xd8>)
 800326e:	2200      	movs	r2, #0
 8003270:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003272:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_SPI_MspInit+0xd8>)
 8003274:	2200      	movs	r2, #0
 8003276:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <HAL_SPI_MspInit+0xd8>)
 800327a:	2200      	movs	r2, #0
 800327c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800327e:	480b      	ldr	r0, [pc, #44]	; (80032ac <HAL_SPI_MspInit+0xd8>)
 8003280:	f002 fb88 	bl	8005994 <HAL_DMA_Init>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800328a:	f7fe fa3b 	bl	8001704 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a06      	ldr	r2, [pc, #24]	; (80032ac <HAL_SPI_MspInit+0xd8>)
 8003292:	655a      	str	r2, [r3, #84]	; 0x54
 8003294:	4a05      	ldr	r2, [pc, #20]	; (80032ac <HAL_SPI_MspInit+0xd8>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800329a:	bf00      	nop
 800329c:	3728      	adds	r7, #40	; 0x28
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40013000 	.word	0x40013000
 80032a8:	40021000 	.word	0x40021000
 80032ac:	20000330 	.word	0x20000330
 80032b0:	40020030 	.word	0x40020030

080032b4 <LL_LPUART_IsActiveFlag_ORE>:
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d101      	bne.n	80032cc <LL_LPUART_IsActiveFlag_ORE+0x18>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <LL_LPUART_IsActiveFlag_ORE+0x1a>
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <LL_LPUART_IsActiveFlag_WKUP>:
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_WUF) == (USART_ISR_WUF)) ? 1UL : 0UL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032ee:	d101      	bne.n	80032f4 <LL_LPUART_IsActiveFlag_WKUP+0x1a>
 80032f0:	2301      	movs	r3, #1
 80032f2:	e000      	b.n	80032f6 <LL_LPUART_IsActiveFlag_WKUP+0x1c>
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	370c      	adds	r7, #12
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr

08003302 <LL_LPUART_ClearFlag_ORE>:
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2208      	movs	r2, #8
 800330e:	621a      	str	r2, [r3, #32]
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <LL_LPUART_ClearFlag_WKUP>:
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_WUCF);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800332a:	621a      	str	r2, [r3, #32]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_LPUART_IsEnabledIT_WKUP>:
  * @rmtoll CR3          WUFIE         LL_LPUART_IsEnabledIT_WKUP
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_WKUP(const USART_TypeDef *LPUARTx)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR3, USART_CR3_WUFIE) == (USART_CR3_WUFIE)) ? 1UL : 0UL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334c:	d101      	bne.n	8003352 <LL_LPUART_IsEnabledIT_WKUP+0x1a>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <LL_LPUART_IsEnabledIT_WKUP+0x1c>
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003364:	e7fe      	b.n	8003364 <NMI_Handler+0x4>

08003366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003366:	b480      	push	{r7}
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800336a:	e7fe      	b.n	800336a <HardFault_Handler+0x4>

0800336c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003370:	e7fe      	b.n	8003370 <MemManage_Handler+0x4>

08003372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003376:	e7fe      	b.n	8003376 <BusFault_Handler+0x4>

08003378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800337c:	e7fe      	b.n	800337c <UsageFault_Handler+0x4>

0800337e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ac:	f000 fea6 	bl	80040fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80033b8:	4802      	ldr	r0, [pc, #8]	; (80033c4 <RTC_WKUP_IRQHandler+0x10>)
 80033ba:	f004 fca7 	bl	8007d0c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80033be:	bf00      	nop
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	200002a8 	.word	0x200002a8

080033c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033cc:	4803      	ldr	r0, [pc, #12]	; (80033dc <DMA1_Channel1_IRQHandler+0x14>)
 80033ce:	f002 fc37 	bl	8005c40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  lastWakeUpSource = WKUP_RTC;
 80033d2:	4b03      	ldr	r3, [pc, #12]	; (80033e0 <DMA1_Channel1_IRQHandler+0x18>)
 80033d4:	2202      	movs	r2, #2
 80033d6:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	20000260 	.word	0x20000260
 80033e0:	20000390 	.word	0x20000390

080033e4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <DMA1_Channel3_IRQHandler+0x10>)
 80033ea:	f002 fc29 	bl	8005c40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20000330 	.word	0x20000330

080033f8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  /* USER CODE BEGIN LPUART1_IRQn 1 */
	if (LL_LPUART_IsActiveFlag_WKUP(LPUART1) && LL_LPUART_IsEnabledIT_WKUP(LPUART1)) {
 80033fc:	480f      	ldr	r0, [pc, #60]	; (800343c <LPUART1_IRQHandler+0x44>)
 80033fe:	f7ff ff6c 	bl	80032da <LL_LPUART_IsActiveFlag_WKUP>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00b      	beq.n	8003420 <LPUART1_IRQHandler+0x28>
 8003408:	480c      	ldr	r0, [pc, #48]	; (800343c <LPUART1_IRQHandler+0x44>)
 800340a:	f7ff ff95 	bl	8003338 <LL_LPUART_IsEnabledIT_WKUP>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <LPUART1_IRQHandler+0x28>
		LL_LPUART_ClearFlag_WKUP(LPUART1);
 8003414:	4809      	ldr	r0, [pc, #36]	; (800343c <LPUART1_IRQHandler+0x44>)
 8003416:	f7ff ff81 	bl	800331c <LL_LPUART_ClearFlag_WKUP>
		lastWakeUpSource = WKUP_LPUART;
 800341a:	4b09      	ldr	r3, [pc, #36]	; (8003440 <LPUART1_IRQHandler+0x48>)
 800341c:	2201      	movs	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
	}
	if (LL_LPUART_IsActiveFlag_ORE(LPUART1)) { //If overrun has occured
 8003420:	4806      	ldr	r0, [pc, #24]	; (800343c <LPUART1_IRQHandler+0x44>)
 8003422:	f7ff ff47 	bl	80032b4 <LL_LPUART_IsActiveFlag_ORE>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d002      	beq.n	8003432 <LPUART1_IRQHandler+0x3a>
		LL_LPUART_ClearFlag_ORE(LPUART1);
 800342c:	4803      	ldr	r0, [pc, #12]	; (800343c <LPUART1_IRQHandler+0x44>)
 800342e:	f7ff ff68 	bl	8003302 <LL_LPUART_ClearFlag_ORE>
	}

	LPUART_CharReception_Callback();
 8003432:	f000 fdc5 	bl	8003fc0 <LPUART_CharReception_Callback>
  /* USER CODE END LPUART1_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40008000 	.word	0x40008000
 8003440:	20000390 	.word	0x20000390

08003444 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return 1;
 8003448:	2301      	movs	r3, #1
}
 800344a:	4618      	mov	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <_kill>:

int _kill(int pid, int sig)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800345e:	f006 fa35 	bl	80098cc <__errno>
 8003462:	4603      	mov	r3, r0
 8003464:	2216      	movs	r2, #22
 8003466:	601a      	str	r2, [r3, #0]
  return -1;
 8003468:	f04f 33ff 	mov.w	r3, #4294967295
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <_exit>:

void _exit (int status)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800347c:	f04f 31ff 	mov.w	r1, #4294967295
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ffe7 	bl	8003454 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003486:	e7fe      	b.n	8003486 <_exit+0x12>

08003488 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	e00a      	b.n	80034b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800349a:	f3af 8000 	nop.w
 800349e:	4601      	mov	r1, r0
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	1c5a      	adds	r2, r3, #1
 80034a4:	60ba      	str	r2, [r7, #8]
 80034a6:	b2ca      	uxtb	r2, r1
 80034a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	3301      	adds	r3, #1
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	dbf0      	blt.n	800349a <_read+0x12>
  }

  return len;
 80034b8:	687b      	ldr	r3, [r7, #4]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3718      	adds	r7, #24
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e009      	b.n	80034e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	60ba      	str	r2, [r7, #8]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	3301      	adds	r3, #1
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	dbf1      	blt.n	80034d4 <_write+0x12>
  }
  return len;
 80034f0:	687b      	ldr	r3, [r7, #4]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <_close>:

int _close(int file)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003502:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003512:	b480      	push	{r7}
 8003514:	b083      	sub	sp, #12
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003522:	605a      	str	r2, [r3, #4]
  return 0;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <_isatty>:

int _isatty(int file)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800353a:	2301      	movs	r3, #1
}
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800356c:	4a14      	ldr	r2, [pc, #80]	; (80035c0 <_sbrk+0x5c>)
 800356e:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <_sbrk+0x60>)
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003578:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <_sbrk+0x64>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d102      	bne.n	8003586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003580:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <_sbrk+0x64>)
 8003582:	4a12      	ldr	r2, [pc, #72]	; (80035cc <_sbrk+0x68>)
 8003584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003586:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <_sbrk+0x64>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	429a      	cmp	r2, r3
 8003592:	d207      	bcs.n	80035a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003594:	f006 f99a 	bl	80098cc <__errno>
 8003598:	4603      	mov	r3, r0
 800359a:	220c      	movs	r2, #12
 800359c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800359e:	f04f 33ff 	mov.w	r3, #4294967295
 80035a2:	e009      	b.n	80035b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035a4:	4b08      	ldr	r3, [pc, #32]	; (80035c8 <_sbrk+0x64>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <_sbrk+0x64>)
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	4a05      	ldr	r2, [pc, #20]	; (80035c8 <_sbrk+0x64>)
 80035b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035b6:	68fb      	ldr	r3, [r7, #12]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20010000 	.word	0x20010000
 80035c4:	00000400 	.word	0x00000400
 80035c8:	20000394 	.word	0x20000394
 80035cc:	20000da0 	.word	0x20000da0

080035d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80035d0:	b480      	push	{r7}
 80035d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80035d4:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <SystemInit+0x20>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035da:	4a05      	ldr	r2, [pc, #20]	; (80035f0 <SystemInit+0x20>)
 80035dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80035f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800362c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035f8:	f7ff ffea 	bl	80035d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 80035fc:	480c      	ldr	r0, [pc, #48]	; (8003630 <LoopForever+0x6>)
  ldr r1, =_edata
 80035fe:	490d      	ldr	r1, [pc, #52]	; (8003634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003600:	4a0d      	ldr	r2, [pc, #52]	; (8003638 <LoopForever+0xe>)
  movs r3, #0
 8003602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003604:	e002      	b.n	800360c <LoopCopyDataInit>

08003606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800360a:	3304      	adds	r3, #4

0800360c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800360c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800360e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003610:	d3f9      	bcc.n	8003606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003612:	4a0a      	ldr	r2, [pc, #40]	; (800363c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003614:	4c0a      	ldr	r4, [pc, #40]	; (8003640 <LoopForever+0x16>)
  movs r3, #0
 8003616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003618:	e001      	b.n	800361e <LoopFillZerobss>

0800361a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800361a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800361c:	3204      	adds	r2, #4

0800361e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800361e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003620:	d3fb      	bcc.n	800361a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003622:	f006 f959 	bl	80098d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003626:	f7fd fda1 	bl	800116c <main>

0800362a <LoopForever>:

LoopForever:
    b LoopForever
 800362a:	e7fe      	b.n	800362a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800362c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003634:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003638:	0800d03c 	.word	0x0800d03c
  ldr r2, =_sbss
 800363c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003640:	20000d9c 	.word	0x20000d9c

08003644 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003644:	e7fe      	b.n	8003644 <ADC1_IRQHandler>

08003646 <LL_LPUART_Enable>:
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f043 0201 	orr.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	601a      	str	r2, [r3, #0]
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <LL_LPUART_EnableInStopMode>:
{
 8003666:	b480      	push	{r7}
 8003668:	b089      	sub	sp, #36	; 0x24
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_UESM);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	60bb      	str	r3, [r7, #8]
   return(result);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f043 0302 	orr.w	r3, r3, #2
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69fa      	ldr	r2, [r7, #28]
 8003686:	61ba      	str	r2, [r7, #24]
 8003688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368a:	6979      	ldr	r1, [r7, #20]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	613b      	str	r3, [r7, #16]
   return(result);
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e9      	bne.n	800366e <LL_LPUART_EnableInStopMode+0x8>
}
 800369a:	bf00      	nop
 800369c:	bf00      	nop
 800369e:	3724      	adds	r7, #36	; 0x24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <LL_LPUART_SetWKUPType>:
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_WUS, Type);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	609a      	str	r2, [r3, #8]
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <LL_LPUART_IsActiveFlag_RXNE>:
{
 80036ce:	b480      	push	{r7}
 80036d0:	b083      	sub	sp, #12
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	69db      	ldr	r3, [r3, #28]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b20      	cmp	r3, #32
 80036e0:	d101      	bne.n	80036e6 <LL_LPUART_IsActiveFlag_RXNE+0x18>
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <LL_LPUART_IsActiveFlag_RXNE+0x1a>
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <LL_LPUART_IsActiveFlag_TC>:
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003704:	2b40      	cmp	r3, #64	; 0x40
 8003706:	d101      	bne.n	800370c <LL_LPUART_IsActiveFlag_TC+0x18>
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <LL_LPUART_IsActiveFlag_TC+0x1a>
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <LL_LPUART_IsActiveFlag_TXE>:
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372a:	2b80      	cmp	r3, #128	; 0x80
 800372c:	d101      	bne.n	8003732 <LL_LPUART_IsActiveFlag_TXE+0x18>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <LL_LPUART_IsActiveFlag_TXE+0x1a>
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_LPUART_IsActiveFlag_REACK>:
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003754:	d101      	bne.n	800375a <LL_LPUART_IsActiveFlag_REACK+0x1a>
 8003756:	2301      	movs	r3, #1
 8003758:	e000      	b.n	800375c <LL_LPUART_IsActiveFlag_REACK+0x1c>
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <LL_LPUART_ClearFlag_ORE>:
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2208      	movs	r2, #8
 8003774:	621a      	str	r2, [r3, #32]
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <LL_LPUART_ClearFlag_WKUP>:
{
 8003782:	b480      	push	{r7}
 8003784:	b083      	sub	sp, #12
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_WUCF);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003790:	621a      	str	r2, [r3, #32]
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <LL_LPUART_EnableIT_RXNE>:
{
 800379e:	b480      	push	{r7}
 80037a0:	b089      	sub	sp, #36	; 0x24
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f043 0320 	orr.w	r3, r3, #32
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	61ba      	str	r2, [r7, #24]
 80037c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	6979      	ldr	r1, [r7, #20]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	e841 2300 	strex	r3, r2, [r1]
 80037ca:	613b      	str	r3, [r7, #16]
   return(result);
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1e9      	bne.n	80037a6 <LL_LPUART_EnableIT_RXNE+0x8>
}
 80037d2:	bf00      	nop
 80037d4:	bf00      	nop
 80037d6:	3724      	adds	r7, #36	; 0x24
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <LL_LPUART_EnableIT_WKUP>:
{
 80037e0:	b480      	push	{r7}
 80037e2:	b089      	sub	sp, #36	; 0x24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_WUFIE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3308      	adds	r3, #8
 80037ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	e853 3f00 	ldrex	r3, [r3]
 80037f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037fc:	61fb      	str	r3, [r7, #28]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3308      	adds	r3, #8
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	61ba      	str	r2, [r7, #24]
 8003806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003808:	6979      	ldr	r1, [r7, #20]
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	e841 2300 	strex	r3, r2, [r1]
 8003810:	613b      	str	r3, [r7, #16]
   return(result);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e7      	bne.n	80037e8 <LL_LPUART_EnableIT_WKUP+0x8>
}
 8003818:	bf00      	nop
 800381a:	bf00      	nop
 800381c:	3724      	adds	r7, #36	; 0x24
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <LL_LPUART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_LPUART_ReceiveData8
  * @param  LPUARTx LPUART Instance
  * @retval Time Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_LPUART_ReceiveData8(const USART_TypeDef *LPUARTx)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003832:	b29b      	uxth	r3, r3
 8003834:	b2db      	uxtb	r3, r3
}
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <LL_LPUART_TransmitData8>:
  * @param  LPUARTx LPUART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	460b      	mov	r3, r1
 800384c:	70fb      	strb	r3, [r7, #3]
  LPUARTx->TDR = Value;
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	b29a      	uxth	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <GNSS_getYear>:
static void GNSS_Set_Power(enum GNSS_rate);
static void LPUART_Transmit(uint8_t *pData, uint16_t Size, uint32_t Timeout);

//Functions
//Time
uint16_t GNSS_getYear() {
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.year;
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <GNSS_getYear+0x14>)
 800386a:	889b      	ldrh	r3, [r3, #4]
}
 800386c:	4618      	mov	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	2000040c 	.word	0x2000040c

0800387c <GNSS_getMonth>:
uint8_t GNSS_getMonth() {
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.month;
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <GNSS_getMonth+0x14>)
 8003882:	799b      	ldrb	r3, [r3, #6]
}
 8003884:	4618      	mov	r0, r3
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	2000040c 	.word	0x2000040c

08003894 <GNSS_getDay>:
uint8_t GNSS_getDay() {
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.day;
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <GNSS_getDay+0x14>)
 800389a:	79db      	ldrb	r3, [r3, #7]
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	2000040c 	.word	0x2000040c

080038ac <GNSS_getHour>:
uint8_t GNSS_getHour() {
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.hour;
 80038b0:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <GNSS_getHour+0x14>)
 80038b2:	7a1b      	ldrb	r3, [r3, #8]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	2000040c 	.word	0x2000040c

080038c4 <GNSS_getMin>:
uint8_t GNSS_getMin() {
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.min;
 80038c8:	4b03      	ldr	r3, [pc, #12]	; (80038d8 <GNSS_getMin+0x14>)
 80038ca:	7a5b      	ldrb	r3, [r3, #9]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	2000040c 	.word	0x2000040c

080038dc <GNSS_getSec>:
uint8_t GNSS_getSec() {
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.sec;
 80038e0:	4b03      	ldr	r3, [pc, #12]	; (80038f0 <GNSS_getSec+0x14>)
 80038e2:	7a9b      	ldrb	r3, [r3, #10]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	2000040c 	.word	0x2000040c
 80038f4:	00000000 	.word	0x00000000

080038f8 <getLat>:

//Location
float getLat() {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
	return ((float) ubx_nav_pvt.lat_deg) * 1e-7;
 80038fc:	4b10      	ldr	r3, [pc, #64]	; (8003940 <getLat+0x48>)
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	ee07 3a90 	vmov	s15, r3
 8003904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003908:	ee17 0a90 	vmov	r0, s15
 800390c:	f7fc fe1c 	bl	8000548 <__aeabi_f2d>
 8003910:	a309      	add	r3, pc, #36	; (adr r3, 8003938 <getLat+0x40>)
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	f7fc fe6f 	bl	80005f8 <__aeabi_dmul>
 800391a:	4602      	mov	r2, r0
 800391c:	460b      	mov	r3, r1
 800391e:	4610      	mov	r0, r2
 8003920:	4619      	mov	r1, r3
 8003922:	f7fd f941 	bl	8000ba8 <__aeabi_d2f>
 8003926:	4603      	mov	r3, r0
 8003928:	ee07 3a90 	vmov	s15, r3
}
 800392c:	eeb0 0a67 	vmov.f32	s0, s15
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	f3af 8000 	nop.w
 8003938:	9abcaf48 	.word	0x9abcaf48
 800393c:	3e7ad7f2 	.word	0x3e7ad7f2
 8003940:	2000040c 	.word	0x2000040c
 8003944:	00000000 	.word	0x00000000

08003948 <getLong>:

float getLong() {
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
	return ((float) ubx_nav_pvt.lon_deg) * 1e-7;
 800394c:	4b10      	ldr	r3, [pc, #64]	; (8003990 <getLong+0x48>)
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	ee07 3a90 	vmov	s15, r3
 8003954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003958:	ee17 0a90 	vmov	r0, s15
 800395c:	f7fc fdf4 	bl	8000548 <__aeabi_f2d>
 8003960:	a309      	add	r3, pc, #36	; (adr r3, 8003988 <getLong+0x40>)
 8003962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003966:	f7fc fe47 	bl	80005f8 <__aeabi_dmul>
 800396a:	4602      	mov	r2, r0
 800396c:	460b      	mov	r3, r1
 800396e:	4610      	mov	r0, r2
 8003970:	4619      	mov	r1, r3
 8003972:	f7fd f919 	bl	8000ba8 <__aeabi_d2f>
 8003976:	4603      	mov	r3, r0
 8003978:	ee07 3a90 	vmov	s15, r3
}
 800397c:	eeb0 0a67 	vmov.f32	s0, s15
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	f3af 8000 	nop.w
 8003988:	9abcaf48 	.word	0x9abcaf48
 800398c:	3e7ad7f2 	.word	0x3e7ad7f2
 8003990:	2000040c 	.word	0x2000040c
 8003994:	00000000 	.word	0x00000000

08003998 <getHAcc>:

float getHAcc() {
 8003998:	b580      	push	{r7, lr}
 800399a:	af00      	add	r7, sp, #0
	return (float)ubx_nav_pvt.hacc * 1e-3;
 800399c:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <getHAcc+0x48>)
 800399e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a0:	ee07 3a90 	vmov	s15, r3
 80039a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a8:	ee17 0a90 	vmov	r0, s15
 80039ac:	f7fc fdcc 	bl	8000548 <__aeabi_f2d>
 80039b0:	a309      	add	r3, pc, #36	; (adr r3, 80039d8 <getHAcc+0x40>)
 80039b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b6:	f7fc fe1f 	bl	80005f8 <__aeabi_dmul>
 80039ba:	4602      	mov	r2, r0
 80039bc:	460b      	mov	r3, r1
 80039be:	4610      	mov	r0, r2
 80039c0:	4619      	mov	r1, r3
 80039c2:	f7fd f8f1 	bl	8000ba8 <__aeabi_d2f>
 80039c6:	4603      	mov	r3, r0
 80039c8:	ee07 3a90 	vmov	s15, r3
}
 80039cc:	eeb0 0a67 	vmov.f32	s0, s15
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	f3af 8000 	nop.w
 80039d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80039dc:	3f50624d 	.word	0x3f50624d
 80039e0:	2000040c 	.word	0x2000040c

080039e4 <getGroundSpeed_kph>:

uint8_t getGroundSpeed_kph() {
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
	uint32_t returnSpeed = ((ubx_nav_pvt.gspeed / 1000) * 3600) / 1000; // km/h
 80039ea:	4b10      	ldr	r3, [pc, #64]	; (8003a2c <getGroundSpeed_kph+0x48>)
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	4a10      	ldr	r2, [pc, #64]	; (8003a30 <getGroundSpeed_kph+0x4c>)
 80039f0:	fb82 1203 	smull	r1, r2, r2, r3
 80039f4:	1192      	asrs	r2, r2, #6
 80039f6:	17db      	asrs	r3, r3, #31
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80039fe:	fb02 f303 	mul.w	r3, r2, r3
 8003a02:	4a0b      	ldr	r2, [pc, #44]	; (8003a30 <getGroundSpeed_kph+0x4c>)
 8003a04:	fb82 1203 	smull	r1, r2, r2, r3
 8003a08:	1192      	asrs	r2, r2, #6
 8003a0a:	17db      	asrs	r3, r3, #31
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	607b      	str	r3, [r7, #4]
	if (returnSpeed > 255) {
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2bff      	cmp	r3, #255	; 0xff
 8003a14:	d901      	bls.n	8003a1a <getGroundSpeed_kph+0x36>
		return (uint8_t) 255;
 8003a16:	23ff      	movs	r3, #255	; 0xff
 8003a18:	e001      	b.n	8003a1e <getGroundSpeed_kph+0x3a>
	}
	return (uint8_t) (returnSpeed);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	b2db      	uxtb	r3, r3
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	2000040c 	.word	0x2000040c
 8003a30:	10624dd3 	.word	0x10624dd3

08003a34 <getMotionHeading_deg>:
uint8_t getMotionHeading_deg() {
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
	return (uint8_t) (ubx_nav_pvt.headmot / 10000UL);
 8003a38:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <getMotionHeading_deg+0x20>)
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <getMotionHeading_deg+0x24>)
 8003a40:	fba3 2302 	umull	r2, r3, r3, r2
 8003a44:	0b5b      	lsrs	r3, r3, #13
 8003a46:	b2db      	uxtb	r3, r3
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	2000040c 	.word	0x2000040c
 8003a58:	d1b71759 	.word	0xd1b71759

08003a5c <getNumSatellites>:

//Status
uint8_t getNumSatellites() {
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.numsv;
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <getNumSatellites+0x14>)
 8003a62:	7ddb      	ldrb	r3, [r3, #23]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	2000040c 	.word	0x2000040c

08003a74 <getFixType>:

enum GNSS_FixType getFixType() {
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
	return (enum GNSS_FixType) ubx_nav_pvt.fix;
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <getFixType+0x14>)
 8003a7a:	7d1b      	ldrb	r3, [r3, #20]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	2000040c 	.word	0x2000040c

08003a8c <isTimeFullyResolved>:

bool isGnssFixOk() {
	return ubx_nav_pvt.flags & gnssFixOKmask;
}

bool isTimeFullyResolved() {
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.valid & timeFullyResolved;
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <isTimeFullyResolved+0x20>)
 8003a92:	7adb      	ldrb	r3, [r3, #11]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	bf14      	ite	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	2300      	moveq	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	2000040c 	.word	0x2000040c

08003ab0 <GNSS_Init>:

void GNSS_Init() {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
	LL_LPUART_Enable(LPUART1);
 8003ab4:	480c      	ldr	r0, [pc, #48]	; (8003ae8 <GNSS_Init+0x38>)
 8003ab6:	f7ff fdc6 	bl	8003646 <LL_LPUART_Enable>
//Turn off
	HAL_GPIO_WritePin(GNSS_EXT_GPIO_Port, GNSS_EXT_Pin, GPIO_PIN_RESET); //DISABLE GNSS
 8003aba:	2200      	movs	r2, #0
 8003abc:	2110      	movs	r1, #16
 8003abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ac2:	f002 fb07 	bl	80060d4 <HAL_GPIO_WritePin>
//Enable Interrupts
	LL_LPUART_EnableIT_RXNE(LPUART1);
 8003ac6:	4808      	ldr	r0, [pc, #32]	; (8003ae8 <GNSS_Init+0x38>)
 8003ac8:	f7ff fe69 	bl	800379e <LL_LPUART_EnableIT_RXNE>
	LL_LPUART_SetWKUPType(LPUART1, LL_LPUART_WAKEUP_ON_RXNE); //Set the wake-up event type : specify wake-up on RXNE flag
 8003acc:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
 8003ad0:	4805      	ldr	r0, [pc, #20]	; (8003ae8 <GNSS_Init+0x38>)
 8003ad2:	f7ff fde9 	bl	80036a8 <LL_LPUART_SetWKUPType>
	GNSS_Config();
 8003ad6:	f000 f89b 	bl	8003c10 <GNSS_Config>
	GNSSAlive = false;
 8003ada:	4b04      	ldr	r3, [pc, #16]	; (8003aec <GNSS_Init+0x3c>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	701a      	strb	r2, [r3, #0]
	GNSS_Sleep();
 8003ae0:	f000 f8e8 	bl	8003cb4 <GNSS_Sleep>
}
 8003ae4:	bf00      	nop
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	40008000 	.word	0x40008000
 8003aec:	200003a0 	.word	0x200003a0

08003af0 <GNSS_Prep_Stop>:

void GNSS_Prep_Stop() {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
	while (LL_LPUART_IsActiveFlag_RXNE(LPUART1)) { //Empty RX buffer
 8003af4:	e006      	b.n	8003b04 <GNSS_Prep_Stop+0x14>
		parse(LL_LPUART_ReceiveData8(LPUART1));
 8003af6:	4811      	ldr	r0, [pc, #68]	; (8003b3c <GNSS_Prep_Stop+0x4c>)
 8003af8:	f7ff fe95 	bl	8003826 <LL_LPUART_ReceiveData8>
 8003afc:	4603      	mov	r3, r0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 f922 	bl	8003d48 <parse>
	while (LL_LPUART_IsActiveFlag_RXNE(LPUART1)) { //Empty RX buffer
 8003b04:	480d      	ldr	r0, [pc, #52]	; (8003b3c <GNSS_Prep_Stop+0x4c>)
 8003b06:	f7ff fde2 	bl	80036ce <LL_LPUART_IsActiveFlag_RXNE>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f2      	bne.n	8003af6 <GNSS_Prep_Stop+0x6>
	}
	LL_LPUART_ClearFlag_ORE(LPUART1);
 8003b10:	480a      	ldr	r0, [pc, #40]	; (8003b3c <GNSS_Prep_Stop+0x4c>)
 8003b12:	f7ff fe29 	bl	8003768 <LL_LPUART_ClearFlag_ORE>
	/* Make sure that LPUART is ready to receive */
	while (LL_LPUART_IsActiveFlag_REACK(LPUART1) == 0) {
 8003b16:	bf00      	nop
 8003b18:	4808      	ldr	r0, [pc, #32]	; (8003b3c <GNSS_Prep_Stop+0x4c>)
 8003b1a:	f7ff fe11 	bl	8003740 <LL_LPUART_IsActiveFlag_REACK>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f9      	beq.n	8003b18 <GNSS_Prep_Stop+0x28>
	}
	LL_LPUART_ClearFlag_WKUP(LPUART1);
 8003b24:	4805      	ldr	r0, [pc, #20]	; (8003b3c <GNSS_Prep_Stop+0x4c>)
 8003b26:	f7ff fe2c 	bl	8003782 <LL_LPUART_ClearFlag_WKUP>
	LL_LPUART_EnableIT_WKUP(LPUART1);
 8003b2a:	4804      	ldr	r0, [pc, #16]	; (8003b3c <GNSS_Prep_Stop+0x4c>)
 8003b2c:	f7ff fe58 	bl	80037e0 <LL_LPUART_EnableIT_WKUP>
	LL_LPUART_EnableInStopMode(LPUART1);
 8003b30:	4802      	ldr	r0, [pc, #8]	; (8003b3c <GNSS_Prep_Stop+0x4c>)
 8003b32:	f7ff fd98 	bl	8003666 <LL_LPUART_EnableInStopMode>
}
 8003b36:	bf00      	nop
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40008000 	.word	0x40008000

08003b40 <GNSS_Power>:

void GNSS_Power() {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
	switch (GNSSlastRate) {
 8003b44:	4b1c      	ldr	r3, [pc, #112]	; (8003bb8 <GNSS_Power+0x78>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d013      	beq.n	8003b76 <GNSS_Power+0x36>
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	dc2f      	bgt.n	8003bb2 <GNSS_Power+0x72>
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <GNSS_Power+0x1c>
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d004      	beq.n	8003b64 <GNSS_Power+0x24>
		if (superCapmV < mV_GNSS_OFF) {
			GNSS_Set_Power(GNSS_STOP);
		}
		break;
	}
}
 8003b5a:	e02a      	b.n	8003bb2 <GNSS_Power+0x72>
		GNSS_Set_Power(GNSS_STOP);
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f000 f831 	bl	8003bc4 <GNSS_Set_Power>
		break;
 8003b62:	e026      	b.n	8003bb2 <GNSS_Power+0x72>
		if (superCapmV > mV_GNSS_ON) {
 8003b64:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <GNSS_Power+0x7c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8003b6c:	d91e      	bls.n	8003bac <GNSS_Power+0x6c>
			GNSS_Set_Power(GNSS_ON);
 8003b6e:	2002      	movs	r0, #2
 8003b70:	f000 f828 	bl	8003bc4 <GNSS_Set_Power>
		break;
 8003b74:	e01a      	b.n	8003bac <GNSS_Power+0x6c>
		if ((superCapmV < (mV_GNSS_ON - 150)) && (getFixType() >= FIX_3D) && (GNSSlastPacketAge < 2)) {
 8003b76:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <GNSS_Power+0x7c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f640 5279 	movw	r2, #3449	; 0xd79
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d80b      	bhi.n	8003b9a <GNSS_Power+0x5a>
 8003b82:	f7ff ff77 	bl	8003a74 <getFixType>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d906      	bls.n	8003b9a <GNSS_Power+0x5a>
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <GNSS_Power+0x80>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d802      	bhi.n	8003b9a <GNSS_Power+0x5a>
			GNSS_Set_Power(GNSS_STOP);
 8003b94:	2001      	movs	r0, #1
 8003b96:	f000 f815 	bl	8003bc4 <GNSS_Set_Power>
		if (superCapmV < mV_GNSS_OFF) {
 8003b9a:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <GNSS_Power+0x7c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8003ba2:	d205      	bcs.n	8003bb0 <GNSS_Power+0x70>
			GNSS_Set_Power(GNSS_STOP);
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	f000 f80d 	bl	8003bc4 <GNSS_Set_Power>
		break;
 8003baa:	e001      	b.n	8003bb0 <GNSS_Power+0x70>
		break;
 8003bac:	bf00      	nop
 8003bae:	e000      	b.n	8003bb2 <GNSS_Power+0x72>
		break;
 8003bb0:	bf00      	nop
}
 8003bb2:	bf00      	nop
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000398 	.word	0x20000398
 8003bbc:	2000037c 	.word	0x2000037c
 8003bc0:	2000039c 	.word	0x2000039c

08003bc4 <GNSS_Set_Power>:

static void GNSS_Set_Power(enum GNSS_rate newRate) {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	71fb      	strb	r3, [r7, #7]
	if (newRate == GNSSlastRate) {
 8003bce:	4b0e      	ldr	r3, [pc, #56]	; (8003c08 <GNSS_Set_Power+0x44>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	79fa      	ldrb	r2, [r7, #7]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d011      	beq.n	8003bfe <GNSS_Set_Power+0x3a>
		return;
	}
	if (newRate == GNSS_ON) {
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d105      	bne.n	8003bec <GNSS_Set_Power+0x28>
		//Run
		GNSS_Config();
 8003be0:	f000 f816 	bl	8003c10 <GNSS_Config>
		GNSSlastRate = GNSS_ON;
 8003be4:	4b08      	ldr	r3, [pc, #32]	; (8003c08 <GNSS_Set_Power+0x44>)
 8003be6:	2202      	movs	r2, #2
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	e009      	b.n	8003c00 <GNSS_Set_Power+0x3c>
	} else {
		//Assume GNSS_STOP
		GNSSAlive = false;
 8003bec:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <GNSS_Set_Power+0x48>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
		GNSS_Sleep();
 8003bf2:	f000 f85f 	bl	8003cb4 <GNSS_Sleep>
		GNSSlastRate = GNSS_STOP;
 8003bf6:	4b04      	ldr	r3, [pc, #16]	; (8003c08 <GNSS_Set_Power+0x44>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]
 8003bfc:	e000      	b.n	8003c00 <GNSS_Set_Power+0x3c>
		return;
 8003bfe:	bf00      	nop
	}
}
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000398 	.word	0x20000398
 8003c0c:	200003a0 	.word	0x200003a0

08003c10 <GNSS_Config>:

void GNSS_Config() {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
	//Wakeup
	HAL_GPIO_WritePin(GNSS_EXT_GPIO_Port, GNSS_EXT_Pin, GPIO_PIN_SET);
 8003c14:	2201      	movs	r2, #1
 8003c16:	2110      	movs	r1, #16
 8003c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c1c:	f002 fa5a 	bl	80060d4 <HAL_GPIO_WritePin>
	LPUART_Transmit((uint8_t*) 0xff, 1, HAL_MAX_DELAY);
 8003c20:	f04f 32ff 	mov.w	r2, #4294967295
 8003c24:	2101      	movs	r1, #1
 8003c26:	20ff      	movs	r0, #255	; 0xff
 8003c28:	f000 f9e0 	bl	8003fec <LPUART_Transmit>
	HAL_Delay(500);
 8003c2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c30:	f7fd fd44 	bl	80016bc <HAL_Delay>

	//Turn off a bunch of stuff
	LPUART_Transmit((uint8_t*) &UBX_NAV_GGA_OFF, sizeof(UBX_NAV_GGA_OFF), HAL_MAX_DELAY);
 8003c34:	f04f 32ff 	mov.w	r2, #4294967295
 8003c38:	2110      	movs	r1, #16
 8003c3a:	4817      	ldr	r0, [pc, #92]	; (8003c98 <GNSS_Config+0x88>)
 8003c3c:	f000 f9d6 	bl	8003fec <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_GLL_OFF, sizeof(UBX_NAV_GLL_OFF), HAL_MAX_DELAY);
 8003c40:	f04f 32ff 	mov.w	r2, #4294967295
 8003c44:	2110      	movs	r1, #16
 8003c46:	4815      	ldr	r0, [pc, #84]	; (8003c9c <GNSS_Config+0x8c>)
 8003c48:	f000 f9d0 	bl	8003fec <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_GSA_OFF, sizeof(UBX_NAV_GSA_OFF), HAL_MAX_DELAY);
 8003c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c50:	2110      	movs	r1, #16
 8003c52:	4813      	ldr	r0, [pc, #76]	; (8003ca0 <GNSS_Config+0x90>)
 8003c54:	f000 f9ca 	bl	8003fec <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_GSV_OFF, sizeof(UBX_NAV_GSV_OFF), HAL_MAX_DELAY);
 8003c58:	f04f 32ff 	mov.w	r2, #4294967295
 8003c5c:	2110      	movs	r1, #16
 8003c5e:	4811      	ldr	r0, [pc, #68]	; (8003ca4 <GNSS_Config+0x94>)
 8003c60:	f000 f9c4 	bl	8003fec <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_GSV_OFF, sizeof(UBX_NAV_GSV_OFF), HAL_MAX_DELAY);
 8003c64:	f04f 32ff 	mov.w	r2, #4294967295
 8003c68:	2110      	movs	r1, #16
 8003c6a:	480e      	ldr	r0, [pc, #56]	; (8003ca4 <GNSS_Config+0x94>)
 8003c6c:	f000 f9be 	bl	8003fec <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_RMC_OFF, sizeof(UBX_NAV_RMC_OFF), HAL_MAX_DELAY);
 8003c70:	f04f 32ff 	mov.w	r2, #4294967295
 8003c74:	2110      	movs	r1, #16
 8003c76:	480c      	ldr	r0, [pc, #48]	; (8003ca8 <GNSS_Config+0x98>)
 8003c78:	f000 f9b8 	bl	8003fec <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_VTG_OFF, sizeof(UBX_NAV_VTG_OFF), HAL_MAX_DELAY);
 8003c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c80:	2110      	movs	r1, #16
 8003c82:	480a      	ldr	r0, [pc, #40]	; (8003cac <GNSS_Config+0x9c>)
 8003c84:	f000 f9b2 	bl	8003fec <LPUART_Transmit>
	//Enable PVT message
	LPUART_Transmit((uint8_t*) &UBX_NAV_PVT_ON, sizeof(UBX_NAV_PVT_ON), HAL_MAX_DELAY);
 8003c88:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8c:	2110      	movs	r1, #16
 8003c8e:	4808      	ldr	r0, [pc, #32]	; (8003cb0 <GNSS_Config+0xa0>)
 8003c90:	f000 f9ac 	bl	8003fec <LPUART_Transmit>
}
 8003c94:	bf00      	nop
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	0800cbe0 	.word	0x0800cbe0
 8003c9c:	0800cbf0 	.word	0x0800cbf0
 8003ca0:	0800cc00 	.word	0x0800cc00
 8003ca4:	0800cc10 	.word	0x0800cc10
 8003ca8:	0800cc20 	.word	0x0800cc20
 8003cac:	0800cc30 	.word	0x0800cc30
 8003cb0:	0800cc40 	.word	0x0800cc40

08003cb4 <GNSS_Sleep>:

void GNSS_Sleep() {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
	LPUART_Transmit((uint8_t*) &UBX_CFG_PWR_STNBY, sizeof(UBX_CFG_PWR_STNBY), HAL_MAX_DELAY);
 8003cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbc:	2110      	movs	r1, #16
 8003cbe:	4805      	ldr	r0, [pc, #20]	; (8003cd4 <GNSS_Sleep+0x20>)
 8003cc0:	f000 f994 	bl	8003fec <LPUART_Transmit>
	HAL_GPIO_WritePin(GNSS_EXT_GPIO_Port, GNSS_EXT_Pin, GPIO_PIN_RESET);
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2110      	movs	r1, #16
 8003cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ccc:	f002 fa02 	bl	80060d4 <HAL_GPIO_WritePin>
}
 8003cd0:	bf00      	nop
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	0800cbd0 	.word	0x0800cbd0

08003cd8 <Checksum>:

//Parsing
uint16_t Checksum(uint8_t *data, uint16_t len) {
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	807b      	strh	r3, [r7, #2]
	if (!data) {
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <Checksum+0x16>
		return 0;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e024      	b.n	8003d38 <Checksum+0x60>
	}
	uint8_t checksum_buffer[2] = { 0, 0 };
 8003cee:	2300      	movs	r3, #0
 8003cf0:	813b      	strh	r3, [r7, #8]
	for (unsigned int i = 0; i < len; i++) {
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	e00f      	b.n	8003d18 <Checksum+0x40>
		checksum_buffer[0] += data[i];
 8003cf8:	7a3a      	ldrb	r2, [r7, #8]
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	440b      	add	r3, r1
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	4413      	add	r3, r2
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	723b      	strb	r3, [r7, #8]
		checksum_buffer[1] += checksum_buffer[0];
 8003d08:	7a7a      	ldrb	r2, [r7, #9]
 8003d0a:	7a3b      	ldrb	r3, [r7, #8]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	727b      	strb	r3, [r7, #9]
	for (unsigned int i = 0; i < len; i++) {
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	3301      	adds	r3, #1
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	887b      	ldrh	r3, [r7, #2]
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d3eb      	bcc.n	8003cf8 <Checksum+0x20>
	}
	return ((uint16_t) checksum_buffer_[1]) << 8 | checksum_buffer_[0];
 8003d20:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <Checksum+0x6c>)
 8003d22:	785b      	ldrb	r3, [r3, #1]
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	b21a      	sxth	r2, r3
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <Checksum+0x6c>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	b21b      	sxth	r3, r3
 8003d32:	4313      	orrs	r3, r2
 8003d34:	b21b      	sxth	r3, r3
 8003d36:	b29b      	uxth	r3, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	200003a8 	.word	0x200003a8

08003d48 <parse>:

void parse(uint8_t byte_read) {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	71fb      	strb	r3, [r7, #7]
	/* Identify the packet header */
	if (parser_pos_ < 2) {
 8003d52:	4b91      	ldr	r3, [pc, #580]	; (8003f98 <parse+0x250>)
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d814      	bhi.n	8003d86 <parse+0x3e>
		if (byte_read == UBX_HEADER_[parser_pos_]) {
 8003d5c:	4b8e      	ldr	r3, [pc, #568]	; (8003f98 <parse+0x250>)
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	4b8d      	ldr	r3, [pc, #564]	; (8003f9c <parse+0x254>)
 8003d66:	5c9b      	ldrb	r3, [r3, r2]
 8003d68:	79fa      	ldrb	r2, [r7, #7]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d107      	bne.n	8003d7e <parse+0x36>
			parser_pos_++;
 8003d6e:	4b8a      	ldr	r3, [pc, #552]	; (8003f98 <parse+0x250>)
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3301      	adds	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	4b87      	ldr	r3, [pc, #540]	; (8003f98 <parse+0x250>)
 8003d7a:	801a      	strh	r2, [r3, #0]
 8003d7c:	e108      	b.n	8003f90 <parse+0x248>
		} else {
			parser_pos_ = 0;
 8003d7e:	4b86      	ldr	r3, [pc, #536]	; (8003f98 <parse+0x250>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	801a      	strh	r2, [r3, #0]
 8003d84:	e104      	b.n	8003f90 <parse+0x248>
		}
		/* Message class */
	} else if (parser_pos_ == 2) {
 8003d86:	4b84      	ldr	r3, [pc, #528]	; (8003f98 <parse+0x250>)
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d116      	bne.n	8003dbe <parse+0x76>
		if (byte_read == UBX_NAV_CLASS_) {
 8003d90:	2201      	movs	r2, #1
 8003d92:	79fb      	ldrb	r3, [r7, #7]
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d10e      	bne.n	8003db6 <parse+0x6e>
			pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003d98:	4b7f      	ldr	r3, [pc, #508]	; (8003f98 <parse+0x250>)
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b02      	subs	r3, #2
 8003da0:	497f      	ldr	r1, [pc, #508]	; (8003fa0 <parse+0x258>)
 8003da2:	79fa      	ldrb	r2, [r7, #7]
 8003da4:	54ca      	strb	r2, [r1, r3]
			parser_pos_++;
 8003da6:	4b7c      	ldr	r3, [pc, #496]	; (8003f98 <parse+0x250>)
 8003da8:	881b      	ldrh	r3, [r3, #0]
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3301      	adds	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	4b79      	ldr	r3, [pc, #484]	; (8003f98 <parse+0x250>)
 8003db2:	801a      	strh	r2, [r3, #0]
 8003db4:	e0ec      	b.n	8003f90 <parse+0x248>
		} else {
			parser_pos_ = 0;
 8003db6:	4b78      	ldr	r3, [pc, #480]	; (8003f98 <parse+0x250>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	801a      	strh	r2, [r3, #0]
 8003dbc:	e0e8      	b.n	8003f90 <parse+0x248>
		}
		/* Message ID */
	} else if (parser_pos_ == 3) {
 8003dbe:	4b76      	ldr	r3, [pc, #472]	; (8003f98 <parse+0x250>)
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d116      	bne.n	8003df6 <parse+0xae>
		if (byte_read == UBX_NAV_PVT) {
 8003dc8:	2207      	movs	r2, #7
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d10e      	bne.n	8003dee <parse+0xa6>
			pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003dd0:	4b71      	ldr	r3, [pc, #452]	; (8003f98 <parse+0x250>)
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b02      	subs	r3, #2
 8003dd8:	4971      	ldr	r1, [pc, #452]	; (8003fa0 <parse+0x258>)
 8003dda:	79fa      	ldrb	r2, [r7, #7]
 8003ddc:	54ca      	strb	r2, [r1, r3]
			parser_pos_++;
 8003dde:	4b6e      	ldr	r3, [pc, #440]	; (8003f98 <parse+0x250>)
 8003de0:	881b      	ldrh	r3, [r3, #0]
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3301      	adds	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	4b6b      	ldr	r3, [pc, #428]	; (8003f98 <parse+0x250>)
 8003dea:	801a      	strh	r2, [r3, #0]
 8003dec:	e0d0      	b.n	8003f90 <parse+0x248>
		} else {
			parser_pos_ = 0;
 8003dee:	4b6a      	ldr	r3, [pc, #424]	; (8003f98 <parse+0x250>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	801a      	strh	r2, [r3, #0]
 8003df4:	e0cc      	b.n	8003f90 <parse+0x248>
		}
		/* Messgae length */
	} else if (parser_pos_ == 4) {
 8003df6:	4b68      	ldr	r3, [pc, #416]	; (8003f98 <parse+0x250>)
 8003df8:	881b      	ldrh	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d111      	bne.n	8003e24 <parse+0xdc>
		msg_len_buffer_[0] = byte_read;
 8003e00:	4a68      	ldr	r2, [pc, #416]	; (8003fa4 <parse+0x25c>)
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	7013      	strb	r3, [r2, #0]
		pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003e06:	4b64      	ldr	r3, [pc, #400]	; (8003f98 <parse+0x250>)
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b02      	subs	r3, #2
 8003e0e:	4964      	ldr	r1, [pc, #400]	; (8003fa0 <parse+0x258>)
 8003e10:	79fa      	ldrb	r2, [r7, #7]
 8003e12:	54ca      	strb	r2, [r1, r3]
		parser_pos_++;
 8003e14:	4b60      	ldr	r3, [pc, #384]	; (8003f98 <parse+0x250>)
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	4b5e      	ldr	r3, [pc, #376]	; (8003f98 <parse+0x250>)
 8003e20:	801a      	strh	r2, [r3, #0]
 8003e22:	e0b5      	b.n	8003f90 <parse+0x248>
		/* Message length */
	} else if (parser_pos_ == 5) {
 8003e24:	4b5c      	ldr	r3, [pc, #368]	; (8003f98 <parse+0x250>)
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b05      	cmp	r3, #5
 8003e2c:	d12a      	bne.n	8003e84 <parse+0x13c>
		msg_len_buffer_[1] = byte_read;
 8003e2e:	4a5d      	ldr	r2, [pc, #372]	; (8003fa4 <parse+0x25c>)
 8003e30:	79fb      	ldrb	r3, [r7, #7]
 8003e32:	7053      	strb	r3, [r2, #1]
		msg_len_ = ((uint16_t) msg_len_buffer_[1]) << 8 | msg_len_buffer_[0];
 8003e34:	4b5b      	ldr	r3, [pc, #364]	; (8003fa4 <parse+0x25c>)
 8003e36:	785b      	ldrb	r3, [r3, #1]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	b21a      	sxth	r2, r3
 8003e3e:	4b59      	ldr	r3, [pc, #356]	; (8003fa4 <parse+0x25c>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	b21b      	sxth	r3, r3
 8003e46:	4313      	orrs	r3, r2
 8003e48:	b21b      	sxth	r3, r3
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	4b56      	ldr	r3, [pc, #344]	; (8003fa8 <parse+0x260>)
 8003e4e:	801a      	strh	r2, [r3, #0]
		pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003e50:	4b51      	ldr	r3, [pc, #324]	; (8003f98 <parse+0x250>)
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b02      	subs	r3, #2
 8003e58:	4951      	ldr	r1, [pc, #324]	; (8003fa0 <parse+0x258>)
 8003e5a:	79fa      	ldrb	r2, [r7, #7]
 8003e5c:	54ca      	strb	r2, [r1, r3]
		if (msg_len_ == UBX_PVT_LEN_) {
 8003e5e:	235c      	movs	r3, #92	; 0x5c
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	4b51      	ldr	r3, [pc, #324]	; (8003fa8 <parse+0x260>)
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d107      	bne.n	8003e7c <parse+0x134>
			parser_pos_++;
 8003e6c:	4b4a      	ldr	r3, [pc, #296]	; (8003f98 <parse+0x250>)
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3301      	adds	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	4b48      	ldr	r3, [pc, #288]	; (8003f98 <parse+0x250>)
 8003e78:	801a      	strh	r2, [r3, #0]
		} else {
			parser_pos_ = 0;
		}
		return;
 8003e7a:	e089      	b.n	8003f90 <parse+0x248>
			parser_pos_ = 0;
 8003e7c:	4b46      	ldr	r3, [pc, #280]	; (8003f98 <parse+0x250>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	801a      	strh	r2, [r3, #0]
		return;
 8003e82:	e085      	b.n	8003f90 <parse+0x248>
		/* Message payload */
	} else if (parser_pos_ < (msg_len_ + UBX_HEADER_LEN_)) {
 8003e84:	4b44      	ldr	r3, [pc, #272]	; (8003f98 <parse+0x250>)
 8003e86:	881b      	ldrh	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	4b46      	ldr	r3, [pc, #280]	; (8003fa8 <parse+0x260>)
 8003e8e:	881b      	ldrh	r3, [r3, #0]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	4619      	mov	r1, r3
 8003e94:	2306      	movs	r3, #6
 8003e96:	440b      	add	r3, r1
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	da0e      	bge.n	8003eba <parse+0x172>
		pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003e9c:	4b3e      	ldr	r3, [pc, #248]	; (8003f98 <parse+0x250>)
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b02      	subs	r3, #2
 8003ea4:	493e      	ldr	r1, [pc, #248]	; (8003fa0 <parse+0x258>)
 8003ea6:	79fa      	ldrb	r2, [r7, #7]
 8003ea8:	54ca      	strb	r2, [r1, r3]
		parser_pos_++;
 8003eaa:	4b3b      	ldr	r3, [pc, #236]	; (8003f98 <parse+0x250>)
 8003eac:	881b      	ldrh	r3, [r3, #0]
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	4b38      	ldr	r3, [pc, #224]	; (8003f98 <parse+0x250>)
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	e06a      	b.n	8003f90 <parse+0x248>
		/* Checksum */
	} else if (parser_pos_ == (msg_len_ + UBX_HEADER_LEN_)) {
 8003eba:	4b37      	ldr	r3, [pc, #220]	; (8003f98 <parse+0x250>)
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <parse+0x260>)
 8003ec4:	881b      	ldrh	r3, [r3, #0]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	4619      	mov	r1, r3
 8003eca:	2306      	movs	r3, #6
 8003ecc:	440b      	add	r3, r1
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d10a      	bne.n	8003ee8 <parse+0x1a0>
		checksum_buffer_[0] = byte_read;
 8003ed2:	4a36      	ldr	r2, [pc, #216]	; (8003fac <parse+0x264>)
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	7013      	strb	r3, [r2, #0]
		parser_pos_++;
 8003ed8:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <parse+0x250>)
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3301      	adds	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	4b2d      	ldr	r3, [pc, #180]	; (8003f98 <parse+0x250>)
 8003ee4:	801a      	strh	r2, [r3, #0]
 8003ee6:	e053      	b.n	8003f90 <parse+0x248>
	} else {
		checksum_buffer_[1] = byte_read;
 8003ee8:	4a30      	ldr	r2, [pc, #192]	; (8003fac <parse+0x264>)
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	7053      	strb	r3, [r2, #1]
		uint16_t received_checksum = ((uint16_t) checksum_buffer_[1]) << 8 | checksum_buffer_[0];
 8003eee:	4b2f      	ldr	r3, [pc, #188]	; (8003fac <parse+0x264>)
 8003ef0:	785b      	ldrb	r3, [r3, #1]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	b21a      	sxth	r2, r3
 8003ef8:	4b2c      	ldr	r3, [pc, #176]	; (8003fac <parse+0x264>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	b21b      	sxth	r3, r3
 8003f00:	4313      	orrs	r3, r2
 8003f02:	b21b      	sxth	r3, r3
 8003f04:	81fb      	strh	r3, [r7, #14]
		uint16_t computed_checksum = Checksum(pvt_buffer_, msg_len_ + UBX_HEADER_LEN_);
 8003f06:	2306      	movs	r3, #6
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	4b27      	ldr	r3, [pc, #156]	; (8003fa8 <parse+0x260>)
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	4413      	add	r3, r2
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	4619      	mov	r1, r3
 8003f16:	4822      	ldr	r0, [pc, #136]	; (8003fa0 <parse+0x258>)
 8003f18:	f7ff fede 	bl	8003cd8 <Checksum>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	81bb      	strh	r3, [r7, #12]
		if (computed_checksum == received_checksum) {
 8003f20:	89ba      	ldrh	r2, [r7, #12]
 8003f22:	89fb      	ldrh	r3, [r7, #14]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d130      	bne.n	8003f8a <parse+0x242>
			if (pvt_buffer_[20 + UBX_PAYLOAD_OFFSET_] >= FIX_2D) {
 8003f28:	2304      	movs	r3, #4
 8003f2a:	3314      	adds	r3, #20
 8003f2c:	4a1c      	ldr	r2, [pc, #112]	; (8003fa0 <parse+0x258>)
 8003f2e:	5cd3      	ldrb	r3, [r2, r3]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d915      	bls.n	8003f62 <parse+0x21a>
				memcpy(&ubx_nav_pvt, pvt_buffer_ + UBX_PAYLOAD_OFFSET_, UBX_PVT_LEN_);
 8003f36:	2304      	movs	r3, #4
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b19      	ldr	r3, [pc, #100]	; (8003fa0 <parse+0x258>)
 8003f3c:	4413      	add	r3, r2
 8003f3e:	225c      	movs	r2, #92	; 0x5c
 8003f40:	4619      	mov	r1, r3
 8003f42:	481b      	ldr	r0, [pc, #108]	; (8003fb0 <parse+0x268>)
 8003f44:	f005 fcec 	bl	8009920 <memcpy>
				GNSSlastPacketAge = 0;
 8003f48:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <parse+0x26c>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]
				if (isTimeFullyResolved()) {
 8003f4e:	f7ff fd9d 	bl	8003a8c <isTimeFullyResolved>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <parse+0x214>
					setTimeGNSS();
 8003f58:	f7fe ff98 	bl	8002e8c <setTimeGNSS>
				}
				GNSSNewData = true;
 8003f5c:	4b16      	ldr	r3, [pc, #88]	; (8003fb8 <parse+0x270>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	701a      	strb	r2, [r3, #0]
			}
			GNSSAlive = !GNSSAlive;
 8003f62:	4b16      	ldr	r3, [pc, #88]	; (8003fbc <parse+0x274>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	bf14      	ite	ne
 8003f6c:	2301      	movne	r3, #1
 8003f6e:	2300      	moveq	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f083 0301 	eor.w	r3, r3, #1
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <parse+0x274>)
 8003f80:	701a      	strb	r2, [r3, #0]
			parser_pos_ = 0;
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <parse+0x250>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	801a      	strh	r2, [r3, #0]
 8003f88:	e002      	b.n	8003f90 <parse+0x248>
		} else {
			parser_pos_ = 0;
 8003f8a:	4b03      	ldr	r3, [pc, #12]	; (8003f98 <parse+0x250>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	200003a2 	.word	0x200003a2
 8003f9c:	0800cc50 	.word	0x0800cc50
 8003fa0:	200003ac 	.word	0x200003ac
 8003fa4:	200003a4 	.word	0x200003a4
 8003fa8:	200003a6 	.word	0x200003a6
 8003fac:	200003a8 	.word	0x200003a8
 8003fb0:	2000040c 	.word	0x2000040c
 8003fb4:	2000039c 	.word	0x2000039c
 8003fb8:	20000004 	.word	0x20000004
 8003fbc:	200003a0 	.word	0x200003a0

08003fc0 <LPUART_CharReception_Callback>:

void LPUART_CharReception_Callback(void) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
	while (LL_LPUART_IsActiveFlag_RXNE(LPUART1)) {
 8003fc4:	e006      	b.n	8003fd4 <LPUART_CharReception_Callback+0x14>
		parse(LL_LPUART_ReceiveData8(LPUART1));
 8003fc6:	4808      	ldr	r0, [pc, #32]	; (8003fe8 <LPUART_CharReception_Callback+0x28>)
 8003fc8:	f7ff fc2d 	bl	8003826 <LL_LPUART_ReceiveData8>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff feba 	bl	8003d48 <parse>
	while (LL_LPUART_IsActiveFlag_RXNE(LPUART1)) {
 8003fd4:	4804      	ldr	r0, [pc, #16]	; (8003fe8 <LPUART_CharReception_Callback+0x28>)
 8003fd6:	f7ff fb7a 	bl	80036ce <LL_LPUART_IsActiveFlag_RXNE>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1f2      	bne.n	8003fc6 <LPUART_CharReception_Callback+0x6>
	}
}
 8003fe0:	bf00      	nop
 8003fe2:	bf00      	nop
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40008000 	.word	0x40008000

08003fec <LPUART_Transmit>:

static void LPUART_Transmit(uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	607a      	str	r2, [r7, #4]
 8003ff8:	817b      	strh	r3, [r7, #10]
	if ((pData == NULL) || (Size == 0U)) {
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d022      	beq.n	8004046 <LPUART_Transmit+0x5a>
 8004000:	897b      	ldrh	r3, [r7, #10]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d01f      	beq.n	8004046 <LPUART_Transmit+0x5a>
		return;
	}

	while (Size--) {
 8004006:	e011      	b.n	800402c <LPUART_Transmit+0x40>
		/* Wait for TXE flag to be raised */
		while (!LL_LPUART_IsActiveFlag_TXE(LPUART1)) {
 8004008:	bf00      	nop
 800400a:	4811      	ldr	r0, [pc, #68]	; (8004050 <LPUART_Transmit+0x64>)
 800400c:	f7ff fb85 	bl	800371a <LL_LPUART_IsActiveFlag_TXE>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0f9      	beq.n	800400a <LPUART_Transmit+0x1e>
		}
		uint8_t sendThis = (uint8_t) (*pData);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	75fb      	strb	r3, [r7, #23]
		LL_LPUART_TransmitData8(LPUART1, sendThis);
 800401c:	7dfb      	ldrb	r3, [r7, #23]
 800401e:	4619      	mov	r1, r3
 8004020:	480b      	ldr	r0, [pc, #44]	; (8004050 <LPUART_Transmit+0x64>)
 8004022:	f7ff fc0e 	bl	8003842 <LL_LPUART_TransmitData8>
		pData++;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3301      	adds	r3, #1
 800402a:	60fb      	str	r3, [r7, #12]
	while (Size--) {
 800402c:	897b      	ldrh	r3, [r7, #10]
 800402e:	1e5a      	subs	r2, r3, #1
 8004030:	817a      	strh	r2, [r7, #10]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e8      	bne.n	8004008 <LPUART_Transmit+0x1c>
	}

	/* Wait for TC flag to be raised for last char */
	while (!LL_LPUART_IsActiveFlag_TC(LPUART1)) {
 8004036:	bf00      	nop
 8004038:	4805      	ldr	r0, [pc, #20]	; (8004050 <LPUART_Transmit+0x64>)
 800403a:	f7ff fb5b 	bl	80036f4 <LL_LPUART_IsActiveFlag_TC>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f9      	beq.n	8004038 <LPUART_Transmit+0x4c>
 8004044:	e000      	b.n	8004048 <LPUART_Transmit+0x5c>
		return;
 8004046:	bf00      	nop
	}
}
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40008000 	.word	0x40008000

08004054 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800405e:	2003      	movs	r0, #3
 8004060:	f001 fc56 	bl	8005910 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004064:	200f      	movs	r0, #15
 8004066:	f000 f80d 	bl	8004084 <HAL_InitTick>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	71fb      	strb	r3, [r7, #7]
 8004074:	e001      	b.n	800407a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004076:	f7fe ffcd 	bl	8003014 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800407a:	79fb      	ldrb	r3, [r7, #7]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004090:	4b17      	ldr	r3, [pc, #92]	; (80040f0 <HAL_InitTick+0x6c>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d023      	beq.n	80040e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004098:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <HAL_InitTick+0x70>)
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <HAL_InitTick+0x6c>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	4619      	mov	r1, r3
 80040a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ae:	4618      	mov	r0, r3
 80040b0:	f001 fc63 	bl	800597a <HAL_SYSTICK_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10f      	bne.n	80040da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b0f      	cmp	r3, #15
 80040be:	d809      	bhi.n	80040d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040c0:	2200      	movs	r2, #0
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	f04f 30ff 	mov.w	r0, #4294967295
 80040c8:	f001 fc2d 	bl	8005926 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80040cc:	4a0a      	ldr	r2, [pc, #40]	; (80040f8 <HAL_InitTick+0x74>)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	e007      	b.n	80040e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
 80040d8:	e004      	b.n	80040e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	73fb      	strb	r3, [r7, #15]
 80040de:	e001      	b.n	80040e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	2000000c 	.word	0x2000000c
 80040f4:	20000000 	.word	0x20000000
 80040f8:	20000008 	.word	0x20000008

080040fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004100:	4b06      	ldr	r3, [pc, #24]	; (800411c <HAL_IncTick+0x20>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	4b06      	ldr	r3, [pc, #24]	; (8004120 <HAL_IncTick+0x24>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4413      	add	r3, r2
 800410c:	4a04      	ldr	r2, [pc, #16]	; (8004120 <HAL_IncTick+0x24>)
 800410e:	6013      	str	r3, [r2, #0]
}
 8004110:	bf00      	nop
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	2000000c 	.word	0x2000000c
 8004120:	20000468 	.word	0x20000468

08004124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  return uwTick;
 8004128:	4b03      	ldr	r3, [pc, #12]	; (8004138 <HAL_GetTick+0x14>)
 800412a:	681b      	ldr	r3, [r3, #0]
}
 800412c:	4618      	mov	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	20000468 	.word	0x20000468

0800413c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <HAL_SuspendTick+0x1c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a04      	ldr	r2, [pc, #16]	; (8004158 <HAL_SuspendTick+0x1c>)
 8004146:	f023 0302 	bic.w	r3, r3, #2
 800414a:	6013      	str	r3, [r2, #0]
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	e000e010 	.word	0xe000e010

0800415c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_ResumeTick+0x1c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a04      	ldr	r2, [pc, #16]	; (8004178 <HAL_ResumeTick+0x1c>)
 8004166:	f043 0302 	orr.w	r3, r3, #2
 800416a:	6013      	str	r3, [r2, #0]
}
 800416c:	bf00      	nop
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	e000e010 	.word	0xe000e010

0800417c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	609a      	str	r2, [r3, #8]
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
 80041aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	609a      	str	r2, [r3, #8]
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
 80041f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	3360      	adds	r3, #96	; 0x60
 80041f6:	461a      	mov	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	4b08      	ldr	r3, [pc, #32]	; (8004228 <LL_ADC_SetOffset+0x44>)
 8004206:	4013      	ands	r3, r2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	4313      	orrs	r3, r2
 8004214:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800421c:	bf00      	nop
 800421e:	371c      	adds	r7, #28
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	03fff000 	.word	0x03fff000

0800422c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3360      	adds	r3, #96	; 0x60
 800423a:	461a      	mov	r2, r3
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800424c:	4618      	mov	r0, r3
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	3360      	adds	r3, #96	; 0x60
 8004268:	461a      	mov	r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	431a      	orrs	r2, r3
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004282:	bf00      	nop
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	3330      	adds	r3, #48	; 0x30
 80042c4:	461a      	mov	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	f003 030c 	and.w	r3, r3, #12
 80042d0:	4413      	add	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f003 031f 	and.w	r3, r3, #31
 80042de:	211f      	movs	r1, #31
 80042e0:	fa01 f303 	lsl.w	r3, r1, r3
 80042e4:	43db      	mvns	r3, r3
 80042e6:	401a      	ands	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	0e9b      	lsrs	r3, r3, #26
 80042ec:	f003 011f 	and.w	r1, r3, #31
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	fa01 f303 	lsl.w	r3, r1, r3
 80042fa:	431a      	orrs	r2, r3
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004300:	bf00      	nop
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	3314      	adds	r3, #20
 800431c:	461a      	mov	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	0e5b      	lsrs	r3, r3, #25
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	f003 0304 	and.w	r3, r3, #4
 8004328:	4413      	add	r3, r2
 800432a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	0d1b      	lsrs	r3, r3, #20
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	2107      	movs	r1, #7
 800433a:	fa01 f303 	lsl.w	r3, r1, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	401a      	ands	r2, r3
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	0d1b      	lsrs	r3, r3, #20
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	fa01 f303 	lsl.w	r3, r1, r3
 8004350:	431a      	orrs	r2, r3
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800437c:	43db      	mvns	r3, r3
 800437e:	401a      	ands	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f003 0318 	and.w	r3, r3, #24
 8004386:	4908      	ldr	r1, [pc, #32]	; (80043a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004388:	40d9      	lsrs	r1, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	400b      	ands	r3, r1
 800438e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004392:	431a      	orrs	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	0007ffff 	.word	0x0007ffff

080043ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80043bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6093      	str	r3, [r2, #8]
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043e4:	d101      	bne.n	80043ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004408:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800440c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004414:	bf00      	nop
 8004416:	370c      	adds	r7, #12
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004430:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004434:	d101      	bne.n	800443a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004458:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800445c:	f043 0201 	orr.w	r2, r3, #1
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004480:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004484:	f043 0202 	orr.w	r2, r3, #2
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <LL_ADC_IsEnabled+0x18>
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <LL_ADC_IsEnabled+0x1a>
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d101      	bne.n	80044d6 <LL_ADC_IsDisableOngoing+0x18>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <LL_ADC_IsDisableOngoing+0x1a>
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044f8:	f043 0204 	orr.w	r2, r3, #4
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800451c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004520:	f043 0210 	orr.w	r2, r3, #16
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b04      	cmp	r3, #4
 8004546:	d101      	bne.n	800454c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800456a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800456e:	f043 0220 	orr.w	r2, r3, #32
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004576:	bf00      	nop
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b08      	cmp	r3, #8
 8004594:	d101      	bne.n	800459a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045b0:	2300      	movs	r3, #0
 80045b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e12c      	b.n	800481c <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d109      	bne.n	80045e4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7fe fd43 	bl	800305c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fef1 	bl	80043d0 <LL_ADC_IsDeepPowerDownEnabled>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d004      	beq.n	80045fe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fed7 	bl	80043ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff ff0c 	bl	8004420 <LL_ADC_IsInternalRegulatorEnabled>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d115      	bne.n	800463a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff fef0 	bl	80043f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004618:	4b82      	ldr	r3, [pc, #520]	; (8004824 <HAL_ADC_Init+0x27c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	099b      	lsrs	r3, r3, #6
 800461e:	4a82      	ldr	r2, [pc, #520]	; (8004828 <HAL_ADC_Init+0x280>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	099b      	lsrs	r3, r3, #6
 8004626:	3301      	adds	r3, #1
 8004628:	005b      	lsls	r3, r3, #1
 800462a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800462c:	e002      	b.n	8004634 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	3b01      	subs	r3, #1
 8004632:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f9      	bne.n	800462e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff feee 	bl	8004420 <LL_ADC_IsInternalRegulatorEnabled>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10d      	bne.n	8004666 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800464e:	f043 0210 	orr.w	r2, r3, #16
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465a:	f043 0201 	orr.w	r2, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff ff62 	bl	8004534 <LL_ADC_REG_IsConversionOngoing>
 8004670:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	2b00      	cmp	r3, #0
 800467c:	f040 80c5 	bne.w	800480a <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f040 80c1 	bne.w	800480a <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004690:	f043 0202 	orr.w	r2, r3, #2
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff fefb 	bl	8004498 <LL_ADC_IsEnabled>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10b      	bne.n	80046c0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046a8:	4860      	ldr	r0, [pc, #384]	; (800482c <HAL_ADC_Init+0x284>)
 80046aa:	f7ff fef5 	bl	8004498 <LL_ADC_IsEnabled>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d105      	bne.n	80046c0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4619      	mov	r1, r3
 80046ba:	485d      	ldr	r0, [pc, #372]	; (8004830 <HAL_ADC_Init+0x288>)
 80046bc:	f7ff fd5e 	bl	800417c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	7e5b      	ldrb	r3, [r3, #25]
 80046c4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046ca:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80046d0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80046d6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046de:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046e0:	4313      	orrs	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d106      	bne.n	80046fc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	3b01      	subs	r3, #1
 80046f4:	045b      	lsls	r3, r3, #17
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004700:	2b00      	cmp	r3, #0
 8004702:	d009      	beq.n	8004718 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004708:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004710:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4313      	orrs	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	4b45      	ldr	r3, [pc, #276]	; (8004834 <HAL_ADC_Init+0x28c>)
 8004720:	4013      	ands	r3, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6812      	ldr	r2, [r2, #0]
 8004726:	69b9      	ldr	r1, [r7, #24]
 8004728:	430b      	orrs	r3, r1
 800472a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff feff 	bl	8004534 <LL_ADC_REG_IsConversionOngoing>
 8004736:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff ff20 	bl	8004582 <LL_ADC_INJ_IsConversionOngoing>
 8004742:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d13d      	bne.n	80047c6 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d13a      	bne.n	80047c6 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004754:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800475c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800475e:	4313      	orrs	r3, r2
 8004760:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800476c:	f023 0302 	bic.w	r3, r3, #2
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	69b9      	ldr	r1, [r7, #24]
 8004776:	430b      	orrs	r3, r1
 8004778:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004780:	2b01      	cmp	r3, #1
 8004782:	d118      	bne.n	80047b6 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800478e:	f023 0304 	bic.w	r3, r3, #4
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800479a:	4311      	orrs	r1, r2
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80047a0:	4311      	orrs	r1, r2
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047a6:	430a      	orrs	r2, r1
 80047a8:	431a      	orrs	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	611a      	str	r2, [r3, #16]
 80047b4:	e007      	b.n	80047c6 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	691a      	ldr	r2, [r3, #16]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0201 	bic.w	r2, r2, #1
 80047c4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d10c      	bne.n	80047e8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d4:	f023 010f 	bic.w	r1, r3, #15
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69db      	ldr	r3, [r3, #28]
 80047dc:	1e5a      	subs	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	631a      	str	r2, [r3, #48]	; 0x30
 80047e6:	e007      	b.n	80047f8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 020f 	bic.w	r2, r2, #15
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047fc:	f023 0303 	bic.w	r3, r3, #3
 8004800:	f043 0201 	orr.w	r2, r3, #1
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	655a      	str	r2, [r3, #84]	; 0x54
 8004808:	e007      	b.n	800481a <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800480e:	f043 0210 	orr.w	r2, r3, #16
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800481a:	7ffb      	ldrb	r3, [r7, #31]
}
 800481c:	4618      	mov	r0, r3
 800481e:	3720      	adds	r7, #32
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	20000000 	.word	0x20000000
 8004828:	053e2d63 	.word	0x053e2d63
 800482c:	50040000 	.word	0x50040000
 8004830:	50040300 	.word	0x50040300
 8004834:	fff0c007 	.word	0xfff0c007

08004838 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff fe73 	bl	8004534 <LL_ADC_REG_IsConversionOngoing>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d167      	bne.n	8004924 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <HAL_ADC_Start_DMA+0x2a>
 800485e:	2302      	movs	r3, #2
 8004860:	e063      	b.n	800492a <HAL_ADC_Start_DMA+0xf2>
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 fd7a 	bl	8005364 <ADC_Enable>
 8004870:	4603      	mov	r3, r0
 8004872:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004874:	7dfb      	ldrb	r3, [r7, #23]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d14f      	bne.n	800491a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800487e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004882:	f023 0301 	bic.w	r3, r3, #1
 8004886:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d006      	beq.n	80048a8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489e:	f023 0206 	bic.w	r2, r3, #6
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	659a      	str	r2, [r3, #88]	; 0x58
 80048a6:	e002      	b.n	80048ae <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b2:	4a20      	ldr	r2, [pc, #128]	; (8004934 <HAL_ADC_Start_DMA+0xfc>)
 80048b4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ba:	4a1f      	ldr	r2, [pc, #124]	; (8004938 <HAL_ADC_Start_DMA+0x100>)
 80048bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c2:	4a1e      	ldr	r2, [pc, #120]	; (800493c <HAL_ADC_Start_DMA+0x104>)
 80048c4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	221c      	movs	r2, #28
 80048cc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f042 0210 	orr.w	r2, r2, #16
 80048e4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68da      	ldr	r2, [r3, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0201 	orr.w	r2, r2, #1
 80048f4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3340      	adds	r3, #64	; 0x40
 8004900:	4619      	mov	r1, r3
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f001 f8fd 	bl	8005b04 <HAL_DMA_Start_IT>
 800490a:	4603      	mov	r3, r0
 800490c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fde6 	bl	80044e4 <LL_ADC_REG_StartConversion>
 8004918:	e006      	b.n	8004928 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004922:	e001      	b.n	8004928 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004924:	2302      	movs	r3, #2
 8004926:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004928:	7dfb      	ldrb	r3, [r7, #23]
}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	0800552f 	.word	0x0800552f
 8004938:	08005607 	.word	0x08005607
 800493c:	08005623 	.word	0x08005623

08004940 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_ADC_Stop_DMA+0x16>
 8004952:	2302      	movs	r3, #2
 8004954:	e051      	b.n	80049fa <HAL_ADC_Stop_DMA+0xba>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800495e:	2103      	movs	r1, #3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fc43 	bl	80051ec <ADC_ConversionStop>
 8004966:	4603      	mov	r3, r0
 8004968:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800496a:	7bfb      	ldrb	r3, [r7, #15]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d13f      	bne.n	80049f0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0201 	bic.w	r2, r2, #1
 800497e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004984:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d10f      	bne.n	80049ae <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004992:	4618      	mov	r0, r3
 8004994:	f001 f916 	bl	8005bc4 <HAL_DMA_Abort>
 8004998:	4603      	mov	r3, r0
 800499a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0210 	bic.w	r2, r2, #16
 80049bc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 fd53 	bl	8005470 <ADC_Disable>
 80049ca:	4603      	mov	r3, r0
 80049cc:	73fb      	strb	r3, [r7, #15]
 80049ce:	e002      	b.n	80049d6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fd4d 	bl	8005470 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d109      	bne.n	80049f0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049e4:	f023 0301 	bic.w	r3, r3, #1
 80049e8:	f043 0201 	orr.w	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80049f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
	...

08004a2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b0b6      	sub	sp, #216	; 0xd8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a36:	2300      	movs	r3, #0
 8004a38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d101      	bne.n	8004a4e <HAL_ADC_ConfigChannel+0x22>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e3b9      	b.n	80051c2 <HAL_ADC_ConfigChannel+0x796>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff fd6a 	bl	8004534 <LL_ADC_REG_IsConversionOngoing>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f040 839e 	bne.w	80051a4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b05      	cmp	r3, #5
 8004a6e:	d824      	bhi.n	8004aba <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	3b02      	subs	r3, #2
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d81b      	bhi.n	8004ab2 <HAL_ADC_ConfigChannel+0x86>
 8004a7a:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <HAL_ADC_ConfigChannel+0x54>)
 8004a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a80:	08004a91 	.word	0x08004a91
 8004a84:	08004a99 	.word	0x08004a99
 8004a88:	08004aa1 	.word	0x08004aa1
 8004a8c:	08004aa9 	.word	0x08004aa9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	220c      	movs	r2, #12
 8004a94:	605a      	str	r2, [r3, #4]
          break;
 8004a96:	e011      	b.n	8004abc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2212      	movs	r2, #18
 8004a9c:	605a      	str	r2, [r3, #4]
          break;
 8004a9e:	e00d      	b.n	8004abc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2218      	movs	r2, #24
 8004aa4:	605a      	str	r2, [r3, #4]
          break;
 8004aa6:	e009      	b.n	8004abc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004aae:	605a      	str	r2, [r3, #4]
          break;
 8004ab0:	e004      	b.n	8004abc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2206      	movs	r2, #6
 8004ab6:	605a      	str	r2, [r3, #4]
          break;
 8004ab8:	e000      	b.n	8004abc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004aba:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6818      	ldr	r0, [r3, #0]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	6859      	ldr	r1, [r3, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	f7ff fbf3 	bl	80042b4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff fd2e 	bl	8004534 <LL_ADC_REG_IsConversionOngoing>
 8004ad8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff fd4e 	bl	8004582 <LL_ADC_INJ_IsConversionOngoing>
 8004ae6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004aea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f040 81a6 	bne.w	8004e40 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004af4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f040 81a1 	bne.w	8004e40 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	6819      	ldr	r1, [r3, #0]
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f7ff fbfe 	bl	800430c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	695a      	ldr	r2, [r3, #20]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	08db      	lsrs	r3, r3, #3
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d00a      	beq.n	8004b48 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6919      	ldr	r1, [r3, #16]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b42:	f7ff fb4f 	bl	80041e4 <LL_ADC_SetOffset>
 8004b46:	e17b      	b.n	8004e40 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff fb6c 	bl	800422c <LL_ADC_GetOffsetChannel>
 8004b54:	4603      	mov	r3, r0
 8004b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10a      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x148>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fb61 	bl	800422c <LL_ADC_GetOffsetChannel>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	0e9b      	lsrs	r3, r3, #26
 8004b6e:	f003 021f 	and.w	r2, r3, #31
 8004b72:	e01e      	b.n	8004bb2 <HAL_ADC_ConfigChannel+0x186>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2100      	movs	r1, #0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fb56 	bl	800422c <LL_ADC_GetOffsetChannel>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004b8a:	fa93 f3a3 	rbit	r3, r3
 8004b8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8004b92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8004b9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 8004ba2:	2320      	movs	r3, #32
 8004ba4:	e004      	b.n	8004bb0 <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 8004ba6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004baa:	fab3 f383 	clz	r3, r3
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d105      	bne.n	8004bca <HAL_ADC_ConfigChannel+0x19e>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	0e9b      	lsrs	r3, r3, #26
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	e018      	b.n	8004bfc <HAL_ADC_ConfigChannel+0x1d0>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004bd6:	fa93 f3a3 	rbit	r3, r3
 8004bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004bde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004be2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004be6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d101      	bne.n	8004bf2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004bee:	2320      	movs	r3, #32
 8004bf0:	e004      	b.n	8004bfc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004bf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004bf6:	fab3 f383 	clz	r3, r3
 8004bfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d106      	bne.n	8004c0e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2200      	movs	r2, #0
 8004c06:	2100      	movs	r1, #0
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff fb25 	bl	8004258 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2101      	movs	r1, #1
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff fb09 	bl	800422c <LL_ADC_GetOffsetChannel>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10a      	bne.n	8004c3a <HAL_ADC_ConfigChannel+0x20e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2101      	movs	r1, #1
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff fafe 	bl	800422c <LL_ADC_GetOffsetChannel>
 8004c30:	4603      	mov	r3, r0
 8004c32:	0e9b      	lsrs	r3, r3, #26
 8004c34:	f003 021f 	and.w	r2, r3, #31
 8004c38:	e01e      	b.n	8004c78 <HAL_ADC_ConfigChannel+0x24c>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2101      	movs	r1, #1
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff faf3 	bl	800422c <LL_ADC_GetOffsetChannel>
 8004c46:	4603      	mov	r3, r0
 8004c48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004c50:	fa93 f3a3 	rbit	r3, r3
 8004c54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004c58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004c60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004c68:	2320      	movs	r3, #32
 8004c6a:	e004      	b.n	8004c76 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004c6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004c70:	fab3 f383 	clz	r3, r3
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <HAL_ADC_ConfigChannel+0x264>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	0e9b      	lsrs	r3, r3, #26
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	e018      	b.n	8004cc2 <HAL_ADC_ConfigChannel+0x296>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c9c:	fa93 f3a3 	rbit	r3, r3
 8004ca0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004ca4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004ca8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004cac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004cb4:	2320      	movs	r3, #32
 8004cb6:	e004      	b.n	8004cc2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004cb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004cbc:	fab3 f383 	clz	r3, r3
 8004cc0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d106      	bne.n	8004cd4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2101      	movs	r1, #1
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff fac2 	bl	8004258 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2102      	movs	r1, #2
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff faa6 	bl	800422c <LL_ADC_GetOffsetChannel>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10a      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0x2d4>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2102      	movs	r1, #2
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fa9b 	bl	800422c <LL_ADC_GetOffsetChannel>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	0e9b      	lsrs	r3, r3, #26
 8004cfa:	f003 021f 	and.w	r2, r3, #31
 8004cfe:	e01e      	b.n	8004d3e <HAL_ADC_ConfigChannel+0x312>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2102      	movs	r1, #2
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff fa90 	bl	800422c <LL_ADC_GetOffsetChannel>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d16:	fa93 f3a3 	rbit	r3, r3
 8004d1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004d1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004d26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004d2e:	2320      	movs	r3, #32
 8004d30:	e004      	b.n	8004d3c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004d32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d36:	fab3 f383 	clz	r3, r3
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d105      	bne.n	8004d56 <HAL_ADC_ConfigChannel+0x32a>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	0e9b      	lsrs	r3, r3, #26
 8004d50:	f003 031f 	and.w	r3, r3, #31
 8004d54:	e016      	b.n	8004d84 <HAL_ADC_ConfigChannel+0x358>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d62:	fa93 f3a3 	rbit	r3, r3
 8004d66:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004d68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004d76:	2320      	movs	r3, #32
 8004d78:	e004      	b.n	8004d84 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004d7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d7e:	fab3 f383 	clz	r3, r3
 8004d82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d106      	bne.n	8004d96 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2102      	movs	r1, #2
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff fa61 	bl	8004258 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2103      	movs	r1, #3
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fa45 	bl	800422c <LL_ADC_GetOffsetChannel>
 8004da2:	4603      	mov	r3, r0
 8004da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10a      	bne.n	8004dc2 <HAL_ADC_ConfigChannel+0x396>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2103      	movs	r1, #3
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fa3a 	bl	800422c <LL_ADC_GetOffsetChannel>
 8004db8:	4603      	mov	r3, r0
 8004dba:	0e9b      	lsrs	r3, r3, #26
 8004dbc:	f003 021f 	and.w	r2, r3, #31
 8004dc0:	e017      	b.n	8004df2 <HAL_ADC_ConfigChannel+0x3c6>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2103      	movs	r1, #3
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f7ff fa2f 	bl	800422c <LL_ADC_GetOffsetChannel>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dd4:	fa93 f3a3 	rbit	r3, r3
 8004dd8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ddc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004de4:	2320      	movs	r3, #32
 8004de6:	e003      	b.n	8004df0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004de8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dea:	fab3 f383 	clz	r3, r3
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d105      	bne.n	8004e0a <HAL_ADC_ConfigChannel+0x3de>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	0e9b      	lsrs	r3, r3, #26
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	e011      	b.n	8004e2e <HAL_ADC_ConfigChannel+0x402>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e12:	fa93 f3a3 	rbit	r3, r3
 8004e16:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004e18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004e22:	2320      	movs	r3, #32
 8004e24:	e003      	b.n	8004e2e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e28:	fab3 f383 	clz	r3, r3
 8004e2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d106      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2200      	movs	r2, #0
 8004e38:	2103      	movs	r1, #3
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff fa0c 	bl	8004258 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff fb27 	bl	8004498 <LL_ADC_IsEnabled>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f040 813f 	bne.w	80050d0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6819      	ldr	r1, [r3, #0]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f7ff fa80 	bl	8004364 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	4a8e      	ldr	r2, [pc, #568]	; (80050a4 <HAL_ADC_ConfigChannel+0x678>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	f040 8130 	bne.w	80050d0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10b      	bne.n	8004e98 <HAL_ADC_ConfigChannel+0x46c>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	0e9b      	lsrs	r3, r3, #26
 8004e86:	3301      	adds	r3, #1
 8004e88:	f003 031f 	and.w	r3, r3, #31
 8004e8c:	2b09      	cmp	r3, #9
 8004e8e:	bf94      	ite	ls
 8004e90:	2301      	movls	r3, #1
 8004e92:	2300      	movhi	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	e019      	b.n	8004ecc <HAL_ADC_ConfigChannel+0x4a0>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ea0:	fa93 f3a3 	rbit	r3, r3
 8004ea4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004ea6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ea8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004eaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004eb0:	2320      	movs	r3, #32
 8004eb2:	e003      	b.n	8004ebc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004eb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004eb6:	fab3 f383 	clz	r3, r3
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	f003 031f 	and.w	r3, r3, #31
 8004ec2:	2b09      	cmp	r3, #9
 8004ec4:	bf94      	ite	ls
 8004ec6:	2301      	movls	r3, #1
 8004ec8:	2300      	movhi	r3, #0
 8004eca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d079      	beq.n	8004fc4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d107      	bne.n	8004eec <HAL_ADC_ConfigChannel+0x4c0>
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	0e9b      	lsrs	r3, r3, #26
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	069b      	lsls	r3, r3, #26
 8004ee6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eea:	e015      	b.n	8004f18 <HAL_ADC_ConfigChannel+0x4ec>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ef4:	fa93 f3a3 	rbit	r3, r3
 8004ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004efc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d101      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004f04:	2320      	movs	r3, #32
 8004f06:	e003      	b.n	8004f10 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f0a:	fab3 f383 	clz	r3, r3
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	3301      	adds	r3, #1
 8004f12:	069b      	lsls	r3, r3, #26
 8004f14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d109      	bne.n	8004f38 <HAL_ADC_ConfigChannel+0x50c>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	0e9b      	lsrs	r3, r3, #26
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	f003 031f 	and.w	r3, r3, #31
 8004f30:	2101      	movs	r1, #1
 8004f32:	fa01 f303 	lsl.w	r3, r1, r3
 8004f36:	e017      	b.n	8004f68 <HAL_ADC_ConfigChannel+0x53c>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f40:	fa93 f3a3 	rbit	r3, r3
 8004f44:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004f46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004f4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d101      	bne.n	8004f54 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004f50:	2320      	movs	r3, #32
 8004f52:	e003      	b.n	8004f5c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f56:	fab3 f383 	clz	r3, r3
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	3301      	adds	r3, #1
 8004f5e:	f003 031f 	and.w	r3, r3, #31
 8004f62:	2101      	movs	r1, #1
 8004f64:	fa01 f303 	lsl.w	r3, r1, r3
 8004f68:	ea42 0103 	orr.w	r1, r2, r3
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10a      	bne.n	8004f8e <HAL_ADC_ConfigChannel+0x562>
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	0e9b      	lsrs	r3, r3, #26
 8004f7e:	3301      	adds	r3, #1
 8004f80:	f003 021f 	and.w	r2, r3, #31
 8004f84:	4613      	mov	r3, r2
 8004f86:	005b      	lsls	r3, r3, #1
 8004f88:	4413      	add	r3, r2
 8004f8a:	051b      	lsls	r3, r3, #20
 8004f8c:	e018      	b.n	8004fc0 <HAL_ADC_ConfigChannel+0x594>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f96:	fa93 f3a3 	rbit	r3, r3
 8004f9a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004fa6:	2320      	movs	r3, #32
 8004fa8:	e003      	b.n	8004fb2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fac:	fab3 f383 	clz	r3, r3
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	f003 021f 	and.w	r2, r3, #31
 8004fb8:	4613      	mov	r3, r2
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	4413      	add	r3, r2
 8004fbe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fc0:	430b      	orrs	r3, r1
 8004fc2:	e080      	b.n	80050c6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d107      	bne.n	8004fe0 <HAL_ADC_ConfigChannel+0x5b4>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	0e9b      	lsrs	r3, r3, #26
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	069b      	lsls	r3, r3, #26
 8004fda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fde:	e015      	b.n	800500c <HAL_ADC_ConfigChannel+0x5e0>
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe8:	fa93 f3a3 	rbit	r3, r3
 8004fec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004ff8:	2320      	movs	r3, #32
 8004ffa:	e003      	b.n	8005004 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	fab3 f383 	clz	r3, r3
 8005002:	b2db      	uxtb	r3, r3
 8005004:	3301      	adds	r3, #1
 8005006:	069b      	lsls	r3, r3, #26
 8005008:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005014:	2b00      	cmp	r3, #0
 8005016:	d109      	bne.n	800502c <HAL_ADC_ConfigChannel+0x600>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	0e9b      	lsrs	r3, r3, #26
 800501e:	3301      	adds	r3, #1
 8005020:	f003 031f 	and.w	r3, r3, #31
 8005024:	2101      	movs	r1, #1
 8005026:	fa01 f303 	lsl.w	r3, r1, r3
 800502a:	e017      	b.n	800505c <HAL_ADC_ConfigChannel+0x630>
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	fa93 f3a3 	rbit	r3, r3
 8005038:	61fb      	str	r3, [r7, #28]
  return result;
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8005044:	2320      	movs	r3, #32
 8005046:	e003      	b.n	8005050 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8005048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504a:	fab3 f383 	clz	r3, r3
 800504e:	b2db      	uxtb	r3, r3
 8005050:	3301      	adds	r3, #1
 8005052:	f003 031f 	and.w	r3, r3, #31
 8005056:	2101      	movs	r1, #1
 8005058:	fa01 f303 	lsl.w	r3, r1, r3
 800505c:	ea42 0103 	orr.w	r1, r2, r3
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10d      	bne.n	8005088 <HAL_ADC_ConfigChannel+0x65c>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	0e9b      	lsrs	r3, r3, #26
 8005072:	3301      	adds	r3, #1
 8005074:	f003 021f 	and.w	r2, r3, #31
 8005078:	4613      	mov	r3, r2
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	4413      	add	r3, r2
 800507e:	3b1e      	subs	r3, #30
 8005080:	051b      	lsls	r3, r3, #20
 8005082:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005086:	e01d      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x698>
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	fa93 f3a3 	rbit	r3, r3
 8005094:	613b      	str	r3, [r7, #16]
  return result;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d103      	bne.n	80050a8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80050a0:	2320      	movs	r3, #32
 80050a2:	e005      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x684>
 80050a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	fab3 f383 	clz	r3, r3
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	3301      	adds	r3, #1
 80050b2:	f003 021f 	and.w	r2, r3, #31
 80050b6:	4613      	mov	r3, r2
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	4413      	add	r3, r2
 80050bc:	3b1e      	subs	r3, #30
 80050be:	051b      	lsls	r3, r3, #20
 80050c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050c4:	430b      	orrs	r3, r1
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	6892      	ldr	r2, [r2, #8]
 80050ca:	4619      	mov	r1, r3
 80050cc:	f7ff f91e 	bl	800430c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	4b3d      	ldr	r3, [pc, #244]	; (80051cc <HAL_ADC_ConfigChannel+0x7a0>)
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d06c      	beq.n	80051b6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050dc:	483c      	ldr	r0, [pc, #240]	; (80051d0 <HAL_ADC_ConfigChannel+0x7a4>)
 80050de:	f7ff f873 	bl	80041c8 <LL_ADC_GetCommonPathInternalCh>
 80050e2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a3a      	ldr	r2, [pc, #232]	; (80051d4 <HAL_ADC_ConfigChannel+0x7a8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d127      	bne.n	8005140 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80050f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d121      	bne.n	8005140 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a35      	ldr	r2, [pc, #212]	; (80051d8 <HAL_ADC_ConfigChannel+0x7ac>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d157      	bne.n	80051b6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005106:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800510a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800510e:	4619      	mov	r1, r3
 8005110:	482f      	ldr	r0, [pc, #188]	; (80051d0 <HAL_ADC_ConfigChannel+0x7a4>)
 8005112:	f7ff f846 	bl	80041a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005116:	4b31      	ldr	r3, [pc, #196]	; (80051dc <HAL_ADC_ConfigChannel+0x7b0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	099b      	lsrs	r3, r3, #6
 800511c:	4a30      	ldr	r2, [pc, #192]	; (80051e0 <HAL_ADC_ConfigChannel+0x7b4>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	099b      	lsrs	r3, r3, #6
 8005124:	1c5a      	adds	r2, r3, #1
 8005126:	4613      	mov	r3, r2
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005130:	e002      	b.n	8005138 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	3b01      	subs	r3, #1
 8005136:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f9      	bne.n	8005132 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800513e:	e03a      	b.n	80051b6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a27      	ldr	r2, [pc, #156]	; (80051e4 <HAL_ADC_ConfigChannel+0x7b8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d113      	bne.n	8005172 <HAL_ADC_ConfigChannel+0x746>
 800514a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800514e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10d      	bne.n	8005172 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a1f      	ldr	r2, [pc, #124]	; (80051d8 <HAL_ADC_ConfigChannel+0x7ac>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d12a      	bne.n	80051b6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005160:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005164:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005168:	4619      	mov	r1, r3
 800516a:	4819      	ldr	r0, [pc, #100]	; (80051d0 <HAL_ADC_ConfigChannel+0x7a4>)
 800516c:	f7ff f819 	bl	80041a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005170:	e021      	b.n	80051b6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a1c      	ldr	r2, [pc, #112]	; (80051e8 <HAL_ADC_ConfigChannel+0x7bc>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d11c      	bne.n	80051b6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800517c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d116      	bne.n	80051b6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a12      	ldr	r2, [pc, #72]	; (80051d8 <HAL_ADC_ConfigChannel+0x7ac>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d111      	bne.n	80051b6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005192:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005196:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800519a:	4619      	mov	r1, r3
 800519c:	480c      	ldr	r0, [pc, #48]	; (80051d0 <HAL_ADC_ConfigChannel+0x7a4>)
 800519e:	f7ff f800 	bl	80041a2 <LL_ADC_SetCommonPathInternalCh>
 80051a2:	e008      	b.n	80051b6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a8:	f043 0220 	orr.w	r2, r3, #32
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80051be:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	37d8      	adds	r7, #216	; 0xd8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	80080000 	.word	0x80080000
 80051d0:	50040300 	.word	0x50040300
 80051d4:	c7520000 	.word	0xc7520000
 80051d8:	50040000 	.word	0x50040000
 80051dc:	20000000 	.word	0x20000000
 80051e0:	053e2d63 	.word	0x053e2d63
 80051e4:	cb840000 	.word	0xcb840000
 80051e8:	80000001 	.word	0x80000001

080051ec <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b088      	sub	sp, #32
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80051f6:	2300      	movs	r3, #0
 80051f8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f7ff f996 	bl	8004534 <LL_ADC_REG_IsConversionOngoing>
 8005208:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff f9b7 	bl	8004582 <LL_ADC_INJ_IsConversionOngoing>
 8005214:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d103      	bne.n	8005224 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 8098 	beq.w	8005354 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d02a      	beq.n	8005288 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	7e5b      	ldrb	r3, [r3, #25]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d126      	bne.n	8005288 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	7e1b      	ldrb	r3, [r3, #24]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d122      	bne.n	8005288 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005242:	2301      	movs	r3, #1
 8005244:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005246:	e014      	b.n	8005272 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	4a45      	ldr	r2, [pc, #276]	; (8005360 <ADC_ConversionStop+0x174>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d90d      	bls.n	800526c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005254:	f043 0210 	orr.w	r2, r3, #16
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005260:	f043 0201 	orr.w	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e074      	b.n	8005356 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	3301      	adds	r3, #1
 8005270:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527c:	2b40      	cmp	r3, #64	; 0x40
 800527e:	d1e3      	bne.n	8005248 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2240      	movs	r2, #64	; 0x40
 8005286:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	2b02      	cmp	r3, #2
 800528c:	d014      	beq.n	80052b8 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff f94e 	bl	8004534 <LL_ADC_REG_IsConversionOngoing>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00c      	beq.n	80052b8 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff f90b 	bl	80044be <LL_ADC_IsDisableOngoing>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d104      	bne.n	80052b8 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7ff f92a 	bl	800450c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d014      	beq.n	80052e8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff f95d 	bl	8004582 <LL_ADC_INJ_IsConversionOngoing>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00c      	beq.n	80052e8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff f8f3 	bl	80044be <LL_ADC_IsDisableOngoing>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d104      	bne.n	80052e8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7ff f939 	bl	800455a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d005      	beq.n	80052fa <ADC_ConversionStop+0x10e>
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d105      	bne.n	8005300 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80052f4:	230c      	movs	r3, #12
 80052f6:	617b      	str	r3, [r7, #20]
        break;
 80052f8:	e005      	b.n	8005306 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80052fa:	2308      	movs	r3, #8
 80052fc:	617b      	str	r3, [r7, #20]
        break;
 80052fe:	e002      	b.n	8005306 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005300:	2304      	movs	r3, #4
 8005302:	617b      	str	r3, [r7, #20]
        break;
 8005304:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8005306:	f7fe ff0d 	bl	8004124 <HAL_GetTick>
 800530a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800530c:	e01b      	b.n	8005346 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800530e:	f7fe ff09 	bl	8004124 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b05      	cmp	r3, #5
 800531a:	d914      	bls.n	8005346 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	4013      	ands	r3, r2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00d      	beq.n	8005346 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532e:	f043 0210 	orr.w	r2, r3, #16
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533a:	f043 0201 	orr.w	r2, r3, #1
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e007      	b.n	8005356 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	4013      	ands	r3, r2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1dc      	bne.n	800530e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3720      	adds	r7, #32
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	a33fffff 	.word	0xa33fffff

08005364 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800536c:	2300      	movs	r3, #0
 800536e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff f88f 	bl	8004498 <LL_ADC_IsEnabled>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d169      	bne.n	8005454 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	4b36      	ldr	r3, [pc, #216]	; (8005460 <ADC_Enable+0xfc>)
 8005388:	4013      	ands	r3, r2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00d      	beq.n	80053aa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005392:	f043 0210 	orr.w	r2, r3, #16
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800539e:	f043 0201 	orr.w	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e055      	b.n	8005456 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff f84a 	bl	8004448 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80053b4:	482b      	ldr	r0, [pc, #172]	; (8005464 <ADC_Enable+0x100>)
 80053b6:	f7fe ff07 	bl	80041c8 <LL_ADC_GetCommonPathInternalCh>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d013      	beq.n	80053ec <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053c4:	4b28      	ldr	r3, [pc, #160]	; (8005468 <ADC_Enable+0x104>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	099b      	lsrs	r3, r3, #6
 80053ca:	4a28      	ldr	r2, [pc, #160]	; (800546c <ADC_Enable+0x108>)
 80053cc:	fba2 2303 	umull	r2, r3, r2, r3
 80053d0:	099b      	lsrs	r3, r3, #6
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	4613      	mov	r3, r2
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80053de:	e002      	b.n	80053e6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1f9      	bne.n	80053e0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80053ec:	f7fe fe9a 	bl	8004124 <HAL_GetTick>
 80053f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053f2:	e028      	b.n	8005446 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7ff f84d 	bl	8004498 <LL_ADC_IsEnabled>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff f81d 	bl	8004448 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800540e:	f7fe fe89 	bl	8004124 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d914      	bls.n	8005446 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b01      	cmp	r3, #1
 8005428:	d00d      	beq.n	8005446 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542e:	f043 0210 	orr.w	r2, r3, #16
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543a:	f043 0201 	orr.w	r2, r3, #1
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e007      	b.n	8005456 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b01      	cmp	r3, #1
 8005452:	d1cf      	bne.n	80053f4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	8000003f 	.word	0x8000003f
 8005464:	50040300 	.word	0x50040300
 8005468:	20000000 	.word	0x20000000
 800546c:	053e2d63 	.word	0x053e2d63

08005470 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4618      	mov	r0, r3
 800547e:	f7ff f81e 	bl	80044be <LL_ADC_IsDisableOngoing>
 8005482:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff f805 	bl	8004498 <LL_ADC_IsEnabled>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d047      	beq.n	8005524 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d144      	bne.n	8005524 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 030d 	and.w	r3, r3, #13
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d10c      	bne.n	80054c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fe ffdf 	bl	8004470 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2203      	movs	r2, #3
 80054b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80054ba:	f7fe fe33 	bl	8004124 <HAL_GetTick>
 80054be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054c0:	e029      	b.n	8005516 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c6:	f043 0210 	orr.w	r2, r3, #16
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d2:	f043 0201 	orr.w	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e023      	b.n	8005526 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80054de:	f7fe fe21 	bl	8004124 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d914      	bls.n	8005516 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00d      	beq.n	8005516 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	f043 0210 	orr.w	r2, r3, #16
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550a:	f043 0201 	orr.w	r2, r3, #1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e007      	b.n	8005526 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1dc      	bne.n	80054de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b084      	sub	sp, #16
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005540:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005544:	2b00      	cmp	r3, #0
 8005546:	d14b      	bne.n	80055e0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d021      	beq.n	80055a6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f7fe fe91 	bl	800428e <LL_ADC_REG_IsTriggerSourceSWStart>
 800556c:	4603      	mov	r3, r0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d032      	beq.n	80055d8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d12b      	bne.n	80055d8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005584:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d11f      	bne.n	80055d8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559c:	f043 0201 	orr.w	r2, r3, #1
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	655a      	str	r2, [r3, #84]	; 0x54
 80055a4:	e018      	b.n	80055d8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d111      	bne.n	80055d8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d105      	bne.n	80055d8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d0:	f043 0201 	orr.w	r2, r3, #1
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f7fd fca5 	bl	8002f28 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80055de:	e00e      	b.n	80055fe <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f7ff fa12 	bl	8004a16 <HAL_ADC_ErrorCallback>
}
 80055f2:	e004      	b.n	80055fe <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	4798      	blx	r3
}
 80055fe:	bf00      	nop
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005612:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f7ff f9f4 	bl	8004a02 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800561a:	bf00      	nop
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005634:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005640:	f043 0204 	orr.w	r2, r3, #4
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f7ff f9e4 	bl	8004a16 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800564e:	bf00      	nop
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <LL_ADC_StartCalibration>:
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005668:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005672:	4313      	orrs	r3, r2
 8005674:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	609a      	str	r2, [r3, #8]
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <LL_ADC_IsCalibrationOnGoing>:
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800569c:	d101      	bne.n	80056a2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_ADCEx_Calibration_Start+0x1c>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e04d      	b.n	8005768 <HAL_ADCEx_Calibration_Start+0xb8>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff fecb 	bl	8005470 <ADC_Disable>
 80056da:	4603      	mov	r3, r0
 80056dc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d136      	bne.n	8005752 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80056ec:	f023 0302 	bic.w	r3, r3, #2
 80056f0:	f043 0202 	orr.w	r2, r3, #2
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6839      	ldr	r1, [r7, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff ffa9 	bl	8005656 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005704:	e014      	b.n	8005730 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	3301      	adds	r3, #1
 800570a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8005712:	d30d      	bcc.n	8005730 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005718:	f023 0312 	bic.w	r3, r3, #18
 800571c:	f043 0210 	orr.w	r2, r3, #16
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e01b      	b.n	8005768 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff ffa7 	bl	8005688 <LL_ADC_IsCalibrationOnGoing>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e2      	bne.n	8005706 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005744:	f023 0303 	bic.w	r3, r3, #3
 8005748:	f043 0201 	orr.w	r2, r3, #1
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	655a      	str	r2, [r3, #84]	; 0x54
 8005750:	e005      	b.n	800575e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005756:	f043 0210 	orr.w	r2, r3, #16
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005766:	7bfb      	ldrb	r3, [r7, #15]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <__NVIC_SetPriorityGrouping>:
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f003 0307 	and.w	r3, r3, #7
 800577e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005780:	4b0c      	ldr	r3, [pc, #48]	; (80057b4 <__NVIC_SetPriorityGrouping+0x44>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800578c:	4013      	ands	r3, r2
 800578e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005798:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800579c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057a2:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <__NVIC_SetPriorityGrouping+0x44>)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	60d3      	str	r3, [r2, #12]
}
 80057a8:	bf00      	nop
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	e000ed00 	.word	0xe000ed00

080057b8 <__NVIC_GetPriorityGrouping>:
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057bc:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <__NVIC_GetPriorityGrouping+0x18>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	0a1b      	lsrs	r3, r3, #8
 80057c2:	f003 0307 	and.w	r3, r3, #7
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	e000ed00 	.word	0xe000ed00

080057d4 <__NVIC_EnableIRQ>:
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	4603      	mov	r3, r0
 80057dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	db0b      	blt.n	80057fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	f003 021f 	and.w	r2, r3, #31
 80057ec:	4907      	ldr	r1, [pc, #28]	; (800580c <__NVIC_EnableIRQ+0x38>)
 80057ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	2001      	movs	r0, #1
 80057f6:	fa00 f202 	lsl.w	r2, r0, r2
 80057fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80057fe:	bf00      	nop
 8005800:	370c      	adds	r7, #12
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	e000e100 	.word	0xe000e100

08005810 <__NVIC_SetPriority>:
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	4603      	mov	r3, r0
 8005818:	6039      	str	r1, [r7, #0]
 800581a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800581c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005820:	2b00      	cmp	r3, #0
 8005822:	db0a      	blt.n	800583a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	b2da      	uxtb	r2, r3
 8005828:	490c      	ldr	r1, [pc, #48]	; (800585c <__NVIC_SetPriority+0x4c>)
 800582a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800582e:	0112      	lsls	r2, r2, #4
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	440b      	add	r3, r1
 8005834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005838:	e00a      	b.n	8005850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	b2da      	uxtb	r2, r3
 800583e:	4908      	ldr	r1, [pc, #32]	; (8005860 <__NVIC_SetPriority+0x50>)
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	3b04      	subs	r3, #4
 8005848:	0112      	lsls	r2, r2, #4
 800584a:	b2d2      	uxtb	r2, r2
 800584c:	440b      	add	r3, r1
 800584e:	761a      	strb	r2, [r3, #24]
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	e000e100 	.word	0xe000e100
 8005860:	e000ed00 	.word	0xe000ed00

08005864 <NVIC_EncodePriority>:
{
 8005864:	b480      	push	{r7}
 8005866:	b089      	sub	sp, #36	; 0x24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	f1c3 0307 	rsb	r3, r3, #7
 800587e:	2b04      	cmp	r3, #4
 8005880:	bf28      	it	cs
 8005882:	2304      	movcs	r3, #4
 8005884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	3304      	adds	r3, #4
 800588a:	2b06      	cmp	r3, #6
 800588c:	d902      	bls.n	8005894 <NVIC_EncodePriority+0x30>
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	3b03      	subs	r3, #3
 8005892:	e000      	b.n	8005896 <NVIC_EncodePriority+0x32>
 8005894:	2300      	movs	r3, #0
 8005896:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005898:	f04f 32ff 	mov.w	r2, #4294967295
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43da      	mvns	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	401a      	ands	r2, r3
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058ac:	f04f 31ff 	mov.w	r1, #4294967295
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	fa01 f303 	lsl.w	r3, r1, r3
 80058b6:	43d9      	mvns	r1, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058bc:	4313      	orrs	r3, r2
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3724      	adds	r7, #36	; 0x24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
	...

080058cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	3b01      	subs	r3, #1
 80058d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058dc:	d301      	bcc.n	80058e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058de:	2301      	movs	r3, #1
 80058e0:	e00f      	b.n	8005902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058e2:	4a0a      	ldr	r2, [pc, #40]	; (800590c <SysTick_Config+0x40>)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058ea:	210f      	movs	r1, #15
 80058ec:	f04f 30ff 	mov.w	r0, #4294967295
 80058f0:	f7ff ff8e 	bl	8005810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058f4:	4b05      	ldr	r3, [pc, #20]	; (800590c <SysTick_Config+0x40>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058fa:	4b04      	ldr	r3, [pc, #16]	; (800590c <SysTick_Config+0x40>)
 80058fc:	2207      	movs	r2, #7
 80058fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	e000e010 	.word	0xe000e010

08005910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff ff29 	bl	8005770 <__NVIC_SetPriorityGrouping>
}
 800591e:	bf00      	nop
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b086      	sub	sp, #24
 800592a:	af00      	add	r7, sp, #0
 800592c:	4603      	mov	r3, r0
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	607a      	str	r2, [r7, #4]
 8005932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005938:	f7ff ff3e 	bl	80057b8 <__NVIC_GetPriorityGrouping>
 800593c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	68b9      	ldr	r1, [r7, #8]
 8005942:	6978      	ldr	r0, [r7, #20]
 8005944:	f7ff ff8e 	bl	8005864 <NVIC_EncodePriority>
 8005948:	4602      	mov	r2, r0
 800594a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800594e:	4611      	mov	r1, r2
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff ff5d 	bl	8005810 <__NVIC_SetPriority>
}
 8005956:	bf00      	nop
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	4603      	mov	r3, r0
 8005966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800596c:	4618      	mov	r0, r3
 800596e:	f7ff ff31 	bl	80057d4 <__NVIC_EnableIRQ>
}
 8005972:	bf00      	nop
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800597a:	b580      	push	{r7, lr}
 800597c:	b082      	sub	sp, #8
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff ffa2 	bl	80058cc <SysTick_Config>
 8005988:	4603      	mov	r3, r0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e098      	b.n	8005ad8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	4b4d      	ldr	r3, [pc, #308]	; (8005ae4 <HAL_DMA_Init+0x150>)
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d80f      	bhi.n	80059d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	4b4b      	ldr	r3, [pc, #300]	; (8005ae8 <HAL_DMA_Init+0x154>)
 80059ba:	4413      	add	r3, r2
 80059bc:	4a4b      	ldr	r2, [pc, #300]	; (8005aec <HAL_DMA_Init+0x158>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	091b      	lsrs	r3, r3, #4
 80059c4:	009a      	lsls	r2, r3, #2
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a48      	ldr	r2, [pc, #288]	; (8005af0 <HAL_DMA_Init+0x15c>)
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40
 80059d0:	e00e      	b.n	80059f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	461a      	mov	r2, r3
 80059d8:	4b46      	ldr	r3, [pc, #280]	; (8005af4 <HAL_DMA_Init+0x160>)
 80059da:	4413      	add	r3, r2
 80059dc:	4a43      	ldr	r2, [pc, #268]	; (8005aec <HAL_DMA_Init+0x158>)
 80059de:	fba2 2303 	umull	r2, r3, r2, r3
 80059e2:	091b      	lsrs	r3, r3, #4
 80059e4:	009a      	lsls	r2, r3, #2
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a42      	ldr	r2, [pc, #264]	; (8005af8 <HAL_DMA_Init+0x164>)
 80059ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a0a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005a14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a4a:	d039      	beq.n	8005ac0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	4a27      	ldr	r2, [pc, #156]	; (8005af0 <HAL_DMA_Init+0x15c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d11a      	bne.n	8005a8c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005a56:	4b29      	ldr	r3, [pc, #164]	; (8005afc <HAL_DMA_Init+0x168>)
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5e:	f003 031c 	and.w	r3, r3, #28
 8005a62:	210f      	movs	r1, #15
 8005a64:	fa01 f303 	lsl.w	r3, r1, r3
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	4924      	ldr	r1, [pc, #144]	; (8005afc <HAL_DMA_Init+0x168>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005a70:	4b22      	ldr	r3, [pc, #136]	; (8005afc <HAL_DMA_Init+0x168>)
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6859      	ldr	r1, [r3, #4]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a7c:	f003 031c 	and.w	r3, r3, #28
 8005a80:	fa01 f303 	lsl.w	r3, r1, r3
 8005a84:	491d      	ldr	r1, [pc, #116]	; (8005afc <HAL_DMA_Init+0x168>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	600b      	str	r3, [r1, #0]
 8005a8a:	e019      	b.n	8005ac0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005a8c:	4b1c      	ldr	r3, [pc, #112]	; (8005b00 <HAL_DMA_Init+0x16c>)
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a94:	f003 031c 	and.w	r3, r3, #28
 8005a98:	210f      	movs	r1, #15
 8005a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9e:	43db      	mvns	r3, r3
 8005aa0:	4917      	ldr	r1, [pc, #92]	; (8005b00 <HAL_DMA_Init+0x16c>)
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005aa6:	4b16      	ldr	r3, [pc, #88]	; (8005b00 <HAL_DMA_Init+0x16c>)
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6859      	ldr	r1, [r3, #4]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab2:	f003 031c 	and.w	r3, r3, #28
 8005ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8005aba:	4911      	ldr	r1, [pc, #68]	; (8005b00 <HAL_DMA_Init+0x16c>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	40020407 	.word	0x40020407
 8005ae8:	bffdfff8 	.word	0xbffdfff8
 8005aec:	cccccccd 	.word	0xcccccccd
 8005af0:	40020000 	.word	0x40020000
 8005af4:	bffdfbf8 	.word	0xbffdfbf8
 8005af8:	40020400 	.word	0x40020400
 8005afc:	400200a8 	.word	0x400200a8
 8005b00:	400204a8 	.word	0x400204a8

08005b04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_DMA_Start_IT+0x20>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e04b      	b.n	8005bbc <HAL_DMA_Start_IT+0xb8>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d13a      	bne.n	8005bae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 0201 	bic.w	r2, r2, #1
 8005b54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	68b9      	ldr	r1, [r7, #8]
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 f91e 	bl	8005d9e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d008      	beq.n	8005b7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 020e 	orr.w	r2, r2, #14
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	e00f      	b.n	8005b9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0204 	bic.w	r2, r2, #4
 8005b8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f042 020a 	orr.w	r2, r2, #10
 8005b9a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f042 0201 	orr.w	r2, r2, #1
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	e005      	b.n	8005bba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d008      	beq.n	8005bee <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2204      	movs	r2, #4
 8005be0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e022      	b.n	8005c34 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 020e 	bic.w	r2, r2, #14
 8005bfc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0201 	bic.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c12:	f003 021c 	and.w	r2, r3, #28
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c20:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005c32:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c5c:	f003 031c 	and.w	r3, r3, #28
 8005c60:	2204      	movs	r2, #4
 8005c62:	409a      	lsls	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4013      	ands	r3, r2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d026      	beq.n	8005cba <HAL_DMA_IRQHandler+0x7a>
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d021      	beq.n	8005cba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0320 	and.w	r3, r3, #32
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d107      	bne.n	8005c94 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f022 0204 	bic.w	r2, r2, #4
 8005c92:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c98:	f003 021c 	and.w	r2, r3, #28
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca0:	2104      	movs	r1, #4
 8005ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ca6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d071      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005cb8:	e06c      	b.n	8005d94 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cbe:	f003 031c 	and.w	r3, r3, #28
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	409a      	lsls	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d02e      	beq.n	8005d2c <HAL_DMA_IRQHandler+0xec>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d029      	beq.n	8005d2c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 020a 	bic.w	r2, r2, #10
 8005cf4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d02:	f003 021c 	and.w	r2, r3, #28
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	2102      	movs	r1, #2
 8005d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8005d10:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d038      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005d2a:	e033      	b.n	8005d94 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d30:	f003 031c 	and.w	r3, r3, #28
 8005d34:	2208      	movs	r2, #8
 8005d36:	409a      	lsls	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d02a      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x156>
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f003 0308 	and.w	r3, r3, #8
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d025      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 020e 	bic.w	r2, r2, #14
 8005d58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5e:	f003 021c 	and.w	r2, r3, #28
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	2101      	movs	r1, #1
 8005d68:	fa01 f202 	lsl.w	r2, r1, r2
 8005d6c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d004      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
}
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	607a      	str	r2, [r7, #4]
 8005daa:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db0:	f003 021c 	and.w	r2, r3, #28
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db8:	2101      	movs	r1, #1
 8005dba:	fa01 f202 	lsl.w	r2, r1, r2
 8005dbe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	2b10      	cmp	r3, #16
 8005dce:	d108      	bne.n	8005de2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005de0:	e007      	b.n	8005df2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	60da      	str	r2, [r3, #12]
}
 8005df2:	bf00      	nop
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e0e:	e148      	b.n	80060a2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	2101      	movs	r1, #1
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	fa01 f303 	lsl.w	r3, r1, r3
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 813a 	beq.w	800609c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f003 0303 	and.w	r3, r3, #3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d005      	beq.n	8005e40 <HAL_GPIO_Init+0x40>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f003 0303 	and.w	r3, r3, #3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d130      	bne.n	8005ea2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	005b      	lsls	r3, r3, #1
 8005e4a:	2203      	movs	r2, #3
 8005e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e50:	43db      	mvns	r3, r3
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4013      	ands	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	fa02 f303 	lsl.w	r3, r2, r3
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e76:	2201      	movs	r2, #1
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4013      	ands	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	091b      	lsrs	r3, r3, #4
 8005e8c:	f003 0201 	and.w	r2, r3, #1
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	2b03      	cmp	r3, #3
 8005eac:	d017      	beq.n	8005ede <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	2203      	movs	r2, #3
 8005eba:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	693a      	ldr	r2, [r7, #16]
 8005edc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d123      	bne.n	8005f32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	08da      	lsrs	r2, r3, #3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3208      	adds	r2, #8
 8005ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	220f      	movs	r2, #15
 8005f02:	fa02 f303 	lsl.w	r3, r2, r3
 8005f06:	43db      	mvns	r3, r3
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1e:	693a      	ldr	r2, [r7, #16]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	08da      	lsrs	r2, r3, #3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	3208      	adds	r2, #8
 8005f2c:	6939      	ldr	r1, [r7, #16]
 8005f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	2203      	movs	r2, #3
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	43db      	mvns	r3, r3
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	4013      	ands	r3, r2
 8005f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f003 0203 	and.w	r2, r3, #3
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	005b      	lsls	r3, r3, #1
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 8094 	beq.w	800609c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f74:	4b52      	ldr	r3, [pc, #328]	; (80060c0 <HAL_GPIO_Init+0x2c0>)
 8005f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f78:	4a51      	ldr	r2, [pc, #324]	; (80060c0 <HAL_GPIO_Init+0x2c0>)
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	6613      	str	r3, [r2, #96]	; 0x60
 8005f80:	4b4f      	ldr	r3, [pc, #316]	; (80060c0 <HAL_GPIO_Init+0x2c0>)
 8005f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	60bb      	str	r3, [r7, #8]
 8005f8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005f8c:	4a4d      	ldr	r2, [pc, #308]	; (80060c4 <HAL_GPIO_Init+0x2c4>)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	089b      	lsrs	r3, r3, #2
 8005f92:	3302      	adds	r3, #2
 8005f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f003 0303 	and.w	r3, r3, #3
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	220f      	movs	r2, #15
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	43db      	mvns	r3, r3
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	4013      	ands	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005fb6:	d00d      	beq.n	8005fd4 <HAL_GPIO_Init+0x1d4>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a43      	ldr	r2, [pc, #268]	; (80060c8 <HAL_GPIO_Init+0x2c8>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d007      	beq.n	8005fd0 <HAL_GPIO_Init+0x1d0>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	4a42      	ldr	r2, [pc, #264]	; (80060cc <HAL_GPIO_Init+0x2cc>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d101      	bne.n	8005fcc <HAL_GPIO_Init+0x1cc>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e004      	b.n	8005fd6 <HAL_GPIO_Init+0x1d6>
 8005fcc:	2307      	movs	r3, #7
 8005fce:	e002      	b.n	8005fd6 <HAL_GPIO_Init+0x1d6>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e000      	b.n	8005fd6 <HAL_GPIO_Init+0x1d6>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	f002 0203 	and.w	r2, r2, #3
 8005fdc:	0092      	lsls	r2, r2, #2
 8005fde:	4093      	lsls	r3, r2
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005fe6:	4937      	ldr	r1, [pc, #220]	; (80060c4 <HAL_GPIO_Init+0x2c4>)
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	089b      	lsrs	r3, r3, #2
 8005fec:	3302      	adds	r3, #2
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005ff4:	4b36      	ldr	r3, [pc, #216]	; (80060d0 <HAL_GPIO_Init+0x2d0>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	43db      	mvns	r3, r3
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4013      	ands	r3, r2
 8006002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d003      	beq.n	8006018 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	4313      	orrs	r3, r2
 8006016:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006018:	4a2d      	ldr	r2, [pc, #180]	; (80060d0 <HAL_GPIO_Init+0x2d0>)
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800601e:	4b2c      	ldr	r3, [pc, #176]	; (80060d0 <HAL_GPIO_Init+0x2d0>)
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	43db      	mvns	r3, r3
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4013      	ands	r3, r2
 800602c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006042:	4a23      	ldr	r2, [pc, #140]	; (80060d0 <HAL_GPIO_Init+0x2d0>)
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006048:	4b21      	ldr	r3, [pc, #132]	; (80060d0 <HAL_GPIO_Init+0x2d0>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	43db      	mvns	r3, r3
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4013      	ands	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d003      	beq.n	800606c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800606c:	4a18      	ldr	r2, [pc, #96]	; (80060d0 <HAL_GPIO_Init+0x2d0>)
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8006072:	4b17      	ldr	r3, [pc, #92]	; (80060d0 <HAL_GPIO_Init+0x2d0>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	43db      	mvns	r3, r3
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	4013      	ands	r3, r2
 8006080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006096:	4a0e      	ldr	r2, [pc, #56]	; (80060d0 <HAL_GPIO_Init+0x2d0>)
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	3301      	adds	r3, #1
 80060a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	fa22 f303 	lsr.w	r3, r2, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f47f aeaf 	bne.w	8005e10 <HAL_GPIO_Init+0x10>
  }
}
 80060b2:	bf00      	nop
 80060b4:	bf00      	nop
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	40021000 	.word	0x40021000
 80060c4:	40010000 	.word	0x40010000
 80060c8:	48000400 	.word	0x48000400
 80060cc:	48000800 	.word	0x48000800
 80060d0:	40010400 	.word	0x40010400

080060d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	460b      	mov	r3, r1
 80060de:	807b      	strh	r3, [r7, #2]
 80060e0:	4613      	mov	r3, r2
 80060e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060e4:	787b      	ldrb	r3, [r7, #1]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d003      	beq.n	80060f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80060ea:	887a      	ldrh	r2, [r7, #2]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80060f0:	e002      	b.n	80060f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80060f2:	887a      	ldrh	r2, [r7, #2]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006108:	4b05      	ldr	r3, [pc, #20]	; (8006120 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a04      	ldr	r2, [pc, #16]	; (8006120 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800610e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006112:	6013      	str	r3, [r2, #0]
}
 8006114:	bf00      	nop
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	40007000 	.word	0x40007000

08006124 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10c      	bne.n	8006150 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8006136:	4b13      	ldr	r3, [pc, #76]	; (8006184 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800613e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006142:	d10e      	bne.n	8006162 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006144:	f000 f8ae 	bl	80062a4 <HAL_PWREx_DisableLowPowerRunMode>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d009      	beq.n	8006162 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 800614e:	e016      	b.n	800617e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8006150:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006152:	695b      	ldr	r3, [r3, #20]
 8006154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006158:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800615c:	d001      	beq.n	8006162 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 800615e:	f000 f891 	bl	8006284 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006162:	4b09      	ldr	r3, [pc, #36]	; (8006188 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	4a08      	ldr	r2, [pc, #32]	; (8006188 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006168:	f023 0304 	bic.w	r3, r3, #4
 800616c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006174:	bf30      	wfi
 8006176:	e002      	b.n	800617e <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006178:	bf40      	sev
    __WFE();
 800617a:	bf20      	wfe
    __WFE();
 800617c:	bf20      	wfe
  }

}
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	40007000 	.word	0x40007000
 8006188:	e000ed00 	.word	0xe000ed00

0800618c <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	460b      	mov	r3, r1
 8006196:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if(Regulator == PWR_LOWPOWERREGULATOR_ON)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800619e:	d104      	bne.n	80061aa <HAL_PWR_EnterSTOPMode+0x1e>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 f8e0 	bl	8006368 <HAL_PWREx_EnterSTOP1Mode>
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
  }
}
 80061a8:	e003      	b.n	80061b2 <HAL_PWR_EnterSTOPMode+0x26>
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 f8b1 	bl	8006314 <HAL_PWREx_EnterSTOP0Mode>
}
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80061c0:	4b04      	ldr	r3, [pc, #16]	; (80061d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	40007000 	.word	0x40007000

080061d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e6:	d130      	bne.n	800624a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80061e8:	4b23      	ldr	r3, [pc, #140]	; (8006278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80061f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f4:	d038      	beq.n	8006268 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80061f6:	4b20      	ldr	r3, [pc, #128]	; (8006278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80061fe:	4a1e      	ldr	r2, [pc, #120]	; (8006278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006200:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006204:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006206:	4b1d      	ldr	r3, [pc, #116]	; (800627c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2232      	movs	r2, #50	; 0x32
 800620c:	fb02 f303 	mul.w	r3, r2, r3
 8006210:	4a1b      	ldr	r2, [pc, #108]	; (8006280 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006212:	fba2 2303 	umull	r2, r3, r2, r3
 8006216:	0c9b      	lsrs	r3, r3, #18
 8006218:	3301      	adds	r3, #1
 800621a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800621c:	e002      	b.n	8006224 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3b01      	subs	r3, #1
 8006222:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006224:	4b14      	ldr	r3, [pc, #80]	; (8006278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800622c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006230:	d102      	bne.n	8006238 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1f2      	bne.n	800621e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006238:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006244:	d110      	bne.n	8006268 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e00f      	b.n	800626a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800624a:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006256:	d007      	beq.n	8006268 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006258:	4b07      	ldr	r3, [pc, #28]	; (8006278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006260:	4a05      	ldr	r2, [pc, #20]	; (8006278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006266:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40007000 	.word	0x40007000
 800627c:	20000000 	.word	0x20000000
 8006280:	431bde83 	.word	0x431bde83

08006284 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006288:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a04      	ldr	r2, [pc, #16]	; (80062a0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800628e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006292:	6013      	str	r3, [r2, #0]
}
 8006294:	bf00      	nop
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40007000 	.word	0x40007000

080062a4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80062aa:	4b17      	ldr	r3, [pc, #92]	; (8006308 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a16      	ldr	r2, [pc, #88]	; (8006308 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80062b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062b4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062b6:	4b15      	ldr	r3, [pc, #84]	; (800630c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2232      	movs	r2, #50	; 0x32
 80062bc:	fb02 f303 	mul.w	r3, r2, r3
 80062c0:	4a13      	ldr	r2, [pc, #76]	; (8006310 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80062c2:	fba2 2303 	umull	r2, r3, r2, r3
 80062c6:	0c9b      	lsrs	r3, r3, #18
 80062c8:	3301      	adds	r3, #1
 80062ca:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80062cc:	e002      	b.n	80062d4 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3b01      	subs	r3, #1
 80062d2:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80062d4:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80062d6:	695b      	ldr	r3, [r3, #20]
 80062d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062e0:	d102      	bne.n	80062e8 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1f2      	bne.n	80062ce <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80062e8:	4b07      	ldr	r3, [pc, #28]	; (8006308 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062f4:	d101      	bne.n	80062fa <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e000      	b.n	80062fc <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	40007000 	.word	0x40007000
 800630c:	20000000 	.word	0x20000000
 8006310:	431bde83 	.word	0x431bde83

08006314 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	4603      	mov	r3, r0
 800631c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 800631e:	4b10      	ldr	r3, [pc, #64]	; (8006360 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a0f      	ldr	r2, [pc, #60]	; (8006360 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8006324:	f023 0307 	bic.w	r3, r3, #7
 8006328:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800632a:	4b0e      	ldr	r3, [pc, #56]	; (8006364 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	4a0d      	ldr	r2, [pc, #52]	; (8006364 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8006330:	f043 0304 	orr.w	r3, r3, #4
 8006334:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8006336:	79fb      	ldrb	r3, [r7, #7]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d101      	bne.n	8006340 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800633c:	bf30      	wfi
 800633e:	e002      	b.n	8006346 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006340:	bf40      	sev
    __WFE();
 8006342:	bf20      	wfe
    __WFE();
 8006344:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006346:	4b07      	ldr	r3, [pc, #28]	; (8006364 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	4a06      	ldr	r2, [pc, #24]	; (8006364 <HAL_PWREx_EnterSTOP0Mode+0x50>)
 800634c:	f023 0304 	bic.w	r3, r3, #4
 8006350:	6113      	str	r3, [r2, #16]
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40007000 	.word	0x40007000
 8006364:	e000ed00 	.word	0xe000ed00

08006368 <HAL_PWREx_EnterSTOP1Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP1Mode(uint8_t STOPEntry)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	4603      	mov	r3, r0
 8006370:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 8006372:	4b11      	ldr	r3, [pc, #68]	; (80063b8 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f023 0307 	bic.w	r3, r3, #7
 800637a:	4a0f      	ldr	r2, [pc, #60]	; (80063b8 <HAL_PWREx_EnterSTOP1Mode+0x50>)
 800637c:	f043 0301 	orr.w	r3, r3, #1
 8006380:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006382:	4b0e      	ldr	r3, [pc, #56]	; (80063bc <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	4a0d      	ldr	r2, [pc, #52]	; (80063bc <HAL_PWREx_EnterSTOP1Mode+0x54>)
 8006388:	f043 0304 	orr.w	r3, r3, #4
 800638c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800638e:	79fb      	ldrb	r3, [r7, #7]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d101      	bne.n	8006398 <HAL_PWREx_EnterSTOP1Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006394:	bf30      	wfi
 8006396:	e002      	b.n	800639e <HAL_PWREx_EnterSTOP1Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006398:	bf40      	sev
    __WFE();
 800639a:	bf20      	wfe
    __WFE();
 800639c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800639e:	4b07      	ldr	r3, [pc, #28]	; (80063bc <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	4a06      	ldr	r2, [pc, #24]	; (80063bc <HAL_PWREx_EnterSTOP1Mode+0x54>)
 80063a4:	f023 0304 	bic.w	r3, r3, #4
 80063a8:	6113      	str	r3, [r2, #16]
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40007000 	.word	0x40007000
 80063bc:	e000ed00 	.word	0xe000ed00

080063c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d102      	bne.n	80063d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	f000 bc02 	b.w	8006bd8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063d4:	4b96      	ldr	r3, [pc, #600]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f003 030c 	and.w	r3, r3, #12
 80063dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063de:	4b94      	ldr	r3, [pc, #592]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0310 	and.w	r3, r3, #16
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 80e4 	beq.w	80065be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d007      	beq.n	800640c <HAL_RCC_OscConfig+0x4c>
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b0c      	cmp	r3, #12
 8006400:	f040 808b 	bne.w	800651a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2b01      	cmp	r3, #1
 8006408:	f040 8087 	bne.w	800651a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800640c:	4b88      	ldr	r3, [pc, #544]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d005      	beq.n	8006424 <HAL_RCC_OscConfig+0x64>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e3d9      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a1a      	ldr	r2, [r3, #32]
 8006428:	4b81      	ldr	r3, [pc, #516]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <HAL_RCC_OscConfig+0x7e>
 8006434:	4b7e      	ldr	r3, [pc, #504]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800643c:	e005      	b.n	800644a <HAL_RCC_OscConfig+0x8a>
 800643e:	4b7c      	ldr	r3, [pc, #496]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006440:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006444:	091b      	lsrs	r3, r3, #4
 8006446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800644a:	4293      	cmp	r3, r2
 800644c:	d223      	bcs.n	8006496 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	4618      	mov	r0, r3
 8006454:	f000 fd54 	bl	8006f00 <RCC_SetFlashLatencyFromMSIRange>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e3ba      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006462:	4b73      	ldr	r3, [pc, #460]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a72      	ldr	r2, [pc, #456]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006468:	f043 0308 	orr.w	r3, r3, #8
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	4b70      	ldr	r3, [pc, #448]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	496d      	ldr	r1, [pc, #436]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 800647c:	4313      	orrs	r3, r2
 800647e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006480:	4b6b      	ldr	r3, [pc, #428]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	69db      	ldr	r3, [r3, #28]
 800648c:	021b      	lsls	r3, r3, #8
 800648e:	4968      	ldr	r1, [pc, #416]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006490:	4313      	orrs	r3, r2
 8006492:	604b      	str	r3, [r1, #4]
 8006494:	e025      	b.n	80064e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006496:	4b66      	ldr	r3, [pc, #408]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a65      	ldr	r2, [pc, #404]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 800649c:	f043 0308 	orr.w	r3, r3, #8
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	4b63      	ldr	r3, [pc, #396]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	4960      	ldr	r1, [pc, #384]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80064b4:	4b5e      	ldr	r3, [pc, #376]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	021b      	lsls	r3, r3, #8
 80064c2:	495b      	ldr	r1, [pc, #364]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 80064c4:	4313      	orrs	r3, r2
 80064c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d109      	bne.n	80064e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	4618      	mov	r0, r3
 80064d4:	f000 fd14 	bl	8006f00 <RCC_SetFlashLatencyFromMSIRange>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e37a      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80064e2:	f000 fc81 	bl	8006de8 <HAL_RCC_GetSysClockFreq>
 80064e6:	4602      	mov	r2, r0
 80064e8:	4b51      	ldr	r3, [pc, #324]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	091b      	lsrs	r3, r3, #4
 80064ee:	f003 030f 	and.w	r3, r3, #15
 80064f2:	4950      	ldr	r1, [pc, #320]	; (8006634 <HAL_RCC_OscConfig+0x274>)
 80064f4:	5ccb      	ldrb	r3, [r1, r3]
 80064f6:	f003 031f 	and.w	r3, r3, #31
 80064fa:	fa22 f303 	lsr.w	r3, r2, r3
 80064fe:	4a4e      	ldr	r2, [pc, #312]	; (8006638 <HAL_RCC_OscConfig+0x278>)
 8006500:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006502:	4b4e      	ldr	r3, [pc, #312]	; (800663c <HAL_RCC_OscConfig+0x27c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4618      	mov	r0, r3
 8006508:	f7fd fdbc 	bl	8004084 <HAL_InitTick>
 800650c:	4603      	mov	r3, r0
 800650e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d052      	beq.n	80065bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006516:	7bfb      	ldrb	r3, [r7, #15]
 8006518:	e35e      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d032      	beq.n	8006588 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006522:	4b43      	ldr	r3, [pc, #268]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a42      	ldr	r2, [pc, #264]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006528:	f043 0301 	orr.w	r3, r3, #1
 800652c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800652e:	f7fd fdf9 	bl	8004124 <HAL_GetTick>
 8006532:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006534:	e008      	b.n	8006548 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006536:	f7fd fdf5 	bl	8004124 <HAL_GetTick>
 800653a:	4602      	mov	r2, r0
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b02      	cmp	r3, #2
 8006542:	d901      	bls.n	8006548 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e347      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006548:	4b39      	ldr	r3, [pc, #228]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b00      	cmp	r3, #0
 8006552:	d0f0      	beq.n	8006536 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006554:	4b36      	ldr	r3, [pc, #216]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a35      	ldr	r2, [pc, #212]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 800655a:	f043 0308 	orr.w	r3, r3, #8
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	4b33      	ldr	r3, [pc, #204]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a1b      	ldr	r3, [r3, #32]
 800656c:	4930      	ldr	r1, [pc, #192]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 800656e:	4313      	orrs	r3, r2
 8006570:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006572:	4b2f      	ldr	r3, [pc, #188]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	021b      	lsls	r3, r3, #8
 8006580:	492b      	ldr	r1, [pc, #172]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006582:	4313      	orrs	r3, r2
 8006584:	604b      	str	r3, [r1, #4]
 8006586:	e01a      	b.n	80065be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006588:	4b29      	ldr	r3, [pc, #164]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a28      	ldr	r2, [pc, #160]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 800658e:	f023 0301 	bic.w	r3, r3, #1
 8006592:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006594:	f7fd fdc6 	bl	8004124 <HAL_GetTick>
 8006598:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800659a:	e008      	b.n	80065ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800659c:	f7fd fdc2 	bl	8004124 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	2b02      	cmp	r3, #2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e314      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80065ae:	4b20      	ldr	r3, [pc, #128]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1f0      	bne.n	800659c <HAL_RCC_OscConfig+0x1dc>
 80065ba:	e000      	b.n	80065be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80065bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d073      	beq.n	80066b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	2b08      	cmp	r3, #8
 80065ce:	d005      	beq.n	80065dc <HAL_RCC_OscConfig+0x21c>
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	2b0c      	cmp	r3, #12
 80065d4:	d10e      	bne.n	80065f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d10b      	bne.n	80065f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065dc:	4b14      	ldr	r3, [pc, #80]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d063      	beq.n	80066b0 <HAL_RCC_OscConfig+0x2f0>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d15f      	bne.n	80066b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e2f1      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fc:	d106      	bne.n	800660c <HAL_RCC_OscConfig+0x24c>
 80065fe:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a0b      	ldr	r2, [pc, #44]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006608:	6013      	str	r3, [r2, #0]
 800660a:	e025      	b.n	8006658 <HAL_RCC_OscConfig+0x298>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006614:	d114      	bne.n	8006640 <HAL_RCC_OscConfig+0x280>
 8006616:	4b06      	ldr	r3, [pc, #24]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a05      	ldr	r2, [pc, #20]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 800661c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	4b03      	ldr	r3, [pc, #12]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a02      	ldr	r2, [pc, #8]	; (8006630 <HAL_RCC_OscConfig+0x270>)
 8006628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800662c:	6013      	str	r3, [r2, #0]
 800662e:	e013      	b.n	8006658 <HAL_RCC_OscConfig+0x298>
 8006630:	40021000 	.word	0x40021000
 8006634:	0800cb88 	.word	0x0800cb88
 8006638:	20000000 	.word	0x20000000
 800663c:	20000008 	.word	0x20000008
 8006640:	4ba0      	ldr	r3, [pc, #640]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a9f      	ldr	r2, [pc, #636]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 8006646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	4b9d      	ldr	r3, [pc, #628]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a9c      	ldr	r2, [pc, #624]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 8006652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d013      	beq.n	8006688 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006660:	f7fd fd60 	bl	8004124 <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006668:	f7fd fd5c 	bl	8004124 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b64      	cmp	r3, #100	; 0x64
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e2ae      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800667a:	4b92      	ldr	r3, [pc, #584]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0f0      	beq.n	8006668 <HAL_RCC_OscConfig+0x2a8>
 8006686:	e014      	b.n	80066b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006688:	f7fd fd4c 	bl	8004124 <HAL_GetTick>
 800668c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800668e:	e008      	b.n	80066a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006690:	f7fd fd48 	bl	8004124 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b64      	cmp	r3, #100	; 0x64
 800669c:	d901      	bls.n	80066a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e29a      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80066a2:	4b88      	ldr	r3, [pc, #544]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1f0      	bne.n	8006690 <HAL_RCC_OscConfig+0x2d0>
 80066ae:	e000      	b.n	80066b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d060      	beq.n	8006780 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d005      	beq.n	80066d0 <HAL_RCC_OscConfig+0x310>
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	2b0c      	cmp	r3, #12
 80066c8:	d119      	bne.n	80066fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d116      	bne.n	80066fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066d0:	4b7c      	ldr	r3, [pc, #496]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <HAL_RCC_OscConfig+0x328>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e277      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e8:	4b76      	ldr	r3, [pc, #472]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	061b      	lsls	r3, r3, #24
 80066f6:	4973      	ldr	r1, [pc, #460]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066fc:	e040      	b.n	8006780 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d023      	beq.n	800674e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006706:	4b6f      	ldr	r3, [pc, #444]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a6e      	ldr	r2, [pc, #440]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 800670c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006710:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006712:	f7fd fd07 	bl	8004124 <HAL_GetTick>
 8006716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006718:	e008      	b.n	800672c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800671a:	f7fd fd03 	bl	8004124 <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	2b02      	cmp	r3, #2
 8006726:	d901      	bls.n	800672c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	e255      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800672c:	4b65      	ldr	r3, [pc, #404]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0f0      	beq.n	800671a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006738:	4b62      	ldr	r3, [pc, #392]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	061b      	lsls	r3, r3, #24
 8006746:	495f      	ldr	r1, [pc, #380]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 8006748:	4313      	orrs	r3, r2
 800674a:	604b      	str	r3, [r1, #4]
 800674c:	e018      	b.n	8006780 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800674e:	4b5d      	ldr	r3, [pc, #372]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a5c      	ldr	r2, [pc, #368]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 8006754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675a:	f7fd fce3 	bl	8004124 <HAL_GetTick>
 800675e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006760:	e008      	b.n	8006774 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006762:	f7fd fcdf 	bl	8004124 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d901      	bls.n	8006774 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e231      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006774:	4b53      	ldr	r3, [pc, #332]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1f0      	bne.n	8006762 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0308 	and.w	r3, r3, #8
 8006788:	2b00      	cmp	r3, #0
 800678a:	d03c      	beq.n	8006806 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01c      	beq.n	80067ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006794:	4b4b      	ldr	r3, [pc, #300]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 8006796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800679a:	4a4a      	ldr	r2, [pc, #296]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 800679c:	f043 0301 	orr.w	r3, r3, #1
 80067a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a4:	f7fd fcbe 	bl	8004124 <HAL_GetTick>
 80067a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067aa:	e008      	b.n	80067be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067ac:	f7fd fcba 	bl	8004124 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d901      	bls.n	80067be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e20c      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80067be:	4b41      	ldr	r3, [pc, #260]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 80067c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0ef      	beq.n	80067ac <HAL_RCC_OscConfig+0x3ec>
 80067cc:	e01b      	b.n	8006806 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067ce:	4b3d      	ldr	r3, [pc, #244]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 80067d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067d4:	4a3b      	ldr	r2, [pc, #236]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 80067d6:	f023 0301 	bic.w	r3, r3, #1
 80067da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067de:	f7fd fca1 	bl	8004124 <HAL_GetTick>
 80067e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067e4:	e008      	b.n	80067f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067e6:	f7fd fc9d 	bl	8004124 <HAL_GetTick>
 80067ea:	4602      	mov	r2, r0
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	1ad3      	subs	r3, r2, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e1ef      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80067f8:	4b32      	ldr	r3, [pc, #200]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 80067fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1ef      	bne.n	80067e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0304 	and.w	r3, r3, #4
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 80a6 	beq.w	8006960 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006814:	2300      	movs	r3, #0
 8006816:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006818:	4b2a      	ldr	r3, [pc, #168]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 800681a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800681c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10d      	bne.n	8006840 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006824:	4b27      	ldr	r3, [pc, #156]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 8006826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006828:	4a26      	ldr	r2, [pc, #152]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 800682a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800682e:	6593      	str	r3, [r2, #88]	; 0x58
 8006830:	4b24      	ldr	r3, [pc, #144]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 8006832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006838:	60bb      	str	r3, [r7, #8]
 800683a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800683c:	2301      	movs	r3, #1
 800683e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006840:	4b21      	ldr	r3, [pc, #132]	; (80068c8 <HAL_RCC_OscConfig+0x508>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006848:	2b00      	cmp	r3, #0
 800684a:	d118      	bne.n	800687e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800684c:	4b1e      	ldr	r3, [pc, #120]	; (80068c8 <HAL_RCC_OscConfig+0x508>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a1d      	ldr	r2, [pc, #116]	; (80068c8 <HAL_RCC_OscConfig+0x508>)
 8006852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006856:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006858:	f7fd fc64 	bl	8004124 <HAL_GetTick>
 800685c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006860:	f7fd fc60 	bl	8004124 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b02      	cmp	r3, #2
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e1b2      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006872:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <HAL_RCC_OscConfig+0x508>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f0      	beq.n	8006860 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d108      	bne.n	8006898 <HAL_RCC_OscConfig+0x4d8>
 8006886:	4b0f      	ldr	r3, [pc, #60]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 8006888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800688c:	4a0d      	ldr	r2, [pc, #52]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 800688e:	f043 0301 	orr.w	r3, r3, #1
 8006892:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006896:	e029      	b.n	80068ec <HAL_RCC_OscConfig+0x52c>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	2b05      	cmp	r3, #5
 800689e:	d115      	bne.n	80068cc <HAL_RCC_OscConfig+0x50c>
 80068a0:	4b08      	ldr	r3, [pc, #32]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 80068a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a6:	4a07      	ldr	r2, [pc, #28]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 80068a8:	f043 0304 	orr.w	r3, r3, #4
 80068ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068b0:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 80068b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068b6:	4a03      	ldr	r2, [pc, #12]	; (80068c4 <HAL_RCC_OscConfig+0x504>)
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068c0:	e014      	b.n	80068ec <HAL_RCC_OscConfig+0x52c>
 80068c2:	bf00      	nop
 80068c4:	40021000 	.word	0x40021000
 80068c8:	40007000 	.word	0x40007000
 80068cc:	4b9a      	ldr	r3, [pc, #616]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 80068ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d2:	4a99      	ldr	r2, [pc, #612]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 80068d4:	f023 0301 	bic.w	r3, r3, #1
 80068d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80068dc:	4b96      	ldr	r3, [pc, #600]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 80068de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e2:	4a95      	ldr	r2, [pc, #596]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 80068e4:	f023 0304 	bic.w	r3, r3, #4
 80068e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d016      	beq.n	8006922 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068f4:	f7fd fc16 	bl	8004124 <HAL_GetTick>
 80068f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068fa:	e00a      	b.n	8006912 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068fc:	f7fd fc12 	bl	8004124 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	f241 3288 	movw	r2, #5000	; 0x1388
 800690a:	4293      	cmp	r3, r2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e162      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006912:	4b89      	ldr	r3, [pc, #548]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 8006914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006918:	f003 0302 	and.w	r3, r3, #2
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0ed      	beq.n	80068fc <HAL_RCC_OscConfig+0x53c>
 8006920:	e015      	b.n	800694e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006922:	f7fd fbff 	bl	8004124 <HAL_GetTick>
 8006926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006928:	e00a      	b.n	8006940 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800692a:	f7fd fbfb 	bl	8004124 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	f241 3288 	movw	r2, #5000	; 0x1388
 8006938:	4293      	cmp	r3, r2
 800693a:	d901      	bls.n	8006940 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e14b      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006940:	4b7d      	ldr	r3, [pc, #500]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 8006942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1ed      	bne.n	800692a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800694e:	7ffb      	ldrb	r3, [r7, #31]
 8006950:	2b01      	cmp	r3, #1
 8006952:	d105      	bne.n	8006960 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006954:	4b78      	ldr	r3, [pc, #480]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 8006956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006958:	4a77      	ldr	r2, [pc, #476]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 800695a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800695e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0320 	and.w	r3, r3, #32
 8006968:	2b00      	cmp	r3, #0
 800696a:	d03c      	beq.n	80069e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	2b00      	cmp	r3, #0
 8006972:	d01c      	beq.n	80069ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006974:	4b70      	ldr	r3, [pc, #448]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 8006976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800697a:	4a6f      	ldr	r2, [pc, #444]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 800697c:	f043 0301 	orr.w	r3, r3, #1
 8006980:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006984:	f7fd fbce 	bl	8004124 <HAL_GetTick>
 8006988:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800698a:	e008      	b.n	800699e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800698c:	f7fd fbca 	bl	8004124 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e11c      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800699e:	4b66      	ldr	r3, [pc, #408]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 80069a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0ef      	beq.n	800698c <HAL_RCC_OscConfig+0x5cc>
 80069ac:	e01b      	b.n	80069e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80069ae:	4b62      	ldr	r3, [pc, #392]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 80069b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069b4:	4a60      	ldr	r2, [pc, #384]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 80069b6:	f023 0301 	bic.w	r3, r3, #1
 80069ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069be:	f7fd fbb1 	bl	8004124 <HAL_GetTick>
 80069c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80069c4:	e008      	b.n	80069d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80069c6:	f7fd fbad 	bl	8004124 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e0ff      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80069d8:	4b57      	ldr	r3, [pc, #348]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 80069da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069de:	f003 0302 	and.w	r3, r3, #2
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1ef      	bne.n	80069c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 80f3 	beq.w	8006bd6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	f040 80c9 	bne.w	8006b8c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80069fa:	4b4f      	ldr	r3, [pc, #316]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 80069fc:	68db      	ldr	r3, [r3, #12]
 80069fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f003 0203 	and.w	r2, r3, #3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d12c      	bne.n	8006a68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d123      	bne.n	8006a68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d11b      	bne.n	8006a68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d113      	bne.n	8006a68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4a:	085b      	lsrs	r3, r3, #1
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d109      	bne.n	8006a68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	085b      	lsrs	r3, r3, #1
 8006a60:	3b01      	subs	r3, #1
 8006a62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d06b      	beq.n	8006b40 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	2b0c      	cmp	r3, #12
 8006a6c:	d062      	beq.n	8006b34 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006a6e:	4b32      	ldr	r3, [pc, #200]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e0ac      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006a7e:	4b2e      	ldr	r3, [pc, #184]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a2d      	ldr	r2, [pc, #180]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 8006a84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a88:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a8a:	f7fd fb4b 	bl	8004124 <HAL_GetTick>
 8006a8e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a90:	e008      	b.n	8006aa4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a92:	f7fd fb47 	bl	8004124 <HAL_GetTick>
 8006a96:	4602      	mov	r2, r0
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d901      	bls.n	8006aa4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	e099      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006aa4:	4b24      	ldr	r3, [pc, #144]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1f0      	bne.n	8006a92 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ab0:	4b21      	ldr	r3, [pc, #132]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 8006ab2:	68da      	ldr	r2, [r3, #12]
 8006ab4:	4b21      	ldr	r3, [pc, #132]	; (8006b3c <HAL_RCC_OscConfig+0x77c>)
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ac0:	3a01      	subs	r2, #1
 8006ac2:	0112      	lsls	r2, r2, #4
 8006ac4:	4311      	orrs	r1, r2
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006aca:	0212      	lsls	r2, r2, #8
 8006acc:	4311      	orrs	r1, r2
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ad2:	0852      	lsrs	r2, r2, #1
 8006ad4:	3a01      	subs	r2, #1
 8006ad6:	0552      	lsls	r2, r2, #21
 8006ad8:	4311      	orrs	r1, r2
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006ade:	0852      	lsrs	r2, r2, #1
 8006ae0:	3a01      	subs	r2, #1
 8006ae2:	0652      	lsls	r2, r2, #25
 8006ae4:	4311      	orrs	r1, r2
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006aea:	06d2      	lsls	r2, r2, #27
 8006aec:	430a      	orrs	r2, r1
 8006aee:	4912      	ldr	r1, [pc, #72]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006af4:	4b10      	ldr	r3, [pc, #64]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a0f      	ldr	r2, [pc, #60]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 8006afa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006afe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b00:	4b0d      	ldr	r3, [pc, #52]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	4a0c      	ldr	r2, [pc, #48]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 8006b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b0c:	f7fd fb0a 	bl	8004124 <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b14:	f7fd fb06 	bl	8004124 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e058      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b26:	4b04      	ldr	r3, [pc, #16]	; (8006b38 <HAL_RCC_OscConfig+0x778>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0f0      	beq.n	8006b14 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b32:	e050      	b.n	8006bd6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	e04f      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
 8006b38:	40021000 	.word	0x40021000
 8006b3c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b40:	4b27      	ldr	r3, [pc, #156]	; (8006be0 <HAL_RCC_OscConfig+0x820>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d144      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006b4c:	4b24      	ldr	r3, [pc, #144]	; (8006be0 <HAL_RCC_OscConfig+0x820>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a23      	ldr	r2, [pc, #140]	; (8006be0 <HAL_RCC_OscConfig+0x820>)
 8006b52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b58:	4b21      	ldr	r3, [pc, #132]	; (8006be0 <HAL_RCC_OscConfig+0x820>)
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	4a20      	ldr	r2, [pc, #128]	; (8006be0 <HAL_RCC_OscConfig+0x820>)
 8006b5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006b64:	f7fd fade 	bl	8004124 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b6c:	f7fd fada 	bl	8004124 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e02c      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b7e:	4b18      	ldr	r3, [pc, #96]	; (8006be0 <HAL_RCC_OscConfig+0x820>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0f0      	beq.n	8006b6c <HAL_RCC_OscConfig+0x7ac>
 8006b8a:	e024      	b.n	8006bd6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	2b0c      	cmp	r3, #12
 8006b90:	d01f      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b92:	4b13      	ldr	r3, [pc, #76]	; (8006be0 <HAL_RCC_OscConfig+0x820>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a12      	ldr	r2, [pc, #72]	; (8006be0 <HAL_RCC_OscConfig+0x820>)
 8006b98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9e:	f7fd fac1 	bl	8004124 <HAL_GetTick>
 8006ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ba6:	f7fd fabd 	bl	8004124 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e00f      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006bb8:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <HAL_RCC_OscConfig+0x820>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1f0      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006bc4:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <HAL_RCC_OscConfig+0x820>)
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	4905      	ldr	r1, [pc, #20]	; (8006be0 <HAL_RCC_OscConfig+0x820>)
 8006bca:	4b06      	ldr	r3, [pc, #24]	; (8006be4 <HAL_RCC_OscConfig+0x824>)
 8006bcc:	4013      	ands	r3, r2
 8006bce:	60cb      	str	r3, [r1, #12]
 8006bd0:	e001      	b.n	8006bd6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	40021000 	.word	0x40021000
 8006be4:	feeefffc 	.word	0xfeeefffc

08006be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e0e7      	b.n	8006dcc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bfc:	4b75      	ldr	r3, [pc, #468]	; (8006dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d910      	bls.n	8006c2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c0a:	4b72      	ldr	r3, [pc, #456]	; (8006dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f023 0207 	bic.w	r2, r3, #7
 8006c12:	4970      	ldr	r1, [pc, #448]	; (8006dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c1a:	4b6e      	ldr	r3, [pc, #440]	; (8006dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0307 	and.w	r3, r3, #7
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d001      	beq.n	8006c2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e0cf      	b.n	8006dcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d010      	beq.n	8006c5a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689a      	ldr	r2, [r3, #8]
 8006c3c:	4b66      	ldr	r3, [pc, #408]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d908      	bls.n	8006c5a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c48:	4b63      	ldr	r3, [pc, #396]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	4960      	ldr	r1, [pc, #384]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d04c      	beq.n	8006d00 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	2b03      	cmp	r3, #3
 8006c6c:	d107      	bne.n	8006c7e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c6e:	4b5a      	ldr	r3, [pc, #360]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d121      	bne.n	8006cbe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e0a6      	b.n	8006dcc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d107      	bne.n	8006c96 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c86:	4b54      	ldr	r3, [pc, #336]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d115      	bne.n	8006cbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e09a      	b.n	8006dcc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d107      	bne.n	8006cae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c9e:	4b4e      	ldr	r3, [pc, #312]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d109      	bne.n	8006cbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e08e      	b.n	8006dcc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cae:	4b4a      	ldr	r3, [pc, #296]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d101      	bne.n	8006cbe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e086      	b.n	8006dcc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006cbe:	4b46      	ldr	r3, [pc, #280]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f023 0203 	bic.w	r2, r3, #3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	4943      	ldr	r1, [pc, #268]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cd0:	f7fd fa28 	bl	8004124 <HAL_GetTick>
 8006cd4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cd6:	e00a      	b.n	8006cee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cd8:	f7fd fa24 	bl	8004124 <HAL_GetTick>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e06e      	b.n	8006dcc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cee:	4b3a      	ldr	r3, [pc, #232]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f003 020c 	and.w	r2, r3, #12
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d1eb      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0302 	and.w	r3, r3, #2
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d010      	beq.n	8006d2e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	689a      	ldr	r2, [r3, #8]
 8006d10:	4b31      	ldr	r3, [pc, #196]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d208      	bcs.n	8006d2e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d1c:	4b2e      	ldr	r3, [pc, #184]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	492b      	ldr	r1, [pc, #172]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d2e:	4b29      	ldr	r3, [pc, #164]	; (8006dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d210      	bcs.n	8006d5e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d3c:	4b25      	ldr	r3, [pc, #148]	; (8006dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f023 0207 	bic.w	r2, r3, #7
 8006d44:	4923      	ldr	r1, [pc, #140]	; (8006dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d4c:	4b21      	ldr	r3, [pc, #132]	; (8006dd4 <HAL_RCC_ClockConfig+0x1ec>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0307 	and.w	r3, r3, #7
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d001      	beq.n	8006d5e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e036      	b.n	8006dcc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0304 	and.w	r3, r3, #4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d008      	beq.n	8006d7c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d6a:	4b1b      	ldr	r3, [pc, #108]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	4918      	ldr	r1, [pc, #96]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f003 0308 	and.w	r3, r3, #8
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d009      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d88:	4b13      	ldr	r3, [pc, #76]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	4910      	ldr	r1, [pc, #64]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d9c:	f000 f824 	bl	8006de8 <HAL_RCC_GetSysClockFreq>
 8006da0:	4602      	mov	r2, r0
 8006da2:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <HAL_RCC_ClockConfig+0x1f0>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	091b      	lsrs	r3, r3, #4
 8006da8:	f003 030f 	and.w	r3, r3, #15
 8006dac:	490b      	ldr	r1, [pc, #44]	; (8006ddc <HAL_RCC_ClockConfig+0x1f4>)
 8006dae:	5ccb      	ldrb	r3, [r1, r3]
 8006db0:	f003 031f 	and.w	r3, r3, #31
 8006db4:	fa22 f303 	lsr.w	r3, r2, r3
 8006db8:	4a09      	ldr	r2, [pc, #36]	; (8006de0 <HAL_RCC_ClockConfig+0x1f8>)
 8006dba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006dbc:	4b09      	ldr	r3, [pc, #36]	; (8006de4 <HAL_RCC_ClockConfig+0x1fc>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f7fd f95f 	bl	8004084 <HAL_InitTick>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	72fb      	strb	r3, [r7, #11]

  return status;
 8006dca:	7afb      	ldrb	r3, [r7, #11]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	40022000 	.word	0x40022000
 8006dd8:	40021000 	.word	0x40021000
 8006ddc:	0800cb88 	.word	0x0800cb88
 8006de0:	20000000 	.word	0x20000000
 8006de4:	20000008 	.word	0x20000008

08006de8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b089      	sub	sp, #36	; 0x24
 8006dec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	61fb      	str	r3, [r7, #28]
 8006df2:	2300      	movs	r3, #0
 8006df4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006df6:	4b3e      	ldr	r3, [pc, #248]	; (8006ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f003 030c 	and.w	r3, r3, #12
 8006dfe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e00:	4b3b      	ldr	r3, [pc, #236]	; (8006ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	f003 0303 	and.w	r3, r3, #3
 8006e08:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d005      	beq.n	8006e1c <HAL_RCC_GetSysClockFreq+0x34>
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	2b0c      	cmp	r3, #12
 8006e14:	d121      	bne.n	8006e5a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d11e      	bne.n	8006e5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006e1c:	4b34      	ldr	r3, [pc, #208]	; (8006ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0308 	and.w	r3, r3, #8
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d107      	bne.n	8006e38 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006e28:	4b31      	ldr	r3, [pc, #196]	; (8006ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e2e:	0a1b      	lsrs	r3, r3, #8
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	61fb      	str	r3, [r7, #28]
 8006e36:	e005      	b.n	8006e44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006e38:	4b2d      	ldr	r3, [pc, #180]	; (8006ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	091b      	lsrs	r3, r3, #4
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006e44:	4a2b      	ldr	r2, [pc, #172]	; (8006ef4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e4c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10d      	bne.n	8006e70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006e58:	e00a      	b.n	8006e70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	d102      	bne.n	8006e66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006e60:	4b25      	ldr	r3, [pc, #148]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e62:	61bb      	str	r3, [r7, #24]
 8006e64:	e004      	b.n	8006e70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d101      	bne.n	8006e70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006e6c:	4b23      	ldr	r3, [pc, #140]	; (8006efc <HAL_RCC_GetSysClockFreq+0x114>)
 8006e6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	2b0c      	cmp	r3, #12
 8006e74:	d134      	bne.n	8006ee0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006e76:	4b1e      	ldr	r3, [pc, #120]	; (8006ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d003      	beq.n	8006e8e <HAL_RCC_GetSysClockFreq+0xa6>
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b03      	cmp	r3, #3
 8006e8a:	d003      	beq.n	8006e94 <HAL_RCC_GetSysClockFreq+0xac>
 8006e8c:	e005      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006e8e:	4b1a      	ldr	r3, [pc, #104]	; (8006ef8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006e90:	617b      	str	r3, [r7, #20]
      break;
 8006e92:	e005      	b.n	8006ea0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006e94:	4b19      	ldr	r3, [pc, #100]	; (8006efc <HAL_RCC_GetSysClockFreq+0x114>)
 8006e96:	617b      	str	r3, [r7, #20]
      break;
 8006e98:	e002      	b.n	8006ea0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006e9a:	69fb      	ldr	r3, [r7, #28]
 8006e9c:	617b      	str	r3, [r7, #20]
      break;
 8006e9e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ea0:	4b13      	ldr	r3, [pc, #76]	; (8006ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	091b      	lsrs	r3, r3, #4
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	3301      	adds	r3, #1
 8006eac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006eae:	4b10      	ldr	r3, [pc, #64]	; (8006ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	0a1b      	lsrs	r3, r3, #8
 8006eb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	fb03 f202 	mul.w	r2, r3, r2
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ec4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ec6:	4b0a      	ldr	r3, [pc, #40]	; (8006ef0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	0e5b      	lsrs	r3, r3, #25
 8006ecc:	f003 0303 	and.w	r3, r3, #3
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ede:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3724      	adds	r7, #36	; 0x24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	40021000 	.word	0x40021000
 8006ef4:	0800cba0 	.word	0x0800cba0
 8006ef8:	00f42400 	.word	0x00f42400
 8006efc:	007a1200 	.word	0x007a1200

08006f00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006f08:	2300      	movs	r3, #0
 8006f0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006f0c:	4b2a      	ldr	r3, [pc, #168]	; (8006fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d003      	beq.n	8006f20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006f18:	f7ff f950 	bl	80061bc <HAL_PWREx_GetVoltageRange>
 8006f1c:	6178      	str	r0, [r7, #20]
 8006f1e:	e014      	b.n	8006f4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f20:	4b25      	ldr	r3, [pc, #148]	; (8006fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f24:	4a24      	ldr	r2, [pc, #144]	; (8006fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f2a:	6593      	str	r3, [r2, #88]	; 0x58
 8006f2c:	4b22      	ldr	r3, [pc, #136]	; (8006fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f34:	60fb      	str	r3, [r7, #12]
 8006f36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006f38:	f7ff f940 	bl	80061bc <HAL_PWREx_GetVoltageRange>
 8006f3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006f3e:	4b1e      	ldr	r3, [pc, #120]	; (8006fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f42:	4a1d      	ldr	r2, [pc, #116]	; (8006fb8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f48:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f50:	d10b      	bne.n	8006f6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2b80      	cmp	r3, #128	; 0x80
 8006f56:	d919      	bls.n	8006f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2ba0      	cmp	r3, #160	; 0xa0
 8006f5c:	d902      	bls.n	8006f64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f5e:	2302      	movs	r3, #2
 8006f60:	613b      	str	r3, [r7, #16]
 8006f62:	e013      	b.n	8006f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f64:	2301      	movs	r3, #1
 8006f66:	613b      	str	r3, [r7, #16]
 8006f68:	e010      	b.n	8006f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b80      	cmp	r3, #128	; 0x80
 8006f6e:	d902      	bls.n	8006f76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006f70:	2303      	movs	r3, #3
 8006f72:	613b      	str	r3, [r7, #16]
 8006f74:	e00a      	b.n	8006f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2b80      	cmp	r3, #128	; 0x80
 8006f7a:	d102      	bne.n	8006f82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	613b      	str	r3, [r7, #16]
 8006f80:	e004      	b.n	8006f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2b70      	cmp	r3, #112	; 0x70
 8006f86:	d101      	bne.n	8006f8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f88:	2301      	movs	r3, #1
 8006f8a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006f8c:	4b0b      	ldr	r3, [pc, #44]	; (8006fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f023 0207 	bic.w	r2, r3, #7
 8006f94:	4909      	ldr	r1, [pc, #36]	; (8006fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006f9c:	4b07      	ldr	r3, [pc, #28]	; (8006fbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0307 	and.w	r3, r3, #7
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d001      	beq.n	8006fae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e000      	b.n	8006fb0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	40021000 	.word	0x40021000
 8006fbc:	40022000 	.word	0x40022000

08006fc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006fc8:	2300      	movs	r3, #0
 8006fca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006fcc:	2300      	movs	r3, #0
 8006fce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d031      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fe0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006fe4:	d01a      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006fe6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006fea:	d814      	bhi.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d009      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006ff0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ff4:	d10f      	bne.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006ff6:	4b5d      	ldr	r3, [pc, #372]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	4a5c      	ldr	r2, [pc, #368]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007000:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007002:	e00c      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3304      	adds	r3, #4
 8007008:	2100      	movs	r1, #0
 800700a:	4618      	mov	r0, r3
 800700c:	f000 f9de 	bl	80073cc <RCCEx_PLLSAI1_Config>
 8007010:	4603      	mov	r3, r0
 8007012:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007014:	e003      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	74fb      	strb	r3, [r7, #19]
      break;
 800701a:	e000      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800701c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800701e:	7cfb      	ldrb	r3, [r7, #19]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10b      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007024:	4b51      	ldr	r3, [pc, #324]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800702a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007032:	494e      	ldr	r1, [pc, #312]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007034:	4313      	orrs	r3, r2
 8007036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800703a:	e001      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703c:	7cfb      	ldrb	r3, [r7, #19]
 800703e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 809e 	beq.w	800718a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800704e:	2300      	movs	r3, #0
 8007050:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007052:	4b46      	ldr	r3, [pc, #280]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800705e:	2301      	movs	r3, #1
 8007060:	e000      	b.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007062:	2300      	movs	r3, #0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00d      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007068:	4b40      	ldr	r3, [pc, #256]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800706a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800706c:	4a3f      	ldr	r2, [pc, #252]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800706e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007072:	6593      	str	r3, [r2, #88]	; 0x58
 8007074:	4b3d      	ldr	r3, [pc, #244]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800707c:	60bb      	str	r3, [r7, #8]
 800707e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007080:	2301      	movs	r3, #1
 8007082:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007084:	4b3a      	ldr	r3, [pc, #232]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a39      	ldr	r2, [pc, #228]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800708a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800708e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007090:	f7fd f848 	bl	8004124 <HAL_GetTick>
 8007094:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007096:	e009      	b.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007098:	f7fd f844 	bl	8004124 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d902      	bls.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	74fb      	strb	r3, [r7, #19]
        break;
 80070aa:	e005      	b.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070ac:	4b30      	ldr	r3, [pc, #192]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0ef      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80070b8:	7cfb      	ldrb	r3, [r7, #19]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d15a      	bne.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80070be:	4b2b      	ldr	r3, [pc, #172]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d01e      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d019      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80070da:	4b24      	ldr	r3, [pc, #144]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80070e6:	4b21      	ldr	r3, [pc, #132]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ec:	4a1f      	ldr	r2, [pc, #124]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80070f6:	4b1d      	ldr	r3, [pc, #116]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fc:	4a1b      	ldr	r2, [pc, #108]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007106:	4a19      	ldr	r2, [pc, #100]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007108:	697b      	ldr	r3, [r7, #20]
 800710a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d016      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007118:	f7fd f804 	bl	8004124 <HAL_GetTick>
 800711c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800711e:	e00b      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007120:	f7fd f800 	bl	8004124 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	f241 3288 	movw	r2, #5000	; 0x1388
 800712e:	4293      	cmp	r3, r2
 8007130:	d902      	bls.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007132:	2303      	movs	r3, #3
 8007134:	74fb      	strb	r3, [r7, #19]
            break;
 8007136:	e006      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007138:	4b0c      	ldr	r3, [pc, #48]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800713a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713e:	f003 0302 	and.w	r3, r3, #2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0ec      	beq.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007146:	7cfb      	ldrb	r3, [r7, #19]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10b      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800714c:	4b07      	ldr	r3, [pc, #28]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800714e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007152:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800715a:	4904      	ldr	r1, [pc, #16]	; (800716c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800715c:	4313      	orrs	r3, r2
 800715e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007162:	e009      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007164:	7cfb      	ldrb	r3, [r7, #19]
 8007166:	74bb      	strb	r3, [r7, #18]
 8007168:	e006      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800716a:	bf00      	nop
 800716c:	40021000 	.word	0x40021000
 8007170:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007174:	7cfb      	ldrb	r3, [r7, #19]
 8007176:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007178:	7c7b      	ldrb	r3, [r7, #17]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d105      	bne.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800717e:	4b8a      	ldr	r3, [pc, #552]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007182:	4a89      	ldr	r2, [pc, #548]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007184:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007188:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007196:	4b84      	ldr	r3, [pc, #528]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800719c:	f023 0203 	bic.w	r2, r3, #3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a1b      	ldr	r3, [r3, #32]
 80071a4:	4980      	ldr	r1, [pc, #512]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0302 	and.w	r3, r3, #2
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00a      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071b8:	4b7b      	ldr	r3, [pc, #492]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071be:	f023 020c 	bic.w	r2, r3, #12
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	4978      	ldr	r1, [pc, #480]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80071da:	4b73      	ldr	r3, [pc, #460]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e8:	496f      	ldr	r1, [pc, #444]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00a      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80071fc:	4b6a      	ldr	r3, [pc, #424]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80071fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007202:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720a:	4967      	ldr	r1, [pc, #412]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800720c:	4313      	orrs	r3, r2
 800720e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00a      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800721e:	4b62      	ldr	r3, [pc, #392]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007224:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800722c:	495e      	ldr	r1, [pc, #376]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800722e:	4313      	orrs	r3, r2
 8007230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00a      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007240:	4b59      	ldr	r3, [pc, #356]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007246:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724e:	4956      	ldr	r1, [pc, #344]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007250:	4313      	orrs	r3, r2
 8007252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007262:	4b51      	ldr	r3, [pc, #324]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007268:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007270:	494d      	ldr	r1, [pc, #308]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007272:	4313      	orrs	r3, r2
 8007274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d028      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007284:	4b48      	ldr	r3, [pc, #288]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	4945      	ldr	r1, [pc, #276]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007294:	4313      	orrs	r3, r2
 8007296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072a2:	d106      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072a4:	4b40      	ldr	r3, [pc, #256]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	4a3f      	ldr	r2, [pc, #252]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072ae:	60d3      	str	r3, [r2, #12]
 80072b0:	e011      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072ba:	d10c      	bne.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3304      	adds	r3, #4
 80072c0:	2101      	movs	r1, #1
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 f882 	bl	80073cc <RCCEx_PLLSAI1_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80072cc:	7cfb      	ldrb	r3, [r7, #19]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80072d2:	7cfb      	ldrb	r3, [r7, #19]
 80072d4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d028      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072e2:	4b31      	ldr	r3, [pc, #196]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f0:	492d      	ldr	r1, [pc, #180]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072f2:	4313      	orrs	r3, r2
 80072f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007300:	d106      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007302:	4b29      	ldr	r3, [pc, #164]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	4a28      	ldr	r2, [pc, #160]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800730c:	60d3      	str	r3, [r2, #12]
 800730e:	e011      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007314:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007318:	d10c      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	3304      	adds	r3, #4
 800731e:	2101      	movs	r1, #1
 8007320:	4618      	mov	r0, r3
 8007322:	f000 f853 	bl	80073cc <RCCEx_PLLSAI1_Config>
 8007326:	4603      	mov	r3, r0
 8007328:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800732a:	7cfb      	ldrb	r3, [r7, #19]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8007330:	7cfb      	ldrb	r3, [r7, #19]
 8007332:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01c      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007340:	4b19      	ldr	r3, [pc, #100]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007346:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800734e:	4916      	ldr	r1, [pc, #88]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007350:	4313      	orrs	r3, r2
 8007352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800735a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800735e:	d10c      	bne.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3304      	adds	r3, #4
 8007364:	2102      	movs	r1, #2
 8007366:	4618      	mov	r0, r3
 8007368:	f000 f830 	bl	80073cc <RCCEx_PLLSAI1_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007370:	7cfb      	ldrb	r3, [r7, #19]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d001      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8007376:	7cfb      	ldrb	r3, [r7, #19]
 8007378:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007386:	4b08      	ldr	r3, [pc, #32]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800738c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007394:	4904      	ldr	r1, [pc, #16]	; (80073a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007396:	4313      	orrs	r3, r2
 8007398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800739c:	7cbb      	ldrb	r3, [r7, #18]
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	40021000 	.word	0x40021000

080073ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80073b0:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a04      	ldr	r2, [pc, #16]	; (80073c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80073b6:	f043 0304 	orr.w	r3, r3, #4
 80073ba:	6013      	str	r3, [r2, #0]
}
 80073bc:	bf00      	nop
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40021000 	.word	0x40021000

080073cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80073da:	4b74      	ldr	r3, [pc, #464]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	f003 0303 	and.w	r3, r3, #3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d018      	beq.n	8007418 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80073e6:	4b71      	ldr	r3, [pc, #452]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f003 0203 	and.w	r2, r3, #3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d10d      	bne.n	8007412 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
       ||
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d009      	beq.n	8007412 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80073fe:	4b6b      	ldr	r3, [pc, #428]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	091b      	lsrs	r3, r3, #4
 8007404:	f003 0307 	and.w	r3, r3, #7
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
       ||
 800740e:	429a      	cmp	r2, r3
 8007410:	d047      	beq.n	80074a2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	73fb      	strb	r3, [r7, #15]
 8007416:	e044      	b.n	80074a2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b03      	cmp	r3, #3
 800741e:	d018      	beq.n	8007452 <RCCEx_PLLSAI1_Config+0x86>
 8007420:	2b03      	cmp	r3, #3
 8007422:	d825      	bhi.n	8007470 <RCCEx_PLLSAI1_Config+0xa4>
 8007424:	2b01      	cmp	r3, #1
 8007426:	d002      	beq.n	800742e <RCCEx_PLLSAI1_Config+0x62>
 8007428:	2b02      	cmp	r3, #2
 800742a:	d009      	beq.n	8007440 <RCCEx_PLLSAI1_Config+0x74>
 800742c:	e020      	b.n	8007470 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800742e:	4b5f      	ldr	r3, [pc, #380]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0302 	and.w	r3, r3, #2
 8007436:	2b00      	cmp	r3, #0
 8007438:	d11d      	bne.n	8007476 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800743e:	e01a      	b.n	8007476 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007440:	4b5a      	ldr	r3, [pc, #360]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007448:	2b00      	cmp	r3, #0
 800744a:	d116      	bne.n	800747a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007450:	e013      	b.n	800747a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007452:	4b56      	ldr	r3, [pc, #344]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10f      	bne.n	800747e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800745e:	4b53      	ldr	r3, [pc, #332]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007466:	2b00      	cmp	r3, #0
 8007468:	d109      	bne.n	800747e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800746e:	e006      	b.n	800747e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	73fb      	strb	r3, [r7, #15]
      break;
 8007474:	e004      	b.n	8007480 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007476:	bf00      	nop
 8007478:	e002      	b.n	8007480 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800747a:	bf00      	nop
 800747c:	e000      	b.n	8007480 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800747e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007480:	7bfb      	ldrb	r3, [r7, #15]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10d      	bne.n	80074a2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007486:	4b49      	ldr	r3, [pc, #292]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6819      	ldr	r1, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	3b01      	subs	r3, #1
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	430b      	orrs	r3, r1
 800749c:	4943      	ldr	r1, [pc, #268]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d17c      	bne.n	80075a2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80074a8:	4b40      	ldr	r3, [pc, #256]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a3f      	ldr	r2, [pc, #252]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074b4:	f7fc fe36 	bl	8004124 <HAL_GetTick>
 80074b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80074ba:	e009      	b.n	80074d0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074bc:	f7fc fe32 	bl	8004124 <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d902      	bls.n	80074d0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80074ca:	2303      	movs	r3, #3
 80074cc:	73fb      	strb	r3, [r7, #15]
        break;
 80074ce:	e005      	b.n	80074dc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80074d0:	4b36      	ldr	r3, [pc, #216]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1ef      	bne.n	80074bc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d15f      	bne.n	80075a2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d110      	bne.n	800750a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074e8:	4b30      	ldr	r3, [pc, #192]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80074f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	6892      	ldr	r2, [r2, #8]
 80074f8:	0211      	lsls	r1, r2, #8
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	68d2      	ldr	r2, [r2, #12]
 80074fe:	06d2      	lsls	r2, r2, #27
 8007500:	430a      	orrs	r2, r1
 8007502:	492a      	ldr	r1, [pc, #168]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007504:	4313      	orrs	r3, r2
 8007506:	610b      	str	r3, [r1, #16]
 8007508:	e027      	b.n	800755a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d112      	bne.n	8007536 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007510:	4b26      	ldr	r3, [pc, #152]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007518:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	6892      	ldr	r2, [r2, #8]
 8007520:	0211      	lsls	r1, r2, #8
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	6912      	ldr	r2, [r2, #16]
 8007526:	0852      	lsrs	r2, r2, #1
 8007528:	3a01      	subs	r2, #1
 800752a:	0552      	lsls	r2, r2, #21
 800752c:	430a      	orrs	r2, r1
 800752e:	491f      	ldr	r1, [pc, #124]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007530:	4313      	orrs	r3, r2
 8007532:	610b      	str	r3, [r1, #16]
 8007534:	e011      	b.n	800755a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007536:	4b1d      	ldr	r3, [pc, #116]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800753e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	6892      	ldr	r2, [r2, #8]
 8007546:	0211      	lsls	r1, r2, #8
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	6952      	ldr	r2, [r2, #20]
 800754c:	0852      	lsrs	r2, r2, #1
 800754e:	3a01      	subs	r2, #1
 8007550:	0652      	lsls	r2, r2, #25
 8007552:	430a      	orrs	r2, r1
 8007554:	4915      	ldr	r1, [pc, #84]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007556:	4313      	orrs	r3, r2
 8007558:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800755a:	4b14      	ldr	r3, [pc, #80]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a13      	ldr	r2, [pc, #76]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007560:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007564:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007566:	f7fc fddd 	bl	8004124 <HAL_GetTick>
 800756a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800756c:	e009      	b.n	8007582 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800756e:	f7fc fdd9 	bl	8004124 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d902      	bls.n	8007582 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800757c:	2303      	movs	r3, #3
 800757e:	73fb      	strb	r3, [r7, #15]
          break;
 8007580:	e005      	b.n	800758e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007582:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d0ef      	beq.n	800756e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d106      	bne.n	80075a2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007594:	4b05      	ldr	r3, [pc, #20]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 8007596:	691a      	ldr	r2, [r3, #16]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	699b      	ldr	r3, [r3, #24]
 800759c:	4903      	ldr	r1, [pc, #12]	; (80075ac <RCCEx_PLLSAI1_Config+0x1e0>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	40021000 	.word	0x40021000

080075b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d06c      	beq.n	800769c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d106      	bne.n	80075dc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7fb fdc4 	bl	8003164 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	22ca      	movs	r2, #202	; 0xca
 80075ea:	625a      	str	r2, [r3, #36]	; 0x24
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2253      	movs	r2, #83	; 0x53
 80075f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f000 fa49 	bl	8007a8c <RTC_EnterInitMode>
 80075fa:	4603      	mov	r3, r0
 80075fc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80075fe:	7bfb      	ldrb	r3, [r7, #15]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d14b      	bne.n	800769c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6812      	ldr	r2, [r2, #0]
 800760e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007616:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6899      	ldr	r1, [r3, #8]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685a      	ldr	r2, [r3, #4]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	431a      	orrs	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	431a      	orrs	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	68d2      	ldr	r2, [r2, #12]
 800763e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6919      	ldr	r1, [r3, #16]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	041a      	lsls	r2, r3, #16
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 fa4d 	bl	8007af4 <RTC_ExitInitMode>
 800765a:	4603      	mov	r3, r0
 800765c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800765e:	7bfb      	ldrb	r3, [r7, #15]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d11b      	bne.n	800769c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0203 	bic.w	r2, r2, #3
 8007672:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	69da      	ldr	r2, [r3, #28]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	431a      	orrs	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	22ff      	movs	r2, #255	; 0xff
 8007692:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800769c:	7bfb      	ldrb	r3, [r7, #15]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80076a6:	b590      	push	{r4, r7, lr}
 80076a8:	b087      	sub	sp, #28
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	60f8      	str	r0, [r7, #12]
 80076ae:	60b9      	str	r1, [r7, #8]
 80076b0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d101      	bne.n	80076c0 <HAL_RTC_SetTime+0x1a>
 80076bc:	2302      	movs	r3, #2
 80076be:	e08b      	b.n	80077d8 <HAL_RTC_SetTime+0x132>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2202      	movs	r2, #2
 80076cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	22ca      	movs	r2, #202	; 0xca
 80076d6:	625a      	str	r2, [r3, #36]	; 0x24
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2253      	movs	r2, #83	; 0x53
 80076de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 f9d3 	bl	8007a8c <RTC_EnterInitMode>
 80076e6:	4603      	mov	r3, r0
 80076e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80076ea:	7cfb      	ldrb	r3, [r7, #19]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d163      	bne.n	80077b8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d126      	bne.n	8007744 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007700:	2b00      	cmp	r3, #0
 8007702:	d102      	bne.n	800770a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2200      	movs	r2, #0
 8007708:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	4618      	mov	r0, r3
 8007710:	f000 fa2e 	bl	8007b70 <RTC_ByteToBcd2>
 8007714:	4603      	mov	r3, r0
 8007716:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	785b      	ldrb	r3, [r3, #1]
 800771c:	4618      	mov	r0, r3
 800771e:	f000 fa27 	bl	8007b70 <RTC_ByteToBcd2>
 8007722:	4603      	mov	r3, r0
 8007724:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007726:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	789b      	ldrb	r3, [r3, #2]
 800772c:	4618      	mov	r0, r3
 800772e:	f000 fa1f 	bl	8007b70 <RTC_ByteToBcd2>
 8007732:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007734:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	78db      	ldrb	r3, [r3, #3]
 800773c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800773e:	4313      	orrs	r3, r2
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	e018      	b.n	8007776 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	689b      	ldr	r3, [r3, #8]
 800774a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800774e:	2b00      	cmp	r3, #0
 8007750:	d102      	bne.n	8007758 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2200      	movs	r2, #0
 8007756:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	785b      	ldrb	r3, [r3, #1]
 8007762:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007764:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800776a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	78db      	ldrb	r3, [r3, #3]
 8007770:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007772:	4313      	orrs	r3, r2
 8007774:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007780:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007784:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007794:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	6899      	ldr	r1, [r3, #8]
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	68da      	ldr	r2, [r3, #12]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	431a      	orrs	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 f9a0 	bl	8007af4 <RTC_ExitInitMode>
 80077b4:	4603      	mov	r3, r0
 80077b6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	22ff      	movs	r2, #255	; 0xff
 80077be:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80077c0:	7cfb      	ldrb	r3, [r7, #19]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d103      	bne.n	80077ce <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80077d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	371c      	adds	r7, #28
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd90      	pop	{r4, r7, pc}

080077e0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800780e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007812:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	0c1b      	lsrs	r3, r3, #16
 8007818:	b2db      	uxtb	r3, r3
 800781a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800781e:	b2da      	uxtb	r2, r3
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	0a1b      	lsrs	r3, r3, #8
 8007828:	b2db      	uxtb	r3, r3
 800782a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800782e:	b2da      	uxtb	r2, r3
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	b2db      	uxtb	r3, r3
 8007838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800783c:	b2da      	uxtb	r2, r3
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	0d9b      	lsrs	r3, r3, #22
 8007846:	b2db      	uxtb	r3, r3
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	b2da      	uxtb	r2, r3
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d11a      	bne.n	800788e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	4618      	mov	r0, r3
 800785e:	f000 f9a7 	bl	8007bb0 <RTC_Bcd2ToByte>
 8007862:	4603      	mov	r3, r0
 8007864:	461a      	mov	r2, r3
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	785b      	ldrb	r3, [r3, #1]
 800786e:	4618      	mov	r0, r3
 8007870:	f000 f99e 	bl	8007bb0 <RTC_Bcd2ToByte>
 8007874:	4603      	mov	r3, r0
 8007876:	461a      	mov	r2, r3
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	789b      	ldrb	r3, [r3, #2]
 8007880:	4618      	mov	r0, r3
 8007882:	f000 f995 	bl	8007bb0 <RTC_Bcd2ToByte>
 8007886:	4603      	mov	r3, r0
 8007888:	461a      	mov	r2, r3
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3718      	adds	r7, #24
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007898:	b590      	push	{r4, r7, lr}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d101      	bne.n	80078b2 <HAL_RTC_SetDate+0x1a>
 80078ae:	2302      	movs	r3, #2
 80078b0:	e075      	b.n	800799e <HAL_RTC_SetDate+0x106>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2202      	movs	r2, #2
 80078be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10e      	bne.n	80078e6 <HAL_RTC_SetDate+0x4e>
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	785b      	ldrb	r3, [r3, #1]
 80078cc:	f003 0310 	and.w	r3, r3, #16
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d008      	beq.n	80078e6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	785b      	ldrb	r3, [r3, #1]
 80078d8:	f023 0310 	bic.w	r3, r3, #16
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	330a      	adds	r3, #10
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d11c      	bne.n	8007926 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	78db      	ldrb	r3, [r3, #3]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 f93d 	bl	8007b70 <RTC_ByteToBcd2>
 80078f6:	4603      	mov	r3, r0
 80078f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	785b      	ldrb	r3, [r3, #1]
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 f936 	bl	8007b70 <RTC_ByteToBcd2>
 8007904:	4603      	mov	r3, r0
 8007906:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007908:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	789b      	ldrb	r3, [r3, #2]
 800790e:	4618      	mov	r0, r3
 8007910:	f000 f92e 	bl	8007b70 <RTC_ByteToBcd2>
 8007914:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007916:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007920:	4313      	orrs	r3, r2
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	e00e      	b.n	8007944 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	78db      	ldrb	r3, [r3, #3]
 800792a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	785b      	ldrb	r3, [r3, #1]
 8007930:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007932:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007938:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007940:	4313      	orrs	r3, r2
 8007942:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	22ca      	movs	r2, #202	; 0xca
 800794a:	625a      	str	r2, [r3, #36]	; 0x24
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2253      	movs	r2, #83	; 0x53
 8007952:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f899 	bl	8007a8c <RTC_EnterInitMode>
 800795a:	4603      	mov	r3, r0
 800795c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800795e:	7cfb      	ldrb	r3, [r7, #19]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10c      	bne.n	800797e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800796e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007972:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f000 f8bd 	bl	8007af4 <RTC_ExitInitMode>
 800797a:	4603      	mov	r3, r0
 800797c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	22ff      	movs	r2, #255	; 0xff
 8007984:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007986:	7cfb      	ldrb	r3, [r7, #19]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d103      	bne.n	8007994 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2201      	movs	r2, #1
 8007990:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800799c:	7cfb      	ldrb	r3, [r7, #19]
}
 800799e:	4618      	mov	r0, r3
 80079a0:	371c      	adds	r7, #28
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd90      	pop	{r4, r7, pc}

080079a6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b086      	sub	sp, #24
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80079bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80079c0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	0c1b      	lsrs	r3, r3, #16
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	0a1b      	lsrs	r3, r3, #8
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	f003 031f 	and.w	r3, r3, #31
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079e4:	b2da      	uxtb	r2, r3
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	0b5b      	lsrs	r3, r3, #13
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	f003 0307 	and.w	r3, r3, #7
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d11a      	bne.n	8007a36 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	78db      	ldrb	r3, [r3, #3]
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 f8d3 	bl	8007bb0 <RTC_Bcd2ToByte>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	785b      	ldrb	r3, [r3, #1]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f000 f8ca 	bl	8007bb0 <RTC_Bcd2ToByte>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	461a      	mov	r2, r3
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	789b      	ldrb	r3, [r3, #2]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f000 f8c1 	bl	8007bb0 <RTC_Bcd2ToByte>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	461a      	mov	r2, r3
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68da      	ldr	r2, [r3, #12]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007a56:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007a58:	f7fc fb64 	bl	8004124 <HAL_GetTick>
 8007a5c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007a5e:	e009      	b.n	8007a74 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a60:	f7fc fb60 	bl	8004124 <HAL_GetTick>
 8007a64:	4602      	mov	r2, r0
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a6e:	d901      	bls.n	8007a74 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e007      	b.n	8007a84 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	f003 0320 	and.w	r3, r3, #32
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0ee      	beq.n	8007a60 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68db      	ldr	r3, [r3, #12]
 8007a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d120      	bne.n	8007ae8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8007aae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007ab0:	f7fc fb38 	bl	8004124 <HAL_GetTick>
 8007ab4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007ab6:	e00d      	b.n	8007ad4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007ab8:	f7fc fb34 	bl	8004124 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ac6:	d905      	bls.n	8007ad4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2203      	movs	r2, #3
 8007ad0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d102      	bne.n	8007ae8 <RTC_EnterInitMode+0x5c>
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d1e7      	bne.n	8007ab8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007b00:	4b1a      	ldr	r3, [pc, #104]	; (8007b6c <RTC_ExitInitMode+0x78>)
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	4a19      	ldr	r2, [pc, #100]	; (8007b6c <RTC_ExitInitMode+0x78>)
 8007b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b0a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007b0c:	4b17      	ldr	r3, [pc, #92]	; (8007b6c <RTC_ExitInitMode+0x78>)
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10c      	bne.n	8007b32 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff ff91 	bl	8007a40 <HAL_RTC_WaitForSynchro>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d01e      	beq.n	8007b62 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2203      	movs	r2, #3
 8007b28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	73fb      	strb	r3, [r7, #15]
 8007b30:	e017      	b.n	8007b62 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007b32:	4b0e      	ldr	r3, [pc, #56]	; (8007b6c <RTC_ExitInitMode+0x78>)
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	4a0d      	ldr	r2, [pc, #52]	; (8007b6c <RTC_ExitInitMode+0x78>)
 8007b38:	f023 0320 	bic.w	r3, r3, #32
 8007b3c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff ff7e 	bl	8007a40 <HAL_RTC_WaitForSynchro>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d005      	beq.n	8007b56 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2203      	movs	r2, #3
 8007b4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007b52:	2303      	movs	r3, #3
 8007b54:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007b56:	4b05      	ldr	r3, [pc, #20]	; (8007b6c <RTC_ExitInitMode+0x78>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	4a04      	ldr	r2, [pc, #16]	; (8007b6c <RTC_ExitInitMode+0x78>)
 8007b5c:	f043 0320 	orr.w	r3, r3, #32
 8007b60:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	40002800 	.word	0x40002800

08007b70 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	4603      	mov	r3, r0
 8007b78:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007b7e:	79fb      	ldrb	r3, [r7, #7]
 8007b80:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007b82:	e005      	b.n	8007b90 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	3301      	adds	r3, #1
 8007b88:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007b8a:	7afb      	ldrb	r3, [r7, #11]
 8007b8c:	3b0a      	subs	r3, #10
 8007b8e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007b90:	7afb      	ldrb	r3, [r7, #11]
 8007b92:	2b09      	cmp	r3, #9
 8007b94:	d8f6      	bhi.n	8007b84 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	011b      	lsls	r3, r3, #4
 8007b9c:	b2da      	uxtb	r2, r3
 8007b9e:	7afb      	ldrb	r3, [r7, #11]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	b2db      	uxtb	r3, r3
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3714      	adds	r7, #20
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	091b      	lsrs	r3, r3, #4
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	0092      	lsls	r2, r2, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007bca:	79fb      	ldrb	r3, [r7, #7]
 8007bcc:	f003 030f 	and.w	r3, r3, #15
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	b2db      	uxtb	r3, r3
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3714      	adds	r7, #20
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d101      	bne.n	8007bfe <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007bfa:	2302      	movs	r3, #2
 8007bfc:	e07f      	b.n	8007cfe <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2201      	movs	r2, #1
 8007c02:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2202      	movs	r2, #2
 8007c0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	22ca      	movs	r2, #202	; 0xca
 8007c14:	625a      	str	r2, [r3, #36]	; 0x24
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2253      	movs	r2, #83	; 0x53
 8007c1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c2c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007c3e:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d120      	bne.n	8007c90 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8007c4e:	f7fc fa69 	bl	8004124 <HAL_GetTick>
 8007c52:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8007c54:	e015      	b.n	8007c82 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c56:	f7fc fa65 	bl	8004124 <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c64:	d90d      	bls.n	8007c82 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	22ff      	movs	r2, #255	; 0xff
 8007c6c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2203      	movs	r2, #3
 8007c72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e03d      	b.n	8007cfe <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f003 0304 	and.w	r3, r3, #4
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0e2      	beq.n	8007c56 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68ba      	ldr	r2, [r7, #8]
 8007c96:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	f023 0107 	bic.w	r1, r3, #7
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007cac:	4b16      	ldr	r3, [pc, #88]	; (8007d08 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a15      	ldr	r2, [pc, #84]	; (8007d08 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cb6:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007cb8:	4b13      	ldr	r3, [pc, #76]	; (8007d08 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	4a12      	ldr	r2, [pc, #72]	; (8007d08 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007cbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cc2:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689a      	ldr	r2, [r3, #8]
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cd2:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689a      	ldr	r2, [r3, #8]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ce2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	22ff      	movs	r2, #255	; 0xff
 8007cea:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	40010400 	.word	0x40010400

08007d0c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8007d14:	4b0f      	ldr	r3, [pc, #60]	; (8007d54 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8007d16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d1a:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d00b      	beq.n	8007d42 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007d3a:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7fb f951 	bl	8002fe4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2201      	movs	r2, #1
 8007d46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	40010400 	.word	0x40010400

08007d58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d101      	bne.n	8007d6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e095      	b.n	8007e96 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d108      	bne.n	8007d84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d7a:	d009      	beq.n	8007d90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	61da      	str	r2, [r3, #28]
 8007d82:	e005      	b.n	8007d90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d106      	bne.n	8007db0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7fb fa12 	bl	80031d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dc6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007dd0:	d902      	bls.n	8007dd8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	60fb      	str	r3, [r7, #12]
 8007dd6:	e002      	b.n	8007dde <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ddc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007de6:	d007      	beq.n	8007df8 <HAL_SPI_Init+0xa0>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007df0:	d002      	beq.n	8007df8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007e08:	431a      	orrs	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	f003 0302 	and.w	r3, r3, #2
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e26:	431a      	orrs	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	69db      	ldr	r3, [r3, #28]
 8007e2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e30:	431a      	orrs	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3a:	ea42 0103 	orr.w	r1, r2, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	0c1b      	lsrs	r3, r3, #16
 8007e54:	f003 0204 	and.w	r2, r3, #4
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	f003 0310 	and.w	r3, r3, #16
 8007e60:	431a      	orrs	r2, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e66:	f003 0308 	and.w	r3, r3, #8
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007e74:	ea42 0103 	orr.w	r1, r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	430a      	orrs	r2, r1
 8007e84:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3710      	adds	r7, #16
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b088      	sub	sp, #32
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	60f8      	str	r0, [r7, #12]
 8007ea6:	60b9      	str	r1, [r7, #8]
 8007ea8:	603b      	str	r3, [r7, #0]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d101      	bne.n	8007ec0 <HAL_SPI_Transmit+0x22>
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e158      	b.n	8008172 <HAL_SPI_Transmit+0x2d4>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ec8:	f7fc f92c 	bl	8004124 <HAL_GetTick>
 8007ecc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007ece:	88fb      	ldrh	r3, [r7, #6]
 8007ed0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d002      	beq.n	8007ee4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007ede:	2302      	movs	r3, #2
 8007ee0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ee2:	e13d      	b.n	8008160 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <HAL_SPI_Transmit+0x52>
 8007eea:	88fb      	ldrh	r3, [r7, #6]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d102      	bne.n	8007ef6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ef4:	e134      	b.n	8008160 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2203      	movs	r2, #3
 8007efa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	88fa      	ldrh	r2, [r7, #6]
 8007f0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	88fa      	ldrh	r2, [r7, #6]
 8007f14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2200      	movs	r2, #0
 8007f36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f40:	d10f      	bne.n	8007f62 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6c:	2b40      	cmp	r3, #64	; 0x40
 8007f6e:	d007      	beq.n	8007f80 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	68db      	ldr	r3, [r3, #12]
 8007f84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f88:	d94b      	bls.n	8008022 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <HAL_SPI_Transmit+0xfa>
 8007f92:	8afb      	ldrh	r3, [r7, #22]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d13e      	bne.n	8008016 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9c:	881a      	ldrh	r2, [r3, #0]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa8:	1c9a      	adds	r2, r3, #2
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	b29a      	uxth	r2, r3
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007fbc:	e02b      	b.n	8008016 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f003 0302 	and.w	r3, r3, #2
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d112      	bne.n	8007ff2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd0:	881a      	ldrh	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fdc:	1c9a      	adds	r2, r3, #2
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007ff0:	e011      	b.n	8008016 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ff2:	f7fc f897 	bl	8004124 <HAL_GetTick>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d803      	bhi.n	800800a <HAL_SPI_Transmit+0x16c>
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008008:	d102      	bne.n	8008010 <HAL_SPI_Transmit+0x172>
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d102      	bne.n	8008016 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008014:	e0a4      	b.n	8008160 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800801a:	b29b      	uxth	r3, r3
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1ce      	bne.n	8007fbe <HAL_SPI_Transmit+0x120>
 8008020:	e07c      	b.n	800811c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <HAL_SPI_Transmit+0x192>
 800802a:	8afb      	ldrh	r3, [r7, #22]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d170      	bne.n	8008112 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008034:	b29b      	uxth	r3, r3
 8008036:	2b01      	cmp	r3, #1
 8008038:	d912      	bls.n	8008060 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	881a      	ldrh	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800804a:	1c9a      	adds	r2, r3, #2
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008054:	b29b      	uxth	r3, r3
 8008056:	3b02      	subs	r3, #2
 8008058:	b29a      	uxth	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800805e:	e058      	b.n	8008112 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	330c      	adds	r3, #12
 800806a:	7812      	ldrb	r2, [r2, #0]
 800806c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008072:	1c5a      	adds	r2, r3, #1
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800807c:	b29b      	uxth	r3, r3
 800807e:	3b01      	subs	r3, #1
 8008080:	b29a      	uxth	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008086:	e044      	b.n	8008112 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f003 0302 	and.w	r3, r3, #2
 8008092:	2b02      	cmp	r3, #2
 8008094:	d12b      	bne.n	80080ee <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800809a:	b29b      	uxth	r3, r3
 800809c:	2b01      	cmp	r3, #1
 800809e:	d912      	bls.n	80080c6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a4:	881a      	ldrh	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b0:	1c9a      	adds	r2, r3, #2
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	3b02      	subs	r3, #2
 80080be:	b29a      	uxth	r2, r3
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080c4:	e025      	b.n	8008112 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	330c      	adds	r3, #12
 80080d0:	7812      	ldrb	r2, [r2, #0]
 80080d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d8:	1c5a      	adds	r2, r3, #1
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	3b01      	subs	r3, #1
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080ec:	e011      	b.n	8008112 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080ee:	f7fc f819 	bl	8004124 <HAL_GetTick>
 80080f2:	4602      	mov	r2, r0
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	1ad3      	subs	r3, r2, r3
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d803      	bhi.n	8008106 <HAL_SPI_Transmit+0x268>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008104:	d102      	bne.n	800810c <HAL_SPI_Transmit+0x26e>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d102      	bne.n	8008112 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800810c:	2303      	movs	r3, #3
 800810e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008110:	e026      	b.n	8008160 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008116:	b29b      	uxth	r3, r3
 8008118:	2b00      	cmp	r3, #0
 800811a:	d1b5      	bne.n	8008088 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800811c:	69ba      	ldr	r2, [r7, #24]
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f000 fb11 	bl	8008748 <SPI_EndRxTxTransaction>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2220      	movs	r2, #32
 8008130:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800813a:	2300      	movs	r3, #0
 800813c:	613b      	str	r3, [r7, #16]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	613b      	str	r3, [r7, #16]
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	613b      	str	r3, [r7, #16]
 800814e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008158:	2301      	movs	r3, #1
 800815a:	77fb      	strb	r3, [r7, #31]
 800815c:	e000      	b.n	8008160 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800815e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008170:	7ffb      	ldrb	r3, [r7, #31]
}
 8008172:	4618      	mov	r0, r3
 8008174:	3720      	adds	r7, #32
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
	...

0800817c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b086      	sub	sp, #24
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	4613      	mov	r3, r2
 8008188:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008194:	2b01      	cmp	r3, #1
 8008196:	d101      	bne.n	800819c <HAL_SPI_Transmit_DMA+0x20>
 8008198:	2302      	movs	r3, #2
 800819a:	e0d8      	b.n	800834e <HAL_SPI_Transmit_DMA+0x1d2>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d002      	beq.n	80081b6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80081b0:	2302      	movs	r3, #2
 80081b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081b4:	e0c6      	b.n	8008344 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <HAL_SPI_Transmit_DMA+0x46>
 80081bc:	88fb      	ldrh	r3, [r7, #6]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d102      	bne.n	80081c8 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081c6:	e0bd      	b.n	8008344 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2203      	movs	r2, #3
 80081cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2200      	movs	r2, #0
 80081d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	88fa      	ldrh	r2, [r7, #6]
 80081e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	88fa      	ldrh	r2, [r7, #6]
 80081e6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008212:	d10f      	bne.n	8008234 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008222:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008232:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008238:	4a47      	ldr	r2, [pc, #284]	; (8008358 <HAL_SPI_Transmit_DMA+0x1dc>)
 800823a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008240:	4a46      	ldr	r2, [pc, #280]	; (800835c <HAL_SPI_Transmit_DMA+0x1e0>)
 8008242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008248:	4a45      	ldr	r2, [pc, #276]	; (8008360 <HAL_SPI_Transmit_DMA+0x1e4>)
 800824a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008250:	2200      	movs	r2, #0
 8008252:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008262:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800826c:	d82d      	bhi.n	80082ca <HAL_SPI_Transmit_DMA+0x14e>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008278:	d127      	bne.n	80082ca <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800827e:	b29b      	uxth	r3, r3
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	2b00      	cmp	r3, #0
 8008286:	d10f      	bne.n	80082a8 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	685a      	ldr	r2, [r3, #4]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008296:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800829c:	b29b      	uxth	r3, r3
 800829e:	085b      	lsrs	r3, r3, #1
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082a6:	e010      	b.n	80082ca <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082b6:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082bc:	b29b      	uxth	r3, r3
 80082be:	085b      	lsrs	r3, r3, #1
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	3301      	adds	r3, #1
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d2:	4619      	mov	r1, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	330c      	adds	r3, #12
 80082da:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082e0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80082e2:	f7fd fc0f 	bl	8005b04 <HAL_DMA_Start_IT>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00c      	beq.n	8008306 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082f0:	f043 0210 	orr.w	r2, r3, #16
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008304:	e01e      	b.n	8008344 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008310:	2b40      	cmp	r3, #64	; 0x40
 8008312:	d007      	beq.n	8008324 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008322:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f042 0220 	orr.w	r2, r2, #32
 8008332:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f042 0202 	orr.w	r2, r2, #2
 8008342:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800834c:	7dfb      	ldrb	r3, [r7, #23]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	080084b1 	.word	0x080084b1
 800835c:	0800840b 	.word	0x0800840b
 8008360:	080084cd 	.word	0x080084cd

08008364 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00f      	beq.n	8008398 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800837c:	4618      	mov	r0, r3
 800837e:	f7fd fc21 	bl	8005bc4 <HAL_DMA_Abort>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d007      	beq.n	8008398 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800838c:	f043 0210 	orr.w	r2, r3, #16
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800839c:	2b00      	cmp	r3, #0
 800839e:	d00f      	beq.n	80083c0 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fd fc0d 	bl	8005bc4 <HAL_DMA_Abort>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d007      	beq.n	80083c0 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083b4:	f043 0210 	orr.w	r2, r3, #16
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 0203 	bic.w	r2, r2, #3
 80083ce:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b083      	sub	sp, #12
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80083ea:	bf00      	nop
 80083ec:	370c      	adds	r7, #12
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b083      	sub	sp, #12
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80083fe:	bf00      	nop
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b086      	sub	sp, #24
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008416:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008418:	f7fb fe84 	bl	8004124 <HAL_GetTick>
 800841c:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0320 	and.w	r3, r3, #32
 8008428:	2b20      	cmp	r3, #32
 800842a:	d03b      	beq.n	80084a4 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0220 	bic.w	r2, r2, #32
 800843a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f022 0202 	bic.w	r2, r2, #2
 800844a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800844c:	693a      	ldr	r2, [r7, #16]
 800844e:	2164      	movs	r1, #100	; 0x64
 8008450:	6978      	ldr	r0, [r7, #20]
 8008452:	f000 f979 	bl	8008748 <SPI_EndRxTxTransaction>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d005      	beq.n	8008468 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008460:	f043 0220 	orr.w	r2, r3, #32
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10a      	bne.n	8008486 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008470:	2300      	movs	r3, #0
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68db      	ldr	r3, [r3, #12]
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	2200      	movs	r2, #0
 800848a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800849c:	6978      	ldr	r0, [r7, #20]
 800849e:	f7ff ffaa 	bl	80083f6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80084a2:	e002      	b.n	80084aa <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80084a4:	6978      	ldr	r0, [r7, #20]
 80084a6:	f001 f9ef 	bl	8009888 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80084aa:	3718      	adds	r7, #24
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084bc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f7ff ff8f 	bl	80083e2 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80084c4:	bf00      	nop
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084d8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f022 0203 	bic.w	r2, r2, #3
 80084e8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ee:	f043 0210 	orr.w	r2, r3, #16
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f7ff ff79 	bl	80083f6 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008504:	bf00      	nop
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b088      	sub	sp, #32
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	603b      	str	r3, [r7, #0]
 8008518:	4613      	mov	r3, r2
 800851a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800851c:	f7fb fe02 	bl	8004124 <HAL_GetTick>
 8008520:	4602      	mov	r2, r0
 8008522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008524:	1a9b      	subs	r3, r3, r2
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	4413      	add	r3, r2
 800852a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800852c:	f7fb fdfa 	bl	8004124 <HAL_GetTick>
 8008530:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008532:	4b39      	ldr	r3, [pc, #228]	; (8008618 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	015b      	lsls	r3, r3, #5
 8008538:	0d1b      	lsrs	r3, r3, #20
 800853a:	69fa      	ldr	r2, [r7, #28]
 800853c:	fb02 f303 	mul.w	r3, r2, r3
 8008540:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008542:	e054      	b.n	80085ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854a:	d050      	beq.n	80085ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800854c:	f7fb fdea 	bl	8004124 <HAL_GetTick>
 8008550:	4602      	mov	r2, r0
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	69fa      	ldr	r2, [r7, #28]
 8008558:	429a      	cmp	r2, r3
 800855a:	d902      	bls.n	8008562 <SPI_WaitFlagStateUntilTimeout+0x56>
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d13d      	bne.n	80085de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	685a      	ldr	r2, [r3, #4]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008570:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800857a:	d111      	bne.n	80085a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008584:	d004      	beq.n	8008590 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800858e:	d107      	bne.n	80085a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800859e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085a8:	d10f      	bne.n	80085ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681a      	ldr	r2, [r3, #0]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80085c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e017      	b.n	800860e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689a      	ldr	r2, [r3, #8]
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	4013      	ands	r3, r2
 80085f8:	68ba      	ldr	r2, [r7, #8]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	bf0c      	ite	eq
 80085fe:	2301      	moveq	r3, #1
 8008600:	2300      	movne	r3, #0
 8008602:	b2db      	uxtb	r3, r3
 8008604:	461a      	mov	r2, r3
 8008606:	79fb      	ldrb	r3, [r7, #7]
 8008608:	429a      	cmp	r2, r3
 800860a:	d19b      	bne.n	8008544 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3720      	adds	r7, #32
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20000000 	.word	0x20000000

0800861c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08a      	sub	sp, #40	; 0x28
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
 8008628:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800862a:	2300      	movs	r3, #0
 800862c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800862e:	f7fb fd79 	bl	8004124 <HAL_GetTick>
 8008632:	4602      	mov	r2, r0
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	1a9b      	subs	r3, r3, r2
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	4413      	add	r3, r2
 800863c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800863e:	f7fb fd71 	bl	8004124 <HAL_GetTick>
 8008642:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	330c      	adds	r3, #12
 800864a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800864c:	4b3d      	ldr	r3, [pc, #244]	; (8008744 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	4613      	mov	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	00da      	lsls	r2, r3, #3
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	0d1b      	lsrs	r3, r3, #20
 800865c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865e:	fb02 f303 	mul.w	r3, r2, r3
 8008662:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008664:	e060      	b.n	8008728 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800866c:	d107      	bne.n	800867e <SPI_WaitFifoStateUntilTimeout+0x62>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d104      	bne.n	800867e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	b2db      	uxtb	r3, r3
 800867a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800867c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008684:	d050      	beq.n	8008728 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008686:	f7fb fd4d 	bl	8004124 <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	6a3b      	ldr	r3, [r7, #32]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008692:	429a      	cmp	r2, r3
 8008694:	d902      	bls.n	800869c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	2b00      	cmp	r3, #0
 800869a:	d13d      	bne.n	8008718 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	685a      	ldr	r2, [r3, #4]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80086aa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086b4:	d111      	bne.n	80086da <SPI_WaitFifoStateUntilTimeout+0xbe>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086be:	d004      	beq.n	80086ca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086c8:	d107      	bne.n	80086da <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086d8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086e2:	d10f      	bne.n	8008704 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008702:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008714:	2303      	movs	r3, #3
 8008716:	e010      	b.n	800873a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800871e:	2300      	movs	r3, #0
 8008720:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	3b01      	subs	r3, #1
 8008726:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	689a      	ldr	r2, [r3, #8]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	4013      	ands	r3, r2
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	429a      	cmp	r2, r3
 8008736:	d196      	bne.n	8008666 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3728      	adds	r7, #40	; 0x28
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	20000000 	.word	0x20000000

08008748 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b086      	sub	sp, #24
 800874c:	af02      	add	r7, sp, #8
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	2200      	movs	r2, #0
 800875c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f7ff ff5b 	bl	800861c <SPI_WaitFifoStateUntilTimeout>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d007      	beq.n	800877c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008770:	f043 0220 	orr.w	r2, r3, #32
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e027      	b.n	80087cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	2200      	movs	r2, #0
 8008784:	2180      	movs	r1, #128	; 0x80
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f7ff fec0 	bl	800850c <SPI_WaitFlagStateUntilTimeout>
 800878c:	4603      	mov	r3, r0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d007      	beq.n	80087a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008796:	f043 0220 	orr.w	r2, r3, #32
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e014      	b.n	80087cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f7ff ff34 	bl	800861c <SPI_WaitFifoStateUntilTimeout>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d007      	beq.n	80087ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087be:	f043 0220 	orr.w	r2, r3, #32
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e000      	b.n	80087cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b08b      	sub	sp, #44	; 0x2c
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	fa93 f3a3 	rbit	r3, r3
 80087ee:	613b      	str	r3, [r7, #16]
  return result;
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d101      	bne.n	80087fe <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80087fa:	2320      	movs	r3, #32
 80087fc:	e003      	b.n	8008806 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	fab3 f383 	clz	r3, r3
 8008804:	b2db      	uxtb	r3, r3
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	2103      	movs	r1, #3
 800880a:	fa01 f303 	lsl.w	r3, r1, r3
 800880e:	43db      	mvns	r3, r3
 8008810:	401a      	ands	r2, r3
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008816:	6a3b      	ldr	r3, [r7, #32]
 8008818:	fa93 f3a3 	rbit	r3, r3
 800881c:	61fb      	str	r3, [r7, #28]
  return result;
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008824:	2b00      	cmp	r3, #0
 8008826:	d101      	bne.n	800882c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008828:	2320      	movs	r3, #32
 800882a:	e003      	b.n	8008834 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	fab3 f383 	clz	r3, r3
 8008832:	b2db      	uxtb	r3, r3
 8008834:	005b      	lsls	r3, r3, #1
 8008836:	6879      	ldr	r1, [r7, #4]
 8008838:	fa01 f303 	lsl.w	r3, r1, r3
 800883c:	431a      	orrs	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	601a      	str	r2, [r3, #0]
}
 8008842:	bf00      	nop
 8008844:	372c      	adds	r7, #44	; 0x2c
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800884e:	b480      	push	{r7}
 8008850:	b085      	sub	sp, #20
 8008852:	af00      	add	r7, sp, #0
 8008854:	60f8      	str	r0, [r7, #12]
 8008856:	60b9      	str	r1, [r7, #8]
 8008858:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	43db      	mvns	r3, r3
 8008862:	401a      	ands	r2, r3
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	6879      	ldr	r1, [r7, #4]
 8008868:	fb01 f303 	mul.w	r3, r1, r3
 800886c:	431a      	orrs	r2, r3
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	605a      	str	r2, [r3, #4]
}
 8008872:	bf00      	nop
 8008874:	3714      	adds	r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800887e:	b480      	push	{r7}
 8008880:	b08b      	sub	sp, #44	; 0x2c
 8008882:	af00      	add	r7, sp, #0
 8008884:	60f8      	str	r0, [r7, #12]
 8008886:	60b9      	str	r1, [r7, #8]
 8008888:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	689a      	ldr	r2, [r3, #8]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	fa93 f3a3 	rbit	r3, r3
 8008898:	613b      	str	r3, [r7, #16]
  return result;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80088a4:	2320      	movs	r3, #32
 80088a6:	e003      	b.n	80088b0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	fab3 f383 	clz	r3, r3
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	005b      	lsls	r3, r3, #1
 80088b2:	2103      	movs	r1, #3
 80088b4:	fa01 f303 	lsl.w	r3, r1, r3
 80088b8:	43db      	mvns	r3, r3
 80088ba:	401a      	ands	r2, r3
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088c0:	6a3b      	ldr	r3, [r7, #32]
 80088c2:	fa93 f3a3 	rbit	r3, r3
 80088c6:	61fb      	str	r3, [r7, #28]
  return result;
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80088d2:	2320      	movs	r3, #32
 80088d4:	e003      	b.n	80088de <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80088d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d8:	fab3 f383 	clz	r3, r3
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	005b      	lsls	r3, r3, #1
 80088e0:	6879      	ldr	r1, [r7, #4]
 80088e2:	fa01 f303 	lsl.w	r3, r1, r3
 80088e6:	431a      	orrs	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80088ec:	bf00      	nop
 80088ee:	372c      	adds	r7, #44	; 0x2c
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b08b      	sub	sp, #44	; 0x2c
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	68da      	ldr	r2, [r3, #12]
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	fa93 f3a3 	rbit	r3, r3
 8008912:	613b      	str	r3, [r7, #16]
  return result;
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d101      	bne.n	8008922 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800891e:	2320      	movs	r3, #32
 8008920:	e003      	b.n	800892a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	fab3 f383 	clz	r3, r3
 8008928:	b2db      	uxtb	r3, r3
 800892a:	005b      	lsls	r3, r3, #1
 800892c:	2103      	movs	r1, #3
 800892e:	fa01 f303 	lsl.w	r3, r1, r3
 8008932:	43db      	mvns	r3, r3
 8008934:	401a      	ands	r2, r3
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800893a:	6a3b      	ldr	r3, [r7, #32]
 800893c:	fa93 f3a3 	rbit	r3, r3
 8008940:	61fb      	str	r3, [r7, #28]
  return result;
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800894c:	2320      	movs	r3, #32
 800894e:	e003      	b.n	8008958 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	fab3 f383 	clz	r3, r3
 8008956:	b2db      	uxtb	r3, r3
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	6879      	ldr	r1, [r7, #4]
 800895c:	fa01 f303 	lsl.w	r3, r1, r3
 8008960:	431a      	orrs	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	60da      	str	r2, [r3, #12]
}
 8008966:	bf00      	nop
 8008968:	372c      	adds	r7, #44	; 0x2c
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008972:	b480      	push	{r7}
 8008974:	b08b      	sub	sp, #44	; 0x2c
 8008976:	af00      	add	r7, sp, #0
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	6a1a      	ldr	r2, [r3, #32]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	fa93 f3a3 	rbit	r3, r3
 800898c:	613b      	str	r3, [r7, #16]
  return result;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008998:	2320      	movs	r3, #32
 800899a:	e003      	b.n	80089a4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	fab3 f383 	clz	r3, r3
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	210f      	movs	r1, #15
 80089a8:	fa01 f303 	lsl.w	r3, r1, r3
 80089ac:	43db      	mvns	r3, r3
 80089ae:	401a      	ands	r2, r3
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	fa93 f3a3 	rbit	r3, r3
 80089ba:	61fb      	str	r3, [r7, #28]
  return result;
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80089c6:	2320      	movs	r3, #32
 80089c8:	e003      	b.n	80089d2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80089ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089cc:	fab3 f383 	clz	r3, r3
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	6879      	ldr	r1, [r7, #4]
 80089d6:	fa01 f303 	lsl.w	r3, r1, r3
 80089da:	431a      	orrs	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80089e0:	bf00      	nop
 80089e2:	372c      	adds	r7, #44	; 0x2c
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b08b      	sub	sp, #44	; 0x2c
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	0a1b      	lsrs	r3, r3, #8
 8008a00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	fa93 f3a3 	rbit	r3, r3
 8008a08:	613b      	str	r3, [r7, #16]
  return result;
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008a14:	2320      	movs	r3, #32
 8008a16:	e003      	b.n	8008a20 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	fab3 f383 	clz	r3, r3
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	210f      	movs	r1, #15
 8008a24:	fa01 f303 	lsl.w	r3, r1, r3
 8008a28:	43db      	mvns	r3, r3
 8008a2a:	401a      	ands	r2, r3
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	0a1b      	lsrs	r3, r3, #8
 8008a30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	fa93 f3a3 	rbit	r3, r3
 8008a38:	61fb      	str	r3, [r7, #28]
  return result;
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d101      	bne.n	8008a48 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008a44:	2320      	movs	r3, #32
 8008a46:	e003      	b.n	8008a50 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	fab3 f383 	clz	r3, r3
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	6879      	ldr	r1, [r7, #4]
 8008a54:	fa01 f303 	lsl.w	r3, r1, r3
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8008a5e:	bf00      	nop
 8008a60:	372c      	adds	r7, #44	; 0x2c
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b088      	sub	sp, #32
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	fa93 f3a3 	rbit	r3, r3
 8008a80:	60fb      	str	r3, [r7, #12]
  return result;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d101      	bne.n	8008a90 <LL_GPIO_Init+0x26>
    return 32U;
 8008a8c:	2320      	movs	r3, #32
 8008a8e:	e003      	b.n	8008a98 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	fab3 f383 	clz	r3, r3
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8008a9a:	e048      	b.n	8008b2e <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8008aac:	69bb      	ldr	r3, [r7, #24]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d03a      	beq.n	8008b28 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	2b01      	cmp	r3, #1
 8008ab8:	d003      	beq.n	8008ac2 <LL_GPIO_Init+0x58>
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d10e      	bne.n	8008ae0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	69b9      	ldr	r1, [r7, #24]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7ff fed7 	bl	800887e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	6819      	ldr	r1, [r3, #0]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	461a      	mov	r2, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f7ff feb7 	bl	800884e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	69b9      	ldr	r1, [r7, #24]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7ff ff05 	bl	80088f8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	2b02      	cmp	r3, #2
 8008af4:	d111      	bne.n	8008b1a <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	2bff      	cmp	r3, #255	; 0xff
 8008afa:	d807      	bhi.n	8008b0c <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	461a      	mov	r2, r3
 8008b02:	69b9      	ldr	r1, [r7, #24]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7ff ff34 	bl	8008972 <LL_GPIO_SetAFPin_0_7>
 8008b0a:	e006      	b.n	8008b1a <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	695b      	ldr	r3, [r3, #20]
 8008b10:	461a      	mov	r2, r3
 8008b12:	69b9      	ldr	r1, [r7, #24]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff ff69 	bl	80089ec <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	69b9      	ldr	r1, [r7, #24]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f7ff fe56 	bl	80087d4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	fa22 f303 	lsr.w	r3, r2, r3
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d1af      	bne.n	8008a9c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3720      	adds	r7, #32
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <LL_LPUART_IsEnabled>:
{
 8008b46:	b480      	push	{r7}
 8008b48:	b083      	sub	sp, #12
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0301 	and.w	r3, r3, #1
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d101      	bne.n	8008b5e <LL_LPUART_IsEnabled+0x18>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e000      	b.n	8008b60 <LL_LPUART_IsEnabled+0x1a>
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <LL_LPUART_SetStopBitsLength>:
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	431a      	orrs	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	605a      	str	r2, [r3, #4]
}
 8008b86:	bf00      	nop
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <LL_LPUART_SetHWFlowCtrl>:
{
 8008b92:	b480      	push	{r7}
 8008b94:	b083      	sub	sp, #12
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	609a      	str	r2, [r3, #8]
}
 8008bac:	bf00      	nop
 8008bae:	370c      	adds	r7, #12
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <LL_LPUART_SetBaudRate>:
{
 8008bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bbc:	b086      	sub	sp, #24
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6178      	str	r0, [r7, #20]
 8008bc2:	6139      	str	r1, [r7, #16]
 8008bc4:	60fa      	str	r2, [r7, #12]
  if (BaudRate != 0U)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d025      	beq.n	8008c18 <LL_LPUART_SetBaudRate+0x60>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, BaudRate);
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	461c      	mov	r4, r3
 8008bd2:	4615      	mov	r5, r2
 8008bd4:	f04f 0200 	mov.w	r2, #0
 8008bd8:	f04f 0300 	mov.w	r3, #0
 8008bdc:	022b      	lsls	r3, r5, #8
 8008bde:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008be2:	0222      	lsls	r2, r4, #8
 8008be4:	68f9      	ldr	r1, [r7, #12]
 8008be6:	0849      	lsrs	r1, r1, #1
 8008be8:	2000      	movs	r0, #0
 8008bea:	4688      	mov	r8, r1
 8008bec:	4681      	mov	r9, r0
 8008bee:	eb12 0a08 	adds.w	sl, r2, r8
 8008bf2:	eb43 0b09 	adc.w	fp, r3, r9
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	603b      	str	r3, [r7, #0]
 8008bfc:	607a      	str	r2, [r7, #4]
 8008bfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c02:	4650      	mov	r0, sl
 8008c04:	4659      	mov	r1, fp
 8008c06:	f7f8 f81f 	bl	8000c48 <__aeabi_uldivmod>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4613      	mov	r3, r2
 8008c10:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	60da      	str	r2, [r3, #12]
}
 8008c18:	bf00      	nop
 8008c1a:	3718      	adds	r7, #24
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08008c24 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7ff ff87 	bl	8008b46 <LL_LPUART_IsEnabled>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d12f      	bne.n	8008c9e <LL_LPUART_Init+0x7a>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	4b19      	ldr	r3, [pc, #100]	; (8008ca8 <LL_LPUART_Init+0x84>)
 8008c44:	4013      	ands	r3, r2
 8008c46:	683a      	ldr	r2, [r7, #0]
 8008c48:	6851      	ldr	r1, [r2, #4]
 8008c4a:	683a      	ldr	r2, [r7, #0]
 8008c4c:	68d2      	ldr	r2, [r2, #12]
 8008c4e:	4311      	orrs	r1, r2
 8008c50:	683a      	ldr	r2, [r7, #0]
 8008c52:	6912      	ldr	r2, [r2, #16]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	431a      	orrs	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	4619      	mov	r1, r3
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7ff ff82 	bl	8008b6c <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7ff ff8f 	bl	8008b92 <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8008c74:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008c78:	f000 f8e2 	bl	8008e40 <LL_RCC_GetLPUARTClockFreq>
 8008c7c:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00c      	beq.n	8008c9e <LL_LPUART_Init+0x7a>
        && (LPUART_InitStruct->BaudRate != 0U))
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d008      	beq.n	8008c9e <LL_LPUART_Init+0x7a>
    {
      status = SUCCESS;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	68b9      	ldr	r1, [r7, #8]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f7ff ff8d 	bl	8008bb8 <LL_LPUART_SetBaudRate>
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }

  return (status);
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	efffe9f3 	.word	0xefffe9f3

08008cac <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8008cac:	b480      	push	{r7}
 8008cae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8008cb0:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <LL_RCC_HSI_IsReady+0x24>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cbc:	d101      	bne.n	8008cc2 <LL_RCC_HSI_IsReady+0x16>
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	e000      	b.n	8008cc4 <LL_RCC_HSI_IsReady+0x18>
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	40021000 	.word	0x40021000

08008cd4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8008cd8:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <LL_RCC_LSE_IsReady+0x24>)
 8008cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cde:	f003 0302 	and.w	r3, r3, #2
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d101      	bne.n	8008cea <LL_RCC_LSE_IsReady+0x16>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e000      	b.n	8008cec <LL_RCC_LSE_IsReady+0x18>
 8008cea:	2300      	movs	r3, #0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	40021000 	.word	0x40021000

08008cfc <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8008d00:	4b06      	ldr	r3, [pc, #24]	; (8008d1c <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f003 0308 	and.w	r3, r3, #8
 8008d08:	2b08      	cmp	r3, #8
 8008d0a:	d101      	bne.n	8008d10 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e000      	b.n	8008d12 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8008d10:	2300      	movs	r3, #0
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	40021000 	.word	0x40021000

08008d20 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8008d20:	b480      	push	{r7}
 8008d22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8008d24:	4b04      	ldr	r3, [pc, #16]	; (8008d38 <LL_RCC_MSI_GetRange+0x18>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	40021000 	.word	0x40021000

08008d3c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8008d40:	4b04      	ldr	r3, [pc, #16]	; (8008d54 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8008d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d46:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr
 8008d54:	40021000 	.word	0x40021000

08008d58 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008d5c:	4b04      	ldr	r3, [pc, #16]	; (8008d70 <LL_RCC_GetSysClkSource+0x18>)
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f003 030c 	and.w	r3, r3, #12
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	40021000 	.word	0x40021000

08008d74 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8008d74:	b480      	push	{r7}
 8008d76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008d78:	4b04      	ldr	r3, [pc, #16]	; (8008d8c <LL_RCC_GetAHBPrescaler+0x18>)
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	40021000 	.word	0x40021000

08008d90 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8008d90:	b480      	push	{r7}
 8008d92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008d94:	4b04      	ldr	r3, [pc, #16]	; (8008da8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	40021000 	.word	0x40021000

08008dac <LL_RCC_GetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008db4:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <LL_RCC_GetLPUARTClockSource+0x20>)
 8008db6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4013      	ands	r3, r2
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	40021000 	.word	0x40021000

08008dd0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008dd4:	4b04      	ldr	r3, [pc, #16]	; (8008de8 <LL_RCC_PLL_GetMainSource+0x18>)
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	f003 0303 	and.w	r3, r3, #3
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
 8008de6:	bf00      	nop
 8008de8:	40021000 	.word	0x40021000

08008dec <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8008dec:	b480      	push	{r7}
 8008dee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008df0:	4b04      	ldr	r3, [pc, #16]	; (8008e04 <LL_RCC_PLL_GetN+0x18>)
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	0a1b      	lsrs	r3, r3, #8
 8008df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr
 8008e04:	40021000 	.word	0x40021000

08008e08 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008e0c:	4b04      	ldr	r3, [pc, #16]	; (8008e20 <LL_RCC_PLL_GetR+0x18>)
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	46bd      	mov	sp, r7
 8008e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	40021000 	.word	0x40021000

08008e24 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8008e24:	b480      	push	{r7}
 8008e26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008e28:	4b04      	ldr	r3, [pc, #16]	; (8008e3c <LL_RCC_PLL_GetDivider+0x18>)
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
 8008e3a:	bf00      	nop
 8008e3c:	40021000 	.word	0x40021000

08008e40 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7ff ffad 	bl	8008dac <LL_RCC_GetLPUARTClockSource>
 8008e52:	4603      	mov	r3, r0
 8008e54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e58:	d019      	beq.n	8008e8e <LL_RCC_GetLPUARTClockFreq+0x4e>
 8008e5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e5e:	d82b      	bhi.n	8008eb8 <LL_RCC_GetLPUARTClockFreq+0x78>
 8008e60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e64:	d00b      	beq.n	8008e7e <LL_RCC_GetLPUARTClockFreq+0x3e>
 8008e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e6a:	d825      	bhi.n	8008eb8 <LL_RCC_GetLPUARTClockFreq+0x78>
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d017      	beq.n	8008ea0 <LL_RCC_GetLPUARTClockFreq+0x60>
 8008e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e74:	d120      	bne.n	8008eb8 <LL_RCC_GetLPUARTClockFreq+0x78>
  {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      lpuart_frequency = RCC_GetSystemClockFreq();
 8008e76:	f000 f82b 	bl	8008ed0 <RCC_GetSystemClockFreq>
 8008e7a:	60f8      	str	r0, [r7, #12]
      break;
 8008e7c:	e021      	b.n	8008ec2 <LL_RCC_GetLPUARTClockFreq+0x82>

    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() != 0U)
 8008e7e:	f7ff ff15 	bl	8008cac <LL_RCC_HSI_IsReady>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d019      	beq.n	8008ebc <LL_RCC_GetLPUARTClockFreq+0x7c>
      {
        lpuart_frequency = HSI_VALUE;
 8008e88:	4b10      	ldr	r3, [pc, #64]	; (8008ecc <LL_RCC_GetLPUARTClockFreq+0x8c>)
 8008e8a:	60fb      	str	r3, [r7, #12]
      }
      break;
 8008e8c:	e016      	b.n	8008ebc <LL_RCC_GetLPUARTClockFreq+0x7c>

    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() != 0U)
 8008e8e:	f7ff ff21 	bl	8008cd4 <LL_RCC_LSE_IsReady>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d013      	beq.n	8008ec0 <LL_RCC_GetLPUARTClockFreq+0x80>
      {
        lpuart_frequency = LSE_VALUE;
 8008e98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e9c:	60fb      	str	r3, [r7, #12]
      }
      break;
 8008e9e:	e00f      	b.n	8008ec0 <LL_RCC_GetLPUARTClockFreq+0x80>

    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008ea0:	f000 f816 	bl	8008ed0 <RCC_GetSystemClockFreq>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 f8a2 	bl	8008ff0 <RCC_GetHCLKClockFreq>
 8008eac:	4603      	mov	r3, r0
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f000 f8b4 	bl	800901c <RCC_GetPCLK1ClockFreq>
 8008eb4:	60f8      	str	r0, [r7, #12]
      break;
 8008eb6:	e004      	b.n	8008ec2 <LL_RCC_GetLPUARTClockFreq+0x82>

    default:
      break;
 8008eb8:	bf00      	nop
 8008eba:	e002      	b.n	8008ec2 <LL_RCC_GetLPUARTClockFreq+0x82>
      break;
 8008ebc:	bf00      	nop
 8008ebe:	e000      	b.n	8008ec2 <LL_RCC_GetLPUARTClockFreq+0x82>
      break;
 8008ec0:	bf00      	nop
  }

  return lpuart_frequency;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	00f42400 	.word	0x00f42400

08008ed0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b082      	sub	sp, #8
 8008ed4:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8008ed6:	f7ff ff3f 	bl	8008d58 <LL_RCC_GetSysClkSource>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b0c      	cmp	r3, #12
 8008ede:	d851      	bhi.n	8008f84 <RCC_GetSystemClockFreq+0xb4>
 8008ee0:	a201      	add	r2, pc, #4	; (adr r2, 8008ee8 <RCC_GetSystemClockFreq+0x18>)
 8008ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee6:	bf00      	nop
 8008ee8:	08008f1d 	.word	0x08008f1d
 8008eec:	08008f85 	.word	0x08008f85
 8008ef0:	08008f85 	.word	0x08008f85
 8008ef4:	08008f85 	.word	0x08008f85
 8008ef8:	08008f71 	.word	0x08008f71
 8008efc:	08008f85 	.word	0x08008f85
 8008f00:	08008f85 	.word	0x08008f85
 8008f04:	08008f85 	.word	0x08008f85
 8008f08:	08008f77 	.word	0x08008f77
 8008f0c:	08008f85 	.word	0x08008f85
 8008f10:	08008f85 	.word	0x08008f85
 8008f14:	08008f85 	.word	0x08008f85
 8008f18:	08008f7d 	.word	0x08008f7d
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008f1c:	f7ff feee 	bl	8008cfc <LL_RCC_MSI_IsEnabledRangeSelect>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d111      	bne.n	8008f4a <RCC_GetSystemClockFreq+0x7a>
 8008f26:	f7ff fee9 	bl	8008cfc <LL_RCC_MSI_IsEnabledRangeSelect>
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d004      	beq.n	8008f3a <RCC_GetSystemClockFreq+0x6a>
 8008f30:	f7ff fef6 	bl	8008d20 <LL_RCC_MSI_GetRange>
 8008f34:	4603      	mov	r3, r0
 8008f36:	0a1b      	lsrs	r3, r3, #8
 8008f38:	e003      	b.n	8008f42 <RCC_GetSystemClockFreq+0x72>
 8008f3a:	f7ff feff 	bl	8008d3c <LL_RCC_MSI_GetRangeAfterStandby>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	0a1b      	lsrs	r3, r3, #8
 8008f42:	4a28      	ldr	r2, [pc, #160]	; (8008fe4 <RCC_GetSystemClockFreq+0x114>)
 8008f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f48:	e010      	b.n	8008f6c <RCC_GetSystemClockFreq+0x9c>
 8008f4a:	f7ff fed7 	bl	8008cfc <LL_RCC_MSI_IsEnabledRangeSelect>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d004      	beq.n	8008f5e <RCC_GetSystemClockFreq+0x8e>
 8008f54:	f7ff fee4 	bl	8008d20 <LL_RCC_MSI_GetRange>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	091b      	lsrs	r3, r3, #4
 8008f5c:	e003      	b.n	8008f66 <RCC_GetSystemClockFreq+0x96>
 8008f5e:	f7ff feed 	bl	8008d3c <LL_RCC_MSI_GetRangeAfterStandby>
 8008f62:	4603      	mov	r3, r0
 8008f64:	091b      	lsrs	r3, r3, #4
 8008f66:	4a1f      	ldr	r2, [pc, #124]	; (8008fe4 <RCC_GetSystemClockFreq+0x114>)
 8008f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f6c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8008f6e:	e033      	b.n	8008fd8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8008f70:	4b1d      	ldr	r3, [pc, #116]	; (8008fe8 <RCC_GetSystemClockFreq+0x118>)
 8008f72:	607b      	str	r3, [r7, #4]
      break;
 8008f74:	e030      	b.n	8008fd8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8008f76:	4b1d      	ldr	r3, [pc, #116]	; (8008fec <RCC_GetSystemClockFreq+0x11c>)
 8008f78:	607b      	str	r3, [r7, #4]
      break;
 8008f7a:	e02d      	b.n	8008fd8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8008f7c:	f000 f862 	bl	8009044 <RCC_PLL_GetFreqDomain_SYS>
 8008f80:	6078      	str	r0, [r7, #4]
      break;
 8008f82:	e029      	b.n	8008fd8 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008f84:	f7ff feba 	bl	8008cfc <LL_RCC_MSI_IsEnabledRangeSelect>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d111      	bne.n	8008fb2 <RCC_GetSystemClockFreq+0xe2>
 8008f8e:	f7ff feb5 	bl	8008cfc <LL_RCC_MSI_IsEnabledRangeSelect>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d004      	beq.n	8008fa2 <RCC_GetSystemClockFreq+0xd2>
 8008f98:	f7ff fec2 	bl	8008d20 <LL_RCC_MSI_GetRange>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	0a1b      	lsrs	r3, r3, #8
 8008fa0:	e003      	b.n	8008faa <RCC_GetSystemClockFreq+0xda>
 8008fa2:	f7ff fecb 	bl	8008d3c <LL_RCC_MSI_GetRangeAfterStandby>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	0a1b      	lsrs	r3, r3, #8
 8008faa:	4a0e      	ldr	r2, [pc, #56]	; (8008fe4 <RCC_GetSystemClockFreq+0x114>)
 8008fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fb0:	e010      	b.n	8008fd4 <RCC_GetSystemClockFreq+0x104>
 8008fb2:	f7ff fea3 	bl	8008cfc <LL_RCC_MSI_IsEnabledRangeSelect>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d004      	beq.n	8008fc6 <RCC_GetSystemClockFreq+0xf6>
 8008fbc:	f7ff feb0 	bl	8008d20 <LL_RCC_MSI_GetRange>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	091b      	lsrs	r3, r3, #4
 8008fc4:	e003      	b.n	8008fce <RCC_GetSystemClockFreq+0xfe>
 8008fc6:	f7ff feb9 	bl	8008d3c <LL_RCC_MSI_GetRangeAfterStandby>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	091b      	lsrs	r3, r3, #4
 8008fce:	4a05      	ldr	r2, [pc, #20]	; (8008fe4 <RCC_GetSystemClockFreq+0x114>)
 8008fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fd4:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8008fd6:	bf00      	nop
  }

  return frequency;
 8008fd8:	687b      	ldr	r3, [r7, #4]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3708      	adds	r7, #8
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	0800cba0 	.word	0x0800cba0
 8008fe8:	00f42400 	.word	0x00f42400
 8008fec:	007a1200 	.word	0x007a1200

08008ff0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8008ff8:	f7ff febc 	bl	8008d74 <LL_RCC_GetAHBPrescaler>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	091b      	lsrs	r3, r3, #4
 8009000:	f003 030f 	and.w	r3, r3, #15
 8009004:	4a04      	ldr	r2, [pc, #16]	; (8009018 <RCC_GetHCLKClockFreq+0x28>)
 8009006:	5cd3      	ldrb	r3, [r2, r3]
 8009008:	461a      	mov	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	40d3      	lsrs	r3, r2
}
 800900e:	4618      	mov	r0, r3
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	0800cb88 	.word	0x0800cb88

0800901c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009024:	f7ff feb4 	bl	8008d90 <LL_RCC_GetAPB1Prescaler>
 8009028:	4603      	mov	r3, r0
 800902a:	0a1b      	lsrs	r3, r3, #8
 800902c:	4a04      	ldr	r2, [pc, #16]	; (8009040 <RCC_GetPCLK1ClockFreq+0x24>)
 800902e:	5cd3      	ldrb	r3, [r2, r3]
 8009030:	461a      	mov	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	40d3      	lsrs	r3, r2
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	0800cb98 	.word	0x0800cb98

08009044 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8009044:	b590      	push	{r4, r7, lr}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800904a:	f7ff fec1 	bl	8008dd0 <LL_RCC_PLL_GetMainSource>
 800904e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	2b03      	cmp	r3, #3
 8009054:	d036      	beq.n	80090c4 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b03      	cmp	r3, #3
 800905a:	d836      	bhi.n	80090ca <RCC_PLL_GetFreqDomain_SYS+0x86>
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d003      	beq.n	800906a <RCC_PLL_GetFreqDomain_SYS+0x26>
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	2b02      	cmp	r3, #2
 8009066:	d02a      	beq.n	80090be <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8009068:	e02f      	b.n	80090ca <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800906a:	f7ff fe47 	bl	8008cfc <LL_RCC_MSI_IsEnabledRangeSelect>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d111      	bne.n	8009098 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8009074:	f7ff fe42 	bl	8008cfc <LL_RCC_MSI_IsEnabledRangeSelect>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	d004      	beq.n	8009088 <RCC_PLL_GetFreqDomain_SYS+0x44>
 800907e:	f7ff fe4f 	bl	8008d20 <LL_RCC_MSI_GetRange>
 8009082:	4603      	mov	r3, r0
 8009084:	0a1b      	lsrs	r3, r3, #8
 8009086:	e003      	b.n	8009090 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8009088:	f7ff fe58 	bl	8008d3c <LL_RCC_MSI_GetRangeAfterStandby>
 800908c:	4603      	mov	r3, r0
 800908e:	0a1b      	lsrs	r3, r3, #8
 8009090:	4a2f      	ldr	r2, [pc, #188]	; (8009150 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8009092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009096:	e010      	b.n	80090ba <RCC_PLL_GetFreqDomain_SYS+0x76>
 8009098:	f7ff fe30 	bl	8008cfc <LL_RCC_MSI_IsEnabledRangeSelect>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d004      	beq.n	80090ac <RCC_PLL_GetFreqDomain_SYS+0x68>
 80090a2:	f7ff fe3d 	bl	8008d20 <LL_RCC_MSI_GetRange>
 80090a6:	4603      	mov	r3, r0
 80090a8:	091b      	lsrs	r3, r3, #4
 80090aa:	e003      	b.n	80090b4 <RCC_PLL_GetFreqDomain_SYS+0x70>
 80090ac:	f7ff fe46 	bl	8008d3c <LL_RCC_MSI_GetRangeAfterStandby>
 80090b0:	4603      	mov	r3, r0
 80090b2:	091b      	lsrs	r3, r3, #4
 80090b4:	4a26      	ldr	r2, [pc, #152]	; (8009150 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80090b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090ba:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80090bc:	e02f      	b.n	800911e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80090be:	4b25      	ldr	r3, [pc, #148]	; (8009154 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 80090c0:	607b      	str	r3, [r7, #4]
      break;
 80090c2:	e02c      	b.n	800911e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80090c4:	4b24      	ldr	r3, [pc, #144]	; (8009158 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 80090c6:	607b      	str	r3, [r7, #4]
      break;
 80090c8:	e029      	b.n	800911e <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80090ca:	f7ff fe17 	bl	8008cfc <LL_RCC_MSI_IsEnabledRangeSelect>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d111      	bne.n	80090f8 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80090d4:	f7ff fe12 	bl	8008cfc <LL_RCC_MSI_IsEnabledRangeSelect>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d004      	beq.n	80090e8 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80090de:	f7ff fe1f 	bl	8008d20 <LL_RCC_MSI_GetRange>
 80090e2:	4603      	mov	r3, r0
 80090e4:	0a1b      	lsrs	r3, r3, #8
 80090e6:	e003      	b.n	80090f0 <RCC_PLL_GetFreqDomain_SYS+0xac>
 80090e8:	f7ff fe28 	bl	8008d3c <LL_RCC_MSI_GetRangeAfterStandby>
 80090ec:	4603      	mov	r3, r0
 80090ee:	0a1b      	lsrs	r3, r3, #8
 80090f0:	4a17      	ldr	r2, [pc, #92]	; (8009150 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80090f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090f6:	e010      	b.n	800911a <RCC_PLL_GetFreqDomain_SYS+0xd6>
 80090f8:	f7ff fe00 	bl	8008cfc <LL_RCC_MSI_IsEnabledRangeSelect>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d004      	beq.n	800910c <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8009102:	f7ff fe0d 	bl	8008d20 <LL_RCC_MSI_GetRange>
 8009106:	4603      	mov	r3, r0
 8009108:	091b      	lsrs	r3, r3, #4
 800910a:	e003      	b.n	8009114 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 800910c:	f7ff fe16 	bl	8008d3c <LL_RCC_MSI_GetRangeAfterStandby>
 8009110:	4603      	mov	r3, r0
 8009112:	091b      	lsrs	r3, r3, #4
 8009114:	4a0e      	ldr	r2, [pc, #56]	; (8009150 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8009116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800911a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800911c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800911e:	f7ff fe81 	bl	8008e24 <LL_RCC_PLL_GetDivider>
 8009122:	4603      	mov	r3, r0
 8009124:	091b      	lsrs	r3, r3, #4
 8009126:	3301      	adds	r3, #1
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	fbb2 f4f3 	udiv	r4, r2, r3
 800912e:	f7ff fe5d 	bl	8008dec <LL_RCC_PLL_GetN>
 8009132:	4603      	mov	r3, r0
 8009134:	fb03 f404 	mul.w	r4, r3, r4
 8009138:	f7ff fe66 	bl	8008e08 <LL_RCC_PLL_GetR>
 800913c:	4603      	mov	r3, r0
 800913e:	0e5b      	lsrs	r3, r3, #25
 8009140:	3301      	adds	r3, #1
 8009142:	005b      	lsls	r3, r3, #1
 8009144:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8009148:	4618      	mov	r0, r3
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	bd90      	pop	{r4, r7, pc}
 8009150:	0800cba0 	.word	0x0800cba0
 8009154:	00f42400 	.word	0x00f42400
 8009158:	007a1200 	.word	0x007a1200

0800915c <lcd_init>:
static void lcd_DoTX();
static bool lcd_hasData();
static uint8_t lcd_writeChar(uint8_t x, uint8_t y, uint8_t c);

//Functions
void lcd_init() {
 800915c:	b580      	push	{r7, lr}
 800915e:	af00      	add	r7, sp, #0
	LCD_Power();
 8009160:	f000 f804 	bl	800916c <LCD_Power>
	lcd_clear();
 8009164:	f000 fa80 	bl	8009668 <lcd_clear>
}
 8009168:	bf00      	nop
 800916a:	bd80      	pop	{r7, pc}

0800916c <LCD_Power>:

lcd_State_enum LCD_Power() {
 800916c:	b580      	push	{r7, lr}
 800916e:	af00      	add	r7, sp, #0
	switch (lcd_state) {
 8009170:	4b3f      	ldr	r3, [pc, #252]	; (8009270 <LCD_Power+0x104>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b04      	cmp	r3, #4
 8009178:	d875      	bhi.n	8009266 <LCD_Power+0xfa>
 800917a:	a201      	add	r2, pc, #4	; (adr r2, 8009180 <LCD_Power+0x14>)
 800917c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009180:	08009195 	.word	0x08009195
 8009184:	080091b5 	.word	0x080091b5
 8009188:	08009213 	.word	0x08009213
 800918c:	08009235 	.word	0x08009235
 8009190:	08009235 	.word	0x08009235
	case LCD_OFF:
		if (superCapmV > mV_LCD_SLOW) {
 8009194:	4b37      	ldr	r3, [pc, #220]	; (8009274 <LCD_Power+0x108>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800919c:	d95e      	bls.n	800925c <LCD_Power+0xf0>
			//Turn on LCD
			lcd_state = LCD_READY;
 800919e:	4b34      	ldr	r3, [pc, #208]	; (8009270 <LCD_Power+0x104>)
 80091a0:	2202      	movs	r2, #2
 80091a2:	701a      	strb	r2, [r3, #0]
			//HAL_LPTIM_PWM_Start(&hlptim1, 2047, 1023); //32768 DIV16 DIV2048 1HZ
			HAL_GPIO_WritePin(DISP_EN_GPIO_Port, DISP_EN_Pin, GPIO_PIN_SET);
 80091a4:	2201      	movs	r2, #1
 80091a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80091aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80091ae:	f7fc ff91 	bl	80060d4 <HAL_GPIO_WritePin>
		}
		break;
 80091b2:	e053      	b.n	800925c <LCD_Power+0xf0>
	case LCD_TIMER:
		if (superCapmV < mV_LCD_OFF) {
 80091b4:	4b2f      	ldr	r3, [pc, #188]	; (8009274 <LCD_Power+0x108>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f640 3253 	movw	r2, #2899	; 0xb53
 80091bc:	4293      	cmp	r3, r2
 80091be:	d80a      	bhi.n	80091d6 <LCD_Power+0x6a>
			lcd_state = LCD_OFF;
 80091c0:	4b2b      	ldr	r3, [pc, #172]	; (8009270 <LCD_Power+0x104>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DISP_EN_GPIO_Port, DISP_EN_Pin, GPIO_PIN_RESET);
 80091c6:	2200      	movs	r2, #0
 80091c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80091cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80091d0:	f7fc ff80 	bl	80060d4 <HAL_GPIO_WritePin>
		} else if ((superCapmV > mV_LCD_FAST) && (guiTimer >= LCD_RATE_FAST)) {
			lcd_state = LCD_READY;
		} else if (guiTimer >= LCD_RATE_SLOW) {
			lcd_state = LCD_READY;
		}
		break;
 80091d4:	e044      	b.n	8009260 <LCD_Power+0xf4>
		} else if (superCapmV > mV_OV) {
 80091d6:	4b27      	ldr	r3, [pc, #156]	; (8009274 <LCD_Power+0x108>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80091de:	d903      	bls.n	80091e8 <LCD_Power+0x7c>
			lcd_state = LCD_READY;
 80091e0:	4b23      	ldr	r3, [pc, #140]	; (8009270 <LCD_Power+0x104>)
 80091e2:	2202      	movs	r2, #2
 80091e4:	701a      	strb	r2, [r3, #0]
		break;
 80091e6:	e03b      	b.n	8009260 <LCD_Power+0xf4>
		} else if ((superCapmV > mV_LCD_FAST) && (guiTimer >= LCD_RATE_FAST)) {
 80091e8:	4b22      	ldr	r3, [pc, #136]	; (8009274 <LCD_Power+0x108>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80091f0:	d907      	bls.n	8009202 <LCD_Power+0x96>
 80091f2:	4b21      	ldr	r3, [pc, #132]	; (8009278 <LCD_Power+0x10c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <LCD_Power+0x96>
			lcd_state = LCD_READY;
 80091fa:	4b1d      	ldr	r3, [pc, #116]	; (8009270 <LCD_Power+0x104>)
 80091fc:	2202      	movs	r2, #2
 80091fe:	701a      	strb	r2, [r3, #0]
		break;
 8009200:	e02e      	b.n	8009260 <LCD_Power+0xf4>
		} else if (guiTimer >= LCD_RATE_SLOW) {
 8009202:	4b1d      	ldr	r3, [pc, #116]	; (8009278 <LCD_Power+0x10c>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	2b0e      	cmp	r3, #14
 8009208:	d92a      	bls.n	8009260 <LCD_Power+0xf4>
			lcd_state = LCD_READY;
 800920a:	4b19      	ldr	r3, [pc, #100]	; (8009270 <LCD_Power+0x104>)
 800920c:	2202      	movs	r2, #2
 800920e:	701a      	strb	r2, [r3, #0]
		break;
 8009210:	e026      	b.n	8009260 <LCD_Power+0xf4>
	case LCD_READY:
		if (superCapmV < mV_LCD_OFF) {
 8009212:	4b18      	ldr	r3, [pc, #96]	; (8009274 <LCD_Power+0x108>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f640 3253 	movw	r2, #2899	; 0xb53
 800921a:	4293      	cmp	r3, r2
 800921c:	d822      	bhi.n	8009264 <LCD_Power+0xf8>
			lcd_state = LCD_OFF;
 800921e:	4b14      	ldr	r3, [pc, #80]	; (8009270 <LCD_Power+0x104>)
 8009220:	2200      	movs	r2, #0
 8009222:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DISP_EN_GPIO_Port, DISP_EN_Pin, GPIO_PIN_RESET);
 8009224:	2200      	movs	r2, #0
 8009226:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800922a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800922e:	f7fc ff51 	bl	80060d4 <HAL_GPIO_WritePin>
		}
		break;
 8009232:	e017      	b.n	8009264 <LCD_Power+0xf8>
	case LCD_SENDING_DATA:
	case LCD_SENDING_CLR:
		if (superCapmV < mV_LCD_OFF) {
 8009234:	4b0f      	ldr	r3, [pc, #60]	; (8009274 <LCD_Power+0x108>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f640 3253 	movw	r2, #2899	; 0xb53
 800923c:	4293      	cmp	r3, r2
 800923e:	d812      	bhi.n	8009266 <LCD_Power+0xfa>
			HAL_SPI_DMAStop(&hspi1);
 8009240:	480e      	ldr	r0, [pc, #56]	; (800927c <LCD_Power+0x110>)
 8009242:	f7ff f88f 	bl	8008364 <HAL_SPI_DMAStop>
			lcd_state = LCD_OFF;
 8009246:	4b0a      	ldr	r3, [pc, #40]	; (8009270 <LCD_Power+0x104>)
 8009248:	2200      	movs	r2, #0
 800924a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DISP_EN_GPIO_Port, DISP_EN_Pin, GPIO_PIN_RESET);
 800924c:	2200      	movs	r2, #0
 800924e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009256:	f7fc ff3d 	bl	80060d4 <HAL_GPIO_WritePin>
 800925a:	e004      	b.n	8009266 <LCD_Power+0xfa>
		break;
 800925c:	bf00      	nop
 800925e:	e002      	b.n	8009266 <LCD_Power+0xfa>
		break;
 8009260:	bf00      	nop
 8009262:	e000      	b.n	8009266 <LCD_Power+0xfa>
		break;
 8009264:	bf00      	nop
		}
	}
	return lcd_state;
 8009266:	4b02      	ldr	r3, [pc, #8]	; (8009270 <LCD_Power+0x104>)
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	b2db      	uxtb	r3, r3
}
 800926c:	4618      	mov	r0, r3
 800926e:	bd80      	pop	{r7, pc}
 8009270:	20000d88 	.word	0x20000d88
 8009274:	2000037c 	.word	0x2000037c
 8009278:	2000038c 	.word	0x2000038c
 800927c:	200002cc 	.word	0x200002cc

08009280 <lcd_SetCursor>:

void lcd_SetCursor(uint8_t x, uint8_t y) {
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	4603      	mov	r3, r0
 8009288:	460a      	mov	r2, r1
 800928a:	71fb      	strb	r3, [r7, #7]
 800928c:	4613      	mov	r3, r2
 800928e:	71bb      	strb	r3, [r7, #6]
	cursor_x = x;
 8009290:	79fb      	ldrb	r3, [r7, #7]
 8009292:	b29a      	uxth	r2, r3
 8009294:	4b05      	ldr	r3, [pc, #20]	; (80092ac <lcd_SetCursor+0x2c>)
 8009296:	801a      	strh	r2, [r3, #0]
	cursor_y = y;
 8009298:	79bb      	ldrb	r3, [r7, #6]
 800929a:	b29a      	uxth	r2, r3
 800929c:	4b04      	ldr	r3, [pc, #16]	; (80092b0 <lcd_SetCursor+0x30>)
 800929e:	801a      	strh	r2, [r3, #0]
}
 80092a0:	bf00      	nop
 80092a2:	370c      	adds	r7, #12
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr
 80092ac:	20000d82 	.word	0x20000d82
 80092b0:	20000d80 	.word	0x20000d80

080092b4 <lcd_SetFont>:

void lcd_SetFont(GFXfont *f) {
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
	gfxFontPtr = (GFXfont*) f;
 80092bc:	4a04      	ldr	r2, [pc, #16]	; (80092d0 <lcd_SetFont+0x1c>)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6013      	str	r3, [r2, #0]
}
 80092c2:	bf00      	nop
 80092c4:	370c      	adds	r7, #12
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	20000d84 	.word	0x20000d84

080092d4 <lcd_writeChar>:

uint8_t lcd_writeChar(uint8_t x, uint8_t y, uint8_t c) {
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b088      	sub	sp, #32
 80092d8:	af00      	add	r7, sp, #0
 80092da:	4603      	mov	r3, r0
 80092dc:	71fb      	strb	r3, [r7, #7]
 80092de:	460b      	mov	r3, r1
 80092e0:	71bb      	strb	r3, [r7, #6]
 80092e2:	4613      	mov	r3, r2
 80092e4:	717b      	strb	r3, [r7, #5]
	if (c >= (uint8_t) gfxFontPtr->first && c <= (uint8_t) gfxFontPtr->last) { //Char present in this font?
 80092e6:	4b40      	ldr	r3, [pc, #256]	; (80093e8 <lcd_writeChar+0x114>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	891b      	ldrh	r3, [r3, #8]
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	797a      	ldrb	r2, [r7, #5]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d374      	bcc.n	80093de <lcd_writeChar+0x10a>
 80092f4:	4b3c      	ldr	r3, [pc, #240]	; (80093e8 <lcd_writeChar+0x114>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	895b      	ldrh	r3, [r3, #10]
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	797a      	ldrb	r2, [r7, #5]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d86d      	bhi.n	80093de <lcd_writeChar+0x10a>
		c -= (uint8_t) (gfxFontPtr->first);
 8009302:	4b39      	ldr	r3, [pc, #228]	; (80093e8 <lcd_writeChar+0x114>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	891b      	ldrh	r3, [r3, #8]
 8009308:	b2db      	uxtb	r3, r3
 800930a:	797a      	ldrb	r2, [r7, #5]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	717b      	strb	r3, [r7, #5]
		GFXglyph glyph = gfxFontPtr->glyph[c];
 8009310:	4b35      	ldr	r3, [pc, #212]	; (80093e8 <lcd_writeChar+0x114>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	685a      	ldr	r2, [r3, #4]
 8009316:	797b      	ldrb	r3, [r7, #5]
 8009318:	00db      	lsls	r3, r3, #3
 800931a:	441a      	add	r2, r3
 800931c:	f107 0308 	add.w	r3, r7, #8
 8009320:	6810      	ldr	r0, [r2, #0]
 8009322:	6851      	ldr	r1, [r2, #4]
 8009324:	c303      	stmia	r3!, {r0, r1}
		uint8_t *bitmap = gfxFontPtr->bitmap;
 8009326:	4b30      	ldr	r3, [pc, #192]	; (80093e8 <lcd_writeChar+0x114>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	617b      	str	r3, [r7, #20]

		uint16_t bo = glyph.bitmapOffset;
 800932e:	893b      	ldrh	r3, [r7, #8]
 8009330:	83fb      	strh	r3, [r7, #30]
		uint8_t w = glyph.width, h = glyph.height;
 8009332:	7abb      	ldrb	r3, [r7, #10]
 8009334:	74fb      	strb	r3, [r7, #19]
 8009336:	7afb      	ldrb	r3, [r7, #11]
 8009338:	74bb      	strb	r3, [r7, #18]
		int8_t xo = glyph.xOffset, yo = glyph.yOffset;
 800933a:	7b7b      	ldrb	r3, [r7, #13]
 800933c:	747b      	strb	r3, [r7, #17]
 800933e:	7bbb      	ldrb	r3, [r7, #14]
 8009340:	743b      	strb	r3, [r7, #16]
		uint8_t xx, yy, bits = 0, bit = 0;
 8009342:	2300      	movs	r3, #0
 8009344:	76fb      	strb	r3, [r7, #27]
 8009346:	2300      	movs	r3, #0
 8009348:	76bb      	strb	r3, [r7, #26]

		for (yy = 0; yy < h; yy++) {
 800934a:	2300      	movs	r3, #0
 800934c:	773b      	strb	r3, [r7, #28]
 800934e:	e040      	b.n	80093d2 <lcd_writeChar+0xfe>
			for (xx = 0; xx < w; xx++) {
 8009350:	2300      	movs	r3, #0
 8009352:	777b      	strb	r3, [r7, #29]
 8009354:	e036      	b.n	80093c4 <lcd_writeChar+0xf0>
				if (!(bit++ & 7)) {
 8009356:	7ebb      	ldrb	r3, [r7, #26]
 8009358:	1c5a      	adds	r2, r3, #1
 800935a:	76ba      	strb	r2, [r7, #26]
 800935c:	f003 0307 	and.w	r3, r3, #7
 8009360:	2b00      	cmp	r3, #0
 8009362:	d107      	bne.n	8009374 <lcd_writeChar+0xa0>
					bits = bitmap[bo++];
 8009364:	8bfb      	ldrh	r3, [r7, #30]
 8009366:	1c5a      	adds	r2, r3, #1
 8009368:	83fa      	strh	r2, [r7, #30]
 800936a:	461a      	mov	r2, r3
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	4413      	add	r3, r2
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	76fb      	strb	r3, [r7, #27]
				}
				if (bits & 0x80) {
 8009374:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009378:	2b00      	cmp	r3, #0
 800937a:	da1d      	bge.n	80093b8 <lcd_writeChar+0xe4>
					lcd_drawPixel(x + xo + xx, y + yo + yy, LCD_BLACK);
 800937c:	79fb      	ldrb	r3, [r7, #7]
 800937e:	b21a      	sxth	r2, r3
 8009380:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8009384:	b21b      	sxth	r3, r3
 8009386:	4413      	add	r3, r2
 8009388:	b21b      	sxth	r3, r3
 800938a:	b29a      	uxth	r2, r3
 800938c:	7f7b      	ldrb	r3, [r7, #29]
 800938e:	b29b      	uxth	r3, r3
 8009390:	4413      	add	r3, r2
 8009392:	b29b      	uxth	r3, r3
 8009394:	b218      	sxth	r0, r3
 8009396:	79bb      	ldrb	r3, [r7, #6]
 8009398:	b21a      	sxth	r2, r3
 800939a:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800939e:	b21b      	sxth	r3, r3
 80093a0:	4413      	add	r3, r2
 80093a2:	b21b      	sxth	r3, r3
 80093a4:	b29a      	uxth	r2, r3
 80093a6:	7f3b      	ldrb	r3, [r7, #28]
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	4413      	add	r3, r2
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	b21b      	sxth	r3, r3
 80093b0:	2200      	movs	r2, #0
 80093b2:	4619      	mov	r1, r3
 80093b4:	f000 f868 	bl	8009488 <lcd_drawPixel>
				}
				bits <<= 1;
 80093b8:	7efb      	ldrb	r3, [r7, #27]
 80093ba:	005b      	lsls	r3, r3, #1
 80093bc:	76fb      	strb	r3, [r7, #27]
			for (xx = 0; xx < w; xx++) {
 80093be:	7f7b      	ldrb	r3, [r7, #29]
 80093c0:	3301      	adds	r3, #1
 80093c2:	777b      	strb	r3, [r7, #29]
 80093c4:	7f7a      	ldrb	r2, [r7, #29]
 80093c6:	7cfb      	ldrb	r3, [r7, #19]
 80093c8:	429a      	cmp	r2, r3
 80093ca:	d3c4      	bcc.n	8009356 <lcd_writeChar+0x82>
		for (yy = 0; yy < h; yy++) {
 80093cc:	7f3b      	ldrb	r3, [r7, #28]
 80093ce:	3301      	adds	r3, #1
 80093d0:	773b      	strb	r3, [r7, #28]
 80093d2:	7f3a      	ldrb	r2, [r7, #28]
 80093d4:	7cbb      	ldrb	r3, [r7, #18]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d3ba      	bcc.n	8009350 <lcd_writeChar+0x7c>
			}
		}
		return (uint8_t) glyph.xAdvance; //Advance cursor
 80093da:	7b3b      	ldrb	r3, [r7, #12]
 80093dc:	e000      	b.n	80093e0 <lcd_writeChar+0x10c>
	}
	return 0;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3720      	adds	r7, #32
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	20000d84 	.word	0x20000d84

080093ec <lcd_print>:

void lcd_print(int n) {
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
	uint8_t bufPointer = 0;
 80093f4:	2300      	movs	r3, #0
 80093f6:	73fb      	strb	r3, [r7, #15]
	while (bufPointer < n) {
 80093f8:	e016      	b.n	8009428 <lcd_print+0x3c>
		cursor_x += lcd_writeChar(cursor_x, cursor_y, strbuffer[bufPointer++]);
 80093fa:	4b10      	ldr	r3, [pc, #64]	; (800943c <lcd_print+0x50>)
 80093fc:	881b      	ldrh	r3, [r3, #0]
 80093fe:	b2d8      	uxtb	r0, r3
 8009400:	4b0f      	ldr	r3, [pc, #60]	; (8009440 <lcd_print+0x54>)
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	b2d9      	uxtb	r1, r3
 8009406:	7bfb      	ldrb	r3, [r7, #15]
 8009408:	1c5a      	adds	r2, r3, #1
 800940a:	73fa      	strb	r2, [r7, #15]
 800940c:	461a      	mov	r2, r3
 800940e:	4b0d      	ldr	r3, [pc, #52]	; (8009444 <lcd_print+0x58>)
 8009410:	5c9b      	ldrb	r3, [r3, r2]
 8009412:	461a      	mov	r2, r3
 8009414:	f7ff ff5e 	bl	80092d4 <lcd_writeChar>
 8009418:	4603      	mov	r3, r0
 800941a:	b29a      	uxth	r2, r3
 800941c:	4b07      	ldr	r3, [pc, #28]	; (800943c <lcd_print+0x50>)
 800941e:	881b      	ldrh	r3, [r3, #0]
 8009420:	4413      	add	r3, r2
 8009422:	b29a      	uxth	r2, r3
 8009424:	4b05      	ldr	r3, [pc, #20]	; (800943c <lcd_print+0x50>)
 8009426:	801a      	strh	r2, [r3, #0]
	while (bufPointer < n) {
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	429a      	cmp	r2, r3
 800942e:	dce4      	bgt.n	80093fa <lcd_print+0xe>
	}
}
 8009430:	bf00      	nop
 8009432:	bf00      	nop
 8009434:	3710      	adds	r7, #16
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	20000d82 	.word	0x20000d82
 8009440:	20000d80 	.word	0x20000d80
 8009444:	20000d6c 	.word	0x20000d6c

08009448 <lcd_print_char>:

void lcd_print_char(uint8_t theChar) {
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	4603      	mov	r3, r0
 8009450:	71fb      	strb	r3, [r7, #7]
	cursor_x += lcd_writeChar(cursor_x, cursor_y, theChar);
 8009452:	4b0b      	ldr	r3, [pc, #44]	; (8009480 <lcd_print_char+0x38>)
 8009454:	881b      	ldrh	r3, [r3, #0]
 8009456:	b2db      	uxtb	r3, r3
 8009458:	4a0a      	ldr	r2, [pc, #40]	; (8009484 <lcd_print_char+0x3c>)
 800945a:	8812      	ldrh	r2, [r2, #0]
 800945c:	b2d1      	uxtb	r1, r2
 800945e:	79fa      	ldrb	r2, [r7, #7]
 8009460:	4618      	mov	r0, r3
 8009462:	f7ff ff37 	bl	80092d4 <lcd_writeChar>
 8009466:	4603      	mov	r3, r0
 8009468:	b29a      	uxth	r2, r3
 800946a:	4b05      	ldr	r3, [pc, #20]	; (8009480 <lcd_print_char+0x38>)
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	4413      	add	r3, r2
 8009470:	b29a      	uxth	r2, r3
 8009472:	4b03      	ldr	r3, [pc, #12]	; (8009480 <lcd_print_char+0x38>)
 8009474:	801a      	strh	r2, [r3, #0]
}
 8009476:	bf00      	nop
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	20000d82 	.word	0x20000d82
 8009484:	20000d80 	.word	0x20000d80

08009488 <lcd_drawPixel>:

void lcd_drawPixel(int16_t x, int16_t y, uint8_t bDraw) {
 8009488:	b490      	push	{r4, r7}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	4603      	mov	r3, r0
 8009490:	80fb      	strh	r3, [r7, #6]
 8009492:	460b      	mov	r3, r1
 8009494:	80bb      	strh	r3, [r7, #4]
 8009496:	4613      	mov	r3, r2
 8009498:	70fb      	strb	r3, [r7, #3]
	if (x < 0 || y < 0 || x >= LCD_RES_PX_X || y >= LCD_RES_PX_Y)
 800949a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	db61      	blt.n	8009566 <lcd_drawPixel+0xde>
 80094a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	db5d      	blt.n	8009566 <lcd_drawPixel+0xde>
 80094aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80094ae:	2b7f      	cmp	r3, #127	; 0x7f
 80094b0:	dc59      	bgt.n	8009566 <lcd_drawPixel+0xde>
 80094b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80094b6:	2b7f      	cmp	r3, #127	; 0x7f
 80094b8:	dc55      	bgt.n	8009566 <lcd_drawPixel+0xde>
		return;

	uint8_t XbitInByte = (0x01 << (x % 8));
 80094ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80094be:	425a      	negs	r2, r3
 80094c0:	f003 0307 	and.w	r3, r3, #7
 80094c4:	f002 0207 	and.w	r2, r2, #7
 80094c8:	bf58      	it	pl
 80094ca:	4253      	negpl	r3, r2
 80094cc:	b21b      	sxth	r3, r3
 80094ce:	461a      	mov	r2, r3
 80094d0:	2301      	movs	r3, #1
 80094d2:	4093      	lsls	r3, r2
 80094d4:	73fb      	strb	r3, [r7, #15]
	uint8_t xx = (x / 8) + 1; //X byte in array
 80094d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	da00      	bge.n	80094e0 <lcd_drawPixel+0x58>
 80094de:	3307      	adds	r3, #7
 80094e0:	10db      	asrs	r3, r3, #3
 80094e2:	b21b      	sxth	r3, r3
 80094e4:	b2db      	uxtb	r3, r3
 80094e6:	3301      	adds	r3, #1
 80094e8:	73bb      	strb	r3, [r7, #14]
	if (bDraw == LCD_WHITE) { //Set bit
 80094ea:	78fb      	ldrb	r3, [r7, #3]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d11a      	bne.n	8009526 <lcd_drawPixel+0x9e>
		LCD_BUFFER[y][xx] |= XbitInByte; 	//set bit
 80094f0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80094f4:	7bb9      	ldrb	r1, [r7, #14]
 80094f6:	481e      	ldr	r0, [pc, #120]	; (8009570 <lcd_drawPixel+0xe8>)
 80094f8:	4613      	mov	r3, r2
 80094fa:	00db      	lsls	r3, r3, #3
 80094fc:	4413      	add	r3, r2
 80094fe:	005b      	lsls	r3, r3, #1
 8009500:	4403      	add	r3, r0
 8009502:	440b      	add	r3, r1
 8009504:	7818      	ldrb	r0, [r3, #0]
 8009506:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800950a:	7bb9      	ldrb	r1, [r7, #14]
 800950c:	7bfb      	ldrb	r3, [r7, #15]
 800950e:	4303      	orrs	r3, r0
 8009510:	b2dc      	uxtb	r4, r3
 8009512:	4817      	ldr	r0, [pc, #92]	; (8009570 <lcd_drawPixel+0xe8>)
 8009514:	4613      	mov	r3, r2
 8009516:	00db      	lsls	r3, r3, #3
 8009518:	4413      	add	r3, r2
 800951a:	005b      	lsls	r3, r3, #1
 800951c:	4403      	add	r3, r0
 800951e:	440b      	add	r3, r1
 8009520:	4622      	mov	r2, r4
 8009522:	701a      	strb	r2, [r3, #0]
 8009524:	e020      	b.n	8009568 <lcd_drawPixel+0xe0>
	} else {
		LCD_BUFFER[y][xx] &= ~XbitInByte; //clear bit
 8009526:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800952a:	7bb9      	ldrb	r1, [r7, #14]
 800952c:	4810      	ldr	r0, [pc, #64]	; (8009570 <lcd_drawPixel+0xe8>)
 800952e:	4613      	mov	r3, r2
 8009530:	00db      	lsls	r3, r3, #3
 8009532:	4413      	add	r3, r2
 8009534:	005b      	lsls	r3, r3, #1
 8009536:	4403      	add	r3, r0
 8009538:	440b      	add	r3, r1
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	b25a      	sxtb	r2, r3
 800953e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009542:	43db      	mvns	r3, r3
 8009544:	b25b      	sxtb	r3, r3
 8009546:	4013      	ands	r3, r2
 8009548:	b25b      	sxtb	r3, r3
 800954a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800954e:	7bb9      	ldrb	r1, [r7, #14]
 8009550:	b2dc      	uxtb	r4, r3
 8009552:	4807      	ldr	r0, [pc, #28]	; (8009570 <lcd_drawPixel+0xe8>)
 8009554:	4613      	mov	r3, r2
 8009556:	00db      	lsls	r3, r3, #3
 8009558:	4413      	add	r3, r2
 800955a:	005b      	lsls	r3, r3, #1
 800955c:	4403      	add	r3, r0
 800955e:	440b      	add	r3, r1
 8009560:	4622      	mov	r2, r4
 8009562:	701a      	strb	r2, [r3, #0]
 8009564:	e000      	b.n	8009568 <lcd_drawPixel+0xe0>
		return;
 8009566:	bf00      	nop
	}
}
 8009568:	3710      	adds	r7, #16
 800956a:	46bd      	mov	sp, r7
 800956c:	bc90      	pop	{r4, r7}
 800956e:	4770      	bx	lr
 8009570:	2000046c 	.word	0x2000046c

08009574 <lcd_drawLine>:

void lcd_drawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
 8009574:	b590      	push	{r4, r7, lr}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	4604      	mov	r4, r0
 800957c:	4608      	mov	r0, r1
 800957e:	4611      	mov	r1, r2
 8009580:	461a      	mov	r2, r3
 8009582:	4623      	mov	r3, r4
 8009584:	71fb      	strb	r3, [r7, #7]
 8009586:	4603      	mov	r3, r0
 8009588:	71bb      	strb	r3, [r7, #6]
 800958a:	460b      	mov	r3, r1
 800958c:	717b      	strb	r3, [r7, #5]
 800958e:	4613      	mov	r3, r2
 8009590:	713b      	strb	r3, [r7, #4]
	if (x0 == x1) {
 8009592:	79fa      	ldrb	r2, [r7, #7]
 8009594:	797b      	ldrb	r3, [r7, #5]
 8009596:	429a      	cmp	r2, r3
 8009598:	d113      	bne.n	80095c2 <lcd_drawLine+0x4e>
		//Vertical Line
		for (uint8_t i = y0; i <= y1; i++) {
 800959a:	79bb      	ldrb	r3, [r7, #6]
 800959c:	73fb      	strb	r3, [r7, #15]
 800959e:	e00b      	b.n	80095b8 <lcd_drawLine+0x44>
			lcd_drawPixel(x0, i, color);
 80095a0:	79fb      	ldrb	r3, [r7, #7]
 80095a2:	b21b      	sxth	r3, r3
 80095a4:	7bfa      	ldrb	r2, [r7, #15]
 80095a6:	b211      	sxth	r1, r2
 80095a8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7ff ff6b 	bl	8009488 <lcd_drawPixel>
		for (uint8_t i = y0; i <= y1; i++) {
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	3301      	adds	r3, #1
 80095b6:	73fb      	strb	r3, [r7, #15]
 80095b8:	7bfa      	ldrb	r2, [r7, #15]
 80095ba:	793b      	ldrb	r3, [r7, #4]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d9ef      	bls.n	80095a0 <lcd_drawLine+0x2c>
			lcd_drawPixel(i, y0, color);
		}
	} else {
		//Angled line
	}
}
 80095c0:	e016      	b.n	80095f0 <lcd_drawLine+0x7c>
	} else if (y0 == y1) {
 80095c2:	79ba      	ldrb	r2, [r7, #6]
 80095c4:	793b      	ldrb	r3, [r7, #4]
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d112      	bne.n	80095f0 <lcd_drawLine+0x7c>
		for (uint8_t i = x0; i <= x1; i++) {
 80095ca:	79fb      	ldrb	r3, [r7, #7]
 80095cc:	73bb      	strb	r3, [r7, #14]
 80095ce:	e00b      	b.n	80095e8 <lcd_drawLine+0x74>
			lcd_drawPixel(i, y0, color);
 80095d0:	7bbb      	ldrb	r3, [r7, #14]
 80095d2:	b21b      	sxth	r3, r3
 80095d4:	79ba      	ldrb	r2, [r7, #6]
 80095d6:	b211      	sxth	r1, r2
 80095d8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80095dc:	4618      	mov	r0, r3
 80095de:	f7ff ff53 	bl	8009488 <lcd_drawPixel>
		for (uint8_t i = x0; i <= x1; i++) {
 80095e2:	7bbb      	ldrb	r3, [r7, #14]
 80095e4:	3301      	adds	r3, #1
 80095e6:	73bb      	strb	r3, [r7, #14]
 80095e8:	7bba      	ldrb	r2, [r7, #14]
 80095ea:	797b      	ldrb	r3, [r7, #5]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d9ef      	bls.n	80095d0 <lcd_drawLine+0x5c>
}
 80095f0:	bf00      	nop
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd90      	pop	{r4, r7, pc}

080095f8 <lcd_clearLines>:
	for (uint8_t i = 0; i < h; i++) {
		lcd_drawLine(x, y + i, x + w, y + i, color);
	}
}

void lcd_clearLines(uint8_t y0, uint8_t y1) {
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	4603      	mov	r3, r0
 8009600:	460a      	mov	r2, r1
 8009602:	71fb      	strb	r3, [r7, #7]
 8009604:	4613      	mov	r3, r2
 8009606:	71bb      	strb	r3, [r7, #6]
	//Clear lines for writing
	while (y0 <= y1) {
 8009608:	e020      	b.n	800964c <lcd_clearLines+0x54>
		for (uint8_t xByte = 1; xByte < (LCD_RES_PX_X_b - 1); xByte++) {
 800960a:	2301      	movs	r3, #1
 800960c:	73fb      	strb	r3, [r7, #15]
 800960e:	e00d      	b.n	800962c <lcd_clearLines+0x34>
			LCD_BUFFER[y0][xByte] = 0xff; 	//Clear line
 8009610:	79fa      	ldrb	r2, [r7, #7]
 8009612:	7bf9      	ldrb	r1, [r7, #15]
 8009614:	4813      	ldr	r0, [pc, #76]	; (8009664 <lcd_clearLines+0x6c>)
 8009616:	4613      	mov	r3, r2
 8009618:	00db      	lsls	r3, r3, #3
 800961a:	4413      	add	r3, r2
 800961c:	005b      	lsls	r3, r3, #1
 800961e:	4403      	add	r3, r0
 8009620:	440b      	add	r3, r1
 8009622:	22ff      	movs	r2, #255	; 0xff
 8009624:	701a      	strb	r2, [r3, #0]
		for (uint8_t xByte = 1; xByte < (LCD_RES_PX_X_b - 1); xByte++) {
 8009626:	7bfb      	ldrb	r3, [r7, #15]
 8009628:	3301      	adds	r3, #1
 800962a:	73fb      	strb	r3, [r7, #15]
 800962c:	7bfb      	ldrb	r3, [r7, #15]
 800962e:	2b10      	cmp	r3, #16
 8009630:	d9ee      	bls.n	8009610 <lcd_clearLines+0x18>
		}
		LCD_BUFFER[y0][LCD_RES_PX_X_b - 1] = 0x00; 		//transmit this line
 8009632:	79fa      	ldrb	r2, [r7, #7]
 8009634:	490b      	ldr	r1, [pc, #44]	; (8009664 <lcd_clearLines+0x6c>)
 8009636:	4613      	mov	r3, r2
 8009638:	00db      	lsls	r3, r3, #3
 800963a:	4413      	add	r3, r2
 800963c:	005b      	lsls	r3, r3, #1
 800963e:	440b      	add	r3, r1
 8009640:	3311      	adds	r3, #17
 8009642:	2200      	movs	r2, #0
 8009644:	701a      	strb	r2, [r3, #0]
		y0++;
 8009646:	79fb      	ldrb	r3, [r7, #7]
 8009648:	3301      	adds	r3, #1
 800964a:	71fb      	strb	r3, [r7, #7]
	while (y0 <= y1) {
 800964c:	79fa      	ldrb	r2, [r7, #7]
 800964e:	79bb      	ldrb	r3, [r7, #6]
 8009650:	429a      	cmp	r2, r3
 8009652:	d9da      	bls.n	800960a <lcd_clearLines+0x12>
	}
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	2000046c 	.word	0x2000046c

08009668 <lcd_clear>:
void lcd_setRotation(uint8_t newRot) {
	if (rotation <= 3)
		rotation = newRot;
}

void lcd_clear(void) {
 8009668:	b590      	push	{r4, r7, lr}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
	if (lcd_state = LCD_OFF) {
 800966e:	4b2c      	ldr	r3, [pc, #176]	; (8009720 <lcd_clear+0xb8>)
 8009670:	2200      	movs	r2, #0
 8009672:	701a      	strb	r2, [r3, #0]
		return;
	}
	uint8_t clearBuffer[] = { MLCD_CM, MLCD_TR };
 8009674:	2304      	movs	r3, #4
 8009676:	713b      	strb	r3, [r7, #4]
 8009678:	2300      	movs	r3, #0
 800967a:	717b      	strb	r3, [r7, #5]
	lcd_state = LCD_SENDING_CLR;
 800967c:	4b28      	ldr	r3, [pc, #160]	; (8009720 <lcd_clear+0xb8>)
 800967e:	2204      	movs	r2, #4
 8009680:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_SET);
 8009682:	2201      	movs	r2, #1
 8009684:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800968c:	f7fc fd22 	bl	80060d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*) &clearBuffer, sizeof(clearBuffer));
 8009690:	1d3b      	adds	r3, r7, #4
 8009692:	2202      	movs	r2, #2
 8009694:	4619      	mov	r1, r3
 8009696:	4823      	ldr	r0, [pc, #140]	; (8009724 <lcd_clear+0xbc>)
 8009698:	f7fe fd70 	bl	800817c <HAL_SPI_Transmit_DMA>

	//Clear buffer
	for (uint8_t y = 0; y < LCD_RES_PX_Y; y++) {
 800969c:	2300      	movs	r3, #0
 800969e:	71fb      	strb	r3, [r7, #7]
 80096a0:	e037      	b.n	8009712 <lcd_clear+0xaa>
		for (uint8_t x = 0; x < LCD_RES_PX_X_b; x++) {
 80096a2:	2300      	movs	r3, #0
 80096a4:	71bb      	strb	r3, [r7, #6]
 80096a6:	e02e      	b.n	8009706 <lcd_clear+0x9e>
			if (x == 0) {
 80096a8:	79bb      	ldrb	r3, [r7, #6]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d10e      	bne.n	80096cc <lcd_clear+0x64>
				LCD_BUFFER[y][x] = y + 1; //assign line number
 80096ae:	79fa      	ldrb	r2, [r7, #7]
 80096b0:	79b9      	ldrb	r1, [r7, #6]
 80096b2:	79fb      	ldrb	r3, [r7, #7]
 80096b4:	3301      	adds	r3, #1
 80096b6:	b2dc      	uxtb	r4, r3
 80096b8:	481b      	ldr	r0, [pc, #108]	; (8009728 <lcd_clear+0xc0>)
 80096ba:	4613      	mov	r3, r2
 80096bc:	00db      	lsls	r3, r3, #3
 80096be:	4413      	add	r3, r2
 80096c0:	005b      	lsls	r3, r3, #1
 80096c2:	4403      	add	r3, r0
 80096c4:	440b      	add	r3, r1
 80096c6:	4622      	mov	r2, r4
 80096c8:	701a      	strb	r2, [r3, #0]
 80096ca:	e019      	b.n	8009700 <lcd_clear+0x98>
			} else if (x == (LCD_RES_PX_X_b - 1)) {
 80096cc:	79bb      	ldrb	r3, [r7, #6]
 80096ce:	2b11      	cmp	r3, #17
 80096d0:	d10b      	bne.n	80096ea <lcd_clear+0x82>
				LCD_BUFFER[y][x] = 0x00; //trailer with transmit flag
 80096d2:	79fa      	ldrb	r2, [r7, #7]
 80096d4:	79b9      	ldrb	r1, [r7, #6]
 80096d6:	4814      	ldr	r0, [pc, #80]	; (8009728 <lcd_clear+0xc0>)
 80096d8:	4613      	mov	r3, r2
 80096da:	00db      	lsls	r3, r3, #3
 80096dc:	4413      	add	r3, r2
 80096de:	005b      	lsls	r3, r3, #1
 80096e0:	4403      	add	r3, r0
 80096e2:	440b      	add	r3, r1
 80096e4:	2200      	movs	r2, #0
 80096e6:	701a      	strb	r2, [r3, #0]
 80096e8:	e00a      	b.n	8009700 <lcd_clear+0x98>
			} else {
				LCD_BUFFER[y][x] = 0xff; //white data
 80096ea:	79fa      	ldrb	r2, [r7, #7]
 80096ec:	79b9      	ldrb	r1, [r7, #6]
 80096ee:	480e      	ldr	r0, [pc, #56]	; (8009728 <lcd_clear+0xc0>)
 80096f0:	4613      	mov	r3, r2
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	4413      	add	r3, r2
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	4403      	add	r3, r0
 80096fa:	440b      	add	r3, r1
 80096fc:	22ff      	movs	r2, #255	; 0xff
 80096fe:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < LCD_RES_PX_X_b; x++) {
 8009700:	79bb      	ldrb	r3, [r7, #6]
 8009702:	3301      	adds	r3, #1
 8009704:	71bb      	strb	r3, [r7, #6]
 8009706:	79bb      	ldrb	r3, [r7, #6]
 8009708:	2b11      	cmp	r3, #17
 800970a:	d9cd      	bls.n	80096a8 <lcd_clear+0x40>
	for (uint8_t y = 0; y < LCD_RES_PX_Y; y++) {
 800970c:	79fb      	ldrb	r3, [r7, #7]
 800970e:	3301      	adds	r3, #1
 8009710:	71fb      	strb	r3, [r7, #7]
 8009712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009716:	2b00      	cmp	r3, #0
 8009718:	dac3      	bge.n	80096a2 <lcd_clear+0x3a>
			}
		}
	}
}
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	bd90      	pop	{r4, r7, pc}
 8009720:	20000d88 	.word	0x20000d88
 8009724:	200002cc 	.word	0x200002cc
 8009728:	2000046c 	.word	0x2000046c

0800972c <lcd_draw>:

lcd_State_enum lcd_draw(void) {
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
	if (lcd_state == LCD_READY && lcd_hasData()) {
 8009730:	4b10      	ldr	r3, [pc, #64]	; (8009774 <lcd_draw+0x48>)
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	b2db      	uxtb	r3, r3
 8009736:	2b02      	cmp	r3, #2
 8009738:	d117      	bne.n	800976a <lcd_draw+0x3e>
 800973a:	f000 f821 	bl	8009780 <lcd_hasData>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d012      	beq.n	800976a <lcd_draw+0x3e>
		//start new transfer
		lcd_state = LCD_SENDING_DATA;
 8009744:	4b0b      	ldr	r3, [pc, #44]	; (8009774 <lcd_draw+0x48>)
 8009746:	2203      	movs	r2, #3
 8009748:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_SET);
 800974a:	2201      	movs	r2, #1
 800974c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009754:	f7fc fcbe 	bl	80060d4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) &MLCD_WR, sizeof(MLCD_WR), HAL_MAX_DELAY);
 8009758:	f04f 33ff 	mov.w	r3, #4294967295
 800975c:	2201      	movs	r2, #1
 800975e:	4906      	ldr	r1, [pc, #24]	; (8009778 <lcd_draw+0x4c>)
 8009760:	4806      	ldr	r0, [pc, #24]	; (800977c <lcd_draw+0x50>)
 8009762:	f7fe fb9c 	bl	8007e9e <HAL_SPI_Transmit>
		lcd_DoTX();
 8009766:	f000 f82f 	bl	80097c8 <lcd_DoTX>
	}
	return lcd_state;
 800976a:	4b02      	ldr	r3, [pc, #8]	; (8009774 <lcd_draw+0x48>)
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	b2db      	uxtb	r3, r3
}
 8009770:	4618      	mov	r0, r3
 8009772:	bd80      	pop	{r7, pc}
 8009774:	20000d88 	.word	0x20000d88
 8009778:	0800cc52 	.word	0x0800cc52
 800977c:	200002cc 	.word	0x200002cc

08009780 <lcd_hasData>:

static bool lcd_hasData() {
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y < LCD_RES_PX_Y; y++) {
 8009786:	2300      	movs	r3, #0
 8009788:	71fb      	strb	r3, [r7, #7]
 800978a:	e00f      	b.n	80097ac <lcd_hasData+0x2c>
		if (LCD_BUFFER[y][LCD_RES_PX_X_b - 1] == 0x00) {
 800978c:	79fa      	ldrb	r2, [r7, #7]
 800978e:	490d      	ldr	r1, [pc, #52]	; (80097c4 <lcd_hasData+0x44>)
 8009790:	4613      	mov	r3, r2
 8009792:	00db      	lsls	r3, r3, #3
 8009794:	4413      	add	r3, r2
 8009796:	005b      	lsls	r3, r3, #1
 8009798:	440b      	add	r3, r1
 800979a:	3311      	adds	r3, #17
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d101      	bne.n	80097a6 <lcd_hasData+0x26>
			//we have some data to send
			return true;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e007      	b.n	80097b6 <lcd_hasData+0x36>
	for (uint8_t y = 0; y < LCD_RES_PX_Y; y++) {
 80097a6:	79fb      	ldrb	r3, [r7, #7]
 80097a8:	3301      	adds	r3, #1
 80097aa:	71fb      	strb	r3, [r7, #7]
 80097ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	daeb      	bge.n	800978c <lcd_hasData+0xc>
		}
	}
	return false;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	370c      	adds	r7, #12
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	2000046c 	.word	0x2000046c

080097c8 <lcd_DoTX>:

static void lcd_DoTX() {
 80097c8:	b580      	push	{r7, lr}
 80097ca:	af00      	add	r7, sp, #0
	static uint8_t linePointer = 0;
	if (lcd_hasData()) {
 80097cc:	f7ff ffd8 	bl	8009780 <lcd_hasData>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d036      	beq.n	8009844 <lcd_DoTX+0x7c>
		//start next transfer
		while (1) {
			if (LCD_BUFFER[linePointer][LCD_RES_PX_X_b - 1] == 0x00) {
 80097d6:	4b26      	ldr	r3, [pc, #152]	; (8009870 <lcd_DoTX+0xa8>)
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	4619      	mov	r1, r3
 80097dc:	4a25      	ldr	r2, [pc, #148]	; (8009874 <lcd_DoTX+0xac>)
 80097de:	460b      	mov	r3, r1
 80097e0:	00db      	lsls	r3, r3, #3
 80097e2:	440b      	add	r3, r1
 80097e4:	005b      	lsls	r3, r3, #1
 80097e6:	4413      	add	r3, r2
 80097e8:	3311      	adds	r3, #17
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d11a      	bne.n	8009826 <lcd_DoTX+0x5e>
				//Send the line
				HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*) &LCD_BUFFER[linePointer][0], LCD_RES_PX_X_b);
 80097f0:	4b1f      	ldr	r3, [pc, #124]	; (8009870 <lcd_DoTX+0xa8>)
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	461a      	mov	r2, r3
 80097f6:	4613      	mov	r3, r2
 80097f8:	00db      	lsls	r3, r3, #3
 80097fa:	4413      	add	r3, r2
 80097fc:	005b      	lsls	r3, r3, #1
 80097fe:	4a1d      	ldr	r2, [pc, #116]	; (8009874 <lcd_DoTX+0xac>)
 8009800:	4413      	add	r3, r2
 8009802:	2212      	movs	r2, #18
 8009804:	4619      	mov	r1, r3
 8009806:	481c      	ldr	r0, [pc, #112]	; (8009878 <lcd_DoTX+0xb0>)
 8009808:	f7fe fcb8 	bl	800817c <HAL_SPI_Transmit_DMA>
				LCD_BUFFER[linePointer][LCD_RES_PX_X_b - 1] = 0x01; //Line Sent
 800980c:	4b18      	ldr	r3, [pc, #96]	; (8009870 <lcd_DoTX+0xa8>)
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	4619      	mov	r1, r3
 8009812:	4a18      	ldr	r2, [pc, #96]	; (8009874 <lcd_DoTX+0xac>)
 8009814:	460b      	mov	r3, r1
 8009816:	00db      	lsls	r3, r3, #3
 8009818:	440b      	add	r3, r1
 800981a:	005b      	lsls	r3, r3, #1
 800981c:	4413      	add	r3, r2
 800981e:	3311      	adds	r3, #17
 8009820:	2201      	movs	r2, #1
 8009822:	701a      	strb	r2, [r3, #0]
				return;
 8009824:	e022      	b.n	800986c <lcd_DoTX+0xa4>
			}
			if (++linePointer >= LCD_RES_PX_Y) {
 8009826:	4b12      	ldr	r3, [pc, #72]	; (8009870 <lcd_DoTX+0xa8>)
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	3301      	adds	r3, #1
 800982c:	b2da      	uxtb	r2, r3
 800982e:	4b10      	ldr	r3, [pc, #64]	; (8009870 <lcd_DoTX+0xa8>)
 8009830:	701a      	strb	r2, [r3, #0]
 8009832:	4b0f      	ldr	r3, [pc, #60]	; (8009870 <lcd_DoTX+0xa8>)
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	b25b      	sxtb	r3, r3
 8009838:	2b00      	cmp	r3, #0
 800983a:	dacc      	bge.n	80097d6 <lcd_DoTX+0xe>
				linePointer = 0;
 800983c:	4b0c      	ldr	r3, [pc, #48]	; (8009870 <lcd_DoTX+0xa8>)
 800983e:	2200      	movs	r2, #0
 8009840:	701a      	strb	r2, [r3, #0]
			if (LCD_BUFFER[linePointer][LCD_RES_PX_X_b - 1] == 0x00) {
 8009842:	e7c8      	b.n	80097d6 <lcd_DoTX+0xe>
			}
		}
	} else {
		//Done
		HAL_SPI_Transmit(&hspi1, (uint8_t*) &MLCD_TR, sizeof(MLCD_TR), HAL_MAX_DELAY); //send Trailer command
 8009844:	f04f 33ff 	mov.w	r3, #4294967295
 8009848:	2201      	movs	r2, #1
 800984a:	490c      	ldr	r1, [pc, #48]	; (800987c <lcd_DoTX+0xb4>)
 800984c:	480a      	ldr	r0, [pc, #40]	; (8009878 <lcd_DoTX+0xb0>)
 800984e:	f7fe fb26 	bl	8007e9e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
 8009852:	2200      	movs	r2, #0
 8009854:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800985c:	f7fc fc3a 	bl	80060d4 <HAL_GPIO_WritePin>
		guiTimer = 0; //drawing done
 8009860:	4b07      	ldr	r3, [pc, #28]	; (8009880 <lcd_DoTX+0xb8>)
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]
		lcd_state = LCD_TIMER; //Enter timer mode for power() to clear
 8009866:	4b07      	ldr	r3, [pc, #28]	; (8009884 <lcd_DoTX+0xbc>)
 8009868:	2201      	movs	r2, #1
 800986a:	701a      	strb	r2, [r3, #0]
	}
}
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	20000d89 	.word	0x20000d89
 8009874:	2000046c 	.word	0x2000046c
 8009878:	200002cc 	.word	0x200002cc
 800987c:	0800cc53 	.word	0x0800cc53
 8009880:	2000038c 	.word	0x2000038c
 8009884:	20000d88 	.word	0x20000d88

08009888 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
	if (lcd_state == LCD_SENDING_DATA) {
 8009890:	4b0d      	ldr	r3, [pc, #52]	; (80098c8 <HAL_SPI_TxCpltCallback+0x40>)
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	b2db      	uxtb	r3, r3
 8009896:	2b03      	cmp	r3, #3
 8009898:	d102      	bne.n	80098a0 <HAL_SPI_TxCpltCallback+0x18>
		lcd_DoTX();
 800989a:	f7ff ff95 	bl	80097c8 <lcd_DoTX>
	} else if (lcd_state == LCD_SENDING_CLR) {
		HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
		lcd_state = LCD_READY;
	}
}
 800989e:	e00e      	b.n	80098be <HAL_SPI_TxCpltCallback+0x36>
	} else if (lcd_state == LCD_SENDING_CLR) {
 80098a0:	4b09      	ldr	r3, [pc, #36]	; (80098c8 <HAL_SPI_TxCpltCallback+0x40>)
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	2b04      	cmp	r3, #4
 80098a8:	d109      	bne.n	80098be <HAL_SPI_TxCpltCallback+0x36>
		HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
 80098aa:	2200      	movs	r2, #0
 80098ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80098b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80098b4:	f7fc fc0e 	bl	80060d4 <HAL_GPIO_WritePin>
		lcd_state = LCD_READY;
 80098b8:	4b03      	ldr	r3, [pc, #12]	; (80098c8 <HAL_SPI_TxCpltCallback+0x40>)
 80098ba:	2202      	movs	r2, #2
 80098bc:	701a      	strb	r2, [r3, #0]
}
 80098be:	bf00      	nop
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	20000d88 	.word	0x20000d88

080098cc <__errno>:
 80098cc:	4b01      	ldr	r3, [pc, #4]	; (80098d4 <__errno+0x8>)
 80098ce:	6818      	ldr	r0, [r3, #0]
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	20000010 	.word	0x20000010

080098d8 <__libc_init_array>:
 80098d8:	b570      	push	{r4, r5, r6, lr}
 80098da:	4d0d      	ldr	r5, [pc, #52]	; (8009910 <__libc_init_array+0x38>)
 80098dc:	4c0d      	ldr	r4, [pc, #52]	; (8009914 <__libc_init_array+0x3c>)
 80098de:	1b64      	subs	r4, r4, r5
 80098e0:	10a4      	asrs	r4, r4, #2
 80098e2:	2600      	movs	r6, #0
 80098e4:	42a6      	cmp	r6, r4
 80098e6:	d109      	bne.n	80098fc <__libc_init_array+0x24>
 80098e8:	4d0b      	ldr	r5, [pc, #44]	; (8009918 <__libc_init_array+0x40>)
 80098ea:	4c0c      	ldr	r4, [pc, #48]	; (800991c <__libc_init_array+0x44>)
 80098ec:	f002 fd36 	bl	800c35c <_init>
 80098f0:	1b64      	subs	r4, r4, r5
 80098f2:	10a4      	asrs	r4, r4, #2
 80098f4:	2600      	movs	r6, #0
 80098f6:	42a6      	cmp	r6, r4
 80098f8:	d105      	bne.n	8009906 <__libc_init_array+0x2e>
 80098fa:	bd70      	pop	{r4, r5, r6, pc}
 80098fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009900:	4798      	blx	r3
 8009902:	3601      	adds	r6, #1
 8009904:	e7ee      	b.n	80098e4 <__libc_init_array+0xc>
 8009906:	f855 3b04 	ldr.w	r3, [r5], #4
 800990a:	4798      	blx	r3
 800990c:	3601      	adds	r6, #1
 800990e:	e7f2      	b.n	80098f6 <__libc_init_array+0x1e>
 8009910:	0800d034 	.word	0x0800d034
 8009914:	0800d034 	.word	0x0800d034
 8009918:	0800d034 	.word	0x0800d034
 800991c:	0800d038 	.word	0x0800d038

08009920 <memcpy>:
 8009920:	440a      	add	r2, r1
 8009922:	4291      	cmp	r1, r2
 8009924:	f100 33ff 	add.w	r3, r0, #4294967295
 8009928:	d100      	bne.n	800992c <memcpy+0xc>
 800992a:	4770      	bx	lr
 800992c:	b510      	push	{r4, lr}
 800992e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009932:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009936:	4291      	cmp	r1, r2
 8009938:	d1f9      	bne.n	800992e <memcpy+0xe>
 800993a:	bd10      	pop	{r4, pc}

0800993c <memset>:
 800993c:	4402      	add	r2, r0
 800993e:	4603      	mov	r3, r0
 8009940:	4293      	cmp	r3, r2
 8009942:	d100      	bne.n	8009946 <memset+0xa>
 8009944:	4770      	bx	lr
 8009946:	f803 1b01 	strb.w	r1, [r3], #1
 800994a:	e7f9      	b.n	8009940 <memset+0x4>

0800994c <__cvt>:
 800994c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009950:	ec55 4b10 	vmov	r4, r5, d0
 8009954:	2d00      	cmp	r5, #0
 8009956:	460e      	mov	r6, r1
 8009958:	4619      	mov	r1, r3
 800995a:	462b      	mov	r3, r5
 800995c:	bfbb      	ittet	lt
 800995e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009962:	461d      	movlt	r5, r3
 8009964:	2300      	movge	r3, #0
 8009966:	232d      	movlt	r3, #45	; 0x2d
 8009968:	700b      	strb	r3, [r1, #0]
 800996a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800996c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009970:	4691      	mov	r9, r2
 8009972:	f023 0820 	bic.w	r8, r3, #32
 8009976:	bfbc      	itt	lt
 8009978:	4622      	movlt	r2, r4
 800997a:	4614      	movlt	r4, r2
 800997c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009980:	d005      	beq.n	800998e <__cvt+0x42>
 8009982:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009986:	d100      	bne.n	800998a <__cvt+0x3e>
 8009988:	3601      	adds	r6, #1
 800998a:	2102      	movs	r1, #2
 800998c:	e000      	b.n	8009990 <__cvt+0x44>
 800998e:	2103      	movs	r1, #3
 8009990:	ab03      	add	r3, sp, #12
 8009992:	9301      	str	r3, [sp, #4]
 8009994:	ab02      	add	r3, sp, #8
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	ec45 4b10 	vmov	d0, r4, r5
 800999c:	4653      	mov	r3, sl
 800999e:	4632      	mov	r2, r6
 80099a0:	f000 fcca 	bl	800a338 <_dtoa_r>
 80099a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80099a8:	4607      	mov	r7, r0
 80099aa:	d102      	bne.n	80099b2 <__cvt+0x66>
 80099ac:	f019 0f01 	tst.w	r9, #1
 80099b0:	d022      	beq.n	80099f8 <__cvt+0xac>
 80099b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80099b6:	eb07 0906 	add.w	r9, r7, r6
 80099ba:	d110      	bne.n	80099de <__cvt+0x92>
 80099bc:	783b      	ldrb	r3, [r7, #0]
 80099be:	2b30      	cmp	r3, #48	; 0x30
 80099c0:	d10a      	bne.n	80099d8 <__cvt+0x8c>
 80099c2:	2200      	movs	r2, #0
 80099c4:	2300      	movs	r3, #0
 80099c6:	4620      	mov	r0, r4
 80099c8:	4629      	mov	r1, r5
 80099ca:	f7f7 f87d 	bl	8000ac8 <__aeabi_dcmpeq>
 80099ce:	b918      	cbnz	r0, 80099d8 <__cvt+0x8c>
 80099d0:	f1c6 0601 	rsb	r6, r6, #1
 80099d4:	f8ca 6000 	str.w	r6, [sl]
 80099d8:	f8da 3000 	ldr.w	r3, [sl]
 80099dc:	4499      	add	r9, r3
 80099de:	2200      	movs	r2, #0
 80099e0:	2300      	movs	r3, #0
 80099e2:	4620      	mov	r0, r4
 80099e4:	4629      	mov	r1, r5
 80099e6:	f7f7 f86f 	bl	8000ac8 <__aeabi_dcmpeq>
 80099ea:	b108      	cbz	r0, 80099f0 <__cvt+0xa4>
 80099ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80099f0:	2230      	movs	r2, #48	; 0x30
 80099f2:	9b03      	ldr	r3, [sp, #12]
 80099f4:	454b      	cmp	r3, r9
 80099f6:	d307      	bcc.n	8009a08 <__cvt+0xbc>
 80099f8:	9b03      	ldr	r3, [sp, #12]
 80099fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099fc:	1bdb      	subs	r3, r3, r7
 80099fe:	4638      	mov	r0, r7
 8009a00:	6013      	str	r3, [r2, #0]
 8009a02:	b004      	add	sp, #16
 8009a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a08:	1c59      	adds	r1, r3, #1
 8009a0a:	9103      	str	r1, [sp, #12]
 8009a0c:	701a      	strb	r2, [r3, #0]
 8009a0e:	e7f0      	b.n	80099f2 <__cvt+0xa6>

08009a10 <__exponent>:
 8009a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a12:	4603      	mov	r3, r0
 8009a14:	2900      	cmp	r1, #0
 8009a16:	bfb8      	it	lt
 8009a18:	4249      	neglt	r1, r1
 8009a1a:	f803 2b02 	strb.w	r2, [r3], #2
 8009a1e:	bfb4      	ite	lt
 8009a20:	222d      	movlt	r2, #45	; 0x2d
 8009a22:	222b      	movge	r2, #43	; 0x2b
 8009a24:	2909      	cmp	r1, #9
 8009a26:	7042      	strb	r2, [r0, #1]
 8009a28:	dd2a      	ble.n	8009a80 <__exponent+0x70>
 8009a2a:	f10d 0407 	add.w	r4, sp, #7
 8009a2e:	46a4      	mov	ip, r4
 8009a30:	270a      	movs	r7, #10
 8009a32:	46a6      	mov	lr, r4
 8009a34:	460a      	mov	r2, r1
 8009a36:	fb91 f6f7 	sdiv	r6, r1, r7
 8009a3a:	fb07 1516 	mls	r5, r7, r6, r1
 8009a3e:	3530      	adds	r5, #48	; 0x30
 8009a40:	2a63      	cmp	r2, #99	; 0x63
 8009a42:	f104 34ff 	add.w	r4, r4, #4294967295
 8009a46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009a4a:	4631      	mov	r1, r6
 8009a4c:	dcf1      	bgt.n	8009a32 <__exponent+0x22>
 8009a4e:	3130      	adds	r1, #48	; 0x30
 8009a50:	f1ae 0502 	sub.w	r5, lr, #2
 8009a54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009a58:	1c44      	adds	r4, r0, #1
 8009a5a:	4629      	mov	r1, r5
 8009a5c:	4561      	cmp	r1, ip
 8009a5e:	d30a      	bcc.n	8009a76 <__exponent+0x66>
 8009a60:	f10d 0209 	add.w	r2, sp, #9
 8009a64:	eba2 020e 	sub.w	r2, r2, lr
 8009a68:	4565      	cmp	r5, ip
 8009a6a:	bf88      	it	hi
 8009a6c:	2200      	movhi	r2, #0
 8009a6e:	4413      	add	r3, r2
 8009a70:	1a18      	subs	r0, r3, r0
 8009a72:	b003      	add	sp, #12
 8009a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009a7e:	e7ed      	b.n	8009a5c <__exponent+0x4c>
 8009a80:	2330      	movs	r3, #48	; 0x30
 8009a82:	3130      	adds	r1, #48	; 0x30
 8009a84:	7083      	strb	r3, [r0, #2]
 8009a86:	70c1      	strb	r1, [r0, #3]
 8009a88:	1d03      	adds	r3, r0, #4
 8009a8a:	e7f1      	b.n	8009a70 <__exponent+0x60>

08009a8c <_printf_float>:
 8009a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a90:	ed2d 8b02 	vpush	{d8}
 8009a94:	b08d      	sub	sp, #52	; 0x34
 8009a96:	460c      	mov	r4, r1
 8009a98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009a9c:	4616      	mov	r6, r2
 8009a9e:	461f      	mov	r7, r3
 8009aa0:	4605      	mov	r5, r0
 8009aa2:	f001 fa37 	bl	800af14 <_localeconv_r>
 8009aa6:	f8d0 a000 	ldr.w	sl, [r0]
 8009aaa:	4650      	mov	r0, sl
 8009aac:	f7f6 fb90 	bl	80001d0 <strlen>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	930a      	str	r3, [sp, #40]	; 0x28
 8009ab4:	6823      	ldr	r3, [r4, #0]
 8009ab6:	9305      	str	r3, [sp, #20]
 8009ab8:	f8d8 3000 	ldr.w	r3, [r8]
 8009abc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009ac0:	3307      	adds	r3, #7
 8009ac2:	f023 0307 	bic.w	r3, r3, #7
 8009ac6:	f103 0208 	add.w	r2, r3, #8
 8009aca:	f8c8 2000 	str.w	r2, [r8]
 8009ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009ad6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009ada:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ade:	9307      	str	r3, [sp, #28]
 8009ae0:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ae4:	ee08 0a10 	vmov	s16, r0
 8009ae8:	4b9f      	ldr	r3, [pc, #636]	; (8009d68 <_printf_float+0x2dc>)
 8009aea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aee:	f04f 32ff 	mov.w	r2, #4294967295
 8009af2:	f7f7 f81b 	bl	8000b2c <__aeabi_dcmpun>
 8009af6:	bb88      	cbnz	r0, 8009b5c <_printf_float+0xd0>
 8009af8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009afc:	4b9a      	ldr	r3, [pc, #616]	; (8009d68 <_printf_float+0x2dc>)
 8009afe:	f04f 32ff 	mov.w	r2, #4294967295
 8009b02:	f7f6 fff5 	bl	8000af0 <__aeabi_dcmple>
 8009b06:	bb48      	cbnz	r0, 8009b5c <_printf_float+0xd0>
 8009b08:	2200      	movs	r2, #0
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	4640      	mov	r0, r8
 8009b0e:	4649      	mov	r1, r9
 8009b10:	f7f6 ffe4 	bl	8000adc <__aeabi_dcmplt>
 8009b14:	b110      	cbz	r0, 8009b1c <_printf_float+0x90>
 8009b16:	232d      	movs	r3, #45	; 0x2d
 8009b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b1c:	4b93      	ldr	r3, [pc, #588]	; (8009d6c <_printf_float+0x2e0>)
 8009b1e:	4894      	ldr	r0, [pc, #592]	; (8009d70 <_printf_float+0x2e4>)
 8009b20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009b24:	bf94      	ite	ls
 8009b26:	4698      	movls	r8, r3
 8009b28:	4680      	movhi	r8, r0
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	6123      	str	r3, [r4, #16]
 8009b2e:	9b05      	ldr	r3, [sp, #20]
 8009b30:	f023 0204 	bic.w	r2, r3, #4
 8009b34:	6022      	str	r2, [r4, #0]
 8009b36:	f04f 0900 	mov.w	r9, #0
 8009b3a:	9700      	str	r7, [sp, #0]
 8009b3c:	4633      	mov	r3, r6
 8009b3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b40:	4621      	mov	r1, r4
 8009b42:	4628      	mov	r0, r5
 8009b44:	f000 f9d8 	bl	8009ef8 <_printf_common>
 8009b48:	3001      	adds	r0, #1
 8009b4a:	f040 8090 	bne.w	8009c6e <_printf_float+0x1e2>
 8009b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b52:	b00d      	add	sp, #52	; 0x34
 8009b54:	ecbd 8b02 	vpop	{d8}
 8009b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5c:	4642      	mov	r2, r8
 8009b5e:	464b      	mov	r3, r9
 8009b60:	4640      	mov	r0, r8
 8009b62:	4649      	mov	r1, r9
 8009b64:	f7f6 ffe2 	bl	8000b2c <__aeabi_dcmpun>
 8009b68:	b140      	cbz	r0, 8009b7c <_printf_float+0xf0>
 8009b6a:	464b      	mov	r3, r9
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	bfbc      	itt	lt
 8009b70:	232d      	movlt	r3, #45	; 0x2d
 8009b72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b76:	487f      	ldr	r0, [pc, #508]	; (8009d74 <_printf_float+0x2e8>)
 8009b78:	4b7f      	ldr	r3, [pc, #508]	; (8009d78 <_printf_float+0x2ec>)
 8009b7a:	e7d1      	b.n	8009b20 <_printf_float+0x94>
 8009b7c:	6863      	ldr	r3, [r4, #4]
 8009b7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009b82:	9206      	str	r2, [sp, #24]
 8009b84:	1c5a      	adds	r2, r3, #1
 8009b86:	d13f      	bne.n	8009c08 <_printf_float+0x17c>
 8009b88:	2306      	movs	r3, #6
 8009b8a:	6063      	str	r3, [r4, #4]
 8009b8c:	9b05      	ldr	r3, [sp, #20]
 8009b8e:	6861      	ldr	r1, [r4, #4]
 8009b90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009b94:	2300      	movs	r3, #0
 8009b96:	9303      	str	r3, [sp, #12]
 8009b98:	ab0a      	add	r3, sp, #40	; 0x28
 8009b9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009b9e:	ab09      	add	r3, sp, #36	; 0x24
 8009ba0:	ec49 8b10 	vmov	d0, r8, r9
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	6022      	str	r2, [r4, #0]
 8009ba8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009bac:	4628      	mov	r0, r5
 8009bae:	f7ff fecd 	bl	800994c <__cvt>
 8009bb2:	9b06      	ldr	r3, [sp, #24]
 8009bb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bb6:	2b47      	cmp	r3, #71	; 0x47
 8009bb8:	4680      	mov	r8, r0
 8009bba:	d108      	bne.n	8009bce <_printf_float+0x142>
 8009bbc:	1cc8      	adds	r0, r1, #3
 8009bbe:	db02      	blt.n	8009bc6 <_printf_float+0x13a>
 8009bc0:	6863      	ldr	r3, [r4, #4]
 8009bc2:	4299      	cmp	r1, r3
 8009bc4:	dd41      	ble.n	8009c4a <_printf_float+0x1be>
 8009bc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8009bca:	fa5f fb8b 	uxtb.w	fp, fp
 8009bce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009bd2:	d820      	bhi.n	8009c16 <_printf_float+0x18a>
 8009bd4:	3901      	subs	r1, #1
 8009bd6:	465a      	mov	r2, fp
 8009bd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009bdc:	9109      	str	r1, [sp, #36]	; 0x24
 8009bde:	f7ff ff17 	bl	8009a10 <__exponent>
 8009be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009be4:	1813      	adds	r3, r2, r0
 8009be6:	2a01      	cmp	r2, #1
 8009be8:	4681      	mov	r9, r0
 8009bea:	6123      	str	r3, [r4, #16]
 8009bec:	dc02      	bgt.n	8009bf4 <_printf_float+0x168>
 8009bee:	6822      	ldr	r2, [r4, #0]
 8009bf0:	07d2      	lsls	r2, r2, #31
 8009bf2:	d501      	bpl.n	8009bf8 <_printf_float+0x16c>
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	6123      	str	r3, [r4, #16]
 8009bf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d09c      	beq.n	8009b3a <_printf_float+0xae>
 8009c00:	232d      	movs	r3, #45	; 0x2d
 8009c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c06:	e798      	b.n	8009b3a <_printf_float+0xae>
 8009c08:	9a06      	ldr	r2, [sp, #24]
 8009c0a:	2a47      	cmp	r2, #71	; 0x47
 8009c0c:	d1be      	bne.n	8009b8c <_printf_float+0x100>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1bc      	bne.n	8009b8c <_printf_float+0x100>
 8009c12:	2301      	movs	r3, #1
 8009c14:	e7b9      	b.n	8009b8a <_printf_float+0xfe>
 8009c16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009c1a:	d118      	bne.n	8009c4e <_printf_float+0x1c2>
 8009c1c:	2900      	cmp	r1, #0
 8009c1e:	6863      	ldr	r3, [r4, #4]
 8009c20:	dd0b      	ble.n	8009c3a <_printf_float+0x1ae>
 8009c22:	6121      	str	r1, [r4, #16]
 8009c24:	b913      	cbnz	r3, 8009c2c <_printf_float+0x1a0>
 8009c26:	6822      	ldr	r2, [r4, #0]
 8009c28:	07d0      	lsls	r0, r2, #31
 8009c2a:	d502      	bpl.n	8009c32 <_printf_float+0x1a6>
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	440b      	add	r3, r1
 8009c30:	6123      	str	r3, [r4, #16]
 8009c32:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c34:	f04f 0900 	mov.w	r9, #0
 8009c38:	e7de      	b.n	8009bf8 <_printf_float+0x16c>
 8009c3a:	b913      	cbnz	r3, 8009c42 <_printf_float+0x1b6>
 8009c3c:	6822      	ldr	r2, [r4, #0]
 8009c3e:	07d2      	lsls	r2, r2, #31
 8009c40:	d501      	bpl.n	8009c46 <_printf_float+0x1ba>
 8009c42:	3302      	adds	r3, #2
 8009c44:	e7f4      	b.n	8009c30 <_printf_float+0x1a4>
 8009c46:	2301      	movs	r3, #1
 8009c48:	e7f2      	b.n	8009c30 <_printf_float+0x1a4>
 8009c4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c50:	4299      	cmp	r1, r3
 8009c52:	db05      	blt.n	8009c60 <_printf_float+0x1d4>
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	6121      	str	r1, [r4, #16]
 8009c58:	07d8      	lsls	r0, r3, #31
 8009c5a:	d5ea      	bpl.n	8009c32 <_printf_float+0x1a6>
 8009c5c:	1c4b      	adds	r3, r1, #1
 8009c5e:	e7e7      	b.n	8009c30 <_printf_float+0x1a4>
 8009c60:	2900      	cmp	r1, #0
 8009c62:	bfd4      	ite	le
 8009c64:	f1c1 0202 	rsble	r2, r1, #2
 8009c68:	2201      	movgt	r2, #1
 8009c6a:	4413      	add	r3, r2
 8009c6c:	e7e0      	b.n	8009c30 <_printf_float+0x1a4>
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	055a      	lsls	r2, r3, #21
 8009c72:	d407      	bmi.n	8009c84 <_printf_float+0x1f8>
 8009c74:	6923      	ldr	r3, [r4, #16]
 8009c76:	4642      	mov	r2, r8
 8009c78:	4631      	mov	r1, r6
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	47b8      	blx	r7
 8009c7e:	3001      	adds	r0, #1
 8009c80:	d12c      	bne.n	8009cdc <_printf_float+0x250>
 8009c82:	e764      	b.n	8009b4e <_printf_float+0xc2>
 8009c84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c88:	f240 80e0 	bls.w	8009e4c <_printf_float+0x3c0>
 8009c8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c90:	2200      	movs	r2, #0
 8009c92:	2300      	movs	r3, #0
 8009c94:	f7f6 ff18 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	d034      	beq.n	8009d06 <_printf_float+0x27a>
 8009c9c:	4a37      	ldr	r2, [pc, #220]	; (8009d7c <_printf_float+0x2f0>)
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	4631      	mov	r1, r6
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	47b8      	blx	r7
 8009ca6:	3001      	adds	r0, #1
 8009ca8:	f43f af51 	beq.w	8009b4e <_printf_float+0xc2>
 8009cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	db02      	blt.n	8009cba <_printf_float+0x22e>
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	07d8      	lsls	r0, r3, #31
 8009cb8:	d510      	bpl.n	8009cdc <_printf_float+0x250>
 8009cba:	ee18 3a10 	vmov	r3, s16
 8009cbe:	4652      	mov	r2, sl
 8009cc0:	4631      	mov	r1, r6
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	47b8      	blx	r7
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	f43f af41 	beq.w	8009b4e <_printf_float+0xc2>
 8009ccc:	f04f 0800 	mov.w	r8, #0
 8009cd0:	f104 091a 	add.w	r9, r4, #26
 8009cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	4543      	cmp	r3, r8
 8009cda:	dc09      	bgt.n	8009cf0 <_printf_float+0x264>
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	079b      	lsls	r3, r3, #30
 8009ce0:	f100 8105 	bmi.w	8009eee <_printf_float+0x462>
 8009ce4:	68e0      	ldr	r0, [r4, #12]
 8009ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ce8:	4298      	cmp	r0, r3
 8009cea:	bfb8      	it	lt
 8009cec:	4618      	movlt	r0, r3
 8009cee:	e730      	b.n	8009b52 <_printf_float+0xc6>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	464a      	mov	r2, r9
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	47b8      	blx	r7
 8009cfa:	3001      	adds	r0, #1
 8009cfc:	f43f af27 	beq.w	8009b4e <_printf_float+0xc2>
 8009d00:	f108 0801 	add.w	r8, r8, #1
 8009d04:	e7e6      	b.n	8009cd4 <_printf_float+0x248>
 8009d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	dc39      	bgt.n	8009d80 <_printf_float+0x2f4>
 8009d0c:	4a1b      	ldr	r2, [pc, #108]	; (8009d7c <_printf_float+0x2f0>)
 8009d0e:	2301      	movs	r3, #1
 8009d10:	4631      	mov	r1, r6
 8009d12:	4628      	mov	r0, r5
 8009d14:	47b8      	blx	r7
 8009d16:	3001      	adds	r0, #1
 8009d18:	f43f af19 	beq.w	8009b4e <_printf_float+0xc2>
 8009d1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d20:	4313      	orrs	r3, r2
 8009d22:	d102      	bne.n	8009d2a <_printf_float+0x29e>
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	07d9      	lsls	r1, r3, #31
 8009d28:	d5d8      	bpl.n	8009cdc <_printf_float+0x250>
 8009d2a:	ee18 3a10 	vmov	r3, s16
 8009d2e:	4652      	mov	r2, sl
 8009d30:	4631      	mov	r1, r6
 8009d32:	4628      	mov	r0, r5
 8009d34:	47b8      	blx	r7
 8009d36:	3001      	adds	r0, #1
 8009d38:	f43f af09 	beq.w	8009b4e <_printf_float+0xc2>
 8009d3c:	f04f 0900 	mov.w	r9, #0
 8009d40:	f104 0a1a 	add.w	sl, r4, #26
 8009d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d46:	425b      	negs	r3, r3
 8009d48:	454b      	cmp	r3, r9
 8009d4a:	dc01      	bgt.n	8009d50 <_printf_float+0x2c4>
 8009d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d4e:	e792      	b.n	8009c76 <_printf_float+0x1ea>
 8009d50:	2301      	movs	r3, #1
 8009d52:	4652      	mov	r2, sl
 8009d54:	4631      	mov	r1, r6
 8009d56:	4628      	mov	r0, r5
 8009d58:	47b8      	blx	r7
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	f43f aef7 	beq.w	8009b4e <_printf_float+0xc2>
 8009d60:	f109 0901 	add.w	r9, r9, #1
 8009d64:	e7ee      	b.n	8009d44 <_printf_float+0x2b8>
 8009d66:	bf00      	nop
 8009d68:	7fefffff 	.word	0x7fefffff
 8009d6c:	0800cc58 	.word	0x0800cc58
 8009d70:	0800cc5c 	.word	0x0800cc5c
 8009d74:	0800cc64 	.word	0x0800cc64
 8009d78:	0800cc60 	.word	0x0800cc60
 8009d7c:	0800cc68 	.word	0x0800cc68
 8009d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d84:	429a      	cmp	r2, r3
 8009d86:	bfa8      	it	ge
 8009d88:	461a      	movge	r2, r3
 8009d8a:	2a00      	cmp	r2, #0
 8009d8c:	4691      	mov	r9, r2
 8009d8e:	dc37      	bgt.n	8009e00 <_printf_float+0x374>
 8009d90:	f04f 0b00 	mov.w	fp, #0
 8009d94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d98:	f104 021a 	add.w	r2, r4, #26
 8009d9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d9e:	9305      	str	r3, [sp, #20]
 8009da0:	eba3 0309 	sub.w	r3, r3, r9
 8009da4:	455b      	cmp	r3, fp
 8009da6:	dc33      	bgt.n	8009e10 <_printf_float+0x384>
 8009da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dac:	429a      	cmp	r2, r3
 8009dae:	db3b      	blt.n	8009e28 <_printf_float+0x39c>
 8009db0:	6823      	ldr	r3, [r4, #0]
 8009db2:	07da      	lsls	r2, r3, #31
 8009db4:	d438      	bmi.n	8009e28 <_printf_float+0x39c>
 8009db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009db8:	9a05      	ldr	r2, [sp, #20]
 8009dba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009dbc:	1a9a      	subs	r2, r3, r2
 8009dbe:	eba3 0901 	sub.w	r9, r3, r1
 8009dc2:	4591      	cmp	r9, r2
 8009dc4:	bfa8      	it	ge
 8009dc6:	4691      	movge	r9, r2
 8009dc8:	f1b9 0f00 	cmp.w	r9, #0
 8009dcc:	dc35      	bgt.n	8009e3a <_printf_float+0x3ae>
 8009dce:	f04f 0800 	mov.w	r8, #0
 8009dd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dd6:	f104 0a1a 	add.w	sl, r4, #26
 8009dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dde:	1a9b      	subs	r3, r3, r2
 8009de0:	eba3 0309 	sub.w	r3, r3, r9
 8009de4:	4543      	cmp	r3, r8
 8009de6:	f77f af79 	ble.w	8009cdc <_printf_float+0x250>
 8009dea:	2301      	movs	r3, #1
 8009dec:	4652      	mov	r2, sl
 8009dee:	4631      	mov	r1, r6
 8009df0:	4628      	mov	r0, r5
 8009df2:	47b8      	blx	r7
 8009df4:	3001      	adds	r0, #1
 8009df6:	f43f aeaa 	beq.w	8009b4e <_printf_float+0xc2>
 8009dfa:	f108 0801 	add.w	r8, r8, #1
 8009dfe:	e7ec      	b.n	8009dda <_printf_float+0x34e>
 8009e00:	4613      	mov	r3, r2
 8009e02:	4631      	mov	r1, r6
 8009e04:	4642      	mov	r2, r8
 8009e06:	4628      	mov	r0, r5
 8009e08:	47b8      	blx	r7
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	d1c0      	bne.n	8009d90 <_printf_float+0x304>
 8009e0e:	e69e      	b.n	8009b4e <_printf_float+0xc2>
 8009e10:	2301      	movs	r3, #1
 8009e12:	4631      	mov	r1, r6
 8009e14:	4628      	mov	r0, r5
 8009e16:	9205      	str	r2, [sp, #20]
 8009e18:	47b8      	blx	r7
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	f43f ae97 	beq.w	8009b4e <_printf_float+0xc2>
 8009e20:	9a05      	ldr	r2, [sp, #20]
 8009e22:	f10b 0b01 	add.w	fp, fp, #1
 8009e26:	e7b9      	b.n	8009d9c <_printf_float+0x310>
 8009e28:	ee18 3a10 	vmov	r3, s16
 8009e2c:	4652      	mov	r2, sl
 8009e2e:	4631      	mov	r1, r6
 8009e30:	4628      	mov	r0, r5
 8009e32:	47b8      	blx	r7
 8009e34:	3001      	adds	r0, #1
 8009e36:	d1be      	bne.n	8009db6 <_printf_float+0x32a>
 8009e38:	e689      	b.n	8009b4e <_printf_float+0xc2>
 8009e3a:	9a05      	ldr	r2, [sp, #20]
 8009e3c:	464b      	mov	r3, r9
 8009e3e:	4442      	add	r2, r8
 8009e40:	4631      	mov	r1, r6
 8009e42:	4628      	mov	r0, r5
 8009e44:	47b8      	blx	r7
 8009e46:	3001      	adds	r0, #1
 8009e48:	d1c1      	bne.n	8009dce <_printf_float+0x342>
 8009e4a:	e680      	b.n	8009b4e <_printf_float+0xc2>
 8009e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e4e:	2a01      	cmp	r2, #1
 8009e50:	dc01      	bgt.n	8009e56 <_printf_float+0x3ca>
 8009e52:	07db      	lsls	r3, r3, #31
 8009e54:	d538      	bpl.n	8009ec8 <_printf_float+0x43c>
 8009e56:	2301      	movs	r3, #1
 8009e58:	4642      	mov	r2, r8
 8009e5a:	4631      	mov	r1, r6
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	47b8      	blx	r7
 8009e60:	3001      	adds	r0, #1
 8009e62:	f43f ae74 	beq.w	8009b4e <_printf_float+0xc2>
 8009e66:	ee18 3a10 	vmov	r3, s16
 8009e6a:	4652      	mov	r2, sl
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	4628      	mov	r0, r5
 8009e70:	47b8      	blx	r7
 8009e72:	3001      	adds	r0, #1
 8009e74:	f43f ae6b 	beq.w	8009b4e <_printf_float+0xc2>
 8009e78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f7f6 fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e84:	b9d8      	cbnz	r0, 8009ebe <_printf_float+0x432>
 8009e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e88:	f108 0201 	add.w	r2, r8, #1
 8009e8c:	3b01      	subs	r3, #1
 8009e8e:	4631      	mov	r1, r6
 8009e90:	4628      	mov	r0, r5
 8009e92:	47b8      	blx	r7
 8009e94:	3001      	adds	r0, #1
 8009e96:	d10e      	bne.n	8009eb6 <_printf_float+0x42a>
 8009e98:	e659      	b.n	8009b4e <_printf_float+0xc2>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	4652      	mov	r2, sl
 8009e9e:	4631      	mov	r1, r6
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	47b8      	blx	r7
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	f43f ae52 	beq.w	8009b4e <_printf_float+0xc2>
 8009eaa:	f108 0801 	add.w	r8, r8, #1
 8009eae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	4543      	cmp	r3, r8
 8009eb4:	dcf1      	bgt.n	8009e9a <_printf_float+0x40e>
 8009eb6:	464b      	mov	r3, r9
 8009eb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ebc:	e6dc      	b.n	8009c78 <_printf_float+0x1ec>
 8009ebe:	f04f 0800 	mov.w	r8, #0
 8009ec2:	f104 0a1a 	add.w	sl, r4, #26
 8009ec6:	e7f2      	b.n	8009eae <_printf_float+0x422>
 8009ec8:	2301      	movs	r3, #1
 8009eca:	4642      	mov	r2, r8
 8009ecc:	e7df      	b.n	8009e8e <_printf_float+0x402>
 8009ece:	2301      	movs	r3, #1
 8009ed0:	464a      	mov	r2, r9
 8009ed2:	4631      	mov	r1, r6
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	47b8      	blx	r7
 8009ed8:	3001      	adds	r0, #1
 8009eda:	f43f ae38 	beq.w	8009b4e <_printf_float+0xc2>
 8009ede:	f108 0801 	add.w	r8, r8, #1
 8009ee2:	68e3      	ldr	r3, [r4, #12]
 8009ee4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ee6:	1a5b      	subs	r3, r3, r1
 8009ee8:	4543      	cmp	r3, r8
 8009eea:	dcf0      	bgt.n	8009ece <_printf_float+0x442>
 8009eec:	e6fa      	b.n	8009ce4 <_printf_float+0x258>
 8009eee:	f04f 0800 	mov.w	r8, #0
 8009ef2:	f104 0919 	add.w	r9, r4, #25
 8009ef6:	e7f4      	b.n	8009ee2 <_printf_float+0x456>

08009ef8 <_printf_common>:
 8009ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009efc:	4616      	mov	r6, r2
 8009efe:	4699      	mov	r9, r3
 8009f00:	688a      	ldr	r2, [r1, #8]
 8009f02:	690b      	ldr	r3, [r1, #16]
 8009f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	bfb8      	it	lt
 8009f0c:	4613      	movlt	r3, r2
 8009f0e:	6033      	str	r3, [r6, #0]
 8009f10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f14:	4607      	mov	r7, r0
 8009f16:	460c      	mov	r4, r1
 8009f18:	b10a      	cbz	r2, 8009f1e <_printf_common+0x26>
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	6033      	str	r3, [r6, #0]
 8009f1e:	6823      	ldr	r3, [r4, #0]
 8009f20:	0699      	lsls	r1, r3, #26
 8009f22:	bf42      	ittt	mi
 8009f24:	6833      	ldrmi	r3, [r6, #0]
 8009f26:	3302      	addmi	r3, #2
 8009f28:	6033      	strmi	r3, [r6, #0]
 8009f2a:	6825      	ldr	r5, [r4, #0]
 8009f2c:	f015 0506 	ands.w	r5, r5, #6
 8009f30:	d106      	bne.n	8009f40 <_printf_common+0x48>
 8009f32:	f104 0a19 	add.w	sl, r4, #25
 8009f36:	68e3      	ldr	r3, [r4, #12]
 8009f38:	6832      	ldr	r2, [r6, #0]
 8009f3a:	1a9b      	subs	r3, r3, r2
 8009f3c:	42ab      	cmp	r3, r5
 8009f3e:	dc26      	bgt.n	8009f8e <_printf_common+0x96>
 8009f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f44:	1e13      	subs	r3, r2, #0
 8009f46:	6822      	ldr	r2, [r4, #0]
 8009f48:	bf18      	it	ne
 8009f4a:	2301      	movne	r3, #1
 8009f4c:	0692      	lsls	r2, r2, #26
 8009f4e:	d42b      	bmi.n	8009fa8 <_printf_common+0xb0>
 8009f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f54:	4649      	mov	r1, r9
 8009f56:	4638      	mov	r0, r7
 8009f58:	47c0      	blx	r8
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	d01e      	beq.n	8009f9c <_printf_common+0xa4>
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	68e5      	ldr	r5, [r4, #12]
 8009f62:	6832      	ldr	r2, [r6, #0]
 8009f64:	f003 0306 	and.w	r3, r3, #6
 8009f68:	2b04      	cmp	r3, #4
 8009f6a:	bf08      	it	eq
 8009f6c:	1aad      	subeq	r5, r5, r2
 8009f6e:	68a3      	ldr	r3, [r4, #8]
 8009f70:	6922      	ldr	r2, [r4, #16]
 8009f72:	bf0c      	ite	eq
 8009f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f78:	2500      	movne	r5, #0
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	bfc4      	itt	gt
 8009f7e:	1a9b      	subgt	r3, r3, r2
 8009f80:	18ed      	addgt	r5, r5, r3
 8009f82:	2600      	movs	r6, #0
 8009f84:	341a      	adds	r4, #26
 8009f86:	42b5      	cmp	r5, r6
 8009f88:	d11a      	bne.n	8009fc0 <_printf_common+0xc8>
 8009f8a:	2000      	movs	r0, #0
 8009f8c:	e008      	b.n	8009fa0 <_printf_common+0xa8>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	4652      	mov	r2, sl
 8009f92:	4649      	mov	r1, r9
 8009f94:	4638      	mov	r0, r7
 8009f96:	47c0      	blx	r8
 8009f98:	3001      	adds	r0, #1
 8009f9a:	d103      	bne.n	8009fa4 <_printf_common+0xac>
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa4:	3501      	adds	r5, #1
 8009fa6:	e7c6      	b.n	8009f36 <_printf_common+0x3e>
 8009fa8:	18e1      	adds	r1, r4, r3
 8009faa:	1c5a      	adds	r2, r3, #1
 8009fac:	2030      	movs	r0, #48	; 0x30
 8009fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fb2:	4422      	add	r2, r4
 8009fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fbc:	3302      	adds	r3, #2
 8009fbe:	e7c7      	b.n	8009f50 <_printf_common+0x58>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	4622      	mov	r2, r4
 8009fc4:	4649      	mov	r1, r9
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	47c0      	blx	r8
 8009fca:	3001      	adds	r0, #1
 8009fcc:	d0e6      	beq.n	8009f9c <_printf_common+0xa4>
 8009fce:	3601      	adds	r6, #1
 8009fd0:	e7d9      	b.n	8009f86 <_printf_common+0x8e>
	...

08009fd4 <_printf_i>:
 8009fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd8:	7e0f      	ldrb	r7, [r1, #24]
 8009fda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fdc:	2f78      	cmp	r7, #120	; 0x78
 8009fde:	4691      	mov	r9, r2
 8009fe0:	4680      	mov	r8, r0
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	469a      	mov	sl, r3
 8009fe6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fea:	d807      	bhi.n	8009ffc <_printf_i+0x28>
 8009fec:	2f62      	cmp	r7, #98	; 0x62
 8009fee:	d80a      	bhi.n	800a006 <_printf_i+0x32>
 8009ff0:	2f00      	cmp	r7, #0
 8009ff2:	f000 80d8 	beq.w	800a1a6 <_printf_i+0x1d2>
 8009ff6:	2f58      	cmp	r7, #88	; 0x58
 8009ff8:	f000 80a3 	beq.w	800a142 <_printf_i+0x16e>
 8009ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a004:	e03a      	b.n	800a07c <_printf_i+0xa8>
 800a006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a00a:	2b15      	cmp	r3, #21
 800a00c:	d8f6      	bhi.n	8009ffc <_printf_i+0x28>
 800a00e:	a101      	add	r1, pc, #4	; (adr r1, 800a014 <_printf_i+0x40>)
 800a010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a014:	0800a06d 	.word	0x0800a06d
 800a018:	0800a081 	.word	0x0800a081
 800a01c:	08009ffd 	.word	0x08009ffd
 800a020:	08009ffd 	.word	0x08009ffd
 800a024:	08009ffd 	.word	0x08009ffd
 800a028:	08009ffd 	.word	0x08009ffd
 800a02c:	0800a081 	.word	0x0800a081
 800a030:	08009ffd 	.word	0x08009ffd
 800a034:	08009ffd 	.word	0x08009ffd
 800a038:	08009ffd 	.word	0x08009ffd
 800a03c:	08009ffd 	.word	0x08009ffd
 800a040:	0800a18d 	.word	0x0800a18d
 800a044:	0800a0b1 	.word	0x0800a0b1
 800a048:	0800a16f 	.word	0x0800a16f
 800a04c:	08009ffd 	.word	0x08009ffd
 800a050:	08009ffd 	.word	0x08009ffd
 800a054:	0800a1af 	.word	0x0800a1af
 800a058:	08009ffd 	.word	0x08009ffd
 800a05c:	0800a0b1 	.word	0x0800a0b1
 800a060:	08009ffd 	.word	0x08009ffd
 800a064:	08009ffd 	.word	0x08009ffd
 800a068:	0800a177 	.word	0x0800a177
 800a06c:	682b      	ldr	r3, [r5, #0]
 800a06e:	1d1a      	adds	r2, r3, #4
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	602a      	str	r2, [r5, #0]
 800a074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a07c:	2301      	movs	r3, #1
 800a07e:	e0a3      	b.n	800a1c8 <_printf_i+0x1f4>
 800a080:	6820      	ldr	r0, [r4, #0]
 800a082:	6829      	ldr	r1, [r5, #0]
 800a084:	0606      	lsls	r6, r0, #24
 800a086:	f101 0304 	add.w	r3, r1, #4
 800a08a:	d50a      	bpl.n	800a0a2 <_printf_i+0xce>
 800a08c:	680e      	ldr	r6, [r1, #0]
 800a08e:	602b      	str	r3, [r5, #0]
 800a090:	2e00      	cmp	r6, #0
 800a092:	da03      	bge.n	800a09c <_printf_i+0xc8>
 800a094:	232d      	movs	r3, #45	; 0x2d
 800a096:	4276      	negs	r6, r6
 800a098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a09c:	485e      	ldr	r0, [pc, #376]	; (800a218 <_printf_i+0x244>)
 800a09e:	230a      	movs	r3, #10
 800a0a0:	e019      	b.n	800a0d6 <_printf_i+0x102>
 800a0a2:	680e      	ldr	r6, [r1, #0]
 800a0a4:	602b      	str	r3, [r5, #0]
 800a0a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0aa:	bf18      	it	ne
 800a0ac:	b236      	sxthne	r6, r6
 800a0ae:	e7ef      	b.n	800a090 <_printf_i+0xbc>
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	6820      	ldr	r0, [r4, #0]
 800a0b4:	1d19      	adds	r1, r3, #4
 800a0b6:	6029      	str	r1, [r5, #0]
 800a0b8:	0601      	lsls	r1, r0, #24
 800a0ba:	d501      	bpl.n	800a0c0 <_printf_i+0xec>
 800a0bc:	681e      	ldr	r6, [r3, #0]
 800a0be:	e002      	b.n	800a0c6 <_printf_i+0xf2>
 800a0c0:	0646      	lsls	r6, r0, #25
 800a0c2:	d5fb      	bpl.n	800a0bc <_printf_i+0xe8>
 800a0c4:	881e      	ldrh	r6, [r3, #0]
 800a0c6:	4854      	ldr	r0, [pc, #336]	; (800a218 <_printf_i+0x244>)
 800a0c8:	2f6f      	cmp	r7, #111	; 0x6f
 800a0ca:	bf0c      	ite	eq
 800a0cc:	2308      	moveq	r3, #8
 800a0ce:	230a      	movne	r3, #10
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0d6:	6865      	ldr	r5, [r4, #4]
 800a0d8:	60a5      	str	r5, [r4, #8]
 800a0da:	2d00      	cmp	r5, #0
 800a0dc:	bfa2      	ittt	ge
 800a0de:	6821      	ldrge	r1, [r4, #0]
 800a0e0:	f021 0104 	bicge.w	r1, r1, #4
 800a0e4:	6021      	strge	r1, [r4, #0]
 800a0e6:	b90e      	cbnz	r6, 800a0ec <_printf_i+0x118>
 800a0e8:	2d00      	cmp	r5, #0
 800a0ea:	d04d      	beq.n	800a188 <_printf_i+0x1b4>
 800a0ec:	4615      	mov	r5, r2
 800a0ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0f2:	fb03 6711 	mls	r7, r3, r1, r6
 800a0f6:	5dc7      	ldrb	r7, [r0, r7]
 800a0f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0fc:	4637      	mov	r7, r6
 800a0fe:	42bb      	cmp	r3, r7
 800a100:	460e      	mov	r6, r1
 800a102:	d9f4      	bls.n	800a0ee <_printf_i+0x11a>
 800a104:	2b08      	cmp	r3, #8
 800a106:	d10b      	bne.n	800a120 <_printf_i+0x14c>
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	07de      	lsls	r6, r3, #31
 800a10c:	d508      	bpl.n	800a120 <_printf_i+0x14c>
 800a10e:	6923      	ldr	r3, [r4, #16]
 800a110:	6861      	ldr	r1, [r4, #4]
 800a112:	4299      	cmp	r1, r3
 800a114:	bfde      	ittt	le
 800a116:	2330      	movle	r3, #48	; 0x30
 800a118:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a11c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a120:	1b52      	subs	r2, r2, r5
 800a122:	6122      	str	r2, [r4, #16]
 800a124:	f8cd a000 	str.w	sl, [sp]
 800a128:	464b      	mov	r3, r9
 800a12a:	aa03      	add	r2, sp, #12
 800a12c:	4621      	mov	r1, r4
 800a12e:	4640      	mov	r0, r8
 800a130:	f7ff fee2 	bl	8009ef8 <_printf_common>
 800a134:	3001      	adds	r0, #1
 800a136:	d14c      	bne.n	800a1d2 <_printf_i+0x1fe>
 800a138:	f04f 30ff 	mov.w	r0, #4294967295
 800a13c:	b004      	add	sp, #16
 800a13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a142:	4835      	ldr	r0, [pc, #212]	; (800a218 <_printf_i+0x244>)
 800a144:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a148:	6829      	ldr	r1, [r5, #0]
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a150:	6029      	str	r1, [r5, #0]
 800a152:	061d      	lsls	r5, r3, #24
 800a154:	d514      	bpl.n	800a180 <_printf_i+0x1ac>
 800a156:	07df      	lsls	r7, r3, #31
 800a158:	bf44      	itt	mi
 800a15a:	f043 0320 	orrmi.w	r3, r3, #32
 800a15e:	6023      	strmi	r3, [r4, #0]
 800a160:	b91e      	cbnz	r6, 800a16a <_printf_i+0x196>
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	f023 0320 	bic.w	r3, r3, #32
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	2310      	movs	r3, #16
 800a16c:	e7b0      	b.n	800a0d0 <_printf_i+0xfc>
 800a16e:	6823      	ldr	r3, [r4, #0]
 800a170:	f043 0320 	orr.w	r3, r3, #32
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	2378      	movs	r3, #120	; 0x78
 800a178:	4828      	ldr	r0, [pc, #160]	; (800a21c <_printf_i+0x248>)
 800a17a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a17e:	e7e3      	b.n	800a148 <_printf_i+0x174>
 800a180:	0659      	lsls	r1, r3, #25
 800a182:	bf48      	it	mi
 800a184:	b2b6      	uxthmi	r6, r6
 800a186:	e7e6      	b.n	800a156 <_printf_i+0x182>
 800a188:	4615      	mov	r5, r2
 800a18a:	e7bb      	b.n	800a104 <_printf_i+0x130>
 800a18c:	682b      	ldr	r3, [r5, #0]
 800a18e:	6826      	ldr	r6, [r4, #0]
 800a190:	6961      	ldr	r1, [r4, #20]
 800a192:	1d18      	adds	r0, r3, #4
 800a194:	6028      	str	r0, [r5, #0]
 800a196:	0635      	lsls	r5, r6, #24
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	d501      	bpl.n	800a1a0 <_printf_i+0x1cc>
 800a19c:	6019      	str	r1, [r3, #0]
 800a19e:	e002      	b.n	800a1a6 <_printf_i+0x1d2>
 800a1a0:	0670      	lsls	r0, r6, #25
 800a1a2:	d5fb      	bpl.n	800a19c <_printf_i+0x1c8>
 800a1a4:	8019      	strh	r1, [r3, #0]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	6123      	str	r3, [r4, #16]
 800a1aa:	4615      	mov	r5, r2
 800a1ac:	e7ba      	b.n	800a124 <_printf_i+0x150>
 800a1ae:	682b      	ldr	r3, [r5, #0]
 800a1b0:	1d1a      	adds	r2, r3, #4
 800a1b2:	602a      	str	r2, [r5, #0]
 800a1b4:	681d      	ldr	r5, [r3, #0]
 800a1b6:	6862      	ldr	r2, [r4, #4]
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	f7f6 f810 	bl	80001e0 <memchr>
 800a1c0:	b108      	cbz	r0, 800a1c6 <_printf_i+0x1f2>
 800a1c2:	1b40      	subs	r0, r0, r5
 800a1c4:	6060      	str	r0, [r4, #4]
 800a1c6:	6863      	ldr	r3, [r4, #4]
 800a1c8:	6123      	str	r3, [r4, #16]
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1d0:	e7a8      	b.n	800a124 <_printf_i+0x150>
 800a1d2:	6923      	ldr	r3, [r4, #16]
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	4640      	mov	r0, r8
 800a1da:	47d0      	blx	sl
 800a1dc:	3001      	adds	r0, #1
 800a1de:	d0ab      	beq.n	800a138 <_printf_i+0x164>
 800a1e0:	6823      	ldr	r3, [r4, #0]
 800a1e2:	079b      	lsls	r3, r3, #30
 800a1e4:	d413      	bmi.n	800a20e <_printf_i+0x23a>
 800a1e6:	68e0      	ldr	r0, [r4, #12]
 800a1e8:	9b03      	ldr	r3, [sp, #12]
 800a1ea:	4298      	cmp	r0, r3
 800a1ec:	bfb8      	it	lt
 800a1ee:	4618      	movlt	r0, r3
 800a1f0:	e7a4      	b.n	800a13c <_printf_i+0x168>
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	4632      	mov	r2, r6
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	4640      	mov	r0, r8
 800a1fa:	47d0      	blx	sl
 800a1fc:	3001      	adds	r0, #1
 800a1fe:	d09b      	beq.n	800a138 <_printf_i+0x164>
 800a200:	3501      	adds	r5, #1
 800a202:	68e3      	ldr	r3, [r4, #12]
 800a204:	9903      	ldr	r1, [sp, #12]
 800a206:	1a5b      	subs	r3, r3, r1
 800a208:	42ab      	cmp	r3, r5
 800a20a:	dcf2      	bgt.n	800a1f2 <_printf_i+0x21e>
 800a20c:	e7eb      	b.n	800a1e6 <_printf_i+0x212>
 800a20e:	2500      	movs	r5, #0
 800a210:	f104 0619 	add.w	r6, r4, #25
 800a214:	e7f5      	b.n	800a202 <_printf_i+0x22e>
 800a216:	bf00      	nop
 800a218:	0800cc6a 	.word	0x0800cc6a
 800a21c:	0800cc7b 	.word	0x0800cc7b

0800a220 <quorem>:
 800a220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a224:	6903      	ldr	r3, [r0, #16]
 800a226:	690c      	ldr	r4, [r1, #16]
 800a228:	42a3      	cmp	r3, r4
 800a22a:	4607      	mov	r7, r0
 800a22c:	f2c0 8081 	blt.w	800a332 <quorem+0x112>
 800a230:	3c01      	subs	r4, #1
 800a232:	f101 0814 	add.w	r8, r1, #20
 800a236:	f100 0514 	add.w	r5, r0, #20
 800a23a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a23e:	9301      	str	r3, [sp, #4]
 800a240:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a244:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a248:	3301      	adds	r3, #1
 800a24a:	429a      	cmp	r2, r3
 800a24c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a250:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a254:	fbb2 f6f3 	udiv	r6, r2, r3
 800a258:	d331      	bcc.n	800a2be <quorem+0x9e>
 800a25a:	f04f 0e00 	mov.w	lr, #0
 800a25e:	4640      	mov	r0, r8
 800a260:	46ac      	mov	ip, r5
 800a262:	46f2      	mov	sl, lr
 800a264:	f850 2b04 	ldr.w	r2, [r0], #4
 800a268:	b293      	uxth	r3, r2
 800a26a:	fb06 e303 	mla	r3, r6, r3, lr
 800a26e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a272:	b29b      	uxth	r3, r3
 800a274:	ebaa 0303 	sub.w	r3, sl, r3
 800a278:	f8dc a000 	ldr.w	sl, [ip]
 800a27c:	0c12      	lsrs	r2, r2, #16
 800a27e:	fa13 f38a 	uxtah	r3, r3, sl
 800a282:	fb06 e202 	mla	r2, r6, r2, lr
 800a286:	9300      	str	r3, [sp, #0]
 800a288:	9b00      	ldr	r3, [sp, #0]
 800a28a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a28e:	b292      	uxth	r2, r2
 800a290:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a294:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a298:	f8bd 3000 	ldrh.w	r3, [sp]
 800a29c:	4581      	cmp	r9, r0
 800a29e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2a2:	f84c 3b04 	str.w	r3, [ip], #4
 800a2a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a2aa:	d2db      	bcs.n	800a264 <quorem+0x44>
 800a2ac:	f855 300b 	ldr.w	r3, [r5, fp]
 800a2b0:	b92b      	cbnz	r3, 800a2be <quorem+0x9e>
 800a2b2:	9b01      	ldr	r3, [sp, #4]
 800a2b4:	3b04      	subs	r3, #4
 800a2b6:	429d      	cmp	r5, r3
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	d32e      	bcc.n	800a31a <quorem+0xfa>
 800a2bc:	613c      	str	r4, [r7, #16]
 800a2be:	4638      	mov	r0, r7
 800a2c0:	f001 f8b6 	bl	800b430 <__mcmp>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	db24      	blt.n	800a312 <quorem+0xf2>
 800a2c8:	3601      	adds	r6, #1
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	f04f 0c00 	mov.w	ip, #0
 800a2d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a2d4:	f8d0 e000 	ldr.w	lr, [r0]
 800a2d8:	b293      	uxth	r3, r2
 800a2da:	ebac 0303 	sub.w	r3, ip, r3
 800a2de:	0c12      	lsrs	r2, r2, #16
 800a2e0:	fa13 f38e 	uxtah	r3, r3, lr
 800a2e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a2e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2f2:	45c1      	cmp	r9, r8
 800a2f4:	f840 3b04 	str.w	r3, [r0], #4
 800a2f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a2fc:	d2e8      	bcs.n	800a2d0 <quorem+0xb0>
 800a2fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a302:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a306:	b922      	cbnz	r2, 800a312 <quorem+0xf2>
 800a308:	3b04      	subs	r3, #4
 800a30a:	429d      	cmp	r5, r3
 800a30c:	461a      	mov	r2, r3
 800a30e:	d30a      	bcc.n	800a326 <quorem+0x106>
 800a310:	613c      	str	r4, [r7, #16]
 800a312:	4630      	mov	r0, r6
 800a314:	b003      	add	sp, #12
 800a316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31a:	6812      	ldr	r2, [r2, #0]
 800a31c:	3b04      	subs	r3, #4
 800a31e:	2a00      	cmp	r2, #0
 800a320:	d1cc      	bne.n	800a2bc <quorem+0x9c>
 800a322:	3c01      	subs	r4, #1
 800a324:	e7c7      	b.n	800a2b6 <quorem+0x96>
 800a326:	6812      	ldr	r2, [r2, #0]
 800a328:	3b04      	subs	r3, #4
 800a32a:	2a00      	cmp	r2, #0
 800a32c:	d1f0      	bne.n	800a310 <quorem+0xf0>
 800a32e:	3c01      	subs	r4, #1
 800a330:	e7eb      	b.n	800a30a <quorem+0xea>
 800a332:	2000      	movs	r0, #0
 800a334:	e7ee      	b.n	800a314 <quorem+0xf4>
	...

0800a338 <_dtoa_r>:
 800a338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a33c:	ed2d 8b04 	vpush	{d8-d9}
 800a340:	ec57 6b10 	vmov	r6, r7, d0
 800a344:	b093      	sub	sp, #76	; 0x4c
 800a346:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a348:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a34c:	9106      	str	r1, [sp, #24]
 800a34e:	ee10 aa10 	vmov	sl, s0
 800a352:	4604      	mov	r4, r0
 800a354:	9209      	str	r2, [sp, #36]	; 0x24
 800a356:	930c      	str	r3, [sp, #48]	; 0x30
 800a358:	46bb      	mov	fp, r7
 800a35a:	b975      	cbnz	r5, 800a37a <_dtoa_r+0x42>
 800a35c:	2010      	movs	r0, #16
 800a35e:	f000 fddd 	bl	800af1c <malloc>
 800a362:	4602      	mov	r2, r0
 800a364:	6260      	str	r0, [r4, #36]	; 0x24
 800a366:	b920      	cbnz	r0, 800a372 <_dtoa_r+0x3a>
 800a368:	4ba7      	ldr	r3, [pc, #668]	; (800a608 <_dtoa_r+0x2d0>)
 800a36a:	21ea      	movs	r1, #234	; 0xea
 800a36c:	48a7      	ldr	r0, [pc, #668]	; (800a60c <_dtoa_r+0x2d4>)
 800a36e:	f001 fa67 	bl	800b840 <__assert_func>
 800a372:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a376:	6005      	str	r5, [r0, #0]
 800a378:	60c5      	str	r5, [r0, #12]
 800a37a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a37c:	6819      	ldr	r1, [r3, #0]
 800a37e:	b151      	cbz	r1, 800a396 <_dtoa_r+0x5e>
 800a380:	685a      	ldr	r2, [r3, #4]
 800a382:	604a      	str	r2, [r1, #4]
 800a384:	2301      	movs	r3, #1
 800a386:	4093      	lsls	r3, r2
 800a388:	608b      	str	r3, [r1, #8]
 800a38a:	4620      	mov	r0, r4
 800a38c:	f000 fe0e 	bl	800afac <_Bfree>
 800a390:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]
 800a396:	1e3b      	subs	r3, r7, #0
 800a398:	bfaa      	itet	ge
 800a39a:	2300      	movge	r3, #0
 800a39c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a3a0:	f8c8 3000 	strge.w	r3, [r8]
 800a3a4:	4b9a      	ldr	r3, [pc, #616]	; (800a610 <_dtoa_r+0x2d8>)
 800a3a6:	bfbc      	itt	lt
 800a3a8:	2201      	movlt	r2, #1
 800a3aa:	f8c8 2000 	strlt.w	r2, [r8]
 800a3ae:	ea33 030b 	bics.w	r3, r3, fp
 800a3b2:	d11b      	bne.n	800a3ec <_dtoa_r+0xb4>
 800a3b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3b6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a3ba:	6013      	str	r3, [r2, #0]
 800a3bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3c0:	4333      	orrs	r3, r6
 800a3c2:	f000 8592 	beq.w	800aeea <_dtoa_r+0xbb2>
 800a3c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3c8:	b963      	cbnz	r3, 800a3e4 <_dtoa_r+0xac>
 800a3ca:	4b92      	ldr	r3, [pc, #584]	; (800a614 <_dtoa_r+0x2dc>)
 800a3cc:	e022      	b.n	800a414 <_dtoa_r+0xdc>
 800a3ce:	4b92      	ldr	r3, [pc, #584]	; (800a618 <_dtoa_r+0x2e0>)
 800a3d0:	9301      	str	r3, [sp, #4]
 800a3d2:	3308      	adds	r3, #8
 800a3d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3d6:	6013      	str	r3, [r2, #0]
 800a3d8:	9801      	ldr	r0, [sp, #4]
 800a3da:	b013      	add	sp, #76	; 0x4c
 800a3dc:	ecbd 8b04 	vpop	{d8-d9}
 800a3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3e4:	4b8b      	ldr	r3, [pc, #556]	; (800a614 <_dtoa_r+0x2dc>)
 800a3e6:	9301      	str	r3, [sp, #4]
 800a3e8:	3303      	adds	r3, #3
 800a3ea:	e7f3      	b.n	800a3d4 <_dtoa_r+0x9c>
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	4650      	mov	r0, sl
 800a3f2:	4659      	mov	r1, fp
 800a3f4:	f7f6 fb68 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3f8:	ec4b ab19 	vmov	d9, sl, fp
 800a3fc:	4680      	mov	r8, r0
 800a3fe:	b158      	cbz	r0, 800a418 <_dtoa_r+0xe0>
 800a400:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a402:	2301      	movs	r3, #1
 800a404:	6013      	str	r3, [r2, #0]
 800a406:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 856b 	beq.w	800aee4 <_dtoa_r+0xbac>
 800a40e:	4883      	ldr	r0, [pc, #524]	; (800a61c <_dtoa_r+0x2e4>)
 800a410:	6018      	str	r0, [r3, #0]
 800a412:	1e43      	subs	r3, r0, #1
 800a414:	9301      	str	r3, [sp, #4]
 800a416:	e7df      	b.n	800a3d8 <_dtoa_r+0xa0>
 800a418:	ec4b ab10 	vmov	d0, sl, fp
 800a41c:	aa10      	add	r2, sp, #64	; 0x40
 800a41e:	a911      	add	r1, sp, #68	; 0x44
 800a420:	4620      	mov	r0, r4
 800a422:	f001 f8ab 	bl	800b57c <__d2b>
 800a426:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a42a:	ee08 0a10 	vmov	s16, r0
 800a42e:	2d00      	cmp	r5, #0
 800a430:	f000 8084 	beq.w	800a53c <_dtoa_r+0x204>
 800a434:	ee19 3a90 	vmov	r3, s19
 800a438:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a43c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a440:	4656      	mov	r6, sl
 800a442:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a446:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a44a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a44e:	4b74      	ldr	r3, [pc, #464]	; (800a620 <_dtoa_r+0x2e8>)
 800a450:	2200      	movs	r2, #0
 800a452:	4630      	mov	r0, r6
 800a454:	4639      	mov	r1, r7
 800a456:	f7f5 ff17 	bl	8000288 <__aeabi_dsub>
 800a45a:	a365      	add	r3, pc, #404	; (adr r3, 800a5f0 <_dtoa_r+0x2b8>)
 800a45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a460:	f7f6 f8ca 	bl	80005f8 <__aeabi_dmul>
 800a464:	a364      	add	r3, pc, #400	; (adr r3, 800a5f8 <_dtoa_r+0x2c0>)
 800a466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46a:	f7f5 ff0f 	bl	800028c <__adddf3>
 800a46e:	4606      	mov	r6, r0
 800a470:	4628      	mov	r0, r5
 800a472:	460f      	mov	r7, r1
 800a474:	f7f6 f856 	bl	8000524 <__aeabi_i2d>
 800a478:	a361      	add	r3, pc, #388	; (adr r3, 800a600 <_dtoa_r+0x2c8>)
 800a47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47e:	f7f6 f8bb 	bl	80005f8 <__aeabi_dmul>
 800a482:	4602      	mov	r2, r0
 800a484:	460b      	mov	r3, r1
 800a486:	4630      	mov	r0, r6
 800a488:	4639      	mov	r1, r7
 800a48a:	f7f5 feff 	bl	800028c <__adddf3>
 800a48e:	4606      	mov	r6, r0
 800a490:	460f      	mov	r7, r1
 800a492:	f7f6 fb61 	bl	8000b58 <__aeabi_d2iz>
 800a496:	2200      	movs	r2, #0
 800a498:	9000      	str	r0, [sp, #0]
 800a49a:	2300      	movs	r3, #0
 800a49c:	4630      	mov	r0, r6
 800a49e:	4639      	mov	r1, r7
 800a4a0:	f7f6 fb1c 	bl	8000adc <__aeabi_dcmplt>
 800a4a4:	b150      	cbz	r0, 800a4bc <_dtoa_r+0x184>
 800a4a6:	9800      	ldr	r0, [sp, #0]
 800a4a8:	f7f6 f83c 	bl	8000524 <__aeabi_i2d>
 800a4ac:	4632      	mov	r2, r6
 800a4ae:	463b      	mov	r3, r7
 800a4b0:	f7f6 fb0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4b4:	b910      	cbnz	r0, 800a4bc <_dtoa_r+0x184>
 800a4b6:	9b00      	ldr	r3, [sp, #0]
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	9b00      	ldr	r3, [sp, #0]
 800a4be:	2b16      	cmp	r3, #22
 800a4c0:	d85a      	bhi.n	800a578 <_dtoa_r+0x240>
 800a4c2:	9a00      	ldr	r2, [sp, #0]
 800a4c4:	4b57      	ldr	r3, [pc, #348]	; (800a624 <_dtoa_r+0x2ec>)
 800a4c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ce:	ec51 0b19 	vmov	r0, r1, d9
 800a4d2:	f7f6 fb03 	bl	8000adc <__aeabi_dcmplt>
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	d050      	beq.n	800a57c <_dtoa_r+0x244>
 800a4da:	9b00      	ldr	r3, [sp, #0]
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	9300      	str	r3, [sp, #0]
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4e6:	1b5d      	subs	r5, r3, r5
 800a4e8:	1e6b      	subs	r3, r5, #1
 800a4ea:	9305      	str	r3, [sp, #20]
 800a4ec:	bf45      	ittet	mi
 800a4ee:	f1c5 0301 	rsbmi	r3, r5, #1
 800a4f2:	9304      	strmi	r3, [sp, #16]
 800a4f4:	2300      	movpl	r3, #0
 800a4f6:	2300      	movmi	r3, #0
 800a4f8:	bf4c      	ite	mi
 800a4fa:	9305      	strmi	r3, [sp, #20]
 800a4fc:	9304      	strpl	r3, [sp, #16]
 800a4fe:	9b00      	ldr	r3, [sp, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	db3d      	blt.n	800a580 <_dtoa_r+0x248>
 800a504:	9b05      	ldr	r3, [sp, #20]
 800a506:	9a00      	ldr	r2, [sp, #0]
 800a508:	920a      	str	r2, [sp, #40]	; 0x28
 800a50a:	4413      	add	r3, r2
 800a50c:	9305      	str	r3, [sp, #20]
 800a50e:	2300      	movs	r3, #0
 800a510:	9307      	str	r3, [sp, #28]
 800a512:	9b06      	ldr	r3, [sp, #24]
 800a514:	2b09      	cmp	r3, #9
 800a516:	f200 8089 	bhi.w	800a62c <_dtoa_r+0x2f4>
 800a51a:	2b05      	cmp	r3, #5
 800a51c:	bfc4      	itt	gt
 800a51e:	3b04      	subgt	r3, #4
 800a520:	9306      	strgt	r3, [sp, #24]
 800a522:	9b06      	ldr	r3, [sp, #24]
 800a524:	f1a3 0302 	sub.w	r3, r3, #2
 800a528:	bfcc      	ite	gt
 800a52a:	2500      	movgt	r5, #0
 800a52c:	2501      	movle	r5, #1
 800a52e:	2b03      	cmp	r3, #3
 800a530:	f200 8087 	bhi.w	800a642 <_dtoa_r+0x30a>
 800a534:	e8df f003 	tbb	[pc, r3]
 800a538:	59383a2d 	.word	0x59383a2d
 800a53c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a540:	441d      	add	r5, r3
 800a542:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a546:	2b20      	cmp	r3, #32
 800a548:	bfc1      	itttt	gt
 800a54a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a54e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a552:	fa0b f303 	lslgt.w	r3, fp, r3
 800a556:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a55a:	bfda      	itte	le
 800a55c:	f1c3 0320 	rsble	r3, r3, #32
 800a560:	fa06 f003 	lslle.w	r0, r6, r3
 800a564:	4318      	orrgt	r0, r3
 800a566:	f7f5 ffcd 	bl	8000504 <__aeabi_ui2d>
 800a56a:	2301      	movs	r3, #1
 800a56c:	4606      	mov	r6, r0
 800a56e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a572:	3d01      	subs	r5, #1
 800a574:	930e      	str	r3, [sp, #56]	; 0x38
 800a576:	e76a      	b.n	800a44e <_dtoa_r+0x116>
 800a578:	2301      	movs	r3, #1
 800a57a:	e7b2      	b.n	800a4e2 <_dtoa_r+0x1aa>
 800a57c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a57e:	e7b1      	b.n	800a4e4 <_dtoa_r+0x1ac>
 800a580:	9b04      	ldr	r3, [sp, #16]
 800a582:	9a00      	ldr	r2, [sp, #0]
 800a584:	1a9b      	subs	r3, r3, r2
 800a586:	9304      	str	r3, [sp, #16]
 800a588:	4253      	negs	r3, r2
 800a58a:	9307      	str	r3, [sp, #28]
 800a58c:	2300      	movs	r3, #0
 800a58e:	930a      	str	r3, [sp, #40]	; 0x28
 800a590:	e7bf      	b.n	800a512 <_dtoa_r+0x1da>
 800a592:	2300      	movs	r3, #0
 800a594:	9308      	str	r3, [sp, #32]
 800a596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a598:	2b00      	cmp	r3, #0
 800a59a:	dc55      	bgt.n	800a648 <_dtoa_r+0x310>
 800a59c:	2301      	movs	r3, #1
 800a59e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a5a6:	e00c      	b.n	800a5c2 <_dtoa_r+0x28a>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e7f3      	b.n	800a594 <_dtoa_r+0x25c>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5b0:	9308      	str	r3, [sp, #32]
 800a5b2:	9b00      	ldr	r3, [sp, #0]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	9302      	str	r3, [sp, #8]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	9303      	str	r3, [sp, #12]
 800a5be:	bfb8      	it	lt
 800a5c0:	2301      	movlt	r3, #1
 800a5c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	6042      	str	r2, [r0, #4]
 800a5c8:	2204      	movs	r2, #4
 800a5ca:	f102 0614 	add.w	r6, r2, #20
 800a5ce:	429e      	cmp	r6, r3
 800a5d0:	6841      	ldr	r1, [r0, #4]
 800a5d2:	d93d      	bls.n	800a650 <_dtoa_r+0x318>
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f000 fca9 	bl	800af2c <_Balloc>
 800a5da:	9001      	str	r0, [sp, #4]
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d13b      	bne.n	800a658 <_dtoa_r+0x320>
 800a5e0:	4b11      	ldr	r3, [pc, #68]	; (800a628 <_dtoa_r+0x2f0>)
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a5e8:	e6c0      	b.n	800a36c <_dtoa_r+0x34>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e7df      	b.n	800a5ae <_dtoa_r+0x276>
 800a5ee:	bf00      	nop
 800a5f0:	636f4361 	.word	0x636f4361
 800a5f4:	3fd287a7 	.word	0x3fd287a7
 800a5f8:	8b60c8b3 	.word	0x8b60c8b3
 800a5fc:	3fc68a28 	.word	0x3fc68a28
 800a600:	509f79fb 	.word	0x509f79fb
 800a604:	3fd34413 	.word	0x3fd34413
 800a608:	0800cc99 	.word	0x0800cc99
 800a60c:	0800ccb0 	.word	0x0800ccb0
 800a610:	7ff00000 	.word	0x7ff00000
 800a614:	0800cc95 	.word	0x0800cc95
 800a618:	0800cc8c 	.word	0x0800cc8c
 800a61c:	0800cc69 	.word	0x0800cc69
 800a620:	3ff80000 	.word	0x3ff80000
 800a624:	0800cda0 	.word	0x0800cda0
 800a628:	0800cd0b 	.word	0x0800cd0b
 800a62c:	2501      	movs	r5, #1
 800a62e:	2300      	movs	r3, #0
 800a630:	9306      	str	r3, [sp, #24]
 800a632:	9508      	str	r5, [sp, #32]
 800a634:	f04f 33ff 	mov.w	r3, #4294967295
 800a638:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a63c:	2200      	movs	r2, #0
 800a63e:	2312      	movs	r3, #18
 800a640:	e7b0      	b.n	800a5a4 <_dtoa_r+0x26c>
 800a642:	2301      	movs	r3, #1
 800a644:	9308      	str	r3, [sp, #32]
 800a646:	e7f5      	b.n	800a634 <_dtoa_r+0x2fc>
 800a648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a64a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a64e:	e7b8      	b.n	800a5c2 <_dtoa_r+0x28a>
 800a650:	3101      	adds	r1, #1
 800a652:	6041      	str	r1, [r0, #4]
 800a654:	0052      	lsls	r2, r2, #1
 800a656:	e7b8      	b.n	800a5ca <_dtoa_r+0x292>
 800a658:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a65a:	9a01      	ldr	r2, [sp, #4]
 800a65c:	601a      	str	r2, [r3, #0]
 800a65e:	9b03      	ldr	r3, [sp, #12]
 800a660:	2b0e      	cmp	r3, #14
 800a662:	f200 809d 	bhi.w	800a7a0 <_dtoa_r+0x468>
 800a666:	2d00      	cmp	r5, #0
 800a668:	f000 809a 	beq.w	800a7a0 <_dtoa_r+0x468>
 800a66c:	9b00      	ldr	r3, [sp, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	dd32      	ble.n	800a6d8 <_dtoa_r+0x3a0>
 800a672:	4ab7      	ldr	r2, [pc, #732]	; (800a950 <_dtoa_r+0x618>)
 800a674:	f003 030f 	and.w	r3, r3, #15
 800a678:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a67c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a680:	9b00      	ldr	r3, [sp, #0]
 800a682:	05d8      	lsls	r0, r3, #23
 800a684:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a688:	d516      	bpl.n	800a6b8 <_dtoa_r+0x380>
 800a68a:	4bb2      	ldr	r3, [pc, #712]	; (800a954 <_dtoa_r+0x61c>)
 800a68c:	ec51 0b19 	vmov	r0, r1, d9
 800a690:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a694:	f7f6 f8da 	bl	800084c <__aeabi_ddiv>
 800a698:	f007 070f 	and.w	r7, r7, #15
 800a69c:	4682      	mov	sl, r0
 800a69e:	468b      	mov	fp, r1
 800a6a0:	2503      	movs	r5, #3
 800a6a2:	4eac      	ldr	r6, [pc, #688]	; (800a954 <_dtoa_r+0x61c>)
 800a6a4:	b957      	cbnz	r7, 800a6bc <_dtoa_r+0x384>
 800a6a6:	4642      	mov	r2, r8
 800a6a8:	464b      	mov	r3, r9
 800a6aa:	4650      	mov	r0, sl
 800a6ac:	4659      	mov	r1, fp
 800a6ae:	f7f6 f8cd 	bl	800084c <__aeabi_ddiv>
 800a6b2:	4682      	mov	sl, r0
 800a6b4:	468b      	mov	fp, r1
 800a6b6:	e028      	b.n	800a70a <_dtoa_r+0x3d2>
 800a6b8:	2502      	movs	r5, #2
 800a6ba:	e7f2      	b.n	800a6a2 <_dtoa_r+0x36a>
 800a6bc:	07f9      	lsls	r1, r7, #31
 800a6be:	d508      	bpl.n	800a6d2 <_dtoa_r+0x39a>
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6c8:	f7f5 ff96 	bl	80005f8 <__aeabi_dmul>
 800a6cc:	3501      	adds	r5, #1
 800a6ce:	4680      	mov	r8, r0
 800a6d0:	4689      	mov	r9, r1
 800a6d2:	107f      	asrs	r7, r7, #1
 800a6d4:	3608      	adds	r6, #8
 800a6d6:	e7e5      	b.n	800a6a4 <_dtoa_r+0x36c>
 800a6d8:	f000 809b 	beq.w	800a812 <_dtoa_r+0x4da>
 800a6dc:	9b00      	ldr	r3, [sp, #0]
 800a6de:	4f9d      	ldr	r7, [pc, #628]	; (800a954 <_dtoa_r+0x61c>)
 800a6e0:	425e      	negs	r6, r3
 800a6e2:	4b9b      	ldr	r3, [pc, #620]	; (800a950 <_dtoa_r+0x618>)
 800a6e4:	f006 020f 	and.w	r2, r6, #15
 800a6e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f0:	ec51 0b19 	vmov	r0, r1, d9
 800a6f4:	f7f5 ff80 	bl	80005f8 <__aeabi_dmul>
 800a6f8:	1136      	asrs	r6, r6, #4
 800a6fa:	4682      	mov	sl, r0
 800a6fc:	468b      	mov	fp, r1
 800a6fe:	2300      	movs	r3, #0
 800a700:	2502      	movs	r5, #2
 800a702:	2e00      	cmp	r6, #0
 800a704:	d17a      	bne.n	800a7fc <_dtoa_r+0x4c4>
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1d3      	bne.n	800a6b2 <_dtoa_r+0x37a>
 800a70a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f000 8082 	beq.w	800a816 <_dtoa_r+0x4de>
 800a712:	4b91      	ldr	r3, [pc, #580]	; (800a958 <_dtoa_r+0x620>)
 800a714:	2200      	movs	r2, #0
 800a716:	4650      	mov	r0, sl
 800a718:	4659      	mov	r1, fp
 800a71a:	f7f6 f9df 	bl	8000adc <__aeabi_dcmplt>
 800a71e:	2800      	cmp	r0, #0
 800a720:	d079      	beq.n	800a816 <_dtoa_r+0x4de>
 800a722:	9b03      	ldr	r3, [sp, #12]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d076      	beq.n	800a816 <_dtoa_r+0x4de>
 800a728:	9b02      	ldr	r3, [sp, #8]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	dd36      	ble.n	800a79c <_dtoa_r+0x464>
 800a72e:	9b00      	ldr	r3, [sp, #0]
 800a730:	4650      	mov	r0, sl
 800a732:	4659      	mov	r1, fp
 800a734:	1e5f      	subs	r7, r3, #1
 800a736:	2200      	movs	r2, #0
 800a738:	4b88      	ldr	r3, [pc, #544]	; (800a95c <_dtoa_r+0x624>)
 800a73a:	f7f5 ff5d 	bl	80005f8 <__aeabi_dmul>
 800a73e:	9e02      	ldr	r6, [sp, #8]
 800a740:	4682      	mov	sl, r0
 800a742:	468b      	mov	fp, r1
 800a744:	3501      	adds	r5, #1
 800a746:	4628      	mov	r0, r5
 800a748:	f7f5 feec 	bl	8000524 <__aeabi_i2d>
 800a74c:	4652      	mov	r2, sl
 800a74e:	465b      	mov	r3, fp
 800a750:	f7f5 ff52 	bl	80005f8 <__aeabi_dmul>
 800a754:	4b82      	ldr	r3, [pc, #520]	; (800a960 <_dtoa_r+0x628>)
 800a756:	2200      	movs	r2, #0
 800a758:	f7f5 fd98 	bl	800028c <__adddf3>
 800a75c:	46d0      	mov	r8, sl
 800a75e:	46d9      	mov	r9, fp
 800a760:	4682      	mov	sl, r0
 800a762:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a766:	2e00      	cmp	r6, #0
 800a768:	d158      	bne.n	800a81c <_dtoa_r+0x4e4>
 800a76a:	4b7e      	ldr	r3, [pc, #504]	; (800a964 <_dtoa_r+0x62c>)
 800a76c:	2200      	movs	r2, #0
 800a76e:	4640      	mov	r0, r8
 800a770:	4649      	mov	r1, r9
 800a772:	f7f5 fd89 	bl	8000288 <__aeabi_dsub>
 800a776:	4652      	mov	r2, sl
 800a778:	465b      	mov	r3, fp
 800a77a:	4680      	mov	r8, r0
 800a77c:	4689      	mov	r9, r1
 800a77e:	f7f6 f9cb 	bl	8000b18 <__aeabi_dcmpgt>
 800a782:	2800      	cmp	r0, #0
 800a784:	f040 8295 	bne.w	800acb2 <_dtoa_r+0x97a>
 800a788:	4652      	mov	r2, sl
 800a78a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a78e:	4640      	mov	r0, r8
 800a790:	4649      	mov	r1, r9
 800a792:	f7f6 f9a3 	bl	8000adc <__aeabi_dcmplt>
 800a796:	2800      	cmp	r0, #0
 800a798:	f040 8289 	bne.w	800acae <_dtoa_r+0x976>
 800a79c:	ec5b ab19 	vmov	sl, fp, d9
 800a7a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f2c0 8148 	blt.w	800aa38 <_dtoa_r+0x700>
 800a7a8:	9a00      	ldr	r2, [sp, #0]
 800a7aa:	2a0e      	cmp	r2, #14
 800a7ac:	f300 8144 	bgt.w	800aa38 <_dtoa_r+0x700>
 800a7b0:	4b67      	ldr	r3, [pc, #412]	; (800a950 <_dtoa_r+0x618>)
 800a7b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	f280 80d5 	bge.w	800a96c <_dtoa_r+0x634>
 800a7c2:	9b03      	ldr	r3, [sp, #12]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f300 80d1 	bgt.w	800a96c <_dtoa_r+0x634>
 800a7ca:	f040 826f 	bne.w	800acac <_dtoa_r+0x974>
 800a7ce:	4b65      	ldr	r3, [pc, #404]	; (800a964 <_dtoa_r+0x62c>)
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	4640      	mov	r0, r8
 800a7d4:	4649      	mov	r1, r9
 800a7d6:	f7f5 ff0f 	bl	80005f8 <__aeabi_dmul>
 800a7da:	4652      	mov	r2, sl
 800a7dc:	465b      	mov	r3, fp
 800a7de:	f7f6 f991 	bl	8000b04 <__aeabi_dcmpge>
 800a7e2:	9e03      	ldr	r6, [sp, #12]
 800a7e4:	4637      	mov	r7, r6
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	f040 8245 	bne.w	800ac76 <_dtoa_r+0x93e>
 800a7ec:	9d01      	ldr	r5, [sp, #4]
 800a7ee:	2331      	movs	r3, #49	; 0x31
 800a7f0:	f805 3b01 	strb.w	r3, [r5], #1
 800a7f4:	9b00      	ldr	r3, [sp, #0]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	e240      	b.n	800ac7e <_dtoa_r+0x946>
 800a7fc:	07f2      	lsls	r2, r6, #31
 800a7fe:	d505      	bpl.n	800a80c <_dtoa_r+0x4d4>
 800a800:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a804:	f7f5 fef8 	bl	80005f8 <__aeabi_dmul>
 800a808:	3501      	adds	r5, #1
 800a80a:	2301      	movs	r3, #1
 800a80c:	1076      	asrs	r6, r6, #1
 800a80e:	3708      	adds	r7, #8
 800a810:	e777      	b.n	800a702 <_dtoa_r+0x3ca>
 800a812:	2502      	movs	r5, #2
 800a814:	e779      	b.n	800a70a <_dtoa_r+0x3d2>
 800a816:	9f00      	ldr	r7, [sp, #0]
 800a818:	9e03      	ldr	r6, [sp, #12]
 800a81a:	e794      	b.n	800a746 <_dtoa_r+0x40e>
 800a81c:	9901      	ldr	r1, [sp, #4]
 800a81e:	4b4c      	ldr	r3, [pc, #304]	; (800a950 <_dtoa_r+0x618>)
 800a820:	4431      	add	r1, r6
 800a822:	910d      	str	r1, [sp, #52]	; 0x34
 800a824:	9908      	ldr	r1, [sp, #32]
 800a826:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a82a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a82e:	2900      	cmp	r1, #0
 800a830:	d043      	beq.n	800a8ba <_dtoa_r+0x582>
 800a832:	494d      	ldr	r1, [pc, #308]	; (800a968 <_dtoa_r+0x630>)
 800a834:	2000      	movs	r0, #0
 800a836:	f7f6 f809 	bl	800084c <__aeabi_ddiv>
 800a83a:	4652      	mov	r2, sl
 800a83c:	465b      	mov	r3, fp
 800a83e:	f7f5 fd23 	bl	8000288 <__aeabi_dsub>
 800a842:	9d01      	ldr	r5, [sp, #4]
 800a844:	4682      	mov	sl, r0
 800a846:	468b      	mov	fp, r1
 800a848:	4649      	mov	r1, r9
 800a84a:	4640      	mov	r0, r8
 800a84c:	f7f6 f984 	bl	8000b58 <__aeabi_d2iz>
 800a850:	4606      	mov	r6, r0
 800a852:	f7f5 fe67 	bl	8000524 <__aeabi_i2d>
 800a856:	4602      	mov	r2, r0
 800a858:	460b      	mov	r3, r1
 800a85a:	4640      	mov	r0, r8
 800a85c:	4649      	mov	r1, r9
 800a85e:	f7f5 fd13 	bl	8000288 <__aeabi_dsub>
 800a862:	3630      	adds	r6, #48	; 0x30
 800a864:	f805 6b01 	strb.w	r6, [r5], #1
 800a868:	4652      	mov	r2, sl
 800a86a:	465b      	mov	r3, fp
 800a86c:	4680      	mov	r8, r0
 800a86e:	4689      	mov	r9, r1
 800a870:	f7f6 f934 	bl	8000adc <__aeabi_dcmplt>
 800a874:	2800      	cmp	r0, #0
 800a876:	d163      	bne.n	800a940 <_dtoa_r+0x608>
 800a878:	4642      	mov	r2, r8
 800a87a:	464b      	mov	r3, r9
 800a87c:	4936      	ldr	r1, [pc, #216]	; (800a958 <_dtoa_r+0x620>)
 800a87e:	2000      	movs	r0, #0
 800a880:	f7f5 fd02 	bl	8000288 <__aeabi_dsub>
 800a884:	4652      	mov	r2, sl
 800a886:	465b      	mov	r3, fp
 800a888:	f7f6 f928 	bl	8000adc <__aeabi_dcmplt>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	f040 80b5 	bne.w	800a9fc <_dtoa_r+0x6c4>
 800a892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a894:	429d      	cmp	r5, r3
 800a896:	d081      	beq.n	800a79c <_dtoa_r+0x464>
 800a898:	4b30      	ldr	r3, [pc, #192]	; (800a95c <_dtoa_r+0x624>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	4650      	mov	r0, sl
 800a89e:	4659      	mov	r1, fp
 800a8a0:	f7f5 feaa 	bl	80005f8 <__aeabi_dmul>
 800a8a4:	4b2d      	ldr	r3, [pc, #180]	; (800a95c <_dtoa_r+0x624>)
 800a8a6:	4682      	mov	sl, r0
 800a8a8:	468b      	mov	fp, r1
 800a8aa:	4640      	mov	r0, r8
 800a8ac:	4649      	mov	r1, r9
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f7f5 fea2 	bl	80005f8 <__aeabi_dmul>
 800a8b4:	4680      	mov	r8, r0
 800a8b6:	4689      	mov	r9, r1
 800a8b8:	e7c6      	b.n	800a848 <_dtoa_r+0x510>
 800a8ba:	4650      	mov	r0, sl
 800a8bc:	4659      	mov	r1, fp
 800a8be:	f7f5 fe9b 	bl	80005f8 <__aeabi_dmul>
 800a8c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8c4:	9d01      	ldr	r5, [sp, #4]
 800a8c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8c8:	4682      	mov	sl, r0
 800a8ca:	468b      	mov	fp, r1
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	4640      	mov	r0, r8
 800a8d0:	f7f6 f942 	bl	8000b58 <__aeabi_d2iz>
 800a8d4:	4606      	mov	r6, r0
 800a8d6:	f7f5 fe25 	bl	8000524 <__aeabi_i2d>
 800a8da:	3630      	adds	r6, #48	; 0x30
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4640      	mov	r0, r8
 800a8e2:	4649      	mov	r1, r9
 800a8e4:	f7f5 fcd0 	bl	8000288 <__aeabi_dsub>
 800a8e8:	f805 6b01 	strb.w	r6, [r5], #1
 800a8ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8ee:	429d      	cmp	r5, r3
 800a8f0:	4680      	mov	r8, r0
 800a8f2:	4689      	mov	r9, r1
 800a8f4:	f04f 0200 	mov.w	r2, #0
 800a8f8:	d124      	bne.n	800a944 <_dtoa_r+0x60c>
 800a8fa:	4b1b      	ldr	r3, [pc, #108]	; (800a968 <_dtoa_r+0x630>)
 800a8fc:	4650      	mov	r0, sl
 800a8fe:	4659      	mov	r1, fp
 800a900:	f7f5 fcc4 	bl	800028c <__adddf3>
 800a904:	4602      	mov	r2, r0
 800a906:	460b      	mov	r3, r1
 800a908:	4640      	mov	r0, r8
 800a90a:	4649      	mov	r1, r9
 800a90c:	f7f6 f904 	bl	8000b18 <__aeabi_dcmpgt>
 800a910:	2800      	cmp	r0, #0
 800a912:	d173      	bne.n	800a9fc <_dtoa_r+0x6c4>
 800a914:	4652      	mov	r2, sl
 800a916:	465b      	mov	r3, fp
 800a918:	4913      	ldr	r1, [pc, #76]	; (800a968 <_dtoa_r+0x630>)
 800a91a:	2000      	movs	r0, #0
 800a91c:	f7f5 fcb4 	bl	8000288 <__aeabi_dsub>
 800a920:	4602      	mov	r2, r0
 800a922:	460b      	mov	r3, r1
 800a924:	4640      	mov	r0, r8
 800a926:	4649      	mov	r1, r9
 800a928:	f7f6 f8d8 	bl	8000adc <__aeabi_dcmplt>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	f43f af35 	beq.w	800a79c <_dtoa_r+0x464>
 800a932:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a934:	1e6b      	subs	r3, r5, #1
 800a936:	930f      	str	r3, [sp, #60]	; 0x3c
 800a938:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a93c:	2b30      	cmp	r3, #48	; 0x30
 800a93e:	d0f8      	beq.n	800a932 <_dtoa_r+0x5fa>
 800a940:	9700      	str	r7, [sp, #0]
 800a942:	e049      	b.n	800a9d8 <_dtoa_r+0x6a0>
 800a944:	4b05      	ldr	r3, [pc, #20]	; (800a95c <_dtoa_r+0x624>)
 800a946:	f7f5 fe57 	bl	80005f8 <__aeabi_dmul>
 800a94a:	4680      	mov	r8, r0
 800a94c:	4689      	mov	r9, r1
 800a94e:	e7bd      	b.n	800a8cc <_dtoa_r+0x594>
 800a950:	0800cda0 	.word	0x0800cda0
 800a954:	0800cd78 	.word	0x0800cd78
 800a958:	3ff00000 	.word	0x3ff00000
 800a95c:	40240000 	.word	0x40240000
 800a960:	401c0000 	.word	0x401c0000
 800a964:	40140000 	.word	0x40140000
 800a968:	3fe00000 	.word	0x3fe00000
 800a96c:	9d01      	ldr	r5, [sp, #4]
 800a96e:	4656      	mov	r6, sl
 800a970:	465f      	mov	r7, fp
 800a972:	4642      	mov	r2, r8
 800a974:	464b      	mov	r3, r9
 800a976:	4630      	mov	r0, r6
 800a978:	4639      	mov	r1, r7
 800a97a:	f7f5 ff67 	bl	800084c <__aeabi_ddiv>
 800a97e:	f7f6 f8eb 	bl	8000b58 <__aeabi_d2iz>
 800a982:	4682      	mov	sl, r0
 800a984:	f7f5 fdce 	bl	8000524 <__aeabi_i2d>
 800a988:	4642      	mov	r2, r8
 800a98a:	464b      	mov	r3, r9
 800a98c:	f7f5 fe34 	bl	80005f8 <__aeabi_dmul>
 800a990:	4602      	mov	r2, r0
 800a992:	460b      	mov	r3, r1
 800a994:	4630      	mov	r0, r6
 800a996:	4639      	mov	r1, r7
 800a998:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a99c:	f7f5 fc74 	bl	8000288 <__aeabi_dsub>
 800a9a0:	f805 6b01 	strb.w	r6, [r5], #1
 800a9a4:	9e01      	ldr	r6, [sp, #4]
 800a9a6:	9f03      	ldr	r7, [sp, #12]
 800a9a8:	1bae      	subs	r6, r5, r6
 800a9aa:	42b7      	cmp	r7, r6
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	460b      	mov	r3, r1
 800a9b0:	d135      	bne.n	800aa1e <_dtoa_r+0x6e6>
 800a9b2:	f7f5 fc6b 	bl	800028c <__adddf3>
 800a9b6:	4642      	mov	r2, r8
 800a9b8:	464b      	mov	r3, r9
 800a9ba:	4606      	mov	r6, r0
 800a9bc:	460f      	mov	r7, r1
 800a9be:	f7f6 f8ab 	bl	8000b18 <__aeabi_dcmpgt>
 800a9c2:	b9d0      	cbnz	r0, 800a9fa <_dtoa_r+0x6c2>
 800a9c4:	4642      	mov	r2, r8
 800a9c6:	464b      	mov	r3, r9
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	4639      	mov	r1, r7
 800a9cc:	f7f6 f87c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9d0:	b110      	cbz	r0, 800a9d8 <_dtoa_r+0x6a0>
 800a9d2:	f01a 0f01 	tst.w	sl, #1
 800a9d6:	d110      	bne.n	800a9fa <_dtoa_r+0x6c2>
 800a9d8:	4620      	mov	r0, r4
 800a9da:	ee18 1a10 	vmov	r1, s16
 800a9de:	f000 fae5 	bl	800afac <_Bfree>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	9800      	ldr	r0, [sp, #0]
 800a9e6:	702b      	strb	r3, [r5, #0]
 800a9e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a9ea:	3001      	adds	r0, #1
 800a9ec:	6018      	str	r0, [r3, #0]
 800a9ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	f43f acf1 	beq.w	800a3d8 <_dtoa_r+0xa0>
 800a9f6:	601d      	str	r5, [r3, #0]
 800a9f8:	e4ee      	b.n	800a3d8 <_dtoa_r+0xa0>
 800a9fa:	9f00      	ldr	r7, [sp, #0]
 800a9fc:	462b      	mov	r3, r5
 800a9fe:	461d      	mov	r5, r3
 800aa00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa04:	2a39      	cmp	r2, #57	; 0x39
 800aa06:	d106      	bne.n	800aa16 <_dtoa_r+0x6de>
 800aa08:	9a01      	ldr	r2, [sp, #4]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d1f7      	bne.n	800a9fe <_dtoa_r+0x6c6>
 800aa0e:	9901      	ldr	r1, [sp, #4]
 800aa10:	2230      	movs	r2, #48	; 0x30
 800aa12:	3701      	adds	r7, #1
 800aa14:	700a      	strb	r2, [r1, #0]
 800aa16:	781a      	ldrb	r2, [r3, #0]
 800aa18:	3201      	adds	r2, #1
 800aa1a:	701a      	strb	r2, [r3, #0]
 800aa1c:	e790      	b.n	800a940 <_dtoa_r+0x608>
 800aa1e:	4ba6      	ldr	r3, [pc, #664]	; (800acb8 <_dtoa_r+0x980>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	f7f5 fde9 	bl	80005f8 <__aeabi_dmul>
 800aa26:	2200      	movs	r2, #0
 800aa28:	2300      	movs	r3, #0
 800aa2a:	4606      	mov	r6, r0
 800aa2c:	460f      	mov	r7, r1
 800aa2e:	f7f6 f84b 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa32:	2800      	cmp	r0, #0
 800aa34:	d09d      	beq.n	800a972 <_dtoa_r+0x63a>
 800aa36:	e7cf      	b.n	800a9d8 <_dtoa_r+0x6a0>
 800aa38:	9a08      	ldr	r2, [sp, #32]
 800aa3a:	2a00      	cmp	r2, #0
 800aa3c:	f000 80d7 	beq.w	800abee <_dtoa_r+0x8b6>
 800aa40:	9a06      	ldr	r2, [sp, #24]
 800aa42:	2a01      	cmp	r2, #1
 800aa44:	f300 80ba 	bgt.w	800abbc <_dtoa_r+0x884>
 800aa48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa4a:	2a00      	cmp	r2, #0
 800aa4c:	f000 80b2 	beq.w	800abb4 <_dtoa_r+0x87c>
 800aa50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa54:	9e07      	ldr	r6, [sp, #28]
 800aa56:	9d04      	ldr	r5, [sp, #16]
 800aa58:	9a04      	ldr	r2, [sp, #16]
 800aa5a:	441a      	add	r2, r3
 800aa5c:	9204      	str	r2, [sp, #16]
 800aa5e:	9a05      	ldr	r2, [sp, #20]
 800aa60:	2101      	movs	r1, #1
 800aa62:	441a      	add	r2, r3
 800aa64:	4620      	mov	r0, r4
 800aa66:	9205      	str	r2, [sp, #20]
 800aa68:	f000 fb58 	bl	800b11c <__i2b>
 800aa6c:	4607      	mov	r7, r0
 800aa6e:	2d00      	cmp	r5, #0
 800aa70:	dd0c      	ble.n	800aa8c <_dtoa_r+0x754>
 800aa72:	9b05      	ldr	r3, [sp, #20]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	dd09      	ble.n	800aa8c <_dtoa_r+0x754>
 800aa78:	42ab      	cmp	r3, r5
 800aa7a:	9a04      	ldr	r2, [sp, #16]
 800aa7c:	bfa8      	it	ge
 800aa7e:	462b      	movge	r3, r5
 800aa80:	1ad2      	subs	r2, r2, r3
 800aa82:	9204      	str	r2, [sp, #16]
 800aa84:	9a05      	ldr	r2, [sp, #20]
 800aa86:	1aed      	subs	r5, r5, r3
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	9305      	str	r3, [sp, #20]
 800aa8c:	9b07      	ldr	r3, [sp, #28]
 800aa8e:	b31b      	cbz	r3, 800aad8 <_dtoa_r+0x7a0>
 800aa90:	9b08      	ldr	r3, [sp, #32]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	f000 80af 	beq.w	800abf6 <_dtoa_r+0x8be>
 800aa98:	2e00      	cmp	r6, #0
 800aa9a:	dd13      	ble.n	800aac4 <_dtoa_r+0x78c>
 800aa9c:	4639      	mov	r1, r7
 800aa9e:	4632      	mov	r2, r6
 800aaa0:	4620      	mov	r0, r4
 800aaa2:	f000 fbfb 	bl	800b29c <__pow5mult>
 800aaa6:	ee18 2a10 	vmov	r2, s16
 800aaaa:	4601      	mov	r1, r0
 800aaac:	4607      	mov	r7, r0
 800aaae:	4620      	mov	r0, r4
 800aab0:	f000 fb4a 	bl	800b148 <__multiply>
 800aab4:	ee18 1a10 	vmov	r1, s16
 800aab8:	4680      	mov	r8, r0
 800aaba:	4620      	mov	r0, r4
 800aabc:	f000 fa76 	bl	800afac <_Bfree>
 800aac0:	ee08 8a10 	vmov	s16, r8
 800aac4:	9b07      	ldr	r3, [sp, #28]
 800aac6:	1b9a      	subs	r2, r3, r6
 800aac8:	d006      	beq.n	800aad8 <_dtoa_r+0x7a0>
 800aaca:	ee18 1a10 	vmov	r1, s16
 800aace:	4620      	mov	r0, r4
 800aad0:	f000 fbe4 	bl	800b29c <__pow5mult>
 800aad4:	ee08 0a10 	vmov	s16, r0
 800aad8:	2101      	movs	r1, #1
 800aada:	4620      	mov	r0, r4
 800aadc:	f000 fb1e 	bl	800b11c <__i2b>
 800aae0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	4606      	mov	r6, r0
 800aae6:	f340 8088 	ble.w	800abfa <_dtoa_r+0x8c2>
 800aaea:	461a      	mov	r2, r3
 800aaec:	4601      	mov	r1, r0
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f000 fbd4 	bl	800b29c <__pow5mult>
 800aaf4:	9b06      	ldr	r3, [sp, #24]
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	4606      	mov	r6, r0
 800aafa:	f340 8081 	ble.w	800ac00 <_dtoa_r+0x8c8>
 800aafe:	f04f 0800 	mov.w	r8, #0
 800ab02:	6933      	ldr	r3, [r6, #16]
 800ab04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ab08:	6918      	ldr	r0, [r3, #16]
 800ab0a:	f000 fab7 	bl	800b07c <__hi0bits>
 800ab0e:	f1c0 0020 	rsb	r0, r0, #32
 800ab12:	9b05      	ldr	r3, [sp, #20]
 800ab14:	4418      	add	r0, r3
 800ab16:	f010 001f 	ands.w	r0, r0, #31
 800ab1a:	f000 8092 	beq.w	800ac42 <_dtoa_r+0x90a>
 800ab1e:	f1c0 0320 	rsb	r3, r0, #32
 800ab22:	2b04      	cmp	r3, #4
 800ab24:	f340 808a 	ble.w	800ac3c <_dtoa_r+0x904>
 800ab28:	f1c0 001c 	rsb	r0, r0, #28
 800ab2c:	9b04      	ldr	r3, [sp, #16]
 800ab2e:	4403      	add	r3, r0
 800ab30:	9304      	str	r3, [sp, #16]
 800ab32:	9b05      	ldr	r3, [sp, #20]
 800ab34:	4403      	add	r3, r0
 800ab36:	4405      	add	r5, r0
 800ab38:	9305      	str	r3, [sp, #20]
 800ab3a:	9b04      	ldr	r3, [sp, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	dd07      	ble.n	800ab50 <_dtoa_r+0x818>
 800ab40:	ee18 1a10 	vmov	r1, s16
 800ab44:	461a      	mov	r2, r3
 800ab46:	4620      	mov	r0, r4
 800ab48:	f000 fc02 	bl	800b350 <__lshift>
 800ab4c:	ee08 0a10 	vmov	s16, r0
 800ab50:	9b05      	ldr	r3, [sp, #20]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	dd05      	ble.n	800ab62 <_dtoa_r+0x82a>
 800ab56:	4631      	mov	r1, r6
 800ab58:	461a      	mov	r2, r3
 800ab5a:	4620      	mov	r0, r4
 800ab5c:	f000 fbf8 	bl	800b350 <__lshift>
 800ab60:	4606      	mov	r6, r0
 800ab62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d06e      	beq.n	800ac46 <_dtoa_r+0x90e>
 800ab68:	ee18 0a10 	vmov	r0, s16
 800ab6c:	4631      	mov	r1, r6
 800ab6e:	f000 fc5f 	bl	800b430 <__mcmp>
 800ab72:	2800      	cmp	r0, #0
 800ab74:	da67      	bge.n	800ac46 <_dtoa_r+0x90e>
 800ab76:	9b00      	ldr	r3, [sp, #0]
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	ee18 1a10 	vmov	r1, s16
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	220a      	movs	r2, #10
 800ab82:	2300      	movs	r3, #0
 800ab84:	4620      	mov	r0, r4
 800ab86:	f000 fa33 	bl	800aff0 <__multadd>
 800ab8a:	9b08      	ldr	r3, [sp, #32]
 800ab8c:	ee08 0a10 	vmov	s16, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f000 81b1 	beq.w	800aef8 <_dtoa_r+0xbc0>
 800ab96:	2300      	movs	r3, #0
 800ab98:	4639      	mov	r1, r7
 800ab9a:	220a      	movs	r2, #10
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f000 fa27 	bl	800aff0 <__multadd>
 800aba2:	9b02      	ldr	r3, [sp, #8]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	4607      	mov	r7, r0
 800aba8:	f300 808e 	bgt.w	800acc8 <_dtoa_r+0x990>
 800abac:	9b06      	ldr	r3, [sp, #24]
 800abae:	2b02      	cmp	r3, #2
 800abb0:	dc51      	bgt.n	800ac56 <_dtoa_r+0x91e>
 800abb2:	e089      	b.n	800acc8 <_dtoa_r+0x990>
 800abb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800abba:	e74b      	b.n	800aa54 <_dtoa_r+0x71c>
 800abbc:	9b03      	ldr	r3, [sp, #12]
 800abbe:	1e5e      	subs	r6, r3, #1
 800abc0:	9b07      	ldr	r3, [sp, #28]
 800abc2:	42b3      	cmp	r3, r6
 800abc4:	bfbf      	itttt	lt
 800abc6:	9b07      	ldrlt	r3, [sp, #28]
 800abc8:	9607      	strlt	r6, [sp, #28]
 800abca:	1af2      	sublt	r2, r6, r3
 800abcc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800abce:	bfb6      	itet	lt
 800abd0:	189b      	addlt	r3, r3, r2
 800abd2:	1b9e      	subge	r6, r3, r6
 800abd4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800abd6:	9b03      	ldr	r3, [sp, #12]
 800abd8:	bfb8      	it	lt
 800abda:	2600      	movlt	r6, #0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	bfb7      	itett	lt
 800abe0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800abe4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800abe8:	1a9d      	sublt	r5, r3, r2
 800abea:	2300      	movlt	r3, #0
 800abec:	e734      	b.n	800aa58 <_dtoa_r+0x720>
 800abee:	9e07      	ldr	r6, [sp, #28]
 800abf0:	9d04      	ldr	r5, [sp, #16]
 800abf2:	9f08      	ldr	r7, [sp, #32]
 800abf4:	e73b      	b.n	800aa6e <_dtoa_r+0x736>
 800abf6:	9a07      	ldr	r2, [sp, #28]
 800abf8:	e767      	b.n	800aaca <_dtoa_r+0x792>
 800abfa:	9b06      	ldr	r3, [sp, #24]
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	dc18      	bgt.n	800ac32 <_dtoa_r+0x8fa>
 800ac00:	f1ba 0f00 	cmp.w	sl, #0
 800ac04:	d115      	bne.n	800ac32 <_dtoa_r+0x8fa>
 800ac06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac0a:	b993      	cbnz	r3, 800ac32 <_dtoa_r+0x8fa>
 800ac0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac10:	0d1b      	lsrs	r3, r3, #20
 800ac12:	051b      	lsls	r3, r3, #20
 800ac14:	b183      	cbz	r3, 800ac38 <_dtoa_r+0x900>
 800ac16:	9b04      	ldr	r3, [sp, #16]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	9304      	str	r3, [sp, #16]
 800ac1c:	9b05      	ldr	r3, [sp, #20]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	9305      	str	r3, [sp, #20]
 800ac22:	f04f 0801 	mov.w	r8, #1
 800ac26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f47f af6a 	bne.w	800ab02 <_dtoa_r+0x7ca>
 800ac2e:	2001      	movs	r0, #1
 800ac30:	e76f      	b.n	800ab12 <_dtoa_r+0x7da>
 800ac32:	f04f 0800 	mov.w	r8, #0
 800ac36:	e7f6      	b.n	800ac26 <_dtoa_r+0x8ee>
 800ac38:	4698      	mov	r8, r3
 800ac3a:	e7f4      	b.n	800ac26 <_dtoa_r+0x8ee>
 800ac3c:	f43f af7d 	beq.w	800ab3a <_dtoa_r+0x802>
 800ac40:	4618      	mov	r0, r3
 800ac42:	301c      	adds	r0, #28
 800ac44:	e772      	b.n	800ab2c <_dtoa_r+0x7f4>
 800ac46:	9b03      	ldr	r3, [sp, #12]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	dc37      	bgt.n	800acbc <_dtoa_r+0x984>
 800ac4c:	9b06      	ldr	r3, [sp, #24]
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	dd34      	ble.n	800acbc <_dtoa_r+0x984>
 800ac52:	9b03      	ldr	r3, [sp, #12]
 800ac54:	9302      	str	r3, [sp, #8]
 800ac56:	9b02      	ldr	r3, [sp, #8]
 800ac58:	b96b      	cbnz	r3, 800ac76 <_dtoa_r+0x93e>
 800ac5a:	4631      	mov	r1, r6
 800ac5c:	2205      	movs	r2, #5
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f000 f9c6 	bl	800aff0 <__multadd>
 800ac64:	4601      	mov	r1, r0
 800ac66:	4606      	mov	r6, r0
 800ac68:	ee18 0a10 	vmov	r0, s16
 800ac6c:	f000 fbe0 	bl	800b430 <__mcmp>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	f73f adbb 	bgt.w	800a7ec <_dtoa_r+0x4b4>
 800ac76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac78:	9d01      	ldr	r5, [sp, #4]
 800ac7a:	43db      	mvns	r3, r3
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	f04f 0800 	mov.w	r8, #0
 800ac82:	4631      	mov	r1, r6
 800ac84:	4620      	mov	r0, r4
 800ac86:	f000 f991 	bl	800afac <_Bfree>
 800ac8a:	2f00      	cmp	r7, #0
 800ac8c:	f43f aea4 	beq.w	800a9d8 <_dtoa_r+0x6a0>
 800ac90:	f1b8 0f00 	cmp.w	r8, #0
 800ac94:	d005      	beq.n	800aca2 <_dtoa_r+0x96a>
 800ac96:	45b8      	cmp	r8, r7
 800ac98:	d003      	beq.n	800aca2 <_dtoa_r+0x96a>
 800ac9a:	4641      	mov	r1, r8
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f000 f985 	bl	800afac <_Bfree>
 800aca2:	4639      	mov	r1, r7
 800aca4:	4620      	mov	r0, r4
 800aca6:	f000 f981 	bl	800afac <_Bfree>
 800acaa:	e695      	b.n	800a9d8 <_dtoa_r+0x6a0>
 800acac:	2600      	movs	r6, #0
 800acae:	4637      	mov	r7, r6
 800acb0:	e7e1      	b.n	800ac76 <_dtoa_r+0x93e>
 800acb2:	9700      	str	r7, [sp, #0]
 800acb4:	4637      	mov	r7, r6
 800acb6:	e599      	b.n	800a7ec <_dtoa_r+0x4b4>
 800acb8:	40240000 	.word	0x40240000
 800acbc:	9b08      	ldr	r3, [sp, #32]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f000 80ca 	beq.w	800ae58 <_dtoa_r+0xb20>
 800acc4:	9b03      	ldr	r3, [sp, #12]
 800acc6:	9302      	str	r3, [sp, #8]
 800acc8:	2d00      	cmp	r5, #0
 800acca:	dd05      	ble.n	800acd8 <_dtoa_r+0x9a0>
 800accc:	4639      	mov	r1, r7
 800acce:	462a      	mov	r2, r5
 800acd0:	4620      	mov	r0, r4
 800acd2:	f000 fb3d 	bl	800b350 <__lshift>
 800acd6:	4607      	mov	r7, r0
 800acd8:	f1b8 0f00 	cmp.w	r8, #0
 800acdc:	d05b      	beq.n	800ad96 <_dtoa_r+0xa5e>
 800acde:	6879      	ldr	r1, [r7, #4]
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 f923 	bl	800af2c <_Balloc>
 800ace6:	4605      	mov	r5, r0
 800ace8:	b928      	cbnz	r0, 800acf6 <_dtoa_r+0x9be>
 800acea:	4b87      	ldr	r3, [pc, #540]	; (800af08 <_dtoa_r+0xbd0>)
 800acec:	4602      	mov	r2, r0
 800acee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800acf2:	f7ff bb3b 	b.w	800a36c <_dtoa_r+0x34>
 800acf6:	693a      	ldr	r2, [r7, #16]
 800acf8:	3202      	adds	r2, #2
 800acfa:	0092      	lsls	r2, r2, #2
 800acfc:	f107 010c 	add.w	r1, r7, #12
 800ad00:	300c      	adds	r0, #12
 800ad02:	f7fe fe0d 	bl	8009920 <memcpy>
 800ad06:	2201      	movs	r2, #1
 800ad08:	4629      	mov	r1, r5
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	f000 fb20 	bl	800b350 <__lshift>
 800ad10:	9b01      	ldr	r3, [sp, #4]
 800ad12:	f103 0901 	add.w	r9, r3, #1
 800ad16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ad1a:	4413      	add	r3, r2
 800ad1c:	9305      	str	r3, [sp, #20]
 800ad1e:	f00a 0301 	and.w	r3, sl, #1
 800ad22:	46b8      	mov	r8, r7
 800ad24:	9304      	str	r3, [sp, #16]
 800ad26:	4607      	mov	r7, r0
 800ad28:	4631      	mov	r1, r6
 800ad2a:	ee18 0a10 	vmov	r0, s16
 800ad2e:	f7ff fa77 	bl	800a220 <quorem>
 800ad32:	4641      	mov	r1, r8
 800ad34:	9002      	str	r0, [sp, #8]
 800ad36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad3a:	ee18 0a10 	vmov	r0, s16
 800ad3e:	f000 fb77 	bl	800b430 <__mcmp>
 800ad42:	463a      	mov	r2, r7
 800ad44:	9003      	str	r0, [sp, #12]
 800ad46:	4631      	mov	r1, r6
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f000 fb8d 	bl	800b468 <__mdiff>
 800ad4e:	68c2      	ldr	r2, [r0, #12]
 800ad50:	f109 3bff 	add.w	fp, r9, #4294967295
 800ad54:	4605      	mov	r5, r0
 800ad56:	bb02      	cbnz	r2, 800ad9a <_dtoa_r+0xa62>
 800ad58:	4601      	mov	r1, r0
 800ad5a:	ee18 0a10 	vmov	r0, s16
 800ad5e:	f000 fb67 	bl	800b430 <__mcmp>
 800ad62:	4602      	mov	r2, r0
 800ad64:	4629      	mov	r1, r5
 800ad66:	4620      	mov	r0, r4
 800ad68:	9207      	str	r2, [sp, #28]
 800ad6a:	f000 f91f 	bl	800afac <_Bfree>
 800ad6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ad72:	ea43 0102 	orr.w	r1, r3, r2
 800ad76:	9b04      	ldr	r3, [sp, #16]
 800ad78:	430b      	orrs	r3, r1
 800ad7a:	464d      	mov	r5, r9
 800ad7c:	d10f      	bne.n	800ad9e <_dtoa_r+0xa66>
 800ad7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad82:	d02a      	beq.n	800adda <_dtoa_r+0xaa2>
 800ad84:	9b03      	ldr	r3, [sp, #12]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	dd02      	ble.n	800ad90 <_dtoa_r+0xa58>
 800ad8a:	9b02      	ldr	r3, [sp, #8]
 800ad8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ad90:	f88b a000 	strb.w	sl, [fp]
 800ad94:	e775      	b.n	800ac82 <_dtoa_r+0x94a>
 800ad96:	4638      	mov	r0, r7
 800ad98:	e7ba      	b.n	800ad10 <_dtoa_r+0x9d8>
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	e7e2      	b.n	800ad64 <_dtoa_r+0xa2c>
 800ad9e:	9b03      	ldr	r3, [sp, #12]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	db04      	blt.n	800adae <_dtoa_r+0xa76>
 800ada4:	9906      	ldr	r1, [sp, #24]
 800ada6:	430b      	orrs	r3, r1
 800ada8:	9904      	ldr	r1, [sp, #16]
 800adaa:	430b      	orrs	r3, r1
 800adac:	d122      	bne.n	800adf4 <_dtoa_r+0xabc>
 800adae:	2a00      	cmp	r2, #0
 800adb0:	ddee      	ble.n	800ad90 <_dtoa_r+0xa58>
 800adb2:	ee18 1a10 	vmov	r1, s16
 800adb6:	2201      	movs	r2, #1
 800adb8:	4620      	mov	r0, r4
 800adba:	f000 fac9 	bl	800b350 <__lshift>
 800adbe:	4631      	mov	r1, r6
 800adc0:	ee08 0a10 	vmov	s16, r0
 800adc4:	f000 fb34 	bl	800b430 <__mcmp>
 800adc8:	2800      	cmp	r0, #0
 800adca:	dc03      	bgt.n	800add4 <_dtoa_r+0xa9c>
 800adcc:	d1e0      	bne.n	800ad90 <_dtoa_r+0xa58>
 800adce:	f01a 0f01 	tst.w	sl, #1
 800add2:	d0dd      	beq.n	800ad90 <_dtoa_r+0xa58>
 800add4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800add8:	d1d7      	bne.n	800ad8a <_dtoa_r+0xa52>
 800adda:	2339      	movs	r3, #57	; 0x39
 800addc:	f88b 3000 	strb.w	r3, [fp]
 800ade0:	462b      	mov	r3, r5
 800ade2:	461d      	mov	r5, r3
 800ade4:	3b01      	subs	r3, #1
 800ade6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800adea:	2a39      	cmp	r2, #57	; 0x39
 800adec:	d071      	beq.n	800aed2 <_dtoa_r+0xb9a>
 800adee:	3201      	adds	r2, #1
 800adf0:	701a      	strb	r2, [r3, #0]
 800adf2:	e746      	b.n	800ac82 <_dtoa_r+0x94a>
 800adf4:	2a00      	cmp	r2, #0
 800adf6:	dd07      	ble.n	800ae08 <_dtoa_r+0xad0>
 800adf8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800adfc:	d0ed      	beq.n	800adda <_dtoa_r+0xaa2>
 800adfe:	f10a 0301 	add.w	r3, sl, #1
 800ae02:	f88b 3000 	strb.w	r3, [fp]
 800ae06:	e73c      	b.n	800ac82 <_dtoa_r+0x94a>
 800ae08:	9b05      	ldr	r3, [sp, #20]
 800ae0a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ae0e:	4599      	cmp	r9, r3
 800ae10:	d047      	beq.n	800aea2 <_dtoa_r+0xb6a>
 800ae12:	ee18 1a10 	vmov	r1, s16
 800ae16:	2300      	movs	r3, #0
 800ae18:	220a      	movs	r2, #10
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f000 f8e8 	bl	800aff0 <__multadd>
 800ae20:	45b8      	cmp	r8, r7
 800ae22:	ee08 0a10 	vmov	s16, r0
 800ae26:	f04f 0300 	mov.w	r3, #0
 800ae2a:	f04f 020a 	mov.w	r2, #10
 800ae2e:	4641      	mov	r1, r8
 800ae30:	4620      	mov	r0, r4
 800ae32:	d106      	bne.n	800ae42 <_dtoa_r+0xb0a>
 800ae34:	f000 f8dc 	bl	800aff0 <__multadd>
 800ae38:	4680      	mov	r8, r0
 800ae3a:	4607      	mov	r7, r0
 800ae3c:	f109 0901 	add.w	r9, r9, #1
 800ae40:	e772      	b.n	800ad28 <_dtoa_r+0x9f0>
 800ae42:	f000 f8d5 	bl	800aff0 <__multadd>
 800ae46:	4639      	mov	r1, r7
 800ae48:	4680      	mov	r8, r0
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	220a      	movs	r2, #10
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f000 f8ce 	bl	800aff0 <__multadd>
 800ae54:	4607      	mov	r7, r0
 800ae56:	e7f1      	b.n	800ae3c <_dtoa_r+0xb04>
 800ae58:	9b03      	ldr	r3, [sp, #12]
 800ae5a:	9302      	str	r3, [sp, #8]
 800ae5c:	9d01      	ldr	r5, [sp, #4]
 800ae5e:	ee18 0a10 	vmov	r0, s16
 800ae62:	4631      	mov	r1, r6
 800ae64:	f7ff f9dc 	bl	800a220 <quorem>
 800ae68:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ae6c:	9b01      	ldr	r3, [sp, #4]
 800ae6e:	f805 ab01 	strb.w	sl, [r5], #1
 800ae72:	1aea      	subs	r2, r5, r3
 800ae74:	9b02      	ldr	r3, [sp, #8]
 800ae76:	4293      	cmp	r3, r2
 800ae78:	dd09      	ble.n	800ae8e <_dtoa_r+0xb56>
 800ae7a:	ee18 1a10 	vmov	r1, s16
 800ae7e:	2300      	movs	r3, #0
 800ae80:	220a      	movs	r2, #10
 800ae82:	4620      	mov	r0, r4
 800ae84:	f000 f8b4 	bl	800aff0 <__multadd>
 800ae88:	ee08 0a10 	vmov	s16, r0
 800ae8c:	e7e7      	b.n	800ae5e <_dtoa_r+0xb26>
 800ae8e:	9b02      	ldr	r3, [sp, #8]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	bfc8      	it	gt
 800ae94:	461d      	movgt	r5, r3
 800ae96:	9b01      	ldr	r3, [sp, #4]
 800ae98:	bfd8      	it	le
 800ae9a:	2501      	movle	r5, #1
 800ae9c:	441d      	add	r5, r3
 800ae9e:	f04f 0800 	mov.w	r8, #0
 800aea2:	ee18 1a10 	vmov	r1, s16
 800aea6:	2201      	movs	r2, #1
 800aea8:	4620      	mov	r0, r4
 800aeaa:	f000 fa51 	bl	800b350 <__lshift>
 800aeae:	4631      	mov	r1, r6
 800aeb0:	ee08 0a10 	vmov	s16, r0
 800aeb4:	f000 fabc 	bl	800b430 <__mcmp>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	dc91      	bgt.n	800ade0 <_dtoa_r+0xaa8>
 800aebc:	d102      	bne.n	800aec4 <_dtoa_r+0xb8c>
 800aebe:	f01a 0f01 	tst.w	sl, #1
 800aec2:	d18d      	bne.n	800ade0 <_dtoa_r+0xaa8>
 800aec4:	462b      	mov	r3, r5
 800aec6:	461d      	mov	r5, r3
 800aec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aecc:	2a30      	cmp	r2, #48	; 0x30
 800aece:	d0fa      	beq.n	800aec6 <_dtoa_r+0xb8e>
 800aed0:	e6d7      	b.n	800ac82 <_dtoa_r+0x94a>
 800aed2:	9a01      	ldr	r2, [sp, #4]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d184      	bne.n	800ade2 <_dtoa_r+0xaaa>
 800aed8:	9b00      	ldr	r3, [sp, #0]
 800aeda:	3301      	adds	r3, #1
 800aedc:	9300      	str	r3, [sp, #0]
 800aede:	2331      	movs	r3, #49	; 0x31
 800aee0:	7013      	strb	r3, [r2, #0]
 800aee2:	e6ce      	b.n	800ac82 <_dtoa_r+0x94a>
 800aee4:	4b09      	ldr	r3, [pc, #36]	; (800af0c <_dtoa_r+0xbd4>)
 800aee6:	f7ff ba95 	b.w	800a414 <_dtoa_r+0xdc>
 800aeea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	f47f aa6e 	bne.w	800a3ce <_dtoa_r+0x96>
 800aef2:	4b07      	ldr	r3, [pc, #28]	; (800af10 <_dtoa_r+0xbd8>)
 800aef4:	f7ff ba8e 	b.w	800a414 <_dtoa_r+0xdc>
 800aef8:	9b02      	ldr	r3, [sp, #8]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	dcae      	bgt.n	800ae5c <_dtoa_r+0xb24>
 800aefe:	9b06      	ldr	r3, [sp, #24]
 800af00:	2b02      	cmp	r3, #2
 800af02:	f73f aea8 	bgt.w	800ac56 <_dtoa_r+0x91e>
 800af06:	e7a9      	b.n	800ae5c <_dtoa_r+0xb24>
 800af08:	0800cd0b 	.word	0x0800cd0b
 800af0c:	0800cc68 	.word	0x0800cc68
 800af10:	0800cc8c 	.word	0x0800cc8c

0800af14 <_localeconv_r>:
 800af14:	4800      	ldr	r0, [pc, #0]	; (800af18 <_localeconv_r+0x4>)
 800af16:	4770      	bx	lr
 800af18:	20000164 	.word	0x20000164

0800af1c <malloc>:
 800af1c:	4b02      	ldr	r3, [pc, #8]	; (800af28 <malloc+0xc>)
 800af1e:	4601      	mov	r1, r0
 800af20:	6818      	ldr	r0, [r3, #0]
 800af22:	f000 bc09 	b.w	800b738 <_malloc_r>
 800af26:	bf00      	nop
 800af28:	20000010 	.word	0x20000010

0800af2c <_Balloc>:
 800af2c:	b570      	push	{r4, r5, r6, lr}
 800af2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af30:	4604      	mov	r4, r0
 800af32:	460d      	mov	r5, r1
 800af34:	b976      	cbnz	r6, 800af54 <_Balloc+0x28>
 800af36:	2010      	movs	r0, #16
 800af38:	f7ff fff0 	bl	800af1c <malloc>
 800af3c:	4602      	mov	r2, r0
 800af3e:	6260      	str	r0, [r4, #36]	; 0x24
 800af40:	b920      	cbnz	r0, 800af4c <_Balloc+0x20>
 800af42:	4b18      	ldr	r3, [pc, #96]	; (800afa4 <_Balloc+0x78>)
 800af44:	4818      	ldr	r0, [pc, #96]	; (800afa8 <_Balloc+0x7c>)
 800af46:	2166      	movs	r1, #102	; 0x66
 800af48:	f000 fc7a 	bl	800b840 <__assert_func>
 800af4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af50:	6006      	str	r6, [r0, #0]
 800af52:	60c6      	str	r6, [r0, #12]
 800af54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af56:	68f3      	ldr	r3, [r6, #12]
 800af58:	b183      	cbz	r3, 800af7c <_Balloc+0x50>
 800af5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af62:	b9b8      	cbnz	r0, 800af94 <_Balloc+0x68>
 800af64:	2101      	movs	r1, #1
 800af66:	fa01 f605 	lsl.w	r6, r1, r5
 800af6a:	1d72      	adds	r2, r6, #5
 800af6c:	0092      	lsls	r2, r2, #2
 800af6e:	4620      	mov	r0, r4
 800af70:	f000 fb60 	bl	800b634 <_calloc_r>
 800af74:	b160      	cbz	r0, 800af90 <_Balloc+0x64>
 800af76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af7a:	e00e      	b.n	800af9a <_Balloc+0x6e>
 800af7c:	2221      	movs	r2, #33	; 0x21
 800af7e:	2104      	movs	r1, #4
 800af80:	4620      	mov	r0, r4
 800af82:	f000 fb57 	bl	800b634 <_calloc_r>
 800af86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af88:	60f0      	str	r0, [r6, #12]
 800af8a:	68db      	ldr	r3, [r3, #12]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1e4      	bne.n	800af5a <_Balloc+0x2e>
 800af90:	2000      	movs	r0, #0
 800af92:	bd70      	pop	{r4, r5, r6, pc}
 800af94:	6802      	ldr	r2, [r0, #0]
 800af96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af9a:	2300      	movs	r3, #0
 800af9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afa0:	e7f7      	b.n	800af92 <_Balloc+0x66>
 800afa2:	bf00      	nop
 800afa4:	0800cc99 	.word	0x0800cc99
 800afa8:	0800cd1c 	.word	0x0800cd1c

0800afac <_Bfree>:
 800afac:	b570      	push	{r4, r5, r6, lr}
 800afae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afb0:	4605      	mov	r5, r0
 800afb2:	460c      	mov	r4, r1
 800afb4:	b976      	cbnz	r6, 800afd4 <_Bfree+0x28>
 800afb6:	2010      	movs	r0, #16
 800afb8:	f7ff ffb0 	bl	800af1c <malloc>
 800afbc:	4602      	mov	r2, r0
 800afbe:	6268      	str	r0, [r5, #36]	; 0x24
 800afc0:	b920      	cbnz	r0, 800afcc <_Bfree+0x20>
 800afc2:	4b09      	ldr	r3, [pc, #36]	; (800afe8 <_Bfree+0x3c>)
 800afc4:	4809      	ldr	r0, [pc, #36]	; (800afec <_Bfree+0x40>)
 800afc6:	218a      	movs	r1, #138	; 0x8a
 800afc8:	f000 fc3a 	bl	800b840 <__assert_func>
 800afcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afd0:	6006      	str	r6, [r0, #0]
 800afd2:	60c6      	str	r6, [r0, #12]
 800afd4:	b13c      	cbz	r4, 800afe6 <_Bfree+0x3a>
 800afd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800afd8:	6862      	ldr	r2, [r4, #4]
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afe0:	6021      	str	r1, [r4, #0]
 800afe2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800afe6:	bd70      	pop	{r4, r5, r6, pc}
 800afe8:	0800cc99 	.word	0x0800cc99
 800afec:	0800cd1c 	.word	0x0800cd1c

0800aff0 <__multadd>:
 800aff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff4:	690d      	ldr	r5, [r1, #16]
 800aff6:	4607      	mov	r7, r0
 800aff8:	460c      	mov	r4, r1
 800affa:	461e      	mov	r6, r3
 800affc:	f101 0c14 	add.w	ip, r1, #20
 800b000:	2000      	movs	r0, #0
 800b002:	f8dc 3000 	ldr.w	r3, [ip]
 800b006:	b299      	uxth	r1, r3
 800b008:	fb02 6101 	mla	r1, r2, r1, r6
 800b00c:	0c1e      	lsrs	r6, r3, #16
 800b00e:	0c0b      	lsrs	r3, r1, #16
 800b010:	fb02 3306 	mla	r3, r2, r6, r3
 800b014:	b289      	uxth	r1, r1
 800b016:	3001      	adds	r0, #1
 800b018:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b01c:	4285      	cmp	r5, r0
 800b01e:	f84c 1b04 	str.w	r1, [ip], #4
 800b022:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b026:	dcec      	bgt.n	800b002 <__multadd+0x12>
 800b028:	b30e      	cbz	r6, 800b06e <__multadd+0x7e>
 800b02a:	68a3      	ldr	r3, [r4, #8]
 800b02c:	42ab      	cmp	r3, r5
 800b02e:	dc19      	bgt.n	800b064 <__multadd+0x74>
 800b030:	6861      	ldr	r1, [r4, #4]
 800b032:	4638      	mov	r0, r7
 800b034:	3101      	adds	r1, #1
 800b036:	f7ff ff79 	bl	800af2c <_Balloc>
 800b03a:	4680      	mov	r8, r0
 800b03c:	b928      	cbnz	r0, 800b04a <__multadd+0x5a>
 800b03e:	4602      	mov	r2, r0
 800b040:	4b0c      	ldr	r3, [pc, #48]	; (800b074 <__multadd+0x84>)
 800b042:	480d      	ldr	r0, [pc, #52]	; (800b078 <__multadd+0x88>)
 800b044:	21b5      	movs	r1, #181	; 0xb5
 800b046:	f000 fbfb 	bl	800b840 <__assert_func>
 800b04a:	6922      	ldr	r2, [r4, #16]
 800b04c:	3202      	adds	r2, #2
 800b04e:	f104 010c 	add.w	r1, r4, #12
 800b052:	0092      	lsls	r2, r2, #2
 800b054:	300c      	adds	r0, #12
 800b056:	f7fe fc63 	bl	8009920 <memcpy>
 800b05a:	4621      	mov	r1, r4
 800b05c:	4638      	mov	r0, r7
 800b05e:	f7ff ffa5 	bl	800afac <_Bfree>
 800b062:	4644      	mov	r4, r8
 800b064:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b068:	3501      	adds	r5, #1
 800b06a:	615e      	str	r6, [r3, #20]
 800b06c:	6125      	str	r5, [r4, #16]
 800b06e:	4620      	mov	r0, r4
 800b070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b074:	0800cd0b 	.word	0x0800cd0b
 800b078:	0800cd1c 	.word	0x0800cd1c

0800b07c <__hi0bits>:
 800b07c:	0c03      	lsrs	r3, r0, #16
 800b07e:	041b      	lsls	r3, r3, #16
 800b080:	b9d3      	cbnz	r3, 800b0b8 <__hi0bits+0x3c>
 800b082:	0400      	lsls	r0, r0, #16
 800b084:	2310      	movs	r3, #16
 800b086:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b08a:	bf04      	itt	eq
 800b08c:	0200      	lsleq	r0, r0, #8
 800b08e:	3308      	addeq	r3, #8
 800b090:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b094:	bf04      	itt	eq
 800b096:	0100      	lsleq	r0, r0, #4
 800b098:	3304      	addeq	r3, #4
 800b09a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b09e:	bf04      	itt	eq
 800b0a0:	0080      	lsleq	r0, r0, #2
 800b0a2:	3302      	addeq	r3, #2
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	db05      	blt.n	800b0b4 <__hi0bits+0x38>
 800b0a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0ac:	f103 0301 	add.w	r3, r3, #1
 800b0b0:	bf08      	it	eq
 800b0b2:	2320      	moveq	r3, #32
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	4770      	bx	lr
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	e7e4      	b.n	800b086 <__hi0bits+0xa>

0800b0bc <__lo0bits>:
 800b0bc:	6803      	ldr	r3, [r0, #0]
 800b0be:	f013 0207 	ands.w	r2, r3, #7
 800b0c2:	4601      	mov	r1, r0
 800b0c4:	d00b      	beq.n	800b0de <__lo0bits+0x22>
 800b0c6:	07da      	lsls	r2, r3, #31
 800b0c8:	d423      	bmi.n	800b112 <__lo0bits+0x56>
 800b0ca:	0798      	lsls	r0, r3, #30
 800b0cc:	bf49      	itett	mi
 800b0ce:	085b      	lsrmi	r3, r3, #1
 800b0d0:	089b      	lsrpl	r3, r3, #2
 800b0d2:	2001      	movmi	r0, #1
 800b0d4:	600b      	strmi	r3, [r1, #0]
 800b0d6:	bf5c      	itt	pl
 800b0d8:	600b      	strpl	r3, [r1, #0]
 800b0da:	2002      	movpl	r0, #2
 800b0dc:	4770      	bx	lr
 800b0de:	b298      	uxth	r0, r3
 800b0e0:	b9a8      	cbnz	r0, 800b10e <__lo0bits+0x52>
 800b0e2:	0c1b      	lsrs	r3, r3, #16
 800b0e4:	2010      	movs	r0, #16
 800b0e6:	b2da      	uxtb	r2, r3
 800b0e8:	b90a      	cbnz	r2, 800b0ee <__lo0bits+0x32>
 800b0ea:	3008      	adds	r0, #8
 800b0ec:	0a1b      	lsrs	r3, r3, #8
 800b0ee:	071a      	lsls	r2, r3, #28
 800b0f0:	bf04      	itt	eq
 800b0f2:	091b      	lsreq	r3, r3, #4
 800b0f4:	3004      	addeq	r0, #4
 800b0f6:	079a      	lsls	r2, r3, #30
 800b0f8:	bf04      	itt	eq
 800b0fa:	089b      	lsreq	r3, r3, #2
 800b0fc:	3002      	addeq	r0, #2
 800b0fe:	07da      	lsls	r2, r3, #31
 800b100:	d403      	bmi.n	800b10a <__lo0bits+0x4e>
 800b102:	085b      	lsrs	r3, r3, #1
 800b104:	f100 0001 	add.w	r0, r0, #1
 800b108:	d005      	beq.n	800b116 <__lo0bits+0x5a>
 800b10a:	600b      	str	r3, [r1, #0]
 800b10c:	4770      	bx	lr
 800b10e:	4610      	mov	r0, r2
 800b110:	e7e9      	b.n	800b0e6 <__lo0bits+0x2a>
 800b112:	2000      	movs	r0, #0
 800b114:	4770      	bx	lr
 800b116:	2020      	movs	r0, #32
 800b118:	4770      	bx	lr
	...

0800b11c <__i2b>:
 800b11c:	b510      	push	{r4, lr}
 800b11e:	460c      	mov	r4, r1
 800b120:	2101      	movs	r1, #1
 800b122:	f7ff ff03 	bl	800af2c <_Balloc>
 800b126:	4602      	mov	r2, r0
 800b128:	b928      	cbnz	r0, 800b136 <__i2b+0x1a>
 800b12a:	4b05      	ldr	r3, [pc, #20]	; (800b140 <__i2b+0x24>)
 800b12c:	4805      	ldr	r0, [pc, #20]	; (800b144 <__i2b+0x28>)
 800b12e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b132:	f000 fb85 	bl	800b840 <__assert_func>
 800b136:	2301      	movs	r3, #1
 800b138:	6144      	str	r4, [r0, #20]
 800b13a:	6103      	str	r3, [r0, #16]
 800b13c:	bd10      	pop	{r4, pc}
 800b13e:	bf00      	nop
 800b140:	0800cd0b 	.word	0x0800cd0b
 800b144:	0800cd1c 	.word	0x0800cd1c

0800b148 <__multiply>:
 800b148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	4691      	mov	r9, r2
 800b14e:	690a      	ldr	r2, [r1, #16]
 800b150:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b154:	429a      	cmp	r2, r3
 800b156:	bfb8      	it	lt
 800b158:	460b      	movlt	r3, r1
 800b15a:	460c      	mov	r4, r1
 800b15c:	bfbc      	itt	lt
 800b15e:	464c      	movlt	r4, r9
 800b160:	4699      	movlt	r9, r3
 800b162:	6927      	ldr	r7, [r4, #16]
 800b164:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b168:	68a3      	ldr	r3, [r4, #8]
 800b16a:	6861      	ldr	r1, [r4, #4]
 800b16c:	eb07 060a 	add.w	r6, r7, sl
 800b170:	42b3      	cmp	r3, r6
 800b172:	b085      	sub	sp, #20
 800b174:	bfb8      	it	lt
 800b176:	3101      	addlt	r1, #1
 800b178:	f7ff fed8 	bl	800af2c <_Balloc>
 800b17c:	b930      	cbnz	r0, 800b18c <__multiply+0x44>
 800b17e:	4602      	mov	r2, r0
 800b180:	4b44      	ldr	r3, [pc, #272]	; (800b294 <__multiply+0x14c>)
 800b182:	4845      	ldr	r0, [pc, #276]	; (800b298 <__multiply+0x150>)
 800b184:	f240 115d 	movw	r1, #349	; 0x15d
 800b188:	f000 fb5a 	bl	800b840 <__assert_func>
 800b18c:	f100 0514 	add.w	r5, r0, #20
 800b190:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b194:	462b      	mov	r3, r5
 800b196:	2200      	movs	r2, #0
 800b198:	4543      	cmp	r3, r8
 800b19a:	d321      	bcc.n	800b1e0 <__multiply+0x98>
 800b19c:	f104 0314 	add.w	r3, r4, #20
 800b1a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b1a4:	f109 0314 	add.w	r3, r9, #20
 800b1a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b1ac:	9202      	str	r2, [sp, #8]
 800b1ae:	1b3a      	subs	r2, r7, r4
 800b1b0:	3a15      	subs	r2, #21
 800b1b2:	f022 0203 	bic.w	r2, r2, #3
 800b1b6:	3204      	adds	r2, #4
 800b1b8:	f104 0115 	add.w	r1, r4, #21
 800b1bc:	428f      	cmp	r7, r1
 800b1be:	bf38      	it	cc
 800b1c0:	2204      	movcc	r2, #4
 800b1c2:	9201      	str	r2, [sp, #4]
 800b1c4:	9a02      	ldr	r2, [sp, #8]
 800b1c6:	9303      	str	r3, [sp, #12]
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d80c      	bhi.n	800b1e6 <__multiply+0x9e>
 800b1cc:	2e00      	cmp	r6, #0
 800b1ce:	dd03      	ble.n	800b1d8 <__multiply+0x90>
 800b1d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d05a      	beq.n	800b28e <__multiply+0x146>
 800b1d8:	6106      	str	r6, [r0, #16]
 800b1da:	b005      	add	sp, #20
 800b1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e0:	f843 2b04 	str.w	r2, [r3], #4
 800b1e4:	e7d8      	b.n	800b198 <__multiply+0x50>
 800b1e6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1ea:	f1ba 0f00 	cmp.w	sl, #0
 800b1ee:	d024      	beq.n	800b23a <__multiply+0xf2>
 800b1f0:	f104 0e14 	add.w	lr, r4, #20
 800b1f4:	46a9      	mov	r9, r5
 800b1f6:	f04f 0c00 	mov.w	ip, #0
 800b1fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b1fe:	f8d9 1000 	ldr.w	r1, [r9]
 800b202:	fa1f fb82 	uxth.w	fp, r2
 800b206:	b289      	uxth	r1, r1
 800b208:	fb0a 110b 	mla	r1, sl, fp, r1
 800b20c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b210:	f8d9 2000 	ldr.w	r2, [r9]
 800b214:	4461      	add	r1, ip
 800b216:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b21a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b21e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b222:	b289      	uxth	r1, r1
 800b224:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b228:	4577      	cmp	r7, lr
 800b22a:	f849 1b04 	str.w	r1, [r9], #4
 800b22e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b232:	d8e2      	bhi.n	800b1fa <__multiply+0xb2>
 800b234:	9a01      	ldr	r2, [sp, #4]
 800b236:	f845 c002 	str.w	ip, [r5, r2]
 800b23a:	9a03      	ldr	r2, [sp, #12]
 800b23c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b240:	3304      	adds	r3, #4
 800b242:	f1b9 0f00 	cmp.w	r9, #0
 800b246:	d020      	beq.n	800b28a <__multiply+0x142>
 800b248:	6829      	ldr	r1, [r5, #0]
 800b24a:	f104 0c14 	add.w	ip, r4, #20
 800b24e:	46ae      	mov	lr, r5
 800b250:	f04f 0a00 	mov.w	sl, #0
 800b254:	f8bc b000 	ldrh.w	fp, [ip]
 800b258:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b25c:	fb09 220b 	mla	r2, r9, fp, r2
 800b260:	4492      	add	sl, r2
 800b262:	b289      	uxth	r1, r1
 800b264:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b268:	f84e 1b04 	str.w	r1, [lr], #4
 800b26c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b270:	f8be 1000 	ldrh.w	r1, [lr]
 800b274:	0c12      	lsrs	r2, r2, #16
 800b276:	fb09 1102 	mla	r1, r9, r2, r1
 800b27a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b27e:	4567      	cmp	r7, ip
 800b280:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b284:	d8e6      	bhi.n	800b254 <__multiply+0x10c>
 800b286:	9a01      	ldr	r2, [sp, #4]
 800b288:	50a9      	str	r1, [r5, r2]
 800b28a:	3504      	adds	r5, #4
 800b28c:	e79a      	b.n	800b1c4 <__multiply+0x7c>
 800b28e:	3e01      	subs	r6, #1
 800b290:	e79c      	b.n	800b1cc <__multiply+0x84>
 800b292:	bf00      	nop
 800b294:	0800cd0b 	.word	0x0800cd0b
 800b298:	0800cd1c 	.word	0x0800cd1c

0800b29c <__pow5mult>:
 800b29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2a0:	4615      	mov	r5, r2
 800b2a2:	f012 0203 	ands.w	r2, r2, #3
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	460f      	mov	r7, r1
 800b2aa:	d007      	beq.n	800b2bc <__pow5mult+0x20>
 800b2ac:	4c25      	ldr	r4, [pc, #148]	; (800b344 <__pow5mult+0xa8>)
 800b2ae:	3a01      	subs	r2, #1
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2b6:	f7ff fe9b 	bl	800aff0 <__multadd>
 800b2ba:	4607      	mov	r7, r0
 800b2bc:	10ad      	asrs	r5, r5, #2
 800b2be:	d03d      	beq.n	800b33c <__pow5mult+0xa0>
 800b2c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2c2:	b97c      	cbnz	r4, 800b2e4 <__pow5mult+0x48>
 800b2c4:	2010      	movs	r0, #16
 800b2c6:	f7ff fe29 	bl	800af1c <malloc>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	6270      	str	r0, [r6, #36]	; 0x24
 800b2ce:	b928      	cbnz	r0, 800b2dc <__pow5mult+0x40>
 800b2d0:	4b1d      	ldr	r3, [pc, #116]	; (800b348 <__pow5mult+0xac>)
 800b2d2:	481e      	ldr	r0, [pc, #120]	; (800b34c <__pow5mult+0xb0>)
 800b2d4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b2d8:	f000 fab2 	bl	800b840 <__assert_func>
 800b2dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2e0:	6004      	str	r4, [r0, #0]
 800b2e2:	60c4      	str	r4, [r0, #12]
 800b2e4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2ec:	b94c      	cbnz	r4, 800b302 <__pow5mult+0x66>
 800b2ee:	f240 2171 	movw	r1, #625	; 0x271
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	f7ff ff12 	bl	800b11c <__i2b>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2fe:	4604      	mov	r4, r0
 800b300:	6003      	str	r3, [r0, #0]
 800b302:	f04f 0900 	mov.w	r9, #0
 800b306:	07eb      	lsls	r3, r5, #31
 800b308:	d50a      	bpl.n	800b320 <__pow5mult+0x84>
 800b30a:	4639      	mov	r1, r7
 800b30c:	4622      	mov	r2, r4
 800b30e:	4630      	mov	r0, r6
 800b310:	f7ff ff1a 	bl	800b148 <__multiply>
 800b314:	4639      	mov	r1, r7
 800b316:	4680      	mov	r8, r0
 800b318:	4630      	mov	r0, r6
 800b31a:	f7ff fe47 	bl	800afac <_Bfree>
 800b31e:	4647      	mov	r7, r8
 800b320:	106d      	asrs	r5, r5, #1
 800b322:	d00b      	beq.n	800b33c <__pow5mult+0xa0>
 800b324:	6820      	ldr	r0, [r4, #0]
 800b326:	b938      	cbnz	r0, 800b338 <__pow5mult+0x9c>
 800b328:	4622      	mov	r2, r4
 800b32a:	4621      	mov	r1, r4
 800b32c:	4630      	mov	r0, r6
 800b32e:	f7ff ff0b 	bl	800b148 <__multiply>
 800b332:	6020      	str	r0, [r4, #0]
 800b334:	f8c0 9000 	str.w	r9, [r0]
 800b338:	4604      	mov	r4, r0
 800b33a:	e7e4      	b.n	800b306 <__pow5mult+0x6a>
 800b33c:	4638      	mov	r0, r7
 800b33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b342:	bf00      	nop
 800b344:	0800ce68 	.word	0x0800ce68
 800b348:	0800cc99 	.word	0x0800cc99
 800b34c:	0800cd1c 	.word	0x0800cd1c

0800b350 <__lshift>:
 800b350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b354:	460c      	mov	r4, r1
 800b356:	6849      	ldr	r1, [r1, #4]
 800b358:	6923      	ldr	r3, [r4, #16]
 800b35a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b35e:	68a3      	ldr	r3, [r4, #8]
 800b360:	4607      	mov	r7, r0
 800b362:	4691      	mov	r9, r2
 800b364:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b368:	f108 0601 	add.w	r6, r8, #1
 800b36c:	42b3      	cmp	r3, r6
 800b36e:	db0b      	blt.n	800b388 <__lshift+0x38>
 800b370:	4638      	mov	r0, r7
 800b372:	f7ff fddb 	bl	800af2c <_Balloc>
 800b376:	4605      	mov	r5, r0
 800b378:	b948      	cbnz	r0, 800b38e <__lshift+0x3e>
 800b37a:	4602      	mov	r2, r0
 800b37c:	4b2a      	ldr	r3, [pc, #168]	; (800b428 <__lshift+0xd8>)
 800b37e:	482b      	ldr	r0, [pc, #172]	; (800b42c <__lshift+0xdc>)
 800b380:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b384:	f000 fa5c 	bl	800b840 <__assert_func>
 800b388:	3101      	adds	r1, #1
 800b38a:	005b      	lsls	r3, r3, #1
 800b38c:	e7ee      	b.n	800b36c <__lshift+0x1c>
 800b38e:	2300      	movs	r3, #0
 800b390:	f100 0114 	add.w	r1, r0, #20
 800b394:	f100 0210 	add.w	r2, r0, #16
 800b398:	4618      	mov	r0, r3
 800b39a:	4553      	cmp	r3, sl
 800b39c:	db37      	blt.n	800b40e <__lshift+0xbe>
 800b39e:	6920      	ldr	r0, [r4, #16]
 800b3a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3a4:	f104 0314 	add.w	r3, r4, #20
 800b3a8:	f019 091f 	ands.w	r9, r9, #31
 800b3ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3b0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b3b4:	d02f      	beq.n	800b416 <__lshift+0xc6>
 800b3b6:	f1c9 0e20 	rsb	lr, r9, #32
 800b3ba:	468a      	mov	sl, r1
 800b3bc:	f04f 0c00 	mov.w	ip, #0
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	fa02 f209 	lsl.w	r2, r2, r9
 800b3c6:	ea42 020c 	orr.w	r2, r2, ip
 800b3ca:	f84a 2b04 	str.w	r2, [sl], #4
 800b3ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3d2:	4298      	cmp	r0, r3
 800b3d4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b3d8:	d8f2      	bhi.n	800b3c0 <__lshift+0x70>
 800b3da:	1b03      	subs	r3, r0, r4
 800b3dc:	3b15      	subs	r3, #21
 800b3de:	f023 0303 	bic.w	r3, r3, #3
 800b3e2:	3304      	adds	r3, #4
 800b3e4:	f104 0215 	add.w	r2, r4, #21
 800b3e8:	4290      	cmp	r0, r2
 800b3ea:	bf38      	it	cc
 800b3ec:	2304      	movcc	r3, #4
 800b3ee:	f841 c003 	str.w	ip, [r1, r3]
 800b3f2:	f1bc 0f00 	cmp.w	ip, #0
 800b3f6:	d001      	beq.n	800b3fc <__lshift+0xac>
 800b3f8:	f108 0602 	add.w	r6, r8, #2
 800b3fc:	3e01      	subs	r6, #1
 800b3fe:	4638      	mov	r0, r7
 800b400:	612e      	str	r6, [r5, #16]
 800b402:	4621      	mov	r1, r4
 800b404:	f7ff fdd2 	bl	800afac <_Bfree>
 800b408:	4628      	mov	r0, r5
 800b40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b40e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b412:	3301      	adds	r3, #1
 800b414:	e7c1      	b.n	800b39a <__lshift+0x4a>
 800b416:	3904      	subs	r1, #4
 800b418:	f853 2b04 	ldr.w	r2, [r3], #4
 800b41c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b420:	4298      	cmp	r0, r3
 800b422:	d8f9      	bhi.n	800b418 <__lshift+0xc8>
 800b424:	e7ea      	b.n	800b3fc <__lshift+0xac>
 800b426:	bf00      	nop
 800b428:	0800cd0b 	.word	0x0800cd0b
 800b42c:	0800cd1c 	.word	0x0800cd1c

0800b430 <__mcmp>:
 800b430:	b530      	push	{r4, r5, lr}
 800b432:	6902      	ldr	r2, [r0, #16]
 800b434:	690c      	ldr	r4, [r1, #16]
 800b436:	1b12      	subs	r2, r2, r4
 800b438:	d10e      	bne.n	800b458 <__mcmp+0x28>
 800b43a:	f100 0314 	add.w	r3, r0, #20
 800b43e:	3114      	adds	r1, #20
 800b440:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b444:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b448:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b44c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b450:	42a5      	cmp	r5, r4
 800b452:	d003      	beq.n	800b45c <__mcmp+0x2c>
 800b454:	d305      	bcc.n	800b462 <__mcmp+0x32>
 800b456:	2201      	movs	r2, #1
 800b458:	4610      	mov	r0, r2
 800b45a:	bd30      	pop	{r4, r5, pc}
 800b45c:	4283      	cmp	r3, r0
 800b45e:	d3f3      	bcc.n	800b448 <__mcmp+0x18>
 800b460:	e7fa      	b.n	800b458 <__mcmp+0x28>
 800b462:	f04f 32ff 	mov.w	r2, #4294967295
 800b466:	e7f7      	b.n	800b458 <__mcmp+0x28>

0800b468 <__mdiff>:
 800b468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46c:	460c      	mov	r4, r1
 800b46e:	4606      	mov	r6, r0
 800b470:	4611      	mov	r1, r2
 800b472:	4620      	mov	r0, r4
 800b474:	4690      	mov	r8, r2
 800b476:	f7ff ffdb 	bl	800b430 <__mcmp>
 800b47a:	1e05      	subs	r5, r0, #0
 800b47c:	d110      	bne.n	800b4a0 <__mdiff+0x38>
 800b47e:	4629      	mov	r1, r5
 800b480:	4630      	mov	r0, r6
 800b482:	f7ff fd53 	bl	800af2c <_Balloc>
 800b486:	b930      	cbnz	r0, 800b496 <__mdiff+0x2e>
 800b488:	4b3a      	ldr	r3, [pc, #232]	; (800b574 <__mdiff+0x10c>)
 800b48a:	4602      	mov	r2, r0
 800b48c:	f240 2132 	movw	r1, #562	; 0x232
 800b490:	4839      	ldr	r0, [pc, #228]	; (800b578 <__mdiff+0x110>)
 800b492:	f000 f9d5 	bl	800b840 <__assert_func>
 800b496:	2301      	movs	r3, #1
 800b498:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b49c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a0:	bfa4      	itt	ge
 800b4a2:	4643      	movge	r3, r8
 800b4a4:	46a0      	movge	r8, r4
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4ac:	bfa6      	itte	ge
 800b4ae:	461c      	movge	r4, r3
 800b4b0:	2500      	movge	r5, #0
 800b4b2:	2501      	movlt	r5, #1
 800b4b4:	f7ff fd3a 	bl	800af2c <_Balloc>
 800b4b8:	b920      	cbnz	r0, 800b4c4 <__mdiff+0x5c>
 800b4ba:	4b2e      	ldr	r3, [pc, #184]	; (800b574 <__mdiff+0x10c>)
 800b4bc:	4602      	mov	r2, r0
 800b4be:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b4c2:	e7e5      	b.n	800b490 <__mdiff+0x28>
 800b4c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b4c8:	6926      	ldr	r6, [r4, #16]
 800b4ca:	60c5      	str	r5, [r0, #12]
 800b4cc:	f104 0914 	add.w	r9, r4, #20
 800b4d0:	f108 0514 	add.w	r5, r8, #20
 800b4d4:	f100 0e14 	add.w	lr, r0, #20
 800b4d8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b4dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b4e0:	f108 0210 	add.w	r2, r8, #16
 800b4e4:	46f2      	mov	sl, lr
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4ec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b4f0:	fa1f f883 	uxth.w	r8, r3
 800b4f4:	fa11 f18b 	uxtah	r1, r1, fp
 800b4f8:	0c1b      	lsrs	r3, r3, #16
 800b4fa:	eba1 0808 	sub.w	r8, r1, r8
 800b4fe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b502:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b506:	fa1f f888 	uxth.w	r8, r8
 800b50a:	1419      	asrs	r1, r3, #16
 800b50c:	454e      	cmp	r6, r9
 800b50e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b512:	f84a 3b04 	str.w	r3, [sl], #4
 800b516:	d8e7      	bhi.n	800b4e8 <__mdiff+0x80>
 800b518:	1b33      	subs	r3, r6, r4
 800b51a:	3b15      	subs	r3, #21
 800b51c:	f023 0303 	bic.w	r3, r3, #3
 800b520:	3304      	adds	r3, #4
 800b522:	3415      	adds	r4, #21
 800b524:	42a6      	cmp	r6, r4
 800b526:	bf38      	it	cc
 800b528:	2304      	movcc	r3, #4
 800b52a:	441d      	add	r5, r3
 800b52c:	4473      	add	r3, lr
 800b52e:	469e      	mov	lr, r3
 800b530:	462e      	mov	r6, r5
 800b532:	4566      	cmp	r6, ip
 800b534:	d30e      	bcc.n	800b554 <__mdiff+0xec>
 800b536:	f10c 0203 	add.w	r2, ip, #3
 800b53a:	1b52      	subs	r2, r2, r5
 800b53c:	f022 0203 	bic.w	r2, r2, #3
 800b540:	3d03      	subs	r5, #3
 800b542:	45ac      	cmp	ip, r5
 800b544:	bf38      	it	cc
 800b546:	2200      	movcc	r2, #0
 800b548:	441a      	add	r2, r3
 800b54a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b54e:	b17b      	cbz	r3, 800b570 <__mdiff+0x108>
 800b550:	6107      	str	r7, [r0, #16]
 800b552:	e7a3      	b.n	800b49c <__mdiff+0x34>
 800b554:	f856 8b04 	ldr.w	r8, [r6], #4
 800b558:	fa11 f288 	uxtah	r2, r1, r8
 800b55c:	1414      	asrs	r4, r2, #16
 800b55e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b562:	b292      	uxth	r2, r2
 800b564:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b568:	f84e 2b04 	str.w	r2, [lr], #4
 800b56c:	1421      	asrs	r1, r4, #16
 800b56e:	e7e0      	b.n	800b532 <__mdiff+0xca>
 800b570:	3f01      	subs	r7, #1
 800b572:	e7ea      	b.n	800b54a <__mdiff+0xe2>
 800b574:	0800cd0b 	.word	0x0800cd0b
 800b578:	0800cd1c 	.word	0x0800cd1c

0800b57c <__d2b>:
 800b57c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b580:	4689      	mov	r9, r1
 800b582:	2101      	movs	r1, #1
 800b584:	ec57 6b10 	vmov	r6, r7, d0
 800b588:	4690      	mov	r8, r2
 800b58a:	f7ff fccf 	bl	800af2c <_Balloc>
 800b58e:	4604      	mov	r4, r0
 800b590:	b930      	cbnz	r0, 800b5a0 <__d2b+0x24>
 800b592:	4602      	mov	r2, r0
 800b594:	4b25      	ldr	r3, [pc, #148]	; (800b62c <__d2b+0xb0>)
 800b596:	4826      	ldr	r0, [pc, #152]	; (800b630 <__d2b+0xb4>)
 800b598:	f240 310a 	movw	r1, #778	; 0x30a
 800b59c:	f000 f950 	bl	800b840 <__assert_func>
 800b5a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b5a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b5a8:	bb35      	cbnz	r5, 800b5f8 <__d2b+0x7c>
 800b5aa:	2e00      	cmp	r6, #0
 800b5ac:	9301      	str	r3, [sp, #4]
 800b5ae:	d028      	beq.n	800b602 <__d2b+0x86>
 800b5b0:	4668      	mov	r0, sp
 800b5b2:	9600      	str	r6, [sp, #0]
 800b5b4:	f7ff fd82 	bl	800b0bc <__lo0bits>
 800b5b8:	9900      	ldr	r1, [sp, #0]
 800b5ba:	b300      	cbz	r0, 800b5fe <__d2b+0x82>
 800b5bc:	9a01      	ldr	r2, [sp, #4]
 800b5be:	f1c0 0320 	rsb	r3, r0, #32
 800b5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c6:	430b      	orrs	r3, r1
 800b5c8:	40c2      	lsrs	r2, r0
 800b5ca:	6163      	str	r3, [r4, #20]
 800b5cc:	9201      	str	r2, [sp, #4]
 800b5ce:	9b01      	ldr	r3, [sp, #4]
 800b5d0:	61a3      	str	r3, [r4, #24]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	bf14      	ite	ne
 800b5d6:	2202      	movne	r2, #2
 800b5d8:	2201      	moveq	r2, #1
 800b5da:	6122      	str	r2, [r4, #16]
 800b5dc:	b1d5      	cbz	r5, 800b614 <__d2b+0x98>
 800b5de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b5e2:	4405      	add	r5, r0
 800b5e4:	f8c9 5000 	str.w	r5, [r9]
 800b5e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b5ec:	f8c8 0000 	str.w	r0, [r8]
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	b003      	add	sp, #12
 800b5f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5fc:	e7d5      	b.n	800b5aa <__d2b+0x2e>
 800b5fe:	6161      	str	r1, [r4, #20]
 800b600:	e7e5      	b.n	800b5ce <__d2b+0x52>
 800b602:	a801      	add	r0, sp, #4
 800b604:	f7ff fd5a 	bl	800b0bc <__lo0bits>
 800b608:	9b01      	ldr	r3, [sp, #4]
 800b60a:	6163      	str	r3, [r4, #20]
 800b60c:	2201      	movs	r2, #1
 800b60e:	6122      	str	r2, [r4, #16]
 800b610:	3020      	adds	r0, #32
 800b612:	e7e3      	b.n	800b5dc <__d2b+0x60>
 800b614:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b618:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b61c:	f8c9 0000 	str.w	r0, [r9]
 800b620:	6918      	ldr	r0, [r3, #16]
 800b622:	f7ff fd2b 	bl	800b07c <__hi0bits>
 800b626:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b62a:	e7df      	b.n	800b5ec <__d2b+0x70>
 800b62c:	0800cd0b 	.word	0x0800cd0b
 800b630:	0800cd1c 	.word	0x0800cd1c

0800b634 <_calloc_r>:
 800b634:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b636:	fba1 2402 	umull	r2, r4, r1, r2
 800b63a:	b94c      	cbnz	r4, 800b650 <_calloc_r+0x1c>
 800b63c:	4611      	mov	r1, r2
 800b63e:	9201      	str	r2, [sp, #4]
 800b640:	f000 f87a 	bl	800b738 <_malloc_r>
 800b644:	9a01      	ldr	r2, [sp, #4]
 800b646:	4605      	mov	r5, r0
 800b648:	b930      	cbnz	r0, 800b658 <_calloc_r+0x24>
 800b64a:	4628      	mov	r0, r5
 800b64c:	b003      	add	sp, #12
 800b64e:	bd30      	pop	{r4, r5, pc}
 800b650:	220c      	movs	r2, #12
 800b652:	6002      	str	r2, [r0, #0]
 800b654:	2500      	movs	r5, #0
 800b656:	e7f8      	b.n	800b64a <_calloc_r+0x16>
 800b658:	4621      	mov	r1, r4
 800b65a:	f7fe f96f 	bl	800993c <memset>
 800b65e:	e7f4      	b.n	800b64a <_calloc_r+0x16>

0800b660 <_free_r>:
 800b660:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b662:	2900      	cmp	r1, #0
 800b664:	d044      	beq.n	800b6f0 <_free_r+0x90>
 800b666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b66a:	9001      	str	r0, [sp, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	f1a1 0404 	sub.w	r4, r1, #4
 800b672:	bfb8      	it	lt
 800b674:	18e4      	addlt	r4, r4, r3
 800b676:	f000 f925 	bl	800b8c4 <__malloc_lock>
 800b67a:	4a1e      	ldr	r2, [pc, #120]	; (800b6f4 <_free_r+0x94>)
 800b67c:	9801      	ldr	r0, [sp, #4]
 800b67e:	6813      	ldr	r3, [r2, #0]
 800b680:	b933      	cbnz	r3, 800b690 <_free_r+0x30>
 800b682:	6063      	str	r3, [r4, #4]
 800b684:	6014      	str	r4, [r2, #0]
 800b686:	b003      	add	sp, #12
 800b688:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b68c:	f000 b920 	b.w	800b8d0 <__malloc_unlock>
 800b690:	42a3      	cmp	r3, r4
 800b692:	d908      	bls.n	800b6a6 <_free_r+0x46>
 800b694:	6825      	ldr	r5, [r4, #0]
 800b696:	1961      	adds	r1, r4, r5
 800b698:	428b      	cmp	r3, r1
 800b69a:	bf01      	itttt	eq
 800b69c:	6819      	ldreq	r1, [r3, #0]
 800b69e:	685b      	ldreq	r3, [r3, #4]
 800b6a0:	1949      	addeq	r1, r1, r5
 800b6a2:	6021      	streq	r1, [r4, #0]
 800b6a4:	e7ed      	b.n	800b682 <_free_r+0x22>
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	b10b      	cbz	r3, 800b6b0 <_free_r+0x50>
 800b6ac:	42a3      	cmp	r3, r4
 800b6ae:	d9fa      	bls.n	800b6a6 <_free_r+0x46>
 800b6b0:	6811      	ldr	r1, [r2, #0]
 800b6b2:	1855      	adds	r5, r2, r1
 800b6b4:	42a5      	cmp	r5, r4
 800b6b6:	d10b      	bne.n	800b6d0 <_free_r+0x70>
 800b6b8:	6824      	ldr	r4, [r4, #0]
 800b6ba:	4421      	add	r1, r4
 800b6bc:	1854      	adds	r4, r2, r1
 800b6be:	42a3      	cmp	r3, r4
 800b6c0:	6011      	str	r1, [r2, #0]
 800b6c2:	d1e0      	bne.n	800b686 <_free_r+0x26>
 800b6c4:	681c      	ldr	r4, [r3, #0]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	6053      	str	r3, [r2, #4]
 800b6ca:	4421      	add	r1, r4
 800b6cc:	6011      	str	r1, [r2, #0]
 800b6ce:	e7da      	b.n	800b686 <_free_r+0x26>
 800b6d0:	d902      	bls.n	800b6d8 <_free_r+0x78>
 800b6d2:	230c      	movs	r3, #12
 800b6d4:	6003      	str	r3, [r0, #0]
 800b6d6:	e7d6      	b.n	800b686 <_free_r+0x26>
 800b6d8:	6825      	ldr	r5, [r4, #0]
 800b6da:	1961      	adds	r1, r4, r5
 800b6dc:	428b      	cmp	r3, r1
 800b6de:	bf04      	itt	eq
 800b6e0:	6819      	ldreq	r1, [r3, #0]
 800b6e2:	685b      	ldreq	r3, [r3, #4]
 800b6e4:	6063      	str	r3, [r4, #4]
 800b6e6:	bf04      	itt	eq
 800b6e8:	1949      	addeq	r1, r1, r5
 800b6ea:	6021      	streq	r1, [r4, #0]
 800b6ec:	6054      	str	r4, [r2, #4]
 800b6ee:	e7ca      	b.n	800b686 <_free_r+0x26>
 800b6f0:	b003      	add	sp, #12
 800b6f2:	bd30      	pop	{r4, r5, pc}
 800b6f4:	20000d8c 	.word	0x20000d8c

0800b6f8 <sbrk_aligned>:
 800b6f8:	b570      	push	{r4, r5, r6, lr}
 800b6fa:	4e0e      	ldr	r6, [pc, #56]	; (800b734 <sbrk_aligned+0x3c>)
 800b6fc:	460c      	mov	r4, r1
 800b6fe:	6831      	ldr	r1, [r6, #0]
 800b700:	4605      	mov	r5, r0
 800b702:	b911      	cbnz	r1, 800b70a <sbrk_aligned+0x12>
 800b704:	f000 f88c 	bl	800b820 <_sbrk_r>
 800b708:	6030      	str	r0, [r6, #0]
 800b70a:	4621      	mov	r1, r4
 800b70c:	4628      	mov	r0, r5
 800b70e:	f000 f887 	bl	800b820 <_sbrk_r>
 800b712:	1c43      	adds	r3, r0, #1
 800b714:	d00a      	beq.n	800b72c <sbrk_aligned+0x34>
 800b716:	1cc4      	adds	r4, r0, #3
 800b718:	f024 0403 	bic.w	r4, r4, #3
 800b71c:	42a0      	cmp	r0, r4
 800b71e:	d007      	beq.n	800b730 <sbrk_aligned+0x38>
 800b720:	1a21      	subs	r1, r4, r0
 800b722:	4628      	mov	r0, r5
 800b724:	f000 f87c 	bl	800b820 <_sbrk_r>
 800b728:	3001      	adds	r0, #1
 800b72a:	d101      	bne.n	800b730 <sbrk_aligned+0x38>
 800b72c:	f04f 34ff 	mov.w	r4, #4294967295
 800b730:	4620      	mov	r0, r4
 800b732:	bd70      	pop	{r4, r5, r6, pc}
 800b734:	20000d90 	.word	0x20000d90

0800b738 <_malloc_r>:
 800b738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b73c:	1ccd      	adds	r5, r1, #3
 800b73e:	f025 0503 	bic.w	r5, r5, #3
 800b742:	3508      	adds	r5, #8
 800b744:	2d0c      	cmp	r5, #12
 800b746:	bf38      	it	cc
 800b748:	250c      	movcc	r5, #12
 800b74a:	2d00      	cmp	r5, #0
 800b74c:	4607      	mov	r7, r0
 800b74e:	db01      	blt.n	800b754 <_malloc_r+0x1c>
 800b750:	42a9      	cmp	r1, r5
 800b752:	d905      	bls.n	800b760 <_malloc_r+0x28>
 800b754:	230c      	movs	r3, #12
 800b756:	603b      	str	r3, [r7, #0]
 800b758:	2600      	movs	r6, #0
 800b75a:	4630      	mov	r0, r6
 800b75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b760:	4e2e      	ldr	r6, [pc, #184]	; (800b81c <_malloc_r+0xe4>)
 800b762:	f000 f8af 	bl	800b8c4 <__malloc_lock>
 800b766:	6833      	ldr	r3, [r6, #0]
 800b768:	461c      	mov	r4, r3
 800b76a:	bb34      	cbnz	r4, 800b7ba <_malloc_r+0x82>
 800b76c:	4629      	mov	r1, r5
 800b76e:	4638      	mov	r0, r7
 800b770:	f7ff ffc2 	bl	800b6f8 <sbrk_aligned>
 800b774:	1c43      	adds	r3, r0, #1
 800b776:	4604      	mov	r4, r0
 800b778:	d14d      	bne.n	800b816 <_malloc_r+0xde>
 800b77a:	6834      	ldr	r4, [r6, #0]
 800b77c:	4626      	mov	r6, r4
 800b77e:	2e00      	cmp	r6, #0
 800b780:	d140      	bne.n	800b804 <_malloc_r+0xcc>
 800b782:	6823      	ldr	r3, [r4, #0]
 800b784:	4631      	mov	r1, r6
 800b786:	4638      	mov	r0, r7
 800b788:	eb04 0803 	add.w	r8, r4, r3
 800b78c:	f000 f848 	bl	800b820 <_sbrk_r>
 800b790:	4580      	cmp	r8, r0
 800b792:	d13a      	bne.n	800b80a <_malloc_r+0xd2>
 800b794:	6821      	ldr	r1, [r4, #0]
 800b796:	3503      	adds	r5, #3
 800b798:	1a6d      	subs	r5, r5, r1
 800b79a:	f025 0503 	bic.w	r5, r5, #3
 800b79e:	3508      	adds	r5, #8
 800b7a0:	2d0c      	cmp	r5, #12
 800b7a2:	bf38      	it	cc
 800b7a4:	250c      	movcc	r5, #12
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	4638      	mov	r0, r7
 800b7aa:	f7ff ffa5 	bl	800b6f8 <sbrk_aligned>
 800b7ae:	3001      	adds	r0, #1
 800b7b0:	d02b      	beq.n	800b80a <_malloc_r+0xd2>
 800b7b2:	6823      	ldr	r3, [r4, #0]
 800b7b4:	442b      	add	r3, r5
 800b7b6:	6023      	str	r3, [r4, #0]
 800b7b8:	e00e      	b.n	800b7d8 <_malloc_r+0xa0>
 800b7ba:	6822      	ldr	r2, [r4, #0]
 800b7bc:	1b52      	subs	r2, r2, r5
 800b7be:	d41e      	bmi.n	800b7fe <_malloc_r+0xc6>
 800b7c0:	2a0b      	cmp	r2, #11
 800b7c2:	d916      	bls.n	800b7f2 <_malloc_r+0xba>
 800b7c4:	1961      	adds	r1, r4, r5
 800b7c6:	42a3      	cmp	r3, r4
 800b7c8:	6025      	str	r5, [r4, #0]
 800b7ca:	bf18      	it	ne
 800b7cc:	6059      	strne	r1, [r3, #4]
 800b7ce:	6863      	ldr	r3, [r4, #4]
 800b7d0:	bf08      	it	eq
 800b7d2:	6031      	streq	r1, [r6, #0]
 800b7d4:	5162      	str	r2, [r4, r5]
 800b7d6:	604b      	str	r3, [r1, #4]
 800b7d8:	4638      	mov	r0, r7
 800b7da:	f104 060b 	add.w	r6, r4, #11
 800b7de:	f000 f877 	bl	800b8d0 <__malloc_unlock>
 800b7e2:	f026 0607 	bic.w	r6, r6, #7
 800b7e6:	1d23      	adds	r3, r4, #4
 800b7e8:	1af2      	subs	r2, r6, r3
 800b7ea:	d0b6      	beq.n	800b75a <_malloc_r+0x22>
 800b7ec:	1b9b      	subs	r3, r3, r6
 800b7ee:	50a3      	str	r3, [r4, r2]
 800b7f0:	e7b3      	b.n	800b75a <_malloc_r+0x22>
 800b7f2:	6862      	ldr	r2, [r4, #4]
 800b7f4:	42a3      	cmp	r3, r4
 800b7f6:	bf0c      	ite	eq
 800b7f8:	6032      	streq	r2, [r6, #0]
 800b7fa:	605a      	strne	r2, [r3, #4]
 800b7fc:	e7ec      	b.n	800b7d8 <_malloc_r+0xa0>
 800b7fe:	4623      	mov	r3, r4
 800b800:	6864      	ldr	r4, [r4, #4]
 800b802:	e7b2      	b.n	800b76a <_malloc_r+0x32>
 800b804:	4634      	mov	r4, r6
 800b806:	6876      	ldr	r6, [r6, #4]
 800b808:	e7b9      	b.n	800b77e <_malloc_r+0x46>
 800b80a:	230c      	movs	r3, #12
 800b80c:	603b      	str	r3, [r7, #0]
 800b80e:	4638      	mov	r0, r7
 800b810:	f000 f85e 	bl	800b8d0 <__malloc_unlock>
 800b814:	e7a1      	b.n	800b75a <_malloc_r+0x22>
 800b816:	6025      	str	r5, [r4, #0]
 800b818:	e7de      	b.n	800b7d8 <_malloc_r+0xa0>
 800b81a:	bf00      	nop
 800b81c:	20000d8c 	.word	0x20000d8c

0800b820 <_sbrk_r>:
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	4d06      	ldr	r5, [pc, #24]	; (800b83c <_sbrk_r+0x1c>)
 800b824:	2300      	movs	r3, #0
 800b826:	4604      	mov	r4, r0
 800b828:	4608      	mov	r0, r1
 800b82a:	602b      	str	r3, [r5, #0]
 800b82c:	f7f7 fe9a 	bl	8003564 <_sbrk>
 800b830:	1c43      	adds	r3, r0, #1
 800b832:	d102      	bne.n	800b83a <_sbrk_r+0x1a>
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	b103      	cbz	r3, 800b83a <_sbrk_r+0x1a>
 800b838:	6023      	str	r3, [r4, #0]
 800b83a:	bd38      	pop	{r3, r4, r5, pc}
 800b83c:	20000d94 	.word	0x20000d94

0800b840 <__assert_func>:
 800b840:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b842:	4614      	mov	r4, r2
 800b844:	461a      	mov	r2, r3
 800b846:	4b09      	ldr	r3, [pc, #36]	; (800b86c <__assert_func+0x2c>)
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4605      	mov	r5, r0
 800b84c:	68d8      	ldr	r0, [r3, #12]
 800b84e:	b14c      	cbz	r4, 800b864 <__assert_func+0x24>
 800b850:	4b07      	ldr	r3, [pc, #28]	; (800b870 <__assert_func+0x30>)
 800b852:	9100      	str	r1, [sp, #0]
 800b854:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b858:	4906      	ldr	r1, [pc, #24]	; (800b874 <__assert_func+0x34>)
 800b85a:	462b      	mov	r3, r5
 800b85c:	f000 f80e 	bl	800b87c <fiprintf>
 800b860:	f000 fa64 	bl	800bd2c <abort>
 800b864:	4b04      	ldr	r3, [pc, #16]	; (800b878 <__assert_func+0x38>)
 800b866:	461c      	mov	r4, r3
 800b868:	e7f3      	b.n	800b852 <__assert_func+0x12>
 800b86a:	bf00      	nop
 800b86c:	20000010 	.word	0x20000010
 800b870:	0800ce74 	.word	0x0800ce74
 800b874:	0800ce81 	.word	0x0800ce81
 800b878:	0800ceaf 	.word	0x0800ceaf

0800b87c <fiprintf>:
 800b87c:	b40e      	push	{r1, r2, r3}
 800b87e:	b503      	push	{r0, r1, lr}
 800b880:	4601      	mov	r1, r0
 800b882:	ab03      	add	r3, sp, #12
 800b884:	4805      	ldr	r0, [pc, #20]	; (800b89c <fiprintf+0x20>)
 800b886:	f853 2b04 	ldr.w	r2, [r3], #4
 800b88a:	6800      	ldr	r0, [r0, #0]
 800b88c:	9301      	str	r3, [sp, #4]
 800b88e:	f000 f84f 	bl	800b930 <_vfiprintf_r>
 800b892:	b002      	add	sp, #8
 800b894:	f85d eb04 	ldr.w	lr, [sp], #4
 800b898:	b003      	add	sp, #12
 800b89a:	4770      	bx	lr
 800b89c:	20000010 	.word	0x20000010

0800b8a0 <__ascii_mbtowc>:
 800b8a0:	b082      	sub	sp, #8
 800b8a2:	b901      	cbnz	r1, 800b8a6 <__ascii_mbtowc+0x6>
 800b8a4:	a901      	add	r1, sp, #4
 800b8a6:	b142      	cbz	r2, 800b8ba <__ascii_mbtowc+0x1a>
 800b8a8:	b14b      	cbz	r3, 800b8be <__ascii_mbtowc+0x1e>
 800b8aa:	7813      	ldrb	r3, [r2, #0]
 800b8ac:	600b      	str	r3, [r1, #0]
 800b8ae:	7812      	ldrb	r2, [r2, #0]
 800b8b0:	1e10      	subs	r0, r2, #0
 800b8b2:	bf18      	it	ne
 800b8b4:	2001      	movne	r0, #1
 800b8b6:	b002      	add	sp, #8
 800b8b8:	4770      	bx	lr
 800b8ba:	4610      	mov	r0, r2
 800b8bc:	e7fb      	b.n	800b8b6 <__ascii_mbtowc+0x16>
 800b8be:	f06f 0001 	mvn.w	r0, #1
 800b8c2:	e7f8      	b.n	800b8b6 <__ascii_mbtowc+0x16>

0800b8c4 <__malloc_lock>:
 800b8c4:	4801      	ldr	r0, [pc, #4]	; (800b8cc <__malloc_lock+0x8>)
 800b8c6:	f000 bbf1 	b.w	800c0ac <__retarget_lock_acquire_recursive>
 800b8ca:	bf00      	nop
 800b8cc:	20000d98 	.word	0x20000d98

0800b8d0 <__malloc_unlock>:
 800b8d0:	4801      	ldr	r0, [pc, #4]	; (800b8d8 <__malloc_unlock+0x8>)
 800b8d2:	f000 bbec 	b.w	800c0ae <__retarget_lock_release_recursive>
 800b8d6:	bf00      	nop
 800b8d8:	20000d98 	.word	0x20000d98

0800b8dc <__sfputc_r>:
 800b8dc:	6893      	ldr	r3, [r2, #8]
 800b8de:	3b01      	subs	r3, #1
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	b410      	push	{r4}
 800b8e4:	6093      	str	r3, [r2, #8]
 800b8e6:	da08      	bge.n	800b8fa <__sfputc_r+0x1e>
 800b8e8:	6994      	ldr	r4, [r2, #24]
 800b8ea:	42a3      	cmp	r3, r4
 800b8ec:	db01      	blt.n	800b8f2 <__sfputc_r+0x16>
 800b8ee:	290a      	cmp	r1, #10
 800b8f0:	d103      	bne.n	800b8fa <__sfputc_r+0x1e>
 800b8f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8f6:	f000 b94b 	b.w	800bb90 <__swbuf_r>
 800b8fa:	6813      	ldr	r3, [r2, #0]
 800b8fc:	1c58      	adds	r0, r3, #1
 800b8fe:	6010      	str	r0, [r2, #0]
 800b900:	7019      	strb	r1, [r3, #0]
 800b902:	4608      	mov	r0, r1
 800b904:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b908:	4770      	bx	lr

0800b90a <__sfputs_r>:
 800b90a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90c:	4606      	mov	r6, r0
 800b90e:	460f      	mov	r7, r1
 800b910:	4614      	mov	r4, r2
 800b912:	18d5      	adds	r5, r2, r3
 800b914:	42ac      	cmp	r4, r5
 800b916:	d101      	bne.n	800b91c <__sfputs_r+0x12>
 800b918:	2000      	movs	r0, #0
 800b91a:	e007      	b.n	800b92c <__sfputs_r+0x22>
 800b91c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b920:	463a      	mov	r2, r7
 800b922:	4630      	mov	r0, r6
 800b924:	f7ff ffda 	bl	800b8dc <__sfputc_r>
 800b928:	1c43      	adds	r3, r0, #1
 800b92a:	d1f3      	bne.n	800b914 <__sfputs_r+0xa>
 800b92c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b930 <_vfiprintf_r>:
 800b930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b934:	460d      	mov	r5, r1
 800b936:	b09d      	sub	sp, #116	; 0x74
 800b938:	4614      	mov	r4, r2
 800b93a:	4698      	mov	r8, r3
 800b93c:	4606      	mov	r6, r0
 800b93e:	b118      	cbz	r0, 800b948 <_vfiprintf_r+0x18>
 800b940:	6983      	ldr	r3, [r0, #24]
 800b942:	b90b      	cbnz	r3, 800b948 <_vfiprintf_r+0x18>
 800b944:	f000 fb14 	bl	800bf70 <__sinit>
 800b948:	4b89      	ldr	r3, [pc, #548]	; (800bb70 <_vfiprintf_r+0x240>)
 800b94a:	429d      	cmp	r5, r3
 800b94c:	d11b      	bne.n	800b986 <_vfiprintf_r+0x56>
 800b94e:	6875      	ldr	r5, [r6, #4]
 800b950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b952:	07d9      	lsls	r1, r3, #31
 800b954:	d405      	bmi.n	800b962 <_vfiprintf_r+0x32>
 800b956:	89ab      	ldrh	r3, [r5, #12]
 800b958:	059a      	lsls	r2, r3, #22
 800b95a:	d402      	bmi.n	800b962 <_vfiprintf_r+0x32>
 800b95c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b95e:	f000 fba5 	bl	800c0ac <__retarget_lock_acquire_recursive>
 800b962:	89ab      	ldrh	r3, [r5, #12]
 800b964:	071b      	lsls	r3, r3, #28
 800b966:	d501      	bpl.n	800b96c <_vfiprintf_r+0x3c>
 800b968:	692b      	ldr	r3, [r5, #16]
 800b96a:	b9eb      	cbnz	r3, 800b9a8 <_vfiprintf_r+0x78>
 800b96c:	4629      	mov	r1, r5
 800b96e:	4630      	mov	r0, r6
 800b970:	f000 f96e 	bl	800bc50 <__swsetup_r>
 800b974:	b1c0      	cbz	r0, 800b9a8 <_vfiprintf_r+0x78>
 800b976:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b978:	07dc      	lsls	r4, r3, #31
 800b97a:	d50e      	bpl.n	800b99a <_vfiprintf_r+0x6a>
 800b97c:	f04f 30ff 	mov.w	r0, #4294967295
 800b980:	b01d      	add	sp, #116	; 0x74
 800b982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b986:	4b7b      	ldr	r3, [pc, #492]	; (800bb74 <_vfiprintf_r+0x244>)
 800b988:	429d      	cmp	r5, r3
 800b98a:	d101      	bne.n	800b990 <_vfiprintf_r+0x60>
 800b98c:	68b5      	ldr	r5, [r6, #8]
 800b98e:	e7df      	b.n	800b950 <_vfiprintf_r+0x20>
 800b990:	4b79      	ldr	r3, [pc, #484]	; (800bb78 <_vfiprintf_r+0x248>)
 800b992:	429d      	cmp	r5, r3
 800b994:	bf08      	it	eq
 800b996:	68f5      	ldreq	r5, [r6, #12]
 800b998:	e7da      	b.n	800b950 <_vfiprintf_r+0x20>
 800b99a:	89ab      	ldrh	r3, [r5, #12]
 800b99c:	0598      	lsls	r0, r3, #22
 800b99e:	d4ed      	bmi.n	800b97c <_vfiprintf_r+0x4c>
 800b9a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9a2:	f000 fb84 	bl	800c0ae <__retarget_lock_release_recursive>
 800b9a6:	e7e9      	b.n	800b97c <_vfiprintf_r+0x4c>
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ac:	2320      	movs	r3, #32
 800b9ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b9b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b9b6:	2330      	movs	r3, #48	; 0x30
 800b9b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb7c <_vfiprintf_r+0x24c>
 800b9bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b9c0:	f04f 0901 	mov.w	r9, #1
 800b9c4:	4623      	mov	r3, r4
 800b9c6:	469a      	mov	sl, r3
 800b9c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9cc:	b10a      	cbz	r2, 800b9d2 <_vfiprintf_r+0xa2>
 800b9ce:	2a25      	cmp	r2, #37	; 0x25
 800b9d0:	d1f9      	bne.n	800b9c6 <_vfiprintf_r+0x96>
 800b9d2:	ebba 0b04 	subs.w	fp, sl, r4
 800b9d6:	d00b      	beq.n	800b9f0 <_vfiprintf_r+0xc0>
 800b9d8:	465b      	mov	r3, fp
 800b9da:	4622      	mov	r2, r4
 800b9dc:	4629      	mov	r1, r5
 800b9de:	4630      	mov	r0, r6
 800b9e0:	f7ff ff93 	bl	800b90a <__sfputs_r>
 800b9e4:	3001      	adds	r0, #1
 800b9e6:	f000 80aa 	beq.w	800bb3e <_vfiprintf_r+0x20e>
 800b9ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9ec:	445a      	add	r2, fp
 800b9ee:	9209      	str	r2, [sp, #36]	; 0x24
 800b9f0:	f89a 3000 	ldrb.w	r3, [sl]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f000 80a2 	beq.w	800bb3e <_vfiprintf_r+0x20e>
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800ba00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba04:	f10a 0a01 	add.w	sl, sl, #1
 800ba08:	9304      	str	r3, [sp, #16]
 800ba0a:	9307      	str	r3, [sp, #28]
 800ba0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba10:	931a      	str	r3, [sp, #104]	; 0x68
 800ba12:	4654      	mov	r4, sl
 800ba14:	2205      	movs	r2, #5
 800ba16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba1a:	4858      	ldr	r0, [pc, #352]	; (800bb7c <_vfiprintf_r+0x24c>)
 800ba1c:	f7f4 fbe0 	bl	80001e0 <memchr>
 800ba20:	9a04      	ldr	r2, [sp, #16]
 800ba22:	b9d8      	cbnz	r0, 800ba5c <_vfiprintf_r+0x12c>
 800ba24:	06d1      	lsls	r1, r2, #27
 800ba26:	bf44      	itt	mi
 800ba28:	2320      	movmi	r3, #32
 800ba2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba2e:	0713      	lsls	r3, r2, #28
 800ba30:	bf44      	itt	mi
 800ba32:	232b      	movmi	r3, #43	; 0x2b
 800ba34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba38:	f89a 3000 	ldrb.w	r3, [sl]
 800ba3c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba3e:	d015      	beq.n	800ba6c <_vfiprintf_r+0x13c>
 800ba40:	9a07      	ldr	r2, [sp, #28]
 800ba42:	4654      	mov	r4, sl
 800ba44:	2000      	movs	r0, #0
 800ba46:	f04f 0c0a 	mov.w	ip, #10
 800ba4a:	4621      	mov	r1, r4
 800ba4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba50:	3b30      	subs	r3, #48	; 0x30
 800ba52:	2b09      	cmp	r3, #9
 800ba54:	d94e      	bls.n	800baf4 <_vfiprintf_r+0x1c4>
 800ba56:	b1b0      	cbz	r0, 800ba86 <_vfiprintf_r+0x156>
 800ba58:	9207      	str	r2, [sp, #28]
 800ba5a:	e014      	b.n	800ba86 <_vfiprintf_r+0x156>
 800ba5c:	eba0 0308 	sub.w	r3, r0, r8
 800ba60:	fa09 f303 	lsl.w	r3, r9, r3
 800ba64:	4313      	orrs	r3, r2
 800ba66:	9304      	str	r3, [sp, #16]
 800ba68:	46a2      	mov	sl, r4
 800ba6a:	e7d2      	b.n	800ba12 <_vfiprintf_r+0xe2>
 800ba6c:	9b03      	ldr	r3, [sp, #12]
 800ba6e:	1d19      	adds	r1, r3, #4
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	9103      	str	r1, [sp, #12]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	bfbb      	ittet	lt
 800ba78:	425b      	neglt	r3, r3
 800ba7a:	f042 0202 	orrlt.w	r2, r2, #2
 800ba7e:	9307      	strge	r3, [sp, #28]
 800ba80:	9307      	strlt	r3, [sp, #28]
 800ba82:	bfb8      	it	lt
 800ba84:	9204      	strlt	r2, [sp, #16]
 800ba86:	7823      	ldrb	r3, [r4, #0]
 800ba88:	2b2e      	cmp	r3, #46	; 0x2e
 800ba8a:	d10c      	bne.n	800baa6 <_vfiprintf_r+0x176>
 800ba8c:	7863      	ldrb	r3, [r4, #1]
 800ba8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ba90:	d135      	bne.n	800bafe <_vfiprintf_r+0x1ce>
 800ba92:	9b03      	ldr	r3, [sp, #12]
 800ba94:	1d1a      	adds	r2, r3, #4
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	9203      	str	r2, [sp, #12]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	bfb8      	it	lt
 800ba9e:	f04f 33ff 	movlt.w	r3, #4294967295
 800baa2:	3402      	adds	r4, #2
 800baa4:	9305      	str	r3, [sp, #20]
 800baa6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb8c <_vfiprintf_r+0x25c>
 800baaa:	7821      	ldrb	r1, [r4, #0]
 800baac:	2203      	movs	r2, #3
 800baae:	4650      	mov	r0, sl
 800bab0:	f7f4 fb96 	bl	80001e0 <memchr>
 800bab4:	b140      	cbz	r0, 800bac8 <_vfiprintf_r+0x198>
 800bab6:	2340      	movs	r3, #64	; 0x40
 800bab8:	eba0 000a 	sub.w	r0, r0, sl
 800babc:	fa03 f000 	lsl.w	r0, r3, r0
 800bac0:	9b04      	ldr	r3, [sp, #16]
 800bac2:	4303      	orrs	r3, r0
 800bac4:	3401      	adds	r4, #1
 800bac6:	9304      	str	r3, [sp, #16]
 800bac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bacc:	482c      	ldr	r0, [pc, #176]	; (800bb80 <_vfiprintf_r+0x250>)
 800bace:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bad2:	2206      	movs	r2, #6
 800bad4:	f7f4 fb84 	bl	80001e0 <memchr>
 800bad8:	2800      	cmp	r0, #0
 800bada:	d03f      	beq.n	800bb5c <_vfiprintf_r+0x22c>
 800badc:	4b29      	ldr	r3, [pc, #164]	; (800bb84 <_vfiprintf_r+0x254>)
 800bade:	bb1b      	cbnz	r3, 800bb28 <_vfiprintf_r+0x1f8>
 800bae0:	9b03      	ldr	r3, [sp, #12]
 800bae2:	3307      	adds	r3, #7
 800bae4:	f023 0307 	bic.w	r3, r3, #7
 800bae8:	3308      	adds	r3, #8
 800baea:	9303      	str	r3, [sp, #12]
 800baec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baee:	443b      	add	r3, r7
 800baf0:	9309      	str	r3, [sp, #36]	; 0x24
 800baf2:	e767      	b.n	800b9c4 <_vfiprintf_r+0x94>
 800baf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800baf8:	460c      	mov	r4, r1
 800bafa:	2001      	movs	r0, #1
 800bafc:	e7a5      	b.n	800ba4a <_vfiprintf_r+0x11a>
 800bafe:	2300      	movs	r3, #0
 800bb00:	3401      	adds	r4, #1
 800bb02:	9305      	str	r3, [sp, #20]
 800bb04:	4619      	mov	r1, r3
 800bb06:	f04f 0c0a 	mov.w	ip, #10
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb10:	3a30      	subs	r2, #48	; 0x30
 800bb12:	2a09      	cmp	r2, #9
 800bb14:	d903      	bls.n	800bb1e <_vfiprintf_r+0x1ee>
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d0c5      	beq.n	800baa6 <_vfiprintf_r+0x176>
 800bb1a:	9105      	str	r1, [sp, #20]
 800bb1c:	e7c3      	b.n	800baa6 <_vfiprintf_r+0x176>
 800bb1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb22:	4604      	mov	r4, r0
 800bb24:	2301      	movs	r3, #1
 800bb26:	e7f0      	b.n	800bb0a <_vfiprintf_r+0x1da>
 800bb28:	ab03      	add	r3, sp, #12
 800bb2a:	9300      	str	r3, [sp, #0]
 800bb2c:	462a      	mov	r2, r5
 800bb2e:	4b16      	ldr	r3, [pc, #88]	; (800bb88 <_vfiprintf_r+0x258>)
 800bb30:	a904      	add	r1, sp, #16
 800bb32:	4630      	mov	r0, r6
 800bb34:	f7fd ffaa 	bl	8009a8c <_printf_float>
 800bb38:	4607      	mov	r7, r0
 800bb3a:	1c78      	adds	r0, r7, #1
 800bb3c:	d1d6      	bne.n	800baec <_vfiprintf_r+0x1bc>
 800bb3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb40:	07d9      	lsls	r1, r3, #31
 800bb42:	d405      	bmi.n	800bb50 <_vfiprintf_r+0x220>
 800bb44:	89ab      	ldrh	r3, [r5, #12]
 800bb46:	059a      	lsls	r2, r3, #22
 800bb48:	d402      	bmi.n	800bb50 <_vfiprintf_r+0x220>
 800bb4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb4c:	f000 faaf 	bl	800c0ae <__retarget_lock_release_recursive>
 800bb50:	89ab      	ldrh	r3, [r5, #12]
 800bb52:	065b      	lsls	r3, r3, #25
 800bb54:	f53f af12 	bmi.w	800b97c <_vfiprintf_r+0x4c>
 800bb58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb5a:	e711      	b.n	800b980 <_vfiprintf_r+0x50>
 800bb5c:	ab03      	add	r3, sp, #12
 800bb5e:	9300      	str	r3, [sp, #0]
 800bb60:	462a      	mov	r2, r5
 800bb62:	4b09      	ldr	r3, [pc, #36]	; (800bb88 <_vfiprintf_r+0x258>)
 800bb64:	a904      	add	r1, sp, #16
 800bb66:	4630      	mov	r0, r6
 800bb68:	f7fe fa34 	bl	8009fd4 <_printf_i>
 800bb6c:	e7e4      	b.n	800bb38 <_vfiprintf_r+0x208>
 800bb6e:	bf00      	nop
 800bb70:	0800cfec 	.word	0x0800cfec
 800bb74:	0800d00c 	.word	0x0800d00c
 800bb78:	0800cfcc 	.word	0x0800cfcc
 800bb7c:	0800ceba 	.word	0x0800ceba
 800bb80:	0800cec4 	.word	0x0800cec4
 800bb84:	08009a8d 	.word	0x08009a8d
 800bb88:	0800b90b 	.word	0x0800b90b
 800bb8c:	0800cec0 	.word	0x0800cec0

0800bb90 <__swbuf_r>:
 800bb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb92:	460e      	mov	r6, r1
 800bb94:	4614      	mov	r4, r2
 800bb96:	4605      	mov	r5, r0
 800bb98:	b118      	cbz	r0, 800bba2 <__swbuf_r+0x12>
 800bb9a:	6983      	ldr	r3, [r0, #24]
 800bb9c:	b90b      	cbnz	r3, 800bba2 <__swbuf_r+0x12>
 800bb9e:	f000 f9e7 	bl	800bf70 <__sinit>
 800bba2:	4b21      	ldr	r3, [pc, #132]	; (800bc28 <__swbuf_r+0x98>)
 800bba4:	429c      	cmp	r4, r3
 800bba6:	d12b      	bne.n	800bc00 <__swbuf_r+0x70>
 800bba8:	686c      	ldr	r4, [r5, #4]
 800bbaa:	69a3      	ldr	r3, [r4, #24]
 800bbac:	60a3      	str	r3, [r4, #8]
 800bbae:	89a3      	ldrh	r3, [r4, #12]
 800bbb0:	071a      	lsls	r2, r3, #28
 800bbb2:	d52f      	bpl.n	800bc14 <__swbuf_r+0x84>
 800bbb4:	6923      	ldr	r3, [r4, #16]
 800bbb6:	b36b      	cbz	r3, 800bc14 <__swbuf_r+0x84>
 800bbb8:	6923      	ldr	r3, [r4, #16]
 800bbba:	6820      	ldr	r0, [r4, #0]
 800bbbc:	1ac0      	subs	r0, r0, r3
 800bbbe:	6963      	ldr	r3, [r4, #20]
 800bbc0:	b2f6      	uxtb	r6, r6
 800bbc2:	4283      	cmp	r3, r0
 800bbc4:	4637      	mov	r7, r6
 800bbc6:	dc04      	bgt.n	800bbd2 <__swbuf_r+0x42>
 800bbc8:	4621      	mov	r1, r4
 800bbca:	4628      	mov	r0, r5
 800bbcc:	f000 f93c 	bl	800be48 <_fflush_r>
 800bbd0:	bb30      	cbnz	r0, 800bc20 <__swbuf_r+0x90>
 800bbd2:	68a3      	ldr	r3, [r4, #8]
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	60a3      	str	r3, [r4, #8]
 800bbd8:	6823      	ldr	r3, [r4, #0]
 800bbda:	1c5a      	adds	r2, r3, #1
 800bbdc:	6022      	str	r2, [r4, #0]
 800bbde:	701e      	strb	r6, [r3, #0]
 800bbe0:	6963      	ldr	r3, [r4, #20]
 800bbe2:	3001      	adds	r0, #1
 800bbe4:	4283      	cmp	r3, r0
 800bbe6:	d004      	beq.n	800bbf2 <__swbuf_r+0x62>
 800bbe8:	89a3      	ldrh	r3, [r4, #12]
 800bbea:	07db      	lsls	r3, r3, #31
 800bbec:	d506      	bpl.n	800bbfc <__swbuf_r+0x6c>
 800bbee:	2e0a      	cmp	r6, #10
 800bbf0:	d104      	bne.n	800bbfc <__swbuf_r+0x6c>
 800bbf2:	4621      	mov	r1, r4
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	f000 f927 	bl	800be48 <_fflush_r>
 800bbfa:	b988      	cbnz	r0, 800bc20 <__swbuf_r+0x90>
 800bbfc:	4638      	mov	r0, r7
 800bbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc00:	4b0a      	ldr	r3, [pc, #40]	; (800bc2c <__swbuf_r+0x9c>)
 800bc02:	429c      	cmp	r4, r3
 800bc04:	d101      	bne.n	800bc0a <__swbuf_r+0x7a>
 800bc06:	68ac      	ldr	r4, [r5, #8]
 800bc08:	e7cf      	b.n	800bbaa <__swbuf_r+0x1a>
 800bc0a:	4b09      	ldr	r3, [pc, #36]	; (800bc30 <__swbuf_r+0xa0>)
 800bc0c:	429c      	cmp	r4, r3
 800bc0e:	bf08      	it	eq
 800bc10:	68ec      	ldreq	r4, [r5, #12]
 800bc12:	e7ca      	b.n	800bbaa <__swbuf_r+0x1a>
 800bc14:	4621      	mov	r1, r4
 800bc16:	4628      	mov	r0, r5
 800bc18:	f000 f81a 	bl	800bc50 <__swsetup_r>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	d0cb      	beq.n	800bbb8 <__swbuf_r+0x28>
 800bc20:	f04f 37ff 	mov.w	r7, #4294967295
 800bc24:	e7ea      	b.n	800bbfc <__swbuf_r+0x6c>
 800bc26:	bf00      	nop
 800bc28:	0800cfec 	.word	0x0800cfec
 800bc2c:	0800d00c 	.word	0x0800d00c
 800bc30:	0800cfcc 	.word	0x0800cfcc

0800bc34 <__ascii_wctomb>:
 800bc34:	b149      	cbz	r1, 800bc4a <__ascii_wctomb+0x16>
 800bc36:	2aff      	cmp	r2, #255	; 0xff
 800bc38:	bf85      	ittet	hi
 800bc3a:	238a      	movhi	r3, #138	; 0x8a
 800bc3c:	6003      	strhi	r3, [r0, #0]
 800bc3e:	700a      	strbls	r2, [r1, #0]
 800bc40:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc44:	bf98      	it	ls
 800bc46:	2001      	movls	r0, #1
 800bc48:	4770      	bx	lr
 800bc4a:	4608      	mov	r0, r1
 800bc4c:	4770      	bx	lr
	...

0800bc50 <__swsetup_r>:
 800bc50:	4b32      	ldr	r3, [pc, #200]	; (800bd1c <__swsetup_r+0xcc>)
 800bc52:	b570      	push	{r4, r5, r6, lr}
 800bc54:	681d      	ldr	r5, [r3, #0]
 800bc56:	4606      	mov	r6, r0
 800bc58:	460c      	mov	r4, r1
 800bc5a:	b125      	cbz	r5, 800bc66 <__swsetup_r+0x16>
 800bc5c:	69ab      	ldr	r3, [r5, #24]
 800bc5e:	b913      	cbnz	r3, 800bc66 <__swsetup_r+0x16>
 800bc60:	4628      	mov	r0, r5
 800bc62:	f000 f985 	bl	800bf70 <__sinit>
 800bc66:	4b2e      	ldr	r3, [pc, #184]	; (800bd20 <__swsetup_r+0xd0>)
 800bc68:	429c      	cmp	r4, r3
 800bc6a:	d10f      	bne.n	800bc8c <__swsetup_r+0x3c>
 800bc6c:	686c      	ldr	r4, [r5, #4]
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc74:	0719      	lsls	r1, r3, #28
 800bc76:	d42c      	bmi.n	800bcd2 <__swsetup_r+0x82>
 800bc78:	06dd      	lsls	r5, r3, #27
 800bc7a:	d411      	bmi.n	800bca0 <__swsetup_r+0x50>
 800bc7c:	2309      	movs	r3, #9
 800bc7e:	6033      	str	r3, [r6, #0]
 800bc80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc84:	81a3      	strh	r3, [r4, #12]
 800bc86:	f04f 30ff 	mov.w	r0, #4294967295
 800bc8a:	e03e      	b.n	800bd0a <__swsetup_r+0xba>
 800bc8c:	4b25      	ldr	r3, [pc, #148]	; (800bd24 <__swsetup_r+0xd4>)
 800bc8e:	429c      	cmp	r4, r3
 800bc90:	d101      	bne.n	800bc96 <__swsetup_r+0x46>
 800bc92:	68ac      	ldr	r4, [r5, #8]
 800bc94:	e7eb      	b.n	800bc6e <__swsetup_r+0x1e>
 800bc96:	4b24      	ldr	r3, [pc, #144]	; (800bd28 <__swsetup_r+0xd8>)
 800bc98:	429c      	cmp	r4, r3
 800bc9a:	bf08      	it	eq
 800bc9c:	68ec      	ldreq	r4, [r5, #12]
 800bc9e:	e7e6      	b.n	800bc6e <__swsetup_r+0x1e>
 800bca0:	0758      	lsls	r0, r3, #29
 800bca2:	d512      	bpl.n	800bcca <__swsetup_r+0x7a>
 800bca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bca6:	b141      	cbz	r1, 800bcba <__swsetup_r+0x6a>
 800bca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bcac:	4299      	cmp	r1, r3
 800bcae:	d002      	beq.n	800bcb6 <__swsetup_r+0x66>
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	f7ff fcd5 	bl	800b660 <_free_r>
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	6363      	str	r3, [r4, #52]	; 0x34
 800bcba:	89a3      	ldrh	r3, [r4, #12]
 800bcbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bcc0:	81a3      	strh	r3, [r4, #12]
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	6063      	str	r3, [r4, #4]
 800bcc6:	6923      	ldr	r3, [r4, #16]
 800bcc8:	6023      	str	r3, [r4, #0]
 800bcca:	89a3      	ldrh	r3, [r4, #12]
 800bccc:	f043 0308 	orr.w	r3, r3, #8
 800bcd0:	81a3      	strh	r3, [r4, #12]
 800bcd2:	6923      	ldr	r3, [r4, #16]
 800bcd4:	b94b      	cbnz	r3, 800bcea <__swsetup_r+0x9a>
 800bcd6:	89a3      	ldrh	r3, [r4, #12]
 800bcd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bcdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bce0:	d003      	beq.n	800bcea <__swsetup_r+0x9a>
 800bce2:	4621      	mov	r1, r4
 800bce4:	4630      	mov	r0, r6
 800bce6:	f000 fa09 	bl	800c0fc <__smakebuf_r>
 800bcea:	89a0      	ldrh	r0, [r4, #12]
 800bcec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcf0:	f010 0301 	ands.w	r3, r0, #1
 800bcf4:	d00a      	beq.n	800bd0c <__swsetup_r+0xbc>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	60a3      	str	r3, [r4, #8]
 800bcfa:	6963      	ldr	r3, [r4, #20]
 800bcfc:	425b      	negs	r3, r3
 800bcfe:	61a3      	str	r3, [r4, #24]
 800bd00:	6923      	ldr	r3, [r4, #16]
 800bd02:	b943      	cbnz	r3, 800bd16 <__swsetup_r+0xc6>
 800bd04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bd08:	d1ba      	bne.n	800bc80 <__swsetup_r+0x30>
 800bd0a:	bd70      	pop	{r4, r5, r6, pc}
 800bd0c:	0781      	lsls	r1, r0, #30
 800bd0e:	bf58      	it	pl
 800bd10:	6963      	ldrpl	r3, [r4, #20]
 800bd12:	60a3      	str	r3, [r4, #8]
 800bd14:	e7f4      	b.n	800bd00 <__swsetup_r+0xb0>
 800bd16:	2000      	movs	r0, #0
 800bd18:	e7f7      	b.n	800bd0a <__swsetup_r+0xba>
 800bd1a:	bf00      	nop
 800bd1c:	20000010 	.word	0x20000010
 800bd20:	0800cfec 	.word	0x0800cfec
 800bd24:	0800d00c 	.word	0x0800d00c
 800bd28:	0800cfcc 	.word	0x0800cfcc

0800bd2c <abort>:
 800bd2c:	b508      	push	{r3, lr}
 800bd2e:	2006      	movs	r0, #6
 800bd30:	f000 fa4c 	bl	800c1cc <raise>
 800bd34:	2001      	movs	r0, #1
 800bd36:	f7f7 fb9d 	bl	8003474 <_exit>
	...

0800bd3c <__sflush_r>:
 800bd3c:	898a      	ldrh	r2, [r1, #12]
 800bd3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd42:	4605      	mov	r5, r0
 800bd44:	0710      	lsls	r0, r2, #28
 800bd46:	460c      	mov	r4, r1
 800bd48:	d458      	bmi.n	800bdfc <__sflush_r+0xc0>
 800bd4a:	684b      	ldr	r3, [r1, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	dc05      	bgt.n	800bd5c <__sflush_r+0x20>
 800bd50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	dc02      	bgt.n	800bd5c <__sflush_r+0x20>
 800bd56:	2000      	movs	r0, #0
 800bd58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd5e:	2e00      	cmp	r6, #0
 800bd60:	d0f9      	beq.n	800bd56 <__sflush_r+0x1a>
 800bd62:	2300      	movs	r3, #0
 800bd64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd68:	682f      	ldr	r7, [r5, #0]
 800bd6a:	602b      	str	r3, [r5, #0]
 800bd6c:	d032      	beq.n	800bdd4 <__sflush_r+0x98>
 800bd6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd70:	89a3      	ldrh	r3, [r4, #12]
 800bd72:	075a      	lsls	r2, r3, #29
 800bd74:	d505      	bpl.n	800bd82 <__sflush_r+0x46>
 800bd76:	6863      	ldr	r3, [r4, #4]
 800bd78:	1ac0      	subs	r0, r0, r3
 800bd7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd7c:	b10b      	cbz	r3, 800bd82 <__sflush_r+0x46>
 800bd7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd80:	1ac0      	subs	r0, r0, r3
 800bd82:	2300      	movs	r3, #0
 800bd84:	4602      	mov	r2, r0
 800bd86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd88:	6a21      	ldr	r1, [r4, #32]
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	47b0      	blx	r6
 800bd8e:	1c43      	adds	r3, r0, #1
 800bd90:	89a3      	ldrh	r3, [r4, #12]
 800bd92:	d106      	bne.n	800bda2 <__sflush_r+0x66>
 800bd94:	6829      	ldr	r1, [r5, #0]
 800bd96:	291d      	cmp	r1, #29
 800bd98:	d82c      	bhi.n	800bdf4 <__sflush_r+0xb8>
 800bd9a:	4a2a      	ldr	r2, [pc, #168]	; (800be44 <__sflush_r+0x108>)
 800bd9c:	40ca      	lsrs	r2, r1
 800bd9e:	07d6      	lsls	r6, r2, #31
 800bda0:	d528      	bpl.n	800bdf4 <__sflush_r+0xb8>
 800bda2:	2200      	movs	r2, #0
 800bda4:	6062      	str	r2, [r4, #4]
 800bda6:	04d9      	lsls	r1, r3, #19
 800bda8:	6922      	ldr	r2, [r4, #16]
 800bdaa:	6022      	str	r2, [r4, #0]
 800bdac:	d504      	bpl.n	800bdb8 <__sflush_r+0x7c>
 800bdae:	1c42      	adds	r2, r0, #1
 800bdb0:	d101      	bne.n	800bdb6 <__sflush_r+0x7a>
 800bdb2:	682b      	ldr	r3, [r5, #0]
 800bdb4:	b903      	cbnz	r3, 800bdb8 <__sflush_r+0x7c>
 800bdb6:	6560      	str	r0, [r4, #84]	; 0x54
 800bdb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdba:	602f      	str	r7, [r5, #0]
 800bdbc:	2900      	cmp	r1, #0
 800bdbe:	d0ca      	beq.n	800bd56 <__sflush_r+0x1a>
 800bdc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdc4:	4299      	cmp	r1, r3
 800bdc6:	d002      	beq.n	800bdce <__sflush_r+0x92>
 800bdc8:	4628      	mov	r0, r5
 800bdca:	f7ff fc49 	bl	800b660 <_free_r>
 800bdce:	2000      	movs	r0, #0
 800bdd0:	6360      	str	r0, [r4, #52]	; 0x34
 800bdd2:	e7c1      	b.n	800bd58 <__sflush_r+0x1c>
 800bdd4:	6a21      	ldr	r1, [r4, #32]
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	4628      	mov	r0, r5
 800bdda:	47b0      	blx	r6
 800bddc:	1c41      	adds	r1, r0, #1
 800bdde:	d1c7      	bne.n	800bd70 <__sflush_r+0x34>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d0c4      	beq.n	800bd70 <__sflush_r+0x34>
 800bde6:	2b1d      	cmp	r3, #29
 800bde8:	d001      	beq.n	800bdee <__sflush_r+0xb2>
 800bdea:	2b16      	cmp	r3, #22
 800bdec:	d101      	bne.n	800bdf2 <__sflush_r+0xb6>
 800bdee:	602f      	str	r7, [r5, #0]
 800bdf0:	e7b1      	b.n	800bd56 <__sflush_r+0x1a>
 800bdf2:	89a3      	ldrh	r3, [r4, #12]
 800bdf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdf8:	81a3      	strh	r3, [r4, #12]
 800bdfa:	e7ad      	b.n	800bd58 <__sflush_r+0x1c>
 800bdfc:	690f      	ldr	r7, [r1, #16]
 800bdfe:	2f00      	cmp	r7, #0
 800be00:	d0a9      	beq.n	800bd56 <__sflush_r+0x1a>
 800be02:	0793      	lsls	r3, r2, #30
 800be04:	680e      	ldr	r6, [r1, #0]
 800be06:	bf08      	it	eq
 800be08:	694b      	ldreq	r3, [r1, #20]
 800be0a:	600f      	str	r7, [r1, #0]
 800be0c:	bf18      	it	ne
 800be0e:	2300      	movne	r3, #0
 800be10:	eba6 0807 	sub.w	r8, r6, r7
 800be14:	608b      	str	r3, [r1, #8]
 800be16:	f1b8 0f00 	cmp.w	r8, #0
 800be1a:	dd9c      	ble.n	800bd56 <__sflush_r+0x1a>
 800be1c:	6a21      	ldr	r1, [r4, #32]
 800be1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be20:	4643      	mov	r3, r8
 800be22:	463a      	mov	r2, r7
 800be24:	4628      	mov	r0, r5
 800be26:	47b0      	blx	r6
 800be28:	2800      	cmp	r0, #0
 800be2a:	dc06      	bgt.n	800be3a <__sflush_r+0xfe>
 800be2c:	89a3      	ldrh	r3, [r4, #12]
 800be2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be32:	81a3      	strh	r3, [r4, #12]
 800be34:	f04f 30ff 	mov.w	r0, #4294967295
 800be38:	e78e      	b.n	800bd58 <__sflush_r+0x1c>
 800be3a:	4407      	add	r7, r0
 800be3c:	eba8 0800 	sub.w	r8, r8, r0
 800be40:	e7e9      	b.n	800be16 <__sflush_r+0xda>
 800be42:	bf00      	nop
 800be44:	20400001 	.word	0x20400001

0800be48 <_fflush_r>:
 800be48:	b538      	push	{r3, r4, r5, lr}
 800be4a:	690b      	ldr	r3, [r1, #16]
 800be4c:	4605      	mov	r5, r0
 800be4e:	460c      	mov	r4, r1
 800be50:	b913      	cbnz	r3, 800be58 <_fflush_r+0x10>
 800be52:	2500      	movs	r5, #0
 800be54:	4628      	mov	r0, r5
 800be56:	bd38      	pop	{r3, r4, r5, pc}
 800be58:	b118      	cbz	r0, 800be62 <_fflush_r+0x1a>
 800be5a:	6983      	ldr	r3, [r0, #24]
 800be5c:	b90b      	cbnz	r3, 800be62 <_fflush_r+0x1a>
 800be5e:	f000 f887 	bl	800bf70 <__sinit>
 800be62:	4b14      	ldr	r3, [pc, #80]	; (800beb4 <_fflush_r+0x6c>)
 800be64:	429c      	cmp	r4, r3
 800be66:	d11b      	bne.n	800bea0 <_fflush_r+0x58>
 800be68:	686c      	ldr	r4, [r5, #4]
 800be6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d0ef      	beq.n	800be52 <_fflush_r+0xa>
 800be72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be74:	07d0      	lsls	r0, r2, #31
 800be76:	d404      	bmi.n	800be82 <_fflush_r+0x3a>
 800be78:	0599      	lsls	r1, r3, #22
 800be7a:	d402      	bmi.n	800be82 <_fflush_r+0x3a>
 800be7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be7e:	f000 f915 	bl	800c0ac <__retarget_lock_acquire_recursive>
 800be82:	4628      	mov	r0, r5
 800be84:	4621      	mov	r1, r4
 800be86:	f7ff ff59 	bl	800bd3c <__sflush_r>
 800be8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be8c:	07da      	lsls	r2, r3, #31
 800be8e:	4605      	mov	r5, r0
 800be90:	d4e0      	bmi.n	800be54 <_fflush_r+0xc>
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	059b      	lsls	r3, r3, #22
 800be96:	d4dd      	bmi.n	800be54 <_fflush_r+0xc>
 800be98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be9a:	f000 f908 	bl	800c0ae <__retarget_lock_release_recursive>
 800be9e:	e7d9      	b.n	800be54 <_fflush_r+0xc>
 800bea0:	4b05      	ldr	r3, [pc, #20]	; (800beb8 <_fflush_r+0x70>)
 800bea2:	429c      	cmp	r4, r3
 800bea4:	d101      	bne.n	800beaa <_fflush_r+0x62>
 800bea6:	68ac      	ldr	r4, [r5, #8]
 800bea8:	e7df      	b.n	800be6a <_fflush_r+0x22>
 800beaa:	4b04      	ldr	r3, [pc, #16]	; (800bebc <_fflush_r+0x74>)
 800beac:	429c      	cmp	r4, r3
 800beae:	bf08      	it	eq
 800beb0:	68ec      	ldreq	r4, [r5, #12]
 800beb2:	e7da      	b.n	800be6a <_fflush_r+0x22>
 800beb4:	0800cfec 	.word	0x0800cfec
 800beb8:	0800d00c 	.word	0x0800d00c
 800bebc:	0800cfcc 	.word	0x0800cfcc

0800bec0 <std>:
 800bec0:	2300      	movs	r3, #0
 800bec2:	b510      	push	{r4, lr}
 800bec4:	4604      	mov	r4, r0
 800bec6:	e9c0 3300 	strd	r3, r3, [r0]
 800beca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bece:	6083      	str	r3, [r0, #8]
 800bed0:	8181      	strh	r1, [r0, #12]
 800bed2:	6643      	str	r3, [r0, #100]	; 0x64
 800bed4:	81c2      	strh	r2, [r0, #14]
 800bed6:	6183      	str	r3, [r0, #24]
 800bed8:	4619      	mov	r1, r3
 800beda:	2208      	movs	r2, #8
 800bedc:	305c      	adds	r0, #92	; 0x5c
 800bede:	f7fd fd2d 	bl	800993c <memset>
 800bee2:	4b05      	ldr	r3, [pc, #20]	; (800bef8 <std+0x38>)
 800bee4:	6263      	str	r3, [r4, #36]	; 0x24
 800bee6:	4b05      	ldr	r3, [pc, #20]	; (800befc <std+0x3c>)
 800bee8:	62a3      	str	r3, [r4, #40]	; 0x28
 800beea:	4b05      	ldr	r3, [pc, #20]	; (800bf00 <std+0x40>)
 800beec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800beee:	4b05      	ldr	r3, [pc, #20]	; (800bf04 <std+0x44>)
 800bef0:	6224      	str	r4, [r4, #32]
 800bef2:	6323      	str	r3, [r4, #48]	; 0x30
 800bef4:	bd10      	pop	{r4, pc}
 800bef6:	bf00      	nop
 800bef8:	0800c205 	.word	0x0800c205
 800befc:	0800c227 	.word	0x0800c227
 800bf00:	0800c25f 	.word	0x0800c25f
 800bf04:	0800c283 	.word	0x0800c283

0800bf08 <_cleanup_r>:
 800bf08:	4901      	ldr	r1, [pc, #4]	; (800bf10 <_cleanup_r+0x8>)
 800bf0a:	f000 b8af 	b.w	800c06c <_fwalk_reent>
 800bf0e:	bf00      	nop
 800bf10:	0800be49 	.word	0x0800be49

0800bf14 <__sfmoreglue>:
 800bf14:	b570      	push	{r4, r5, r6, lr}
 800bf16:	2268      	movs	r2, #104	; 0x68
 800bf18:	1e4d      	subs	r5, r1, #1
 800bf1a:	4355      	muls	r5, r2
 800bf1c:	460e      	mov	r6, r1
 800bf1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf22:	f7ff fc09 	bl	800b738 <_malloc_r>
 800bf26:	4604      	mov	r4, r0
 800bf28:	b140      	cbz	r0, 800bf3c <__sfmoreglue+0x28>
 800bf2a:	2100      	movs	r1, #0
 800bf2c:	e9c0 1600 	strd	r1, r6, [r0]
 800bf30:	300c      	adds	r0, #12
 800bf32:	60a0      	str	r0, [r4, #8]
 800bf34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf38:	f7fd fd00 	bl	800993c <memset>
 800bf3c:	4620      	mov	r0, r4
 800bf3e:	bd70      	pop	{r4, r5, r6, pc}

0800bf40 <__sfp_lock_acquire>:
 800bf40:	4801      	ldr	r0, [pc, #4]	; (800bf48 <__sfp_lock_acquire+0x8>)
 800bf42:	f000 b8b3 	b.w	800c0ac <__retarget_lock_acquire_recursive>
 800bf46:	bf00      	nop
 800bf48:	20000d99 	.word	0x20000d99

0800bf4c <__sfp_lock_release>:
 800bf4c:	4801      	ldr	r0, [pc, #4]	; (800bf54 <__sfp_lock_release+0x8>)
 800bf4e:	f000 b8ae 	b.w	800c0ae <__retarget_lock_release_recursive>
 800bf52:	bf00      	nop
 800bf54:	20000d99 	.word	0x20000d99

0800bf58 <__sinit_lock_acquire>:
 800bf58:	4801      	ldr	r0, [pc, #4]	; (800bf60 <__sinit_lock_acquire+0x8>)
 800bf5a:	f000 b8a7 	b.w	800c0ac <__retarget_lock_acquire_recursive>
 800bf5e:	bf00      	nop
 800bf60:	20000d9a 	.word	0x20000d9a

0800bf64 <__sinit_lock_release>:
 800bf64:	4801      	ldr	r0, [pc, #4]	; (800bf6c <__sinit_lock_release+0x8>)
 800bf66:	f000 b8a2 	b.w	800c0ae <__retarget_lock_release_recursive>
 800bf6a:	bf00      	nop
 800bf6c:	20000d9a 	.word	0x20000d9a

0800bf70 <__sinit>:
 800bf70:	b510      	push	{r4, lr}
 800bf72:	4604      	mov	r4, r0
 800bf74:	f7ff fff0 	bl	800bf58 <__sinit_lock_acquire>
 800bf78:	69a3      	ldr	r3, [r4, #24]
 800bf7a:	b11b      	cbz	r3, 800bf84 <__sinit+0x14>
 800bf7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf80:	f7ff bff0 	b.w	800bf64 <__sinit_lock_release>
 800bf84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf88:	6523      	str	r3, [r4, #80]	; 0x50
 800bf8a:	4b13      	ldr	r3, [pc, #76]	; (800bfd8 <__sinit+0x68>)
 800bf8c:	4a13      	ldr	r2, [pc, #76]	; (800bfdc <__sinit+0x6c>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf92:	42a3      	cmp	r3, r4
 800bf94:	bf04      	itt	eq
 800bf96:	2301      	moveq	r3, #1
 800bf98:	61a3      	streq	r3, [r4, #24]
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	f000 f820 	bl	800bfe0 <__sfp>
 800bfa0:	6060      	str	r0, [r4, #4]
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f000 f81c 	bl	800bfe0 <__sfp>
 800bfa8:	60a0      	str	r0, [r4, #8]
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f000 f818 	bl	800bfe0 <__sfp>
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	60e0      	str	r0, [r4, #12]
 800bfb4:	2104      	movs	r1, #4
 800bfb6:	6860      	ldr	r0, [r4, #4]
 800bfb8:	f7ff ff82 	bl	800bec0 <std>
 800bfbc:	68a0      	ldr	r0, [r4, #8]
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	2109      	movs	r1, #9
 800bfc2:	f7ff ff7d 	bl	800bec0 <std>
 800bfc6:	68e0      	ldr	r0, [r4, #12]
 800bfc8:	2202      	movs	r2, #2
 800bfca:	2112      	movs	r1, #18
 800bfcc:	f7ff ff78 	bl	800bec0 <std>
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	61a3      	str	r3, [r4, #24]
 800bfd4:	e7d2      	b.n	800bf7c <__sinit+0xc>
 800bfd6:	bf00      	nop
 800bfd8:	0800cc54 	.word	0x0800cc54
 800bfdc:	0800bf09 	.word	0x0800bf09

0800bfe0 <__sfp>:
 800bfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe2:	4607      	mov	r7, r0
 800bfe4:	f7ff ffac 	bl	800bf40 <__sfp_lock_acquire>
 800bfe8:	4b1e      	ldr	r3, [pc, #120]	; (800c064 <__sfp+0x84>)
 800bfea:	681e      	ldr	r6, [r3, #0]
 800bfec:	69b3      	ldr	r3, [r6, #24]
 800bfee:	b913      	cbnz	r3, 800bff6 <__sfp+0x16>
 800bff0:	4630      	mov	r0, r6
 800bff2:	f7ff ffbd 	bl	800bf70 <__sinit>
 800bff6:	3648      	adds	r6, #72	; 0x48
 800bff8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bffc:	3b01      	subs	r3, #1
 800bffe:	d503      	bpl.n	800c008 <__sfp+0x28>
 800c000:	6833      	ldr	r3, [r6, #0]
 800c002:	b30b      	cbz	r3, 800c048 <__sfp+0x68>
 800c004:	6836      	ldr	r6, [r6, #0]
 800c006:	e7f7      	b.n	800bff8 <__sfp+0x18>
 800c008:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c00c:	b9d5      	cbnz	r5, 800c044 <__sfp+0x64>
 800c00e:	4b16      	ldr	r3, [pc, #88]	; (800c068 <__sfp+0x88>)
 800c010:	60e3      	str	r3, [r4, #12]
 800c012:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c016:	6665      	str	r5, [r4, #100]	; 0x64
 800c018:	f000 f847 	bl	800c0aa <__retarget_lock_init_recursive>
 800c01c:	f7ff ff96 	bl	800bf4c <__sfp_lock_release>
 800c020:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c024:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c028:	6025      	str	r5, [r4, #0]
 800c02a:	61a5      	str	r5, [r4, #24]
 800c02c:	2208      	movs	r2, #8
 800c02e:	4629      	mov	r1, r5
 800c030:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c034:	f7fd fc82 	bl	800993c <memset>
 800c038:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c03c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c040:	4620      	mov	r0, r4
 800c042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c044:	3468      	adds	r4, #104	; 0x68
 800c046:	e7d9      	b.n	800bffc <__sfp+0x1c>
 800c048:	2104      	movs	r1, #4
 800c04a:	4638      	mov	r0, r7
 800c04c:	f7ff ff62 	bl	800bf14 <__sfmoreglue>
 800c050:	4604      	mov	r4, r0
 800c052:	6030      	str	r0, [r6, #0]
 800c054:	2800      	cmp	r0, #0
 800c056:	d1d5      	bne.n	800c004 <__sfp+0x24>
 800c058:	f7ff ff78 	bl	800bf4c <__sfp_lock_release>
 800c05c:	230c      	movs	r3, #12
 800c05e:	603b      	str	r3, [r7, #0]
 800c060:	e7ee      	b.n	800c040 <__sfp+0x60>
 800c062:	bf00      	nop
 800c064:	0800cc54 	.word	0x0800cc54
 800c068:	ffff0001 	.word	0xffff0001

0800c06c <_fwalk_reent>:
 800c06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c070:	4606      	mov	r6, r0
 800c072:	4688      	mov	r8, r1
 800c074:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c078:	2700      	movs	r7, #0
 800c07a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c07e:	f1b9 0901 	subs.w	r9, r9, #1
 800c082:	d505      	bpl.n	800c090 <_fwalk_reent+0x24>
 800c084:	6824      	ldr	r4, [r4, #0]
 800c086:	2c00      	cmp	r4, #0
 800c088:	d1f7      	bne.n	800c07a <_fwalk_reent+0xe>
 800c08a:	4638      	mov	r0, r7
 800c08c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c090:	89ab      	ldrh	r3, [r5, #12]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d907      	bls.n	800c0a6 <_fwalk_reent+0x3a>
 800c096:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c09a:	3301      	adds	r3, #1
 800c09c:	d003      	beq.n	800c0a6 <_fwalk_reent+0x3a>
 800c09e:	4629      	mov	r1, r5
 800c0a0:	4630      	mov	r0, r6
 800c0a2:	47c0      	blx	r8
 800c0a4:	4307      	orrs	r7, r0
 800c0a6:	3568      	adds	r5, #104	; 0x68
 800c0a8:	e7e9      	b.n	800c07e <_fwalk_reent+0x12>

0800c0aa <__retarget_lock_init_recursive>:
 800c0aa:	4770      	bx	lr

0800c0ac <__retarget_lock_acquire_recursive>:
 800c0ac:	4770      	bx	lr

0800c0ae <__retarget_lock_release_recursive>:
 800c0ae:	4770      	bx	lr

0800c0b0 <__swhatbuf_r>:
 800c0b0:	b570      	push	{r4, r5, r6, lr}
 800c0b2:	460e      	mov	r6, r1
 800c0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0b8:	2900      	cmp	r1, #0
 800c0ba:	b096      	sub	sp, #88	; 0x58
 800c0bc:	4614      	mov	r4, r2
 800c0be:	461d      	mov	r5, r3
 800c0c0:	da08      	bge.n	800c0d4 <__swhatbuf_r+0x24>
 800c0c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	602a      	str	r2, [r5, #0]
 800c0ca:	061a      	lsls	r2, r3, #24
 800c0cc:	d410      	bmi.n	800c0f0 <__swhatbuf_r+0x40>
 800c0ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0d2:	e00e      	b.n	800c0f2 <__swhatbuf_r+0x42>
 800c0d4:	466a      	mov	r2, sp
 800c0d6:	f000 f8fb 	bl	800c2d0 <_fstat_r>
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	dbf1      	blt.n	800c0c2 <__swhatbuf_r+0x12>
 800c0de:	9a01      	ldr	r2, [sp, #4]
 800c0e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c0e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c0e8:	425a      	negs	r2, r3
 800c0ea:	415a      	adcs	r2, r3
 800c0ec:	602a      	str	r2, [r5, #0]
 800c0ee:	e7ee      	b.n	800c0ce <__swhatbuf_r+0x1e>
 800c0f0:	2340      	movs	r3, #64	; 0x40
 800c0f2:	2000      	movs	r0, #0
 800c0f4:	6023      	str	r3, [r4, #0]
 800c0f6:	b016      	add	sp, #88	; 0x58
 800c0f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c0fc <__smakebuf_r>:
 800c0fc:	898b      	ldrh	r3, [r1, #12]
 800c0fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c100:	079d      	lsls	r5, r3, #30
 800c102:	4606      	mov	r6, r0
 800c104:	460c      	mov	r4, r1
 800c106:	d507      	bpl.n	800c118 <__smakebuf_r+0x1c>
 800c108:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c10c:	6023      	str	r3, [r4, #0]
 800c10e:	6123      	str	r3, [r4, #16]
 800c110:	2301      	movs	r3, #1
 800c112:	6163      	str	r3, [r4, #20]
 800c114:	b002      	add	sp, #8
 800c116:	bd70      	pop	{r4, r5, r6, pc}
 800c118:	ab01      	add	r3, sp, #4
 800c11a:	466a      	mov	r2, sp
 800c11c:	f7ff ffc8 	bl	800c0b0 <__swhatbuf_r>
 800c120:	9900      	ldr	r1, [sp, #0]
 800c122:	4605      	mov	r5, r0
 800c124:	4630      	mov	r0, r6
 800c126:	f7ff fb07 	bl	800b738 <_malloc_r>
 800c12a:	b948      	cbnz	r0, 800c140 <__smakebuf_r+0x44>
 800c12c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c130:	059a      	lsls	r2, r3, #22
 800c132:	d4ef      	bmi.n	800c114 <__smakebuf_r+0x18>
 800c134:	f023 0303 	bic.w	r3, r3, #3
 800c138:	f043 0302 	orr.w	r3, r3, #2
 800c13c:	81a3      	strh	r3, [r4, #12]
 800c13e:	e7e3      	b.n	800c108 <__smakebuf_r+0xc>
 800c140:	4b0d      	ldr	r3, [pc, #52]	; (800c178 <__smakebuf_r+0x7c>)
 800c142:	62b3      	str	r3, [r6, #40]	; 0x28
 800c144:	89a3      	ldrh	r3, [r4, #12]
 800c146:	6020      	str	r0, [r4, #0]
 800c148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c14c:	81a3      	strh	r3, [r4, #12]
 800c14e:	9b00      	ldr	r3, [sp, #0]
 800c150:	6163      	str	r3, [r4, #20]
 800c152:	9b01      	ldr	r3, [sp, #4]
 800c154:	6120      	str	r0, [r4, #16]
 800c156:	b15b      	cbz	r3, 800c170 <__smakebuf_r+0x74>
 800c158:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c15c:	4630      	mov	r0, r6
 800c15e:	f000 f8c9 	bl	800c2f4 <_isatty_r>
 800c162:	b128      	cbz	r0, 800c170 <__smakebuf_r+0x74>
 800c164:	89a3      	ldrh	r3, [r4, #12]
 800c166:	f023 0303 	bic.w	r3, r3, #3
 800c16a:	f043 0301 	orr.w	r3, r3, #1
 800c16e:	81a3      	strh	r3, [r4, #12]
 800c170:	89a0      	ldrh	r0, [r4, #12]
 800c172:	4305      	orrs	r5, r0
 800c174:	81a5      	strh	r5, [r4, #12]
 800c176:	e7cd      	b.n	800c114 <__smakebuf_r+0x18>
 800c178:	0800bf09 	.word	0x0800bf09

0800c17c <_raise_r>:
 800c17c:	291f      	cmp	r1, #31
 800c17e:	b538      	push	{r3, r4, r5, lr}
 800c180:	4604      	mov	r4, r0
 800c182:	460d      	mov	r5, r1
 800c184:	d904      	bls.n	800c190 <_raise_r+0x14>
 800c186:	2316      	movs	r3, #22
 800c188:	6003      	str	r3, [r0, #0]
 800c18a:	f04f 30ff 	mov.w	r0, #4294967295
 800c18e:	bd38      	pop	{r3, r4, r5, pc}
 800c190:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c192:	b112      	cbz	r2, 800c19a <_raise_r+0x1e>
 800c194:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c198:	b94b      	cbnz	r3, 800c1ae <_raise_r+0x32>
 800c19a:	4620      	mov	r0, r4
 800c19c:	f000 f830 	bl	800c200 <_getpid_r>
 800c1a0:	462a      	mov	r2, r5
 800c1a2:	4601      	mov	r1, r0
 800c1a4:	4620      	mov	r0, r4
 800c1a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1aa:	f000 b817 	b.w	800c1dc <_kill_r>
 800c1ae:	2b01      	cmp	r3, #1
 800c1b0:	d00a      	beq.n	800c1c8 <_raise_r+0x4c>
 800c1b2:	1c59      	adds	r1, r3, #1
 800c1b4:	d103      	bne.n	800c1be <_raise_r+0x42>
 800c1b6:	2316      	movs	r3, #22
 800c1b8:	6003      	str	r3, [r0, #0]
 800c1ba:	2001      	movs	r0, #1
 800c1bc:	e7e7      	b.n	800c18e <_raise_r+0x12>
 800c1be:	2400      	movs	r4, #0
 800c1c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	4798      	blx	r3
 800c1c8:	2000      	movs	r0, #0
 800c1ca:	e7e0      	b.n	800c18e <_raise_r+0x12>

0800c1cc <raise>:
 800c1cc:	4b02      	ldr	r3, [pc, #8]	; (800c1d8 <raise+0xc>)
 800c1ce:	4601      	mov	r1, r0
 800c1d0:	6818      	ldr	r0, [r3, #0]
 800c1d2:	f7ff bfd3 	b.w	800c17c <_raise_r>
 800c1d6:	bf00      	nop
 800c1d8:	20000010 	.word	0x20000010

0800c1dc <_kill_r>:
 800c1dc:	b538      	push	{r3, r4, r5, lr}
 800c1de:	4d07      	ldr	r5, [pc, #28]	; (800c1fc <_kill_r+0x20>)
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	4608      	mov	r0, r1
 800c1e6:	4611      	mov	r1, r2
 800c1e8:	602b      	str	r3, [r5, #0]
 800c1ea:	f7f7 f933 	bl	8003454 <_kill>
 800c1ee:	1c43      	adds	r3, r0, #1
 800c1f0:	d102      	bne.n	800c1f8 <_kill_r+0x1c>
 800c1f2:	682b      	ldr	r3, [r5, #0]
 800c1f4:	b103      	cbz	r3, 800c1f8 <_kill_r+0x1c>
 800c1f6:	6023      	str	r3, [r4, #0]
 800c1f8:	bd38      	pop	{r3, r4, r5, pc}
 800c1fa:	bf00      	nop
 800c1fc:	20000d94 	.word	0x20000d94

0800c200 <_getpid_r>:
 800c200:	f7f7 b920 	b.w	8003444 <_getpid>

0800c204 <__sread>:
 800c204:	b510      	push	{r4, lr}
 800c206:	460c      	mov	r4, r1
 800c208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c20c:	f000 f894 	bl	800c338 <_read_r>
 800c210:	2800      	cmp	r0, #0
 800c212:	bfab      	itete	ge
 800c214:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c216:	89a3      	ldrhlt	r3, [r4, #12]
 800c218:	181b      	addge	r3, r3, r0
 800c21a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c21e:	bfac      	ite	ge
 800c220:	6563      	strge	r3, [r4, #84]	; 0x54
 800c222:	81a3      	strhlt	r3, [r4, #12]
 800c224:	bd10      	pop	{r4, pc}

0800c226 <__swrite>:
 800c226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c22a:	461f      	mov	r7, r3
 800c22c:	898b      	ldrh	r3, [r1, #12]
 800c22e:	05db      	lsls	r3, r3, #23
 800c230:	4605      	mov	r5, r0
 800c232:	460c      	mov	r4, r1
 800c234:	4616      	mov	r6, r2
 800c236:	d505      	bpl.n	800c244 <__swrite+0x1e>
 800c238:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c23c:	2302      	movs	r3, #2
 800c23e:	2200      	movs	r2, #0
 800c240:	f000 f868 	bl	800c314 <_lseek_r>
 800c244:	89a3      	ldrh	r3, [r4, #12]
 800c246:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c24a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c24e:	81a3      	strh	r3, [r4, #12]
 800c250:	4632      	mov	r2, r6
 800c252:	463b      	mov	r3, r7
 800c254:	4628      	mov	r0, r5
 800c256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c25a:	f000 b817 	b.w	800c28c <_write_r>

0800c25e <__sseek>:
 800c25e:	b510      	push	{r4, lr}
 800c260:	460c      	mov	r4, r1
 800c262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c266:	f000 f855 	bl	800c314 <_lseek_r>
 800c26a:	1c43      	adds	r3, r0, #1
 800c26c:	89a3      	ldrh	r3, [r4, #12]
 800c26e:	bf15      	itete	ne
 800c270:	6560      	strne	r0, [r4, #84]	; 0x54
 800c272:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c276:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c27a:	81a3      	strheq	r3, [r4, #12]
 800c27c:	bf18      	it	ne
 800c27e:	81a3      	strhne	r3, [r4, #12]
 800c280:	bd10      	pop	{r4, pc}

0800c282 <__sclose>:
 800c282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c286:	f000 b813 	b.w	800c2b0 <_close_r>
	...

0800c28c <_write_r>:
 800c28c:	b538      	push	{r3, r4, r5, lr}
 800c28e:	4d07      	ldr	r5, [pc, #28]	; (800c2ac <_write_r+0x20>)
 800c290:	4604      	mov	r4, r0
 800c292:	4608      	mov	r0, r1
 800c294:	4611      	mov	r1, r2
 800c296:	2200      	movs	r2, #0
 800c298:	602a      	str	r2, [r5, #0]
 800c29a:	461a      	mov	r2, r3
 800c29c:	f7f7 f911 	bl	80034c2 <_write>
 800c2a0:	1c43      	adds	r3, r0, #1
 800c2a2:	d102      	bne.n	800c2aa <_write_r+0x1e>
 800c2a4:	682b      	ldr	r3, [r5, #0]
 800c2a6:	b103      	cbz	r3, 800c2aa <_write_r+0x1e>
 800c2a8:	6023      	str	r3, [r4, #0]
 800c2aa:	bd38      	pop	{r3, r4, r5, pc}
 800c2ac:	20000d94 	.word	0x20000d94

0800c2b0 <_close_r>:
 800c2b0:	b538      	push	{r3, r4, r5, lr}
 800c2b2:	4d06      	ldr	r5, [pc, #24]	; (800c2cc <_close_r+0x1c>)
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	4608      	mov	r0, r1
 800c2ba:	602b      	str	r3, [r5, #0]
 800c2bc:	f7f7 f91d 	bl	80034fa <_close>
 800c2c0:	1c43      	adds	r3, r0, #1
 800c2c2:	d102      	bne.n	800c2ca <_close_r+0x1a>
 800c2c4:	682b      	ldr	r3, [r5, #0]
 800c2c6:	b103      	cbz	r3, 800c2ca <_close_r+0x1a>
 800c2c8:	6023      	str	r3, [r4, #0]
 800c2ca:	bd38      	pop	{r3, r4, r5, pc}
 800c2cc:	20000d94 	.word	0x20000d94

0800c2d0 <_fstat_r>:
 800c2d0:	b538      	push	{r3, r4, r5, lr}
 800c2d2:	4d07      	ldr	r5, [pc, #28]	; (800c2f0 <_fstat_r+0x20>)
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	4604      	mov	r4, r0
 800c2d8:	4608      	mov	r0, r1
 800c2da:	4611      	mov	r1, r2
 800c2dc:	602b      	str	r3, [r5, #0]
 800c2de:	f7f7 f918 	bl	8003512 <_fstat>
 800c2e2:	1c43      	adds	r3, r0, #1
 800c2e4:	d102      	bne.n	800c2ec <_fstat_r+0x1c>
 800c2e6:	682b      	ldr	r3, [r5, #0]
 800c2e8:	b103      	cbz	r3, 800c2ec <_fstat_r+0x1c>
 800c2ea:	6023      	str	r3, [r4, #0]
 800c2ec:	bd38      	pop	{r3, r4, r5, pc}
 800c2ee:	bf00      	nop
 800c2f0:	20000d94 	.word	0x20000d94

0800c2f4 <_isatty_r>:
 800c2f4:	b538      	push	{r3, r4, r5, lr}
 800c2f6:	4d06      	ldr	r5, [pc, #24]	; (800c310 <_isatty_r+0x1c>)
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	4604      	mov	r4, r0
 800c2fc:	4608      	mov	r0, r1
 800c2fe:	602b      	str	r3, [r5, #0]
 800c300:	f7f7 f917 	bl	8003532 <_isatty>
 800c304:	1c43      	adds	r3, r0, #1
 800c306:	d102      	bne.n	800c30e <_isatty_r+0x1a>
 800c308:	682b      	ldr	r3, [r5, #0]
 800c30a:	b103      	cbz	r3, 800c30e <_isatty_r+0x1a>
 800c30c:	6023      	str	r3, [r4, #0]
 800c30e:	bd38      	pop	{r3, r4, r5, pc}
 800c310:	20000d94 	.word	0x20000d94

0800c314 <_lseek_r>:
 800c314:	b538      	push	{r3, r4, r5, lr}
 800c316:	4d07      	ldr	r5, [pc, #28]	; (800c334 <_lseek_r+0x20>)
 800c318:	4604      	mov	r4, r0
 800c31a:	4608      	mov	r0, r1
 800c31c:	4611      	mov	r1, r2
 800c31e:	2200      	movs	r2, #0
 800c320:	602a      	str	r2, [r5, #0]
 800c322:	461a      	mov	r2, r3
 800c324:	f7f7 f910 	bl	8003548 <_lseek>
 800c328:	1c43      	adds	r3, r0, #1
 800c32a:	d102      	bne.n	800c332 <_lseek_r+0x1e>
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	b103      	cbz	r3, 800c332 <_lseek_r+0x1e>
 800c330:	6023      	str	r3, [r4, #0]
 800c332:	bd38      	pop	{r3, r4, r5, pc}
 800c334:	20000d94 	.word	0x20000d94

0800c338 <_read_r>:
 800c338:	b538      	push	{r3, r4, r5, lr}
 800c33a:	4d07      	ldr	r5, [pc, #28]	; (800c358 <_read_r+0x20>)
 800c33c:	4604      	mov	r4, r0
 800c33e:	4608      	mov	r0, r1
 800c340:	4611      	mov	r1, r2
 800c342:	2200      	movs	r2, #0
 800c344:	602a      	str	r2, [r5, #0]
 800c346:	461a      	mov	r2, r3
 800c348:	f7f7 f89e 	bl	8003488 <_read>
 800c34c:	1c43      	adds	r3, r0, #1
 800c34e:	d102      	bne.n	800c356 <_read_r+0x1e>
 800c350:	682b      	ldr	r3, [r5, #0]
 800c352:	b103      	cbz	r3, 800c356 <_read_r+0x1e>
 800c354:	6023      	str	r3, [r4, #0]
 800c356:	bd38      	pop	{r3, r4, r5, pc}
 800c358:	20000d94 	.word	0x20000d94

0800c35c <_init>:
 800c35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35e:	bf00      	nop
 800c360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c362:	bc08      	pop	{r3}
 800c364:	469e      	mov	lr, r3
 800c366:	4770      	bx	lr

0800c368 <_fini>:
 800c368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c36a:	bf00      	nop
 800c36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c36e:	bc08      	pop	{r3}
 800c370:	469e      	mov	lr, r3
 800c372:	4770      	bx	lr
