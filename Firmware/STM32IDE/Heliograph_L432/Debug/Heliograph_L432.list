
Heliograph_L432.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca4  0800c638  0800c638  0001c638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2dc  0800d2dc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2dc  0800d2dc  0001d2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2e4  0800d2e4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2e4  0800d2e4  0001d2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d2e8  0800d2e8  0001d2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d2ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bc0  200001e0  0800d4cc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000da0  0800d4cc  00020da0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c74  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a43  00000000  00000000  00037e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0003b8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  0003cef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f47  00000000  00000000  0003e3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001749c  00000000  00000000  000652f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e341e  00000000  00000000  0007c793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015fbb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cb0  00000000  00000000  0015fc04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c61c 	.word	0x0800c61c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c61c 	.word	0x0800c61c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f043 0201 	orr.w	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	601a      	str	r2, [r3, #0]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <LL_LPUART_EnableClockInStopMode>:
  * @rmtoll CR3          UCESM         LL_LPUART_EnableClockInStopMode
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableClockInStopMode(USART_TypeDef *LPUARTx)
{
 800107e:	b480      	push	{r7}
 8001080:	b089      	sub	sp, #36	; 0x24
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_UCESM);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3308      	adds	r3, #8
 800108a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	e853 3f00 	ldrex	r3, [r3]
 8001092:	60bb      	str	r3, [r7, #8]
   return(result);
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3308      	adds	r3, #8
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	61ba      	str	r2, [r7, #24]
 80010a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010a6:	6979      	ldr	r1, [r7, #20]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	e841 2300 	strex	r3, r2, [r1]
 80010ae:	613b      	str	r3, [r7, #16]
   return(result);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1e7      	bne.n	8001086 <LL_LPUART_EnableClockInStopMode+0x8>
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	3724      	adds	r7, #36	; 0x24
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_LPUART_DisableOverrunDetect>:
  * @rmtoll CR3          OVRDIS        LL_LPUART_DisableOverrunDetect
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableOverrunDetect(USART_TypeDef *LPUARTx)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR3, USART_CR3_OVRDIS);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	609a      	str	r2, [r3, #8]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_LPUART_SetWKUPType>:
  *         @arg @ref LL_LPUART_WAKEUP_ON_STARTBIT
  *         @arg @ref LL_LPUART_WAKEUP_ON_RXNE
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetWKUPType(USART_TypeDef *LPUARTx, uint32_t Type)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_WUS, Type);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	431a      	orrs	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	609a      	str	r2, [r3, #8]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_LPUART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_LPUART_EnableIT_RXNE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_RXNE(USART_TypeDef *LPUARTx)
{
 800110a:	b480      	push	{r7}
 800110c:	b089      	sub	sp, #36	; 0x24
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	e853 3f00 	ldrex	r3, [r3]
 800111c:	60bb      	str	r3, [r7, #8]
   return(result);
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	f043 0320 	orr.w	r3, r3, #32
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	61ba      	str	r2, [r7, #24]
 800112c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800112e:	6979      	ldr	r1, [r7, #20]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	e841 2300 	strex	r3, r2, [r1]
 8001136:	613b      	str	r3, [r7, #16]
   return(result);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1e9      	bne.n	8001112 <LL_LPUART_EnableIT_RXNE+0x8>
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3724      	adds	r7, #36	; 0x24
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4313      	orrs	r3, r2
 800115e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4013      	ands	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40021000 	.word	0x40021000

0800117c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001186:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001188:	4907      	ldr	r1, [pc, #28]	; (80011a8 <LL_APB1_GRP2_EnableClock+0x2c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4313      	orrs	r3, r2
 800118e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001192:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4013      	ands	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800119a:	68fb      	ldr	r3, [r7, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40021000 	.word	0x40021000

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b0:	f002 ffb2 	bl	8004118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b4:	f000 f810 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b8:	f000 fa3a 	bl	8001630 <MX_GPIO_Init>
  MX_DMA_Init();
 80011bc:	f000 fa12 	bl	80015e4 <MX_DMA_Init>
  MX_SPI1_Init();
 80011c0:	f000 f9d2 	bl	8001568 <MX_SPI1_Init>
  MX_ADC1_Init();
 80011c4:	f000 f860 	bl	8001288 <MX_ADC1_Init>
  MX_RTC_Init();
 80011c8:	f000 f966 	bl	8001498 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  myApp_init();
 80011cc:	f001 fc8c 	bl	8002ae8 <myApp_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  myApp_loop();
 80011d0:	f001 fcb4 	bl	8002b3c <myApp_loop>
 80011d4:	e7fc      	b.n	80011d0 <main+0x24>
	...

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b096      	sub	sp, #88	; 0x58
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	2244      	movs	r2, #68	; 0x44
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f008 fd06 	bl	8009bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80011fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011fe:	f005 f875 	bl	80062ec <HAL_PWREx_ControlVoltageScaling>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001208:	f000 faf6 	bl	80017f8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800120c:	f005 f81c 	bl	8006248 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <SystemClock_Config+0xac>)
 8001212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001216:	f023 0318 	bic.w	r3, r3, #24
 800121a:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <SystemClock_Config+0xac>)
 800121c:	f043 0310 	orr.w	r3, r3, #16
 8001220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001224:	2314      	movs	r3, #20
 8001226:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001228:	2301      	movs	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800122c:	2301      	movs	r3, #1
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001238:	2300      	movs	r3, #0
 800123a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4618      	mov	r0, r3
 8001242:	f005 f91d 	bl	8006480 <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800124c:	f000 fad4 	bl	80017f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	2102      	movs	r1, #2
 8001268:	4618      	mov	r0, r3
 800126a:	f005 fd1d 	bl	8006ca8 <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001274:	f000 fac0 	bl	80017f8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001278:	f006 f8f8 	bl	800746c <HAL_RCCEx_EnableMSIPLLMode>
}
 800127c:	bf00      	nop
 800127e:	3758      	adds	r7, #88	; 0x58
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40021000 	.word	0x40021000

08001288 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800129e:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <MX_ADC1_Init+0x100>)
 80012a0:	4a3a      	ldr	r2, [pc, #232]	; (800138c <MX_ADC1_Init+0x104>)
 80012a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80012a4:	4b38      	ldr	r3, [pc, #224]	; (8001388 <MX_ADC1_Init+0x100>)
 80012a6:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80012aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ac:	4b36      	ldr	r3, [pc, #216]	; (8001388 <MX_ADC1_Init+0x100>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b2:	4b35      	ldr	r3, [pc, #212]	; (8001388 <MX_ADC1_Init+0x100>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012b8:	4b33      	ldr	r3, [pc, #204]	; (8001388 <MX_ADC1_Init+0x100>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012be:	4b32      	ldr	r3, [pc, #200]	; (8001388 <MX_ADC1_Init+0x100>)
 80012c0:	2208      	movs	r2, #8
 80012c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012c4:	4b30      	ldr	r3, [pc, #192]	; (8001388 <MX_ADC1_Init+0x100>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ca:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <MX_ADC1_Init+0x100>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80012d0:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <MX_ADC1_Init+0x100>)
 80012d2:	2203      	movs	r2, #3
 80012d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d6:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <MX_ADC1_Init+0x100>)
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012de:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <MX_ADC1_Init+0x100>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012e4:	4b28      	ldr	r3, [pc, #160]	; (8001388 <MX_ADC1_Init+0x100>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <MX_ADC1_Init+0x100>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012f2:	4b25      	ldr	r3, [pc, #148]	; (8001388 <MX_ADC1_Init+0x100>)
 80012f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <MX_ADC1_Init+0x100>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001302:	4821      	ldr	r0, [pc, #132]	; (8001388 <MX_ADC1_Init+0x100>)
 8001304:	f003 f9b2 	bl	800466c <HAL_ADC_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800130e:	f000 fa73 	bl	80017f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <MX_ADC1_Init+0x108>)
 8001314:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001316:	2306      	movs	r3, #6
 8001318:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800131a:	2307      	movs	r3, #7
 800131c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800131e:	237f      	movs	r3, #127	; 0x7f
 8001320:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001322:	2304      	movs	r3, #4
 8001324:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132a:	463b      	mov	r3, r7
 800132c:	4619      	mov	r1, r3
 800132e:	4816      	ldr	r0, [pc, #88]	; (8001388 <MX_ADC1_Init+0x100>)
 8001330:	f003 fbde 	bl	8004af0 <HAL_ADC_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800133a:	f000 fa5d 	bl	80017f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_ADC1_Init+0x10c>)
 8001340:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001342:	230c      	movs	r3, #12
 8001344:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001346:	463b      	mov	r3, r7
 8001348:	4619      	mov	r1, r3
 800134a:	480f      	ldr	r0, [pc, #60]	; (8001388 <MX_ADC1_Init+0x100>)
 800134c:	f003 fbd0 	bl	8004af0 <HAL_ADC_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001356:	f000 fa4f 	bl	80017f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_ADC1_Init+0x110>)
 800135c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800135e:	2312      	movs	r3, #18
 8001360:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4808      	ldr	r0, [pc, #32]	; (8001388 <MX_ADC1_Init+0x100>)
 8001368:	f003 fbc2 	bl	8004af0 <HAL_ADC_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001372:	f000 fa41 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001376:	217f      	movs	r1, #127	; 0x7f
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <MX_ADC1_Init+0x100>)
 800137a:	f004 f9fb 	bl	8005774 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END ADC1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200001fc 	.word	0x200001fc
 800138c:	50040000 	.word	0x50040000
 8001390:	19200040 	.word	0x19200040
 8001394:	c7520000 	.word	0xc7520000
 8001398:	80000001 	.word	0x80000001

0800139c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b0a2      	sub	sp, #136	; 0x88
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 80013a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
 80013b2:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2254      	movs	r2, #84	; 0x54
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f008 fc13 	bl	8009bf8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80013d2:	2320      	movs	r3, #32
 80013d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 80013d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4618      	mov	r0, r3
 80013e0:	f005 fe4e 	bl	8007080 <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80013ea:	f000 fa05 	bl	80017f8 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
 80013ee:	2001      	movs	r0, #1
 80013f0:	f7ff fec4 	bl	800117c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff fea9 	bl	800114c <LL_AHB2_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  PA3   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80013fa:	230c      	movs	r3, #12
 80013fc:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013fe:	2302      	movs	r3, #2
 8001400:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800140a:	2300      	movs	r3, #0
 800140c:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800140e:	2308      	movs	r3, #8
 8001410:	66fb      	str	r3, [r7, #108]	; 0x6c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001416:	4619      	mov	r1, r3
 8001418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141c:	f007 fc5b 	bl	8008cd6 <LL_GPIO_Init>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(LPUART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001420:	f7ff fd94 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 8001424:	4603      	mov	r3, r0
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fde4 	bl	8000ff8 <NVIC_EncodePriority>
 8001430:	4603      	mov	r3, r0
 8001432:	4619      	mov	r1, r3
 8001434:	2046      	movs	r0, #70	; 0x46
 8001436:	f7ff fdb5 	bl	8000fa4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPUART1_IRQn);
 800143a:	2046      	movs	r0, #70	; 0x46
 800143c:	f7ff fd94 	bl	8000f68 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */
  LL_LPUART_DisableOverrunDetect(LPUART1);
 8001440:	4814      	ldr	r0, [pc, #80]	; (8001494 <MX_LPUART1_UART_Init+0xf8>)
 8001442:	f7ff fe3f 	bl	80010c4 <LL_LPUART_DisableOverrunDetect>
  LL_LPUART_EnableClockInStopMode(LPUART1);
 8001446:	4813      	ldr	r0, [pc, #76]	; (8001494 <MX_LPUART1_UART_Init+0xf8>)
 8001448:	f7ff fe19 	bl	800107e <LL_LPUART_EnableClockInStopMode>
  LL_LPUART_SetWKUPType(LPUART1, LL_LPUART_WAKEUP_ON_RXNE); //Set the wake-up event type : specify wake-up on RXNE flag
 800144c:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
 8001450:	4810      	ldr	r0, [pc, #64]	; (8001494 <MX_LPUART1_UART_Init+0xf8>)
 8001452:	f7ff fe47 	bl	80010e4 <LL_LPUART_SetWKUPType>

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.BaudRate = 9600;
 8001456:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800145a:	673b      	str	r3, [r7, #112]	; 0x70
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 800145c:	2300      	movs	r3, #0
 800145e:	677b      	str	r3, [r7, #116]	; 0x74
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 8001460:	2300      	movs	r3, #0
 8001462:	67bb      	str	r3, [r7, #120]	; 0x78
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8001464:	2300      	movs	r3, #0
 8001466:	67fb      	str	r3, [r7, #124]	; 0x7c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8001468:	230c      	movs	r3, #12
 800146a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8001474:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001478:	4619      	mov	r1, r3
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <MX_LPUART1_UART_Init+0xf8>)
 800147c:	f007 fd48 	bl	8008f10 <LL_LPUART_Init>
  LL_LPUART_Enable(LPUART1);
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_LPUART1_UART_Init+0xf8>)
 8001482:	f7ff fdec 	bl	800105e <LL_LPUART_Enable>
  /* USER CODE BEGIN LPUART1_Init 2 */
  LL_LPUART_EnableIT_RXNE(LPUART1);
 8001486:	4803      	ldr	r0, [pc, #12]	; (8001494 <MX_LPUART1_UART_Init+0xf8>)
 8001488:	f7ff fe3f 	bl	800110a <LL_LPUART_EnableIT_RXNE>

  /* USER CODE END LPUART1_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	3788      	adds	r7, #136	; 0x88
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40008000 	.word	0x40008000

08001498 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80014ac:	2300      	movs	r3, #0
 80014ae:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <MX_RTC_Init+0xc8>)
 80014b2:	4a2c      	ldr	r2, [pc, #176]	; (8001564 <MX_RTC_Init+0xcc>)
 80014b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014b6:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <MX_RTC_Init+0xc8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014bc:	4b28      	ldr	r3, [pc, #160]	; (8001560 <MX_RTC_Init+0xc8>)
 80014be:	227f      	movs	r2, #127	; 0x7f
 80014c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014c2:	4b27      	ldr	r3, [pc, #156]	; (8001560 <MX_RTC_Init+0xc8>)
 80014c4:	22ff      	movs	r2, #255	; 0xff
 80014c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014c8:	4b25      	ldr	r3, [pc, #148]	; (8001560 <MX_RTC_Init+0xc8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80014ce:	4b24      	ldr	r3, [pc, #144]	; (8001560 <MX_RTC_Init+0xc8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <MX_RTC_Init+0xc8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <MX_RTC_Init+0xc8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014e0:	481f      	ldr	r0, [pc, #124]	; (8001560 <MX_RTC_Init+0xc8>)
 80014e2:	f006 f8c5 	bl	8007670 <HAL_RTC_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80014ec:	f000 f984 	bl	80017f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x4;
 80014f0:	2304      	movs	r3, #4
 80014f2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x4;
 80014f4:	2304      	movs	r3, #4
 80014f6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x57;
 80014f8:	2357      	movs	r3, #87	; 0x57
 80014fa:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2201      	movs	r2, #1
 8001508:	4619      	mov	r1, r3
 800150a:	4815      	ldr	r0, [pc, #84]	; (8001560 <MX_RTC_Init+0xc8>)
 800150c:	f006 f92b 	bl	8007766 <HAL_RTC_SetTime>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001516:	f000 f96f 	bl	80017f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800151a:	2301      	movs	r3, #1
 800151c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 800151e:	2305      	movs	r3, #5
 8001520:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x10;
 8001522:	2310      	movs	r3, #16
 8001524:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001526:	2323      	movs	r3, #35	; 0x23
 8001528:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800152a:	463b      	mov	r3, r7
 800152c:	2201      	movs	r2, #1
 800152e:	4619      	mov	r1, r3
 8001530:	480b      	ldr	r0, [pc, #44]	; (8001560 <MX_RTC_Init+0xc8>)
 8001532:	f006 fa11 	bl	8007958 <HAL_RTC_SetDate>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800153c:	f000 f95c 	bl	80017f8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2047, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001540:	2200      	movs	r2, #0
 8001542:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001546:	4806      	ldr	r0, [pc, #24]	; (8001560 <MX_RTC_Init+0xc8>)
 8001548:	f006 fbac 	bl	8007ca4 <HAL_RTCEx_SetWakeUpTimer_IT>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_RTC_Init+0xbe>
  {
    Error_Handler();
 8001552:	f000 f951 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200002a8 	.word	0x200002a8
 8001564:	40002800 	.word	0x40002800

08001568 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_SPI1_Init+0x74>)
 800156e:	4a1c      	ldr	r2, [pc, #112]	; (80015e0 <MX_SPI1_Init+0x78>)
 8001570:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_SPI1_Init+0x74>)
 8001574:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001578:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <MX_SPI1_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_SPI1_Init+0x74>)
 8001582:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001586:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_SPI1_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <MX_SPI1_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_SPI1_Init+0x74>)
 8001596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_SPI1_Init+0x74>)
 800159e:	2218      	movs	r2, #24
 80015a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_SPI1_Init+0x74>)
 80015a4:	2280      	movs	r2, #128	; 0x80
 80015a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_SPI1_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_SPI1_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_SPI1_Init+0x74>)
 80015b6:	2207      	movs	r2, #7
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_SPI1_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_SPI1_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_SPI1_Init+0x74>)
 80015c8:	f006 fc26 	bl	8007e18 <HAL_SPI_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015d2:	f000 f911 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200002cc 	.word	0x200002cc
 80015e0:	40013000 	.word	0x40013000

080015e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <MX_DMA_Init+0x48>)
 80015ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ee:	4a0f      	ldr	r2, [pc, #60]	; (800162c <MX_DMA_Init+0x48>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6493      	str	r3, [r2, #72]	; 0x48
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <MX_DMA_Init+0x48>)
 80015f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	200b      	movs	r0, #11
 8001608:	f004 f9ef 	bl	80059ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800160c:	200b      	movs	r0, #11
 800160e:	f004 fa08 	bl	8005a22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	200d      	movs	r0, #13
 8001618:	f004 f9e7 	bl	80059ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800161c:	200d      	movs	r0, #13
 800161e:	f004 fa00 	bl	8005a22 <HAL_NVIC_EnableIRQ>

}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000

08001630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	4b44      	ldr	r3, [pc, #272]	; (8001758 <MX_GPIO_Init+0x128>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	4a43      	ldr	r2, [pc, #268]	; (8001758 <MX_GPIO_Init+0x128>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001652:	4b41      	ldr	r3, [pc, #260]	; (8001758 <MX_GPIO_Init+0x128>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <MX_GPIO_Init+0x128>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	4a3d      	ldr	r2, [pc, #244]	; (8001758 <MX_GPIO_Init+0x128>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <MX_GPIO_Init+0x128>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	4b38      	ldr	r3, [pc, #224]	; (8001758 <MX_GPIO_Init+0x128>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	4a37      	ldr	r2, [pc, #220]	; (8001758 <MX_GPIO_Init+0x128>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001682:	4b35      	ldr	r3, [pc, #212]	; (8001758 <MX_GPIO_Init+0x128>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168e:	4b32      	ldr	r3, [pc, #200]	; (8001758 <MX_GPIO_Init+0x128>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	4a31      	ldr	r2, [pc, #196]	; (8001758 <MX_GPIO_Init+0x128>)
 8001694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169a:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <MX_GPIO_Init+0x128>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GNSS_EXT_Pin|DISP_CS_Pin|DISP_EN_Pin, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80016ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b0:	f004 fdb2 	bl	8006218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SolarEN_GPIO_Port, SolarEN_Pin, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016be:	f004 fdab 	bl	8006218 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 80016c2:	f649 0301 	movw	r3, #38913	; 0x9801
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c8:	2303      	movs	r3, #3
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016da:	f004 fc33 	bl	8005f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_EXT_Pin DISP_CS_Pin DISP_EN_Pin */
  GPIO_InitStruct.Pin = GNSS_EXT_Pin|DISP_CS_Pin|DISP_EN_Pin;
 80016de:	f44f 63c2 	mov.w	r3, #1552	; 0x610
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fa:	f004 fc23 	bl	8005f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80016fe:	23fb      	movs	r3, #251	; 0xfb
 8001700:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001702:	2303      	movs	r3, #3
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4812      	ldr	r0, [pc, #72]	; (800175c <MX_GPIO_Init+0x12c>)
 8001712:	f004 fc17 	bl	8005f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : SolarEN_Pin */
  GPIO_InitStruct.Pin = SolarEN_Pin;
 8001716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800171c:	2311      	movs	r3, #17
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SolarEN_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001732:	f004 fc07 	bl	8005f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001736:	2308      	movs	r3, #8
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800173a:	2303      	movs	r3, #3
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_GPIO_Init+0x130>)
 800174a:	f004 fbfb 	bl	8005f44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	48000400 	.word	0x48000400
 8001760:	48001c00 	.word	0x48001c00

08001764 <HAL_Delay>:

/* USER CODE BEGIN 4 */
void HAL_Delay(uint32_t Delay)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800176c:	f002 fd3c 	bl	80041e8 <HAL_GetTick>
 8001770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177c:	d007      	beq.n	800178e <HAL_Delay+0x2a>
  {
    wait += (uint32_t)uwTickFreq;
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_Delay+0x44>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]

  }

  while ((HAL_GetTick() - tickstart) < wait)
 800178a:	e000      	b.n	800178e <HAL_Delay+0x2a>
  {
	  __WFI();
 800178c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800178e:	f002 fd2b 	bl	80041e8 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	429a      	cmp	r2, r3
 800179c:	d8f6      	bhi.n	800178c <HAL_Delay+0x28>
  }
}
 800179e:	bf00      	nop
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	2000000c 	.word	0x2000000c

080017ac <USER_LPUART1_UART_Init>:

void USER_LPUART1_UART_Init(){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	MX_LPUART1_UART_Init();
 80017b0:	f7ff fdf4 	bl	800139c <MX_LPUART1_UART_Init>
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <USER_LPUART1_UART_DeInit>:

void USER_LPUART1_UART_DeInit(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
	LL_LPUART_DeInit(LPUART1);
 80017be:	480d      	ldr	r0, [pc, #52]	; (80017f4 <USER_LPUART1_UART_DeInit+0x3c>)
 80017c0:	f007 fb8c 	bl	8008edc <LL_LPUART_DeInit>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017d2:	230c      	movs	r3, #12
 80017d4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d6:	2303      	movs	r3, #3
 80017d8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e6:	f004 fbad 	bl	8005f44 <HAL_GPIO_Init>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40008000 	.word	0x40008000

080017f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
}
 80017fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001800:	e7fe      	b.n	8001800 <Error_Handler+0x8>

08001802 <LL_LPUART_DisableIT_WKUP>:
  * @rmtoll CR3          WUFIE         LL_LPUART_DisableIT_WKUP
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_WKUP(USART_TypeDef *LPUARTx)
{
 8001802:	b480      	push	{r7}
 8001804:	b089      	sub	sp, #36	; 0x24
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(LPUARTx->CR3, USART_CR3_WUFIE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3308      	adds	r3, #8
 800180e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	e853 3f00 	ldrex	r3, [r3]
 8001816:	60bb      	str	r3, [r7, #8]
   return(result);
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3308      	adds	r3, #8
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	61ba      	str	r2, [r7, #24]
 8001828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800182a:	6979      	ldr	r1, [r7, #20]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	e841 2300 	strex	r3, r2, [r1]
 8001832:	613b      	str	r3, [r7, #16]
   return(result);
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1e7      	bne.n	800180a <LL_LPUART_DisableIT_WKUP+0x8>
}
 800183a:	bf00      	nop
 800183c:	bf00      	nop
 800183e:	3724      	adds	r7, #36	; 0x24
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <npf_min>:

#ifdef _MSC_VER
  #include <intrin.h>
#endif

static int npf_min(int x, int y) { return (x < y) ? x : y; }
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4293      	cmp	r3, r2
 8001858:	bfa8      	it	ge
 800185a:	4613      	movge	r3, r2
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <npf_max>:
static int npf_max(int x, int y) { return (x > y) ? x : y; }
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4293      	cmp	r3, r2
 8001878:	bfb8      	it	lt
 800187a:	4613      	movlt	r3, r2
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <npf_parse_format_spec>:

int npf_parse_format_spec(char const *format, npf_format_spec_t *out_spec) {
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  char const *cur = format;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	60fb      	str	r3, [r7, #12]

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
  out_spec->left_justified = 0;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	2200      	movs	r2, #0
 800189a:	721a      	strb	r2, [r3, #8]
  out_spec->leading_zero_pad = 0;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	2200      	movs	r2, #0
 80018a0:	725a      	strb	r2, [r3, #9]
#endif
  out_spec->case_adjust = 'a'-'A'; // lowercase
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2220      	movs	r2, #32
 80018a6:	749a      	strb	r2, [r3, #18]
  out_spec->prepend = 0;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
  out_spec->alt_form = 0;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2200      	movs	r2, #0
 80018b2:	705a      	strb	r2, [r3, #1]

  while (*++cur) { // cur points at the leading '%' character
 80018b4:	e04c      	b.n	8001950 <npf_parse_format_spec+0xc8>
    switch (*cur) { // Optional flags
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	3b20      	subs	r3, #32
 80018bc:	2b10      	cmp	r3, #16
 80018be:	d84f      	bhi.n	8001960 <npf_parse_format_spec+0xd8>
 80018c0:	a201      	add	r2, pc, #4	; (adr r2, 80018c8 <npf_parse_format_spec+0x40>)
 80018c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c6:	bf00      	nop
 80018c8:	08001939 	.word	0x08001939
 80018cc:	08001961 	.word	0x08001961
 80018d0:	08001961 	.word	0x08001961
 80018d4:	08001949 	.word	0x08001949
 80018d8:	08001961 	.word	0x08001961
 80018dc:	08001961 	.word	0x08001961
 80018e0:	08001961 	.word	0x08001961
 80018e4:	08001961 	.word	0x08001961
 80018e8:	08001961 	.word	0x08001961
 80018ec:	08001961 	.word	0x08001961
 80018f0:	08001961 	.word	0x08001961
 80018f4:	08001931 	.word	0x08001931
 80018f8:	08001961 	.word	0x08001961
 80018fc:	0800190d 	.word	0x0800190d
 8001900:	08001961 	.word	0x08001961
 8001904:	08001961 	.word	0x08001961
 8001908:	0800191b 	.word	0x0800191b
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
      case '-':
        out_spec->left_justified = '-';
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	222d      	movs	r2, #45	; 0x2d
 8001910:	721a      	strb	r2, [r3, #8]
        out_spec->leading_zero_pad = 0;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2200      	movs	r2, #0
 8001916:	725a      	strb	r2, [r3, #9]
        continue;
 8001918:	e01a      	b.n	8001950 <npf_parse_format_spec+0xc8>
      case '0':
        out_spec->leading_zero_pad = !out_spec->left_justified;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	7a1b      	ldrb	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	bf0c      	ite	eq
 8001922:	2301      	moveq	r3, #1
 8001924:	2300      	movne	r3, #0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	461a      	mov	r2, r3
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	725a      	strb	r2, [r3, #9]
        continue;
 800192e:	e00f      	b.n	8001950 <npf_parse_format_spec+0xc8>
#endif
      case '+':
        out_spec->prepend = '+';
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	222b      	movs	r2, #43	; 0x2b
 8001934:	701a      	strb	r2, [r3, #0]
        continue;
 8001936:	e00b      	b.n	8001950 <npf_parse_format_spec+0xc8>
      case ' ':
        if (out_spec->prepend == 0) { out_spec->prepend = ' '; }
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d107      	bne.n	8001950 <npf_parse_format_spec+0xc8>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2220      	movs	r2, #32
 8001944:	701a      	strb	r2, [r3, #0]
        continue;
 8001946:	e003      	b.n	8001950 <npf_parse_format_spec+0xc8>
      case '#':
        out_spec->alt_form = '#';
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2223      	movs	r2, #35	; 0x23
 800194c:	705a      	strb	r2, [r3, #1]
        continue;
 800194e:	bf00      	nop
  while (*++cur) { // cur points at the leading '%' character
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3301      	adds	r3, #1
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1ab      	bne.n	80018b6 <npf_parse_format_spec+0x2e>
 800195e:	e000      	b.n	8001962 <npf_parse_format_spec+0xda>
      default: break;
    }
    break;
 8001960:	bf00      	nop
  }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
  out_spec->field_width_opt = NPF_FMT_SPEC_OPT_NONE;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2200      	movs	r2, #0
 8001966:	709a      	strb	r2, [r3, #2]
  if (*cur == '*') {
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b2a      	cmp	r3, #42	; 0x2a
 800196e:	d106      	bne.n	800197e <npf_parse_format_spec+0xf6>
    out_spec->field_width_opt = NPF_FMT_SPEC_OPT_STAR;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2202      	movs	r2, #2
 8001974:	709a      	strb	r2, [r3, #2]
    ++cur;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3301      	adds	r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	e01d      	b.n	80019ba <npf_parse_format_spec+0x132>
  } else {
    out_spec->field_width = 0;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	605a      	str	r2, [r3, #4]
    while ((*cur >= '0') && (*cur <= '9')) {
 8001984:	e011      	b.n	80019aa <npf_parse_format_spec+0x122>
      out_spec->field_width_opt = NPF_FMT_SPEC_OPT_LITERAL;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2201      	movs	r2, #1
 800198a:	709a      	strb	r2, [r3, #2]
      out_spec->field_width = (out_spec->field_width * 10) + (*cur++ - '0');
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4619      	mov	r1, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	60fa      	str	r2, [r7, #12]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	3b30      	subs	r3, #48	; 0x30
 80019a4:	18ca      	adds	r2, r1, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	605a      	str	r2, [r3, #4]
    while ((*cur >= '0') && (*cur <= '9')) {
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b2f      	cmp	r3, #47	; 0x2f
 80019b0:	d903      	bls.n	80019ba <npf_parse_format_spec+0x132>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b39      	cmp	r3, #57	; 0x39
 80019b8:	d9e5      	bls.n	8001986 <npf_parse_format_spec+0xfe>
    }
  }
#endif

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
  out_spec->prec = 0;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
  out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	729a      	strb	r2, [r3, #10]
  if (*cur == '.') {
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b2e      	cmp	r3, #46	; 0x2e
 80019cc:	d133      	bne.n	8001a36 <npf_parse_format_spec+0x1ae>
    ++cur;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3301      	adds	r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
    if (*cur == '*') {
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b2a      	cmp	r3, #42	; 0x2a
 80019da:	d106      	bne.n	80019ea <npf_parse_format_spec+0x162>
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_STAR;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2202      	movs	r2, #2
 80019e0:	729a      	strb	r2, [r3, #10]
      ++cur;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3301      	adds	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e025      	b.n	8001a36 <npf_parse_format_spec+0x1ae>
    } else {
      if (*cur == '-') {
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b2d      	cmp	r3, #45	; 0x2d
 80019f0:	d106      	bne.n	8001a00 <npf_parse_format_spec+0x178>
        ++cur;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3301      	adds	r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
        out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2200      	movs	r2, #0
 80019fc:	729a      	strb	r2, [r3, #10]
 80019fe:	e012      	b.n	8001a26 <npf_parse_format_spec+0x19e>
      } else {
        out_spec->prec_opt = NPF_FMT_SPEC_OPT_LITERAL;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2201      	movs	r2, #1
 8001a04:	729a      	strb	r2, [r3, #10]
      }
      while ((*cur >= '0') && (*cur <= '9')) {
 8001a06:	e00e      	b.n	8001a26 <npf_parse_format_spec+0x19e>
        out_spec->prec = (out_spec->prec * 10) + (*cur++ - '0');
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4619      	mov	r1, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	60fa      	str	r2, [r7, #12]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	3b30      	subs	r3, #48	; 0x30
 8001a20:	18ca      	adds	r2, r1, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	60da      	str	r2, [r3, #12]
      while ((*cur >= '0') && (*cur <= '9')) {
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b2f      	cmp	r3, #47	; 0x2f
 8001a2c:	d903      	bls.n	8001a36 <npf_parse_format_spec+0x1ae>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b39      	cmp	r3, #57	; 0x39
 8001a34:	d9e8      	bls.n	8001a08 <npf_parse_format_spec+0x180>
      }
    }
  }
#endif

  out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_NONE;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	741a      	strb	r2, [r3, #16]
  switch (*cur++) { // Length modifier
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	60fa      	str	r2, [r7, #12]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b6c      	cmp	r3, #108	; 0x6c
 8001a46:	d013      	beq.n	8001a70 <npf_parse_format_spec+0x1e8>
 8001a48:	2b6c      	cmp	r3, #108	; 0x6c
 8001a4a:	dc19      	bgt.n	8001a80 <npf_parse_format_spec+0x1f8>
 8001a4c:	2b4c      	cmp	r3, #76	; 0x4c
 8001a4e:	d013      	beq.n	8001a78 <npf_parse_format_spec+0x1f0>
 8001a50:	2b68      	cmp	r3, #104	; 0x68
 8001a52:	d115      	bne.n	8001a80 <npf_parse_format_spec+0x1f8>
    case 'h':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_SHORT;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2201      	movs	r2, #1
 8001a58:	741a      	strb	r2, [r3, #16]
      if (*cur == 'h') {
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b68      	cmp	r3, #104	; 0x68
 8001a60:	d112      	bne.n	8001a88 <npf_parse_format_spec+0x200>
        out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_CHAR;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2203      	movs	r2, #3
 8001a66:	741a      	strb	r2, [r3, #16]
        ++cur;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001a6e:	e00b      	b.n	8001a88 <npf_parse_format_spec+0x200>
    case 'l':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LONG;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2204      	movs	r2, #4
 8001a74:	741a      	strb	r2, [r3, #16]
      if (*cur == 'l') {
        out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LARGE_LONG_LONG;
        ++cur;
      }
#endif
      break;
 8001a76:	e008      	b.n	8001a8a <npf_parse_format_spec+0x202>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    case 'L':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LONG_DOUBLE;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	741a      	strb	r2, [r3, #16]
      break;
 8001a7e:	e004      	b.n	8001a8a <npf_parse_format_spec+0x202>
      break;
    case 't':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LARGE_PTRDIFFT;
      break;
#endif
    default: --cur; break;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	e000      	b.n	8001a8a <npf_parse_format_spec+0x202>
      break;
 8001a88:	bf00      	nop
  }

  switch (*cur++) { // Conversion specifier
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	60fa      	str	r2, [r7, #12]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	3b25      	subs	r3, #37	; 0x25
 8001a94:	2b53      	cmp	r3, #83	; 0x53
 8001a96:	f200 80e8 	bhi.w	8001c6a <npf_parse_format_spec+0x3e2>
 8001a9a:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <npf_parse_format_spec+0x218>)
 8001a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa0:	08001bf1 	.word	0x08001bf1
 8001aa4:	08001c6b 	.word	0x08001c6b
 8001aa8:	08001c6b 	.word	0x08001c6b
 8001aac:	08001c6b 	.word	0x08001c6b
 8001ab0:	08001c6b 	.word	0x08001c6b
 8001ab4:	08001c6b 	.word	0x08001c6b
 8001ab8:	08001c6b 	.word	0x08001c6b
 8001abc:	08001c6b 	.word	0x08001c6b
 8001ac0:	08001c6b 	.word	0x08001c6b
 8001ac4:	08001c6b 	.word	0x08001c6b
 8001ac8:	08001c6b 	.word	0x08001c6b
 8001acc:	08001c6b 	.word	0x08001c6b
 8001ad0:	08001c6b 	.word	0x08001c6b
 8001ad4:	08001c6b 	.word	0x08001c6b
 8001ad8:	08001c6b 	.word	0x08001c6b
 8001adc:	08001c6b 	.word	0x08001c6b
 8001ae0:	08001c6b 	.word	0x08001c6b
 8001ae4:	08001c6b 	.word	0x08001c6b
 8001ae8:	08001c6b 	.word	0x08001c6b
 8001aec:	08001c6b 	.word	0x08001c6b
 8001af0:	08001c6b 	.word	0x08001c6b
 8001af4:	08001c6b 	.word	0x08001c6b
 8001af8:	08001c6b 	.word	0x08001c6b
 8001afc:	08001c6b 	.word	0x08001c6b
 8001b00:	08001c6b 	.word	0x08001c6b
 8001b04:	08001c6b 	.word	0x08001c6b
 8001b08:	08001c6b 	.word	0x08001c6b
 8001b0c:	08001c6b 	.word	0x08001c6b
 8001b10:	08001c6b 	.word	0x08001c6b
 8001b14:	08001c6b 	.word	0x08001c6b
 8001b18:	08001c6b 	.word	0x08001c6b
 8001b1c:	08001c6b 	.word	0x08001c6b
 8001b20:	08001c6b 	.word	0x08001c6b
 8001b24:	08001c41 	.word	0x08001c41
 8001b28:	08001c6b 	.word	0x08001c6b
 8001b2c:	08001c6b 	.word	0x08001c6b
 8001b30:	08001c6b 	.word	0x08001c6b
 8001b34:	08001c6b 	.word	0x08001c6b
 8001b38:	08001c6b 	.word	0x08001c6b
 8001b3c:	08001c6b 	.word	0x08001c6b
 8001b40:	08001c6b 	.word	0x08001c6b
 8001b44:	08001c6b 	.word	0x08001c6b
 8001b48:	08001c6b 	.word	0x08001c6b
 8001b4c:	08001c6b 	.word	0x08001c6b
 8001b50:	08001c6b 	.word	0x08001c6b
 8001b54:	08001c6b 	.word	0x08001c6b
 8001b58:	08001c6b 	.word	0x08001c6b
 8001b5c:	08001c6b 	.word	0x08001c6b
 8001b60:	08001c6b 	.word	0x08001c6b
 8001b64:	08001c6b 	.word	0x08001c6b
 8001b68:	08001c6b 	.word	0x08001c6b
 8001b6c:	08001c33 	.word	0x08001c33
 8001b70:	08001c6b 	.word	0x08001c6b
 8001b74:	08001c6b 	.word	0x08001c6b
 8001b78:	08001c6b 	.word	0x08001c6b
 8001b7c:	08001c6b 	.word	0x08001c6b
 8001b80:	08001c6b 	.word	0x08001c6b
 8001b84:	08001c6b 	.word	0x08001c6b
 8001b88:	08001c6b 	.word	0x08001c6b
 8001b8c:	08001c6b 	.word	0x08001c6b
 8001b90:	08001c6b 	.word	0x08001c6b
 8001b94:	08001c6b 	.word	0x08001c6b
 8001b98:	08001bff 	.word	0x08001bff
 8001b9c:	08001c1b 	.word	0x08001c1b
 8001ba0:	08001c6b 	.word	0x08001c6b
 8001ba4:	08001c47 	.word	0x08001c47
 8001ba8:	08001c6b 	.word	0x08001c6b
 8001bac:	08001c6b 	.word	0x08001c6b
 8001bb0:	08001c1b 	.word	0x08001c1b
 8001bb4:	08001c6b 	.word	0x08001c6b
 8001bb8:	08001c6b 	.word	0x08001c6b
 8001bbc:	08001c6b 	.word	0x08001c6b
 8001bc0:	08001c6b 	.word	0x08001c6b
 8001bc4:	08001c6b 	.word	0x08001c6b
 8001bc8:	08001c23 	.word	0x08001c23
 8001bcc:	08001c5d 	.word	0x08001c5d
 8001bd0:	08001c6b 	.word	0x08001c6b
 8001bd4:	08001c6b 	.word	0x08001c6b
 8001bd8:	08001c0d 	.word	0x08001c0d
 8001bdc:	08001c6b 	.word	0x08001c6b
 8001be0:	08001c2b 	.word	0x08001c2b
 8001be4:	08001c6b 	.word	0x08001c6b
 8001be8:	08001c6b 	.word	0x08001c6b
 8001bec:	08001c39 	.word	0x08001c39
    case '%':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_PERCENT;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8001bfc:	e038      	b.n	8001c70 <npf_parse_format_spec+0x3e8>
    case 'c':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_CHAR;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2201      	movs	r2, #1
 8001c02:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	2200      	movs	r2, #0
 8001c08:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8001c0a:	e031      	b.n	8001c70 <npf_parse_format_spec+0x3e8>
    case 's':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_STRING;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
      out_spec->leading_zero_pad = 0;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2200      	movs	r2, #0
 8001c16:	725a      	strb	r2, [r3, #9]
#endif
      break;
 8001c18:	e02a      	b.n	8001c70 <npf_parse_format_spec+0x3e8>

    case 'i':
    case 'd':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_SIGNED_INT;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	745a      	strb	r2, [r3, #17]
      break;
 8001c20:	e026      	b.n	8001c70 <npf_parse_format_spec+0x3e8>

    case 'o':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_OCTAL;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2204      	movs	r2, #4
 8001c26:	745a      	strb	r2, [r3, #17]
      break;
 8001c28:	e022      	b.n	8001c70 <npf_parse_format_spec+0x3e8>
    case 'u':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_UNSIGNED_INT;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2206      	movs	r2, #6
 8001c2e:	745a      	strb	r2, [r3, #17]
      break;
 8001c30:	e01e      	b.n	8001c70 <npf_parse_format_spec+0x3e8>

    case 'X':
      out_spec->case_adjust = 0;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2200      	movs	r2, #0
 8001c36:	749a      	strb	r2, [r3, #18]
    case 'x':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_HEX_INT;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	745a      	strb	r2, [r3, #17]
      break;
 8001c3e:	e017      	b.n	8001c70 <npf_parse_format_spec+0x3e8>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    case 'F':
      out_spec->case_adjust = 0;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2200      	movs	r2, #0
 8001c44:	749a      	strb	r2, [r3, #18]
    case 'f':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_FLOAT_DECIMAL;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2208      	movs	r2, #8
 8001c4a:	745a      	strb	r2, [r3, #17]
      if (out_spec->prec_opt == NPF_FMT_SPEC_OPT_NONE) { out_spec->prec = 6; }
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	7a9b      	ldrb	r3, [r3, #10]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10c      	bne.n	8001c6e <npf_parse_format_spec+0x3e6>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	2206      	movs	r2, #6
 8001c58:	60da      	str	r2, [r3, #12]
      break;
 8001c5a:	e008      	b.n	8001c6e <npf_parse_format_spec+0x3e6>
#endif
      break;
#endif

    case 'p':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_POINTER;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	2207      	movs	r2, #7
 8001c60:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2200      	movs	r2, #0
 8001c66:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8001c68:	e002      	b.n	8001c70 <npf_parse_format_spec+0x3e8>
    case 'b':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_BINARY;
      break;
#endif

    default: return 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e003      	b.n	8001c76 <npf_parse_format_spec+0x3ee>
      break;
 8001c6e:	bf00      	nop
  }

  return (int)(cur - format);
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	1ad3      	subs	r3, r2, r3
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop

08001c84 <npf_itoa_rev>:

int npf_itoa_rev(char *buf, npf_int_t i) {
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  int n = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
  int const sign = (i >= 0) ? 1 : -1;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db01      	blt.n	8001c9c <npf_itoa_rev+0x18>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e001      	b.n	8001ca0 <npf_itoa_rev+0x1c>
 8001c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca0:	60bb      	str	r3, [r7, #8]
  do { *buf++ = (char)('0' + (sign * (i % 10))); i /= 10; ++n; } while (i);
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	b2d8      	uxtb	r0, r3
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <npf_itoa_rev+0x78>)
 8001caa:	fb83 1302 	smull	r1, r3, r3, r2
 8001cae:	1099      	asrs	r1, r3, #2
 8001cb0:	17d3      	asrs	r3, r2, #31
 8001cb2:	1ac9      	subs	r1, r1, r3
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	1ad1      	subs	r1, r2, r3
 8001cbe:	b2cb      	uxtb	r3, r1
 8001cc0:	fb10 f303 	smulbb	r3, r0, r3
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	1c59      	adds	r1, r3, #1
 8001cca:	6079      	str	r1, [r7, #4]
 8001ccc:	3230      	adds	r2, #48	; 0x30
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <npf_itoa_rev+0x78>)
 8001cd6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cda:	1092      	asrs	r2, r2, #2
 8001cdc:	17db      	asrs	r3, r3, #31
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1d9      	bne.n	8001ca2 <npf_itoa_rev+0x1e>
  return n;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	66666667 	.word	0x66666667

08001d00 <npf_utoa_rev>:

int npf_utoa_rev(char *buf, npf_uint_t i, unsigned base, unsigned case_adj) {
 8001d00:	b480      	push	{r7}
 8001d02:	b087      	sub	sp, #28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	603b      	str	r3, [r7, #0]
  int n = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  do {
    unsigned const d = (unsigned)(i % base);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	fbb3 f2f2 	udiv	r2, r3, r2
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	fb01 f202 	mul.w	r2, r1, r2
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
    *buf++ = (char)((d < 10) ? ('0' + d) : ('A' + case_adj + (d - 10)));
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2b09      	cmp	r3, #9
 8001d28:	d804      	bhi.n	8001d34 <npf_utoa_rev+0x34>
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	3330      	adds	r3, #48	; 0x30
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	e007      	b.n	8001d44 <npf_utoa_rev+0x44>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	3337      	adds	r3, #55	; 0x37
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1c59      	adds	r1, r3, #1
 8001d48:	60f9      	str	r1, [r7, #12]
 8001d4a:	701a      	strb	r2, [r3, #0]
    i /= base;
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	60bb      	str	r3, [r7, #8]
    ++n;
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
  } while (i);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1d7      	bne.n	8001d12 <npf_utoa_rev+0x12>
  return n;
 8001d62:	697b      	ldr	r3, [r7, #20]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	371c      	adds	r7, #28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <npf_fsplit_abs>:
  NPF_FRACTION_BIN_DIGITS = 64,
  NPF_MAX_FRACTION_DEC_DIGITS = 8
};

int npf_fsplit_abs(float f, uint64_t *out_int_part, uint64_t *out_frac_part,
                   int *out_frac_base10_neg_exp) {
 8001d70:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001d74:	b0af      	sub	sp, #188	; 0xbc
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
 8001d7c:	6738      	str	r0, [r7, #112]	; 0x70
 8001d7e:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001d80:	66ba      	str	r2, [r7, #104]	; 0x68
     http://0x80.pl/notesen/2015-12-29-float-to-string.html
     grisu2 (https://bit.ly/2JgMggX) and ryu (https://bit.ly/2RLXSg0)
     are fast + precise + round, but require large lookup tables. */

  uint32_t f_bits; { // union-cast is UB, let compiler optimize byte-copy loop.
    char const *src = (char const *)&f;
 8001d82:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    char *dst = (char *)&f_bits;
 8001d8a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (unsigned i = 0; i < sizeof(f_bits); ++i) { dst[i] = src[i]; }
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d98:	e010      	b.n	8001dbc <npf_fsplit_abs+0x4c>
 8001d9a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001d9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001da2:	18d1      	adds	r1, r2, r3
 8001da4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001da8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dac:	441a      	add	r2, r3
 8001dae:	780b      	ldrb	r3, [r1, #0]
 8001db0:	7013      	strb	r3, [r2, #0]
 8001db2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001db6:	3301      	adds	r3, #1
 8001db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001dbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d9ea      	bls.n	8001d9a <npf_fsplit_abs+0x2a>
  }

  int const exponent =
    ((int)((f_bits >> NPF_MANTISSA_BITS) & ((1u << NPF_EXPONENT_BITS) - 1u)) -
 8001dc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dc6:	0ddb      	lsrs	r3, r3, #23
 8001dc8:	b2db      	uxtb	r3, r3
  int const exponent =
 8001dca:	3b96      	subs	r3, #150	; 0x96
 8001dcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      NPF_EXPONENT_BIAS) - NPF_MANTISSA_BITS;

  if (exponent >= (64 - NPF_MANTISSA_BITS)) { return 0; } // value is out of range
 8001dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dd4:	2b28      	cmp	r3, #40	; 0x28
 8001dd6:	dd01      	ble.n	8001ddc <npf_fsplit_abs+0x6c>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e15b      	b.n	8002094 <npf_fsplit_abs+0x324>

  uint32_t const implicit_one = 1u << NPF_MANTISSA_BITS;
 8001ddc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001de0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t const mantissa = f_bits & (implicit_one - 1);
 8001de4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001de8:	1e5a      	subs	r2, r3, #1
 8001dea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dec:	4013      	ands	r3, r2
 8001dee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t const mantissa_norm = mantissa | implicit_one;
 8001df2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  if (exponent > 0) {
 8001e00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	dd18      	ble.n	8001e3a <npf_fsplit_abs+0xca>
    *out_int_part = (uint64_t)mantissa_norm << exponent;
 8001e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	469a      	mov	sl, r3
 8001e10:	4693      	mov	fp, r2
 8001e12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001e16:	f1a1 0320 	sub.w	r3, r1, #32
 8001e1a:	f1c1 0220 	rsb	r2, r1, #32
 8001e1e:	fa0b f501 	lsl.w	r5, fp, r1
 8001e22:	fa0a f303 	lsl.w	r3, sl, r3
 8001e26:	431d      	orrs	r5, r3
 8001e28:	fa2a f202 	lsr.w	r2, sl, r2
 8001e2c:	4315      	orrs	r5, r2
 8001e2e:	fa0a f401 	lsl.w	r4, sl, r1
 8001e32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e34:	e9c3 4500 	strd	r4, r5, [r3]
 8001e38:	e029      	b.n	8001e8e <npf_fsplit_abs+0x11e>
  } else if (exponent < 0) {
 8001e3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	da1b      	bge.n	8001e7a <npf_fsplit_abs+0x10a>
    if (-exponent > NPF_MANTISSA_BITS) {
 8001e42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e46:	f113 0f17 	cmn.w	r3, #23
 8001e4a:	da07      	bge.n	8001e5c <npf_fsplit_abs+0xec>
      *out_int_part = 0;
 8001e4c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	e9c1 2300 	strd	r2, r3, [r1]
 8001e5a:	e018      	b.n	8001e8e <npf_fsplit_abs+0x11e>
    } else {
      *out_int_part = mantissa_norm >> -exponent;
 8001e5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e60:	425a      	negs	r2, r3
 8001e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e66:	40d3      	lsrs	r3, r2
 8001e68:	2200      	movs	r2, #0
 8001e6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e6c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e70:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8001e74:	e9c3 1200 	strd	r1, r2, [r3]
 8001e78:	e009      	b.n	8001e8e <npf_fsplit_abs+0x11e>
    }
  } else {
    *out_int_part = mantissa_norm;
 8001e7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e7e:	2200      	movs	r2, #0
 8001e80:	643b      	str	r3, [r7, #64]	; 0x40
 8001e82:	647a      	str	r2, [r7, #68]	; 0x44
 8001e84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e86:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001e8a:	e9c3 1200 	strd	r1, r2, [r3]
  }

  uint64_t frac; {
    int const shift = NPF_FRACTION_BIN_DIGITS + exponent - 4;
 8001e8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e92:	333c      	adds	r3, #60	; 0x3c
 8001e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if ((shift >= (NPF_FRACTION_BIN_DIGITS - 4)) || (shift < 0)) {
 8001e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e9c:	2b3b      	cmp	r3, #59	; 0x3b
 8001e9e:	dc03      	bgt.n	8001ea8 <npf_fsplit_abs+0x138>
 8001ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	da06      	bge.n	8001eb6 <npf_fsplit_abs+0x146>
      frac = 0;
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8001eb4:	e022      	b.n	8001efc <npf_fsplit_abs+0x18c>
    } else {
      frac = ((uint64_t)mantissa_norm) << shift;
 8001eb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eba:	2200      	movs	r2, #0
 8001ebc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ebe:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ec0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001ec4:	f1a1 0320 	sub.w	r3, r1, #32
 8001ec8:	f1c1 0220 	rsb	r2, r1, #32
 8001ecc:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001ed0:	4628      	mov	r0, r5
 8001ed2:	4088      	lsls	r0, r1
 8001ed4:	6678      	str	r0, [r7, #100]	; 0x64
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	fa00 f303 	lsl.w	r3, r0, r3
 8001edc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001ede:	4318      	orrs	r0, r3
 8001ee0:	6678      	str	r0, [r7, #100]	; 0x64
 8001ee2:	4623      	mov	r3, r4
 8001ee4:	fa23 f202 	lsr.w	r2, r3, r2
 8001ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eea:	4313      	orrs	r3, r2
 8001eec:	667b      	str	r3, [r7, #100]	; 0x64
 8001eee:	4623      	mov	r3, r4
 8001ef0:	408b      	lsls	r3, r1
 8001ef2:	663b      	str	r3, [r7, #96]	; 0x60
 8001ef4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001ef8:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    }
    // multiply off the leading one's digit
    frac &= 0x0fffffffffffffffllu;
 8001efc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001f00:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f08:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001f0c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    frac *= 10;
 8001f10:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8001f14:	4622      	mov	r2, r4
 8001f16:	462b      	mov	r3, r5
 8001f18:	f04f 0000 	mov.w	r0, #0
 8001f1c:	f04f 0100 	mov.w	r1, #0
 8001f20:	0099      	lsls	r1, r3, #2
 8001f22:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f26:	0090      	lsls	r0, r2, #2
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	eb12 0804 	adds.w	r8, r2, r4
 8001f30:	eb43 0905 	adc.w	r9, r3, r5
 8001f34:	eb18 0308 	adds.w	r3, r8, r8
 8001f38:	623b      	str	r3, [r7, #32]
 8001f3a:	eb49 0309 	adc.w	r3, r9, r9
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f44:	e9c7 892a 	strd	r8, r9, [r7, #168]	; 0xa8
  }

  { // Count the number of 0s at the beginning of the fractional part.
    int frac_base10_neg_exp = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    while (frac && ((frac >> (NPF_FRACTION_BIN_DIGITS - 4))) == 0) {
 8001f4e:	e02f      	b.n	8001fb0 <npf_fsplit_abs+0x240>
      ++frac_base10_neg_exp;
 8001f50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f54:	3301      	adds	r3, #1
 8001f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      frac &= 0x0fffffffffffffffllu;
 8001f5a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001f5e:	61ba      	str	r2, [r7, #24]
 8001f60:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001f6a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
      frac *= 10;
 8001f6e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8001f72:	4622      	mov	r2, r4
 8001f74:	462b      	mov	r3, r5
 8001f76:	f04f 0000 	mov.w	r0, #0
 8001f7a:	f04f 0100 	mov.w	r1, #0
 8001f7e:	0099      	lsls	r1, r3, #2
 8001f80:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f84:	0090      	lsls	r0, r2, #2
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	1911      	adds	r1, r2, r4
 8001f8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f8e:	416b      	adcs	r3, r5
 8001f90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f92:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8001f96:	460b      	mov	r3, r1
 8001f98:	18db      	adds	r3, r3, r3
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	eb42 0303 	adc.w	r3, r2, r3
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001fa8:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8001fac:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    while (frac && ((frac >> (NPF_FRACTION_BIN_DIGITS - 4))) == 0) {
 8001fb0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	d00a      	beq.n	8001fce <npf_fsplit_abs+0x25e>
 8001fb8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001fbc:	f04f 0000 	mov.w	r0, #0
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	0f18      	lsrs	r0, r3, #28
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	ea50 0301 	orrs.w	r3, r0, r1
 8001fcc:	d0c0      	beq.n	8001f50 <npf_fsplit_abs+0x1e0>
    }
    *out_frac_base10_neg_exp = frac_base10_neg_exp;
 8001fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fd0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001fd4:	601a      	str	r2, [r3, #0]
  }

  { // Convert the fractional part to base 10.
    unsigned frac_part = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    for (int i = 0; frac && (i < NPF_MAX_FRACTION_DEC_DIGITS); ++i) {
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001fe2:	e044      	b.n	800206e <npf_fsplit_abs+0x2fe>
      frac_part *= 10;
 8001fe4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      frac_part += (unsigned)(frac >> (NPF_FRACTION_BIN_DIGITS - 4));
 8001ff4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	0f0a      	lsrs	r2, r1, #28
 8002002:	2300      	movs	r3, #0
 8002004:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002008:	4413      	add	r3, r2
 800200a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      frac &= 0x0fffffffffffffffllu;
 800200e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002012:	60ba      	str	r2, [r7, #8]
 8002014:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800201e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
      frac *= 10;
 8002022:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8002026:	4622      	mov	r2, r4
 8002028:	462b      	mov	r3, r5
 800202a:	f04f 0000 	mov.w	r0, #0
 800202e:	f04f 0100 	mov.w	r1, #0
 8002032:	0099      	lsls	r1, r3, #2
 8002034:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002038:	0090      	lsls	r0, r2, #2
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	1911      	adds	r1, r2, r4
 8002040:	6539      	str	r1, [r7, #80]	; 0x50
 8002042:	416b      	adcs	r3, r5
 8002044:	657b      	str	r3, [r7, #84]	; 0x54
 8002046:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800204a:	460b      	mov	r3, r1
 800204c:	18db      	adds	r3, r3, r3
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	eb42 0303 	adc.w	r3, r2, r3
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	e9d7 3400 	ldrd	r3, r4, [r7]
 800205c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8002060:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    for (int i = 0; frac && (i < NPF_MAX_FRACTION_DEC_DIGITS); ++i) {
 8002064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002068:	3301      	adds	r3, #1
 800206a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800206e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002072:	4313      	orrs	r3, r2
 8002074:	d003      	beq.n	800207e <npf_fsplit_abs+0x30e>
 8002076:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800207a:	2b07      	cmp	r3, #7
 800207c:	ddb2      	ble.n	8001fe4 <npf_fsplit_abs+0x274>
    }
    *out_frac_part = frac_part;
 800207e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002082:	2200      	movs	r2, #0
 8002084:	633b      	str	r3, [r7, #48]	; 0x30
 8002086:	637a      	str	r2, [r7, #52]	; 0x34
 8002088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800208a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800208e:	e9c3 1200 	strd	r1, r2, [r3]
  }
  return 1;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	37bc      	adds	r7, #188	; 0xbc
 8002098:	46bd      	mov	sp, r7
 800209a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800209e:	4770      	bx	lr

080020a0 <npf_ftoa_rev>:

int npf_ftoa_rev(char *buf, float f, char case_adj, int *out_frac_chars) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b092      	sub	sp, #72	; 0x48
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80020ac:	460b      	mov	r3, r1
 80020ae:	603a      	str	r2, [r7, #0]
 80020b0:	71fb      	strb	r3, [r7, #7]
  uint32_t f_bits; { // union-cast is UB, let compiler optimize byte-copy loop.
    char const *src = (char const *)&f;
 80020b2:	f107 0308 	add.w	r3, r7, #8
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
    char *dst = (char *)&f_bits;
 80020b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (unsigned i = 0; i < sizeof(f_bits); ++i) { dst[i] = src[i]; }
 80020be:	2300      	movs	r3, #0
 80020c0:	647b      	str	r3, [r7, #68]	; 0x44
 80020c2:	e00a      	b.n	80020da <npf_ftoa_rev+0x3a>
 80020c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c8:	441a      	add	r2, r3
 80020ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ce:	440b      	add	r3, r1
 80020d0:	7812      	ldrb	r2, [r2, #0]
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d6:	3301      	adds	r3, #1
 80020d8:	647b      	str	r3, [r7, #68]	; 0x44
 80020da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d9f1      	bls.n	80020c4 <npf_ftoa_rev+0x24>
  }

  if ((uint8_t)(f_bits >> 23) == 0xFF) {
 80020e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e2:	0ddb      	lsrs	r3, r3, #23
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2bff      	cmp	r3, #255	; 0xff
 80020e8:	d130      	bne.n	800214c <npf_ftoa_rev+0xac>
    if (f_bits & 0x7fffff) {
 80020ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d014      	beq.n	800211e <npf_ftoa_rev+0x7e>
      for (int i = 0; i < 3; ++i) { *buf++ = (char)("NAN"[i] + case_adj); }
 80020f4:	2300      	movs	r3, #0
 80020f6:	643b      	str	r3, [r7, #64]	; 0x40
 80020f8:	e00d      	b.n	8002116 <npf_ftoa_rev+0x76>
 80020fa:	4a56      	ldr	r2, [pc, #344]	; (8002254 <npf_ftoa_rev+0x1b4>)
 80020fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020fe:	4413      	add	r3, r2
 8002100:	7819      	ldrb	r1, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	60fa      	str	r2, [r7, #12]
 8002108:	79fa      	ldrb	r2, [r7, #7]
 800210a:	440a      	add	r2, r1
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	701a      	strb	r2, [r3, #0]
 8002110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002112:	3301      	adds	r3, #1
 8002114:	643b      	str	r3, [r7, #64]	; 0x40
 8002116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002118:	2b02      	cmp	r3, #2
 800211a:	ddee      	ble.n	80020fa <npf_ftoa_rev+0x5a>
 800211c:	e013      	b.n	8002146 <npf_ftoa_rev+0xa6>
    } else {
      for (int i = 0; i < 3; ++i) { *buf++ = (char)("FNI"[i] + case_adj); }
 800211e:	2300      	movs	r3, #0
 8002120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002122:	e00d      	b.n	8002140 <npf_ftoa_rev+0xa0>
 8002124:	4a4c      	ldr	r2, [pc, #304]	; (8002258 <npf_ftoa_rev+0x1b8>)
 8002126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002128:	4413      	add	r3, r2
 800212a:	7819      	ldrb	r1, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	60fa      	str	r2, [r7, #12]
 8002132:	79fa      	ldrb	r2, [r7, #7]
 8002134:	440a      	add	r2, r1
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800213c:	3301      	adds	r3, #1
 800213e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002142:	2b02      	cmp	r3, #2
 8002144:	ddee      	ble.n	8002124 <npf_ftoa_rev+0x84>
    }
    return -3;
 8002146:	f06f 0302 	mvn.w	r3, #2
 800214a:	e07f      	b.n	800224c <npf_ftoa_rev+0x1ac>
  }

  uint64_t int_part, frac_part;
  int frac_base10_neg_exp;
  if (npf_fsplit_abs(f, &int_part, &frac_part, &frac_base10_neg_exp) == 0) {
 800214c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002150:	f107 0214 	add.w	r2, r7, #20
 8002154:	f107 0118 	add.w	r1, r7, #24
 8002158:	f107 0320 	add.w	r3, r7, #32
 800215c:	4618      	mov	r0, r3
 800215e:	eeb0 0a67 	vmov.f32	s0, s15
 8002162:	f7ff fe05 	bl	8001d70 <npf_fsplit_abs>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d116      	bne.n	800219a <npf_ftoa_rev+0xfa>
    for (int i = 0; i < 3; ++i) { *buf++ = (char)("ROO"[i] + case_adj); }
 800216c:	2300      	movs	r3, #0
 800216e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002170:	e00d      	b.n	800218e <npf_ftoa_rev+0xee>
 8002172:	4a3a      	ldr	r2, [pc, #232]	; (800225c <npf_ftoa_rev+0x1bc>)
 8002174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002176:	4413      	add	r3, r2
 8002178:	7819      	ldrb	r1, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	60fa      	str	r2, [r7, #12]
 8002180:	79fa      	ldrb	r2, [r7, #7]
 8002182:	440a      	add	r2, r1
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218a:	3301      	adds	r3, #1
 800218c:	63bb      	str	r3, [r7, #56]	; 0x38
 800218e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002190:	2b02      	cmp	r3, #2
 8002192:	ddee      	ble.n	8002172 <npf_ftoa_rev+0xd2>
    return -3;
 8002194:	f06f 0302 	mvn.w	r3, #2
 8002198:	e058      	b.n	800224c <npf_ftoa_rev+0x1ac>
  }

  char *dst = buf;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	637b      	str	r3, [r7, #52]	; 0x34

  while (frac_part) { // write the fractional digits
 800219e:	e01a      	b.n	80021d6 <npf_ftoa_rev+0x136>
    *dst++ = (char)('0' + (frac_part % 10));
 80021a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021a4:	f04f 020a 	mov.w	r2, #10
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	f7fe fd4c 	bl	8000c48 <__aeabi_uldivmod>
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b4:	1c59      	adds	r1, r3, #1
 80021b6:	6379      	str	r1, [r7, #52]	; 0x34
 80021b8:	3230      	adds	r2, #48	; 0x30
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]
    frac_part /= 10;
 80021be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021c2:	f04f 020a 	mov.w	r2, #10
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	f7fe fd3d 	bl	8000c48 <__aeabi_uldivmod>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  while (frac_part) { // write the fractional digits
 80021d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	d1e0      	bne.n	80021a0 <npf_ftoa_rev+0x100>
  }

  // write the 0 digits between the . and the first fractional digit
  while (frac_base10_neg_exp-- > 0) { *dst++ = '0'; }
 80021de:	e004      	b.n	80021ea <npf_ftoa_rev+0x14a>
 80021e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	637a      	str	r2, [r7, #52]	; 0x34
 80021e6:	2230      	movs	r2, #48	; 0x30
 80021e8:	701a      	strb	r2, [r3, #0]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	1e5a      	subs	r2, r3, #1
 80021ee:	617a      	str	r2, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	dcf5      	bgt.n	80021e0 <npf_ftoa_rev+0x140>
  *out_frac_chars = (int)(dst - buf);
 80021f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad2      	subs	r2, r2, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	601a      	str	r2, [r3, #0]
  *dst++ = '.';
 80021fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	637a      	str	r2, [r7, #52]	; 0x34
 8002204:	222e      	movs	r2, #46	; 0x2e
 8002206:	701a      	strb	r2, [r3, #0]

  // write the integer digits
  do { *dst++ = (char)('0' + (int_part % 10)); int_part /= 10; } while (int_part);
 8002208:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800220c:	f04f 020a 	mov.w	r2, #10
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	f7fe fd18 	bl	8000c48 <__aeabi_uldivmod>
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221c:	1c59      	adds	r1, r3, #1
 800221e:	6379      	str	r1, [r7, #52]	; 0x34
 8002220:	3230      	adds	r2, #48	; 0x30
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800222a:	f04f 020a 	mov.w	r2, #10
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	f7fe fd09 	bl	8000c48 <__aeabi_uldivmod>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800223e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002242:	4313      	orrs	r3, r2
 8002244:	d1e0      	bne.n	8002208 <npf_ftoa_rev+0x168>
  return (int)(dst - buf);
 8002246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1ad3      	subs	r3, r2, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	3748      	adds	r7, #72	; 0x48
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	0800c638 	.word	0x0800c638
 8002258:	0800c63c 	.word	0x0800c63c
 800225c:	0800c640 	.word	0x0800c640

08002260 <npf_bufputc>:
  #undef NPF_CLZ
#endif
}
#endif

void npf_bufputc(int c, void *ctx) {
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  npf_bufputc_ctx_t *bpc = (npf_bufputc_ctx_t *)ctx;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	60fb      	str	r3, [r7, #12]
  if (bpc->cur < bpc->len) { bpc->dst[bpc->cur++] = (char)c; }
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	429a      	cmp	r2, r3
 8002278:	d20a      	bcs.n	8002290 <npf_bufputc+0x30>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	1c58      	adds	r0, r3, #1
 8002284:	68f9      	ldr	r1, [r7, #12]
 8002286:	6088      	str	r0, [r1, #8]
 8002288:	4413      	add	r3, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	701a      	strb	r2, [r3, #0]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <npf_bufputc_nop>:

void npf_bufputc_nop(int c, void *ctx) { (void)c; (void)ctx; }
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <npf_putc_cnt>:
  npf_putc pc;
  void *ctx;
  int n;
} npf_cnt_putc_ctx_t;

static void npf_putc_cnt(int c, void *ctx) {
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
  npf_cnt_putc_ctx_t *pc_cnt = (npf_cnt_putc_ctx_t *)ctx;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	60fb      	str	r3, [r7, #12]
  ++pc_cnt->n;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	609a      	str	r2, [r3, #8]
  pc_cnt->pc(c, pc_cnt->ctx); // sibling-call optimization
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	6852      	ldr	r2, [r2, #4]
 80022d2:	4611      	mov	r1, r2
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4798      	blx	r3
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <npf_vpprintf>:
  case NPF_FMT_SPEC_LEN_MOD_##MOD: val = (CAST_TO)va_arg(args, EXTRACT_AS); break

#define NPF_WRITEBACK(MOD, TYPE) \
  case NPF_FMT_SPEC_LEN_MOD_##MOD: *(va_arg(args, TYPE *)) = (TYPE)pc_cnt.n; break

int npf_vpprintf(npf_putc pc, void *pc_ctx, char const *format, va_list args) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b0a8      	sub	sp, #160	; 0xa0
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  npf_format_spec_t fs;
  char const *cur = format;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  npf_cnt_putc_ctx_t pc_cnt;
  pc_cnt.pc = pc;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	637b      	str	r3, [r7, #52]	; 0x34
  pc_cnt.ctx = pc_ctx;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	63bb      	str	r3, [r7, #56]	; 0x38
  pc_cnt.n = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	63fb      	str	r3, [r7, #60]	; 0x3c

  while (*cur) {
 8002300:	e3a2      	b.n	8002a48 <npf_vpprintf+0x768>
    int const fs_len = (*cur != '%') ? 0 : npf_parse_format_spec(cur, &fs);
 8002302:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b25      	cmp	r3, #37	; 0x25
 800230a:	d108      	bne.n	800231e <npf_vpprintf+0x3e>
 800230c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002310:	4619      	mov	r1, r3
 8002312:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002316:	f7ff fab7 	bl	8001888 <npf_parse_format_spec>
 800231a:	4603      	mov	r3, r0
 800231c:	e000      	b.n	8002320 <npf_vpprintf+0x40>
 800231e:	2300      	movs	r3, #0
 8002320:	663b      	str	r3, [r7, #96]	; 0x60
    if (!fs_len) { NPF_PUTC(*cur++); continue; }
 8002322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10d      	bne.n	8002344 <npf_vpprintf+0x64>
 8002328:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800233a:	4619      	mov	r1, r3
 800233c:	4610      	mov	r0, r2
 800233e:	f7ff ffb8 	bl	80022b2 <npf_putc_cnt>
 8002342:	e381      	b.n	8002a48 <npf_vpprintf+0x768>
    cur += fs_len;
 8002344:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002346:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800234a:	4413      	add	r3, r2
 800234c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    // Extract star-args immediately
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    if (fs.field_width_opt == NPF_FMT_SPEC_OPT_STAR) {
 8002350:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002354:	2b02      	cmp	r3, #2
 8002356:	d110      	bne.n	800237a <npf_vpprintf+0x9a>
      fs.field_width_opt = NPF_FMT_SPEC_OPT_LITERAL;
 8002358:	2301      	movs	r3, #1
 800235a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      fs.field_width = va_arg(args, int);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	1d1a      	adds	r2, r3, #4
 8002362:	603a      	str	r2, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	647b      	str	r3, [r7, #68]	; 0x44
      if (fs.field_width < 0) {
 8002368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236a:	2b00      	cmp	r3, #0
 800236c:	da05      	bge.n	800237a <npf_vpprintf+0x9a>
        fs.field_width = -fs.field_width;
 800236e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002370:	425b      	negs	r3, r3
 8002372:	647b      	str	r3, [r7, #68]	; 0x44
        fs.left_justified = 1;
 8002374:	2301      	movs	r3, #1
 8002376:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
      }
    }
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    if (fs.prec_opt == NPF_FMT_SPEC_OPT_STAR) {
 800237a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800237e:	2b02      	cmp	r3, #2
 8002380:	d10d      	bne.n	800239e <npf_vpprintf+0xbe>
      fs.prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8002382:	2300      	movs	r3, #0
 8002384:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      fs.prec = va_arg(args, int);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	1d1a      	adds	r2, r3, #4
 800238c:	603a      	str	r2, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (fs.prec >= 0) { fs.prec_opt = NPF_FMT_SPEC_OPT_LITERAL; }
 8002392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002394:	2b00      	cmp	r3, #0
 8002396:	db02      	blt.n	800239e <npf_vpprintf+0xbe>
 8002398:	2301      	movs	r3, #1
 800239a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    }
#endif

    union { char cbuf_mem[32]; npf_uint_t binval; } u;
    char *cbuf = u.cbuf_mem, sign_c = 0;
 800239e:	f107 0310 	add.w	r3, r7, #16
 80023a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023a6:	2300      	movs	r3, #0
 80023a8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    int cbuf_len = 0, need_0x = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    int field_pad = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    char pad_c = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    int prec_pad = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    int zero = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
#endif
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    int frac_chars = 0, inf_or_nan = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	633b      	str	r3, [r7, #48]	; 0x30
 80023d2:	2300      	movs	r3, #0
 80023d4:	67bb      	str	r3, [r7, #120]	; 0x78
#endif

    // Extract and convert the argument to string, point cbuf at the text.
    switch (fs.conv_spec) {
 80023d6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80023da:	2b08      	cmp	r3, #8
 80023dc:	f200 81c5 	bhi.w	800276a <npf_vpprintf+0x48a>
 80023e0:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <npf_vpprintf+0x108>)
 80023e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e6:	bf00      	nop
 80023e8:	0800240d 	.word	0x0800240d
 80023ec:	08002421 	.word	0x08002421
 80023f0:	0800243d 	.word	0x0800243d
 80023f4:	08002485 	.word	0x08002485
 80023f8:	0800253b 	.word	0x0800253b
 80023fc:	0800253b 	.word	0x0800253b
 8002400:	0800253b 	.word	0x0800253b
 8002404:	08002677 	.word	0x08002677
 8002408:	08002699 	.word	0x08002699
      case NPF_FMT_SPEC_CONV_PERCENT:
        *cbuf = '%';
 800240c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002410:	2225      	movs	r2, #37	; 0x25
 8002412:	701a      	strb	r2, [r3, #0]
        ++cbuf_len;
 8002414:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002418:	3301      	adds	r3, #1
 800241a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        break;
 800241e:	e1a9      	b.n	8002774 <npf_vpprintf+0x494>

      case NPF_FMT_SPEC_CONV_CHAR:
        *cbuf = (char)va_arg(args, int);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	1d1a      	adds	r2, r3, #4
 8002424:	603a      	str	r2, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800242e:	701a      	strb	r2, [r3, #0]
        ++cbuf_len;
 8002430:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002434:	3301      	adds	r3, #1
 8002436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        break;
 800243a:	e19b      	b.n	8002774 <npf_vpprintf+0x494>

      case NPF_FMT_SPEC_CONV_STRING: {
        cbuf = va_arg(args, char *);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	1d1a      	adds	r2, r3, #4
 8002440:	603a      	str	r2, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        for (char const *s = cbuf; *s; ++s, ++cbuf_len); // strlen
 8002448:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800244c:	677b      	str	r3, [r7, #116]	; 0x74
 800244e:	e007      	b.n	8002460 <npf_vpprintf+0x180>
 8002450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002452:	3301      	adds	r3, #1
 8002454:	677b      	str	r3, [r7, #116]	; 0x74
 8002456:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800245a:	3301      	adds	r3, #1
 800245c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f3      	bne.n	8002450 <npf_vpprintf+0x170>
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
        if (fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) {
 8002468:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800246c:	2b01      	cmp	r3, #1
 800246e:	f040 817e 	bne.w	800276e <npf_vpprintf+0x48e>
          cbuf_len = npf_min(fs.prec, cbuf_len); // prec truncates strings
 8002472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002474:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff f9e5 	bl	8001848 <npf_min>
 800247e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        }
#endif
      } break;
 8002482:	e174      	b.n	800276e <npf_vpprintf+0x48e>

      case NPF_FMT_SPEC_CONV_SIGNED_INT: {
        npf_int_t val = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	673b      	str	r3, [r7, #112]	; 0x70
        switch (fs.length_modifier) {
 8002488:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800248c:	2b04      	cmp	r3, #4
 800248e:	d82d      	bhi.n	80024ec <npf_vpprintf+0x20c>
 8002490:	a201      	add	r2, pc, #4	; (adr r2, 8002498 <npf_vpprintf+0x1b8>)
 8002492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002496:	bf00      	nop
 8002498:	080024ad 	.word	0x080024ad
 800249c:	080024b9 	.word	0x080024b9
 80024a0:	080024c7 	.word	0x080024c7
 80024a4:	080024d3 	.word	0x080024d3
 80024a8:	080024e1 	.word	0x080024e1
          NPF_EXTRACT(NONE, int, int);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	1d1a      	adds	r2, r3, #4
 80024b0:	603a      	str	r2, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	673b      	str	r3, [r7, #112]	; 0x70
 80024b6:	e01a      	b.n	80024ee <npf_vpprintf+0x20e>
          NPF_EXTRACT(SHORT, short, int);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	1d1a      	adds	r2, r3, #4
 80024bc:	603a      	str	r2, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	673b      	str	r3, [r7, #112]	; 0x70
 80024c4:	e013      	b.n	80024ee <npf_vpprintf+0x20e>
          NPF_EXTRACT(LONG_DOUBLE, int, int);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	1d1a      	adds	r2, r3, #4
 80024ca:	603a      	str	r2, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	673b      	str	r3, [r7, #112]	; 0x70
 80024d0:	e00d      	b.n	80024ee <npf_vpprintf+0x20e>
          NPF_EXTRACT(CHAR, char, int);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	1d1a      	adds	r2, r3, #4
 80024d6:	603a      	str	r2, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	673b      	str	r3, [r7, #112]	; 0x70
 80024de:	e006      	b.n	80024ee <npf_vpprintf+0x20e>
          NPF_EXTRACT(LONG, long, long);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	1d1a      	adds	r2, r3, #4
 80024e4:	603a      	str	r2, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	673b      	str	r3, [r7, #112]	; 0x70
 80024ea:	e000      	b.n	80024ee <npf_vpprintf+0x20e>
          NPF_EXTRACT(LARGE_LONG_LONG, long long, long long);
          NPF_EXTRACT(LARGE_INTMAX, intmax_t, intmax_t);
          NPF_EXTRACT(LARGE_SIZET, ssize_t, ssize_t);
          NPF_EXTRACT(LARGE_PTRDIFFT, ptrdiff_t, ptrdiff_t);
#endif
          default: break;
 80024ec:	bf00      	nop
        }

        sign_c = (val < 0) ? '-' : fs.prepend;
 80024ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db02      	blt.n	80024fa <npf_vpprintf+0x21a>
 80024f4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80024f8:	e000      	b.n	80024fc <npf_vpprintf+0x21c>
 80024fa:	232d      	movs	r3, #45	; 0x2d
 80024fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = !val;
 8002500:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002502:	2b00      	cmp	r3, #0
 8002504:	bf0c      	ite	eq
 8002506:	2301      	moveq	r3, #1
 8002508:	2300      	movne	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        // special case, if prec and value are 0, skip
        if (!val && (fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec) {
 800250e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <npf_vpprintf+0x24a>
 8002514:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002518:	2b01      	cmp	r3, #1
 800251a:	d106      	bne.n	800252a <npf_vpprintf+0x24a>
 800251c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <npf_vpprintf+0x24a>
          cbuf_len = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        } else
#endif
        { cbuf_len = npf_itoa_rev(cbuf, val); }
      } break;
 8002528:	e124      	b.n	8002774 <npf_vpprintf+0x494>
        { cbuf_len = npf_itoa_rev(cbuf, val); }
 800252a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800252c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002530:	f7ff fba8 	bl	8001c84 <npf_itoa_rev>
 8002534:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
      } break;
 8002538:	e11c      	b.n	8002774 <npf_vpprintf+0x494>
      case NPF_FMT_SPEC_CONV_BINARY:
#endif
      case NPF_FMT_SPEC_CONV_OCTAL:
      case NPF_FMT_SPEC_CONV_HEX_INT:
      case NPF_FMT_SPEC_CONV_UNSIGNED_INT: {
        npf_uint_t val = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	66fb      	str	r3, [r7, #108]	; 0x6c

        switch (fs.length_modifier) {
 800253e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002542:	2b04      	cmp	r3, #4
 8002544:	d82c      	bhi.n	80025a0 <npf_vpprintf+0x2c0>
 8002546:	a201      	add	r2, pc, #4	; (adr r2, 800254c <npf_vpprintf+0x26c>)
 8002548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254c:	08002561 	.word	0x08002561
 8002550:	0800256d 	.word	0x0800256d
 8002554:	0800257b 	.word	0x0800257b
 8002558:	08002587 	.word	0x08002587
 800255c:	08002595 	.word	0x08002595
          NPF_EXTRACT(NONE, unsigned, unsigned);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	1d1a      	adds	r2, r3, #4
 8002564:	603a      	str	r2, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	66fb      	str	r3, [r7, #108]	; 0x6c
 800256a:	e01a      	b.n	80025a2 <npf_vpprintf+0x2c2>
          NPF_EXTRACT(SHORT, unsigned short, unsigned);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	1d1a      	adds	r2, r3, #4
 8002570:	603a      	str	r2, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002578:	e013      	b.n	80025a2 <npf_vpprintf+0x2c2>
          NPF_EXTRACT(LONG_DOUBLE, unsigned, unsigned);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	1d1a      	adds	r2, r3, #4
 800257e:	603a      	str	r2, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002584:	e00d      	b.n	80025a2 <npf_vpprintf+0x2c2>
          NPF_EXTRACT(CHAR, unsigned char, unsigned);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	1d1a      	adds	r2, r3, #4
 800258a:	603a      	str	r2, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002592:	e006      	b.n	80025a2 <npf_vpprintf+0x2c2>
          NPF_EXTRACT(LONG, unsigned long, unsigned long);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	1d1a      	adds	r2, r3, #4
 8002598:	603a      	str	r2, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800259e:	e000      	b.n	80025a2 <npf_vpprintf+0x2c2>
          NPF_EXTRACT(LARGE_LONG_LONG, unsigned long long, unsigned long long);
          NPF_EXTRACT(LARGE_INTMAX, uintmax_t, uintmax_t);
          NPF_EXTRACT(LARGE_SIZET, size_t, size_t);
          NPF_EXTRACT(LARGE_PTRDIFFT, size_t, size_t);
#endif
          default: break;
 80025a0:	bf00      	nop
        }

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = !val;
 80025a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf0c      	ite	eq
 80025a8:	2301      	moveq	r3, #1
 80025aa:	2300      	movne	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        if (!val && (fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec) {
 80025b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d111      	bne.n	80025da <npf_vpprintf+0x2fa>
 80025b6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d10d      	bne.n	80025da <npf_vpprintf+0x2fa>
 80025be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10a      	bne.n	80025da <npf_vpprintf+0x2fa>
          // Zero value and explicitly-requested zero precision means "print nothing".
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 80025c4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d11f      	bne.n	800260c <npf_vpprintf+0x32c>
 80025cc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01b      	beq.n	800260c <npf_vpprintf+0x32c>
            fs.prec = 1; // octal special case, print a single '0'
 80025d4:	2301      	movs	r3, #1
 80025d6:	64fb      	str	r3, [r7, #76]	; 0x4c
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 80025d8:	e018      	b.n	800260c <npf_vpprintf+0x32c>
        if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) {
          cbuf_len = npf_bin_len(val); u.binval = val;
        } else
#endif
        {
          unsigned const base = (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) ?
 80025da:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
            8u : ((fs.conv_spec == NPF_FMT_SPEC_CONV_HEX_INT) ? 16u : 10u);
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d007      	beq.n	80025f2 <npf_vpprintf+0x312>
 80025e2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d101      	bne.n	80025ee <npf_vpprintf+0x30e>
 80025ea:	2310      	movs	r3, #16
 80025ec:	e002      	b.n	80025f4 <npf_vpprintf+0x314>
 80025ee:	230a      	movs	r3, #10
 80025f0:	e000      	b.n	80025f4 <npf_vpprintf+0x314>
 80025f2:	2308      	movs	r3, #8
          unsigned const base = (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) ?
 80025f4:	65bb      	str	r3, [r7, #88]	; 0x58
          cbuf_len = npf_utoa_rev(cbuf, val, base, (unsigned)fs.case_adjust);
 80025f6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80025fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025fc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80025fe:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002602:	f7ff fb7d 	bl	8001d00 <npf_utoa_rev>
 8002606:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 800260a:	e000      	b.n	800260e <npf_vpprintf+0x32e>
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 800260c:	bf00      	nop
        }

        if (val && fs.alt_form && (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL)) {
 800260e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002610:	2b00      	cmp	r3, #0
 8002612:	d012      	beq.n	800263a <npf_vpprintf+0x35a>
 8002614:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00e      	beq.n	800263a <npf_vpprintf+0x35a>
 800261c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002620:	2b04      	cmp	r3, #4
 8002622:	d10a      	bne.n	800263a <npf_vpprintf+0x35a>
          cbuf[cbuf_len++] = '0'; // OK to add leading octal '0' immediately.
 8002624:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800262e:	461a      	mov	r2, r3
 8002630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002634:	4413      	add	r3, r2
 8002636:	2230      	movs	r2, #48	; 0x30
 8002638:	701a      	strb	r2, [r3, #0]
        }

        if (val && fs.alt_form) { // 0x or 0b but can't write it yet.
 800263a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 8098 	beq.w	8002772 <npf_vpprintf+0x492>
 8002642:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8093 	beq.w	8002772 <npf_vpprintf+0x492>
          if (fs.conv_spec == NPF_FMT_SPEC_CONV_HEX_INT) { need_0x = 'X'; }
 800264c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002650:	2b05      	cmp	r3, #5
 8002652:	d102      	bne.n	800265a <npf_vpprintf+0x37a>
 8002654:	2358      	movs	r3, #88	; 0x58
 8002656:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#if NANOPRINTF_USE_BINARY_FORMAT_SPECIFIERS == 1
          else if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) { need_0x = 'B'; }
#endif
          if (need_0x) { need_0x += fs.case_adjust; }
 800265a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8087 	beq.w	8002772 <npf_vpprintf+0x492>
 8002664:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002668:	461a      	mov	r2, r3
 800266a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800266e:	4413      	add	r3, r2
 8002670:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
      } break;
 8002674:	e07d      	b.n	8002772 <npf_vpprintf+0x492>

      case NPF_FMT_SPEC_CONV_POINTER: {
        cbuf_len =
          npf_utoa_rev(cbuf, (npf_uint_t)(uintptr_t)va_arg(args, void *), 16, 'a'-'A');
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	1d1a      	adds	r2, r3, #4
 800267a:	603a      	str	r2, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4619      	mov	r1, r3
 8002680:	2320      	movs	r3, #32
 8002682:	2210      	movs	r2, #16
 8002684:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002688:	f7ff fb3a 	bl	8001d00 <npf_utoa_rev>
 800268c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        need_0x = 'x';
 8002690:	2378      	movs	r3, #120	; 0x78
 8002692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      } break;
 8002696:	e06d      	b.n	8002774 <npf_vpprintf+0x494>
#endif

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      case NPF_FMT_SPEC_CONV_FLOAT_DECIMAL: {
        float val;
        if (fs.length_modifier == NPF_FMT_SPEC_LEN_MOD_LONG_DOUBLE) {
 8002698:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800269c:	2b02      	cmp	r3, #2
 800269e:	d10f      	bne.n	80026c0 <npf_vpprintf+0x3e0>
          val = (float)va_arg(args, long double);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	3307      	adds	r3, #7
 80026a4:	f023 0307 	bic.w	r3, r3, #7
 80026a8:	f103 0208 	add.w	r2, r3, #8
 80026ac:	603a      	str	r2, [r7, #0]
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	f7fe fa77 	bl	8000ba8 <__aeabi_d2f>
 80026ba:	4603      	mov	r3, r0
 80026bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80026be:	e00e      	b.n	80026de <npf_vpprintf+0x3fe>
        } else {
          val = (float)va_arg(args, double);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	3307      	adds	r3, #7
 80026c4:	f023 0307 	bic.w	r3, r3, #7
 80026c8:	f103 0208 	add.w	r2, r3, #8
 80026cc:	603a      	str	r2, [r7, #0]
 80026ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f7fe fa67 	bl	8000ba8 <__aeabi_d2f>
 80026da:	4603      	mov	r3, r0
 80026dc:	66bb      	str	r3, [r7, #104]	; 0x68
        }

        sign_c = (val < 0.f) ? '-' : fs.prepend;
 80026de:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80026e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ea:	d501      	bpl.n	80026f0 <npf_vpprintf+0x410>
 80026ec:	232d      	movs	r3, #45	; 0x2d
 80026ee:	e001      	b.n	80026f4 <npf_vpprintf+0x414>
 80026f0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80026f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = (val == 0.f);
 80026f8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80026fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002704:	bf0c      	ite	eq
 8002706:	2301      	moveq	r3, #1
 8002708:	2300      	movne	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        cbuf_len = npf_ftoa_rev(cbuf, val, fs.case_adjust, &frac_chars);
 800270e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002712:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002716:	4619      	mov	r1, r3
 8002718:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 800271c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002720:	f7ff fcbe 	bl	80020a0 <npf_ftoa_rev>
 8002724:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if (cbuf_len < 0) {
 8002728:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800272c:	2b00      	cmp	r3, #0
 800272e:	da07      	bge.n	8002740 <npf_vpprintf+0x460>
          cbuf_len = -cbuf_len;
 8002730:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002734:	425b      	negs	r3, r3
 8002736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
          inf_or_nan = 1;
 800273a:	2301      	movs	r3, #1
 800273c:	67bb      	str	r3, [r7, #120]	; 0x78
        } else {
          int const prec_adj = npf_max(0, frac_chars - fs.prec);
          cbuf += prec_adj;
          cbuf_len -= prec_adj;
        }
      } break;
 800273e:	e019      	b.n	8002774 <npf_vpprintf+0x494>
          int const prec_adj = npf_max(0, frac_chars - fs.prec);
 8002740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	4619      	mov	r1, r3
 8002748:	2000      	movs	r0, #0
 800274a:	f7ff f88d 	bl	8001868 <npf_max>
 800274e:	65f8      	str	r0, [r7, #92]	; 0x5c
          cbuf += prec_adj;
 8002750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002752:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002756:	4413      	add	r3, r2
 8002758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
          cbuf_len -= prec_adj;
 800275c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      } break;
 8002768:	e004      	b.n	8002774 <npf_vpprintf+0x494>
#endif
      default: break;
 800276a:	bf00      	nop
 800276c:	e002      	b.n	8002774 <npf_vpprintf+0x494>
      } break;
 800276e:	bf00      	nop
 8002770:	e000      	b.n	8002774 <npf_vpprintf+0x494>
      } break;
 8002772:	bf00      	nop
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Compute the field width pad character
    if (fs.field_width_opt == NPF_FMT_SPEC_OPT_LITERAL) {
 8002774:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002778:	2b01      	cmp	r3, #1
 800277a:	d124      	bne.n	80027c6 <npf_vpprintf+0x4e6>
      if (fs.leading_zero_pad) { // '0' flag is only legal with numeric types
 800277c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01d      	beq.n	80027c0 <npf_vpprintf+0x4e0>
        if ((fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) &&
 8002784:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002788:	2b02      	cmp	r3, #2
 800278a:	d01c      	beq.n	80027c6 <npf_vpprintf+0x4e6>
            (fs.conv_spec != NPF_FMT_SPEC_CONV_CHAR) &&
 800278c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
        if ((fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) &&
 8002790:	2b01      	cmp	r3, #1
 8002792:	d018      	beq.n	80027c6 <npf_vpprintf+0x4e6>
            (fs.conv_spec != NPF_FMT_SPEC_CONV_PERCENT)) {
 8002794:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
            (fs.conv_spec != NPF_FMT_SPEC_CONV_CHAR) &&
 8002798:	2b00      	cmp	r3, #0
 800279a:	d014      	beq.n	80027c6 <npf_vpprintf+0x4e6>
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
          if ((fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec && zero) {
 800279c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d109      	bne.n	80027b8 <npf_vpprintf+0x4d8>
 80027a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <npf_vpprintf+0x4d8>
 80027aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <npf_vpprintf+0x4d8>
            pad_c = ' ';
 80027b0:	2320      	movs	r3, #32
 80027b2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80027b6:	e006      	b.n	80027c6 <npf_vpprintf+0x4e6>
          } else
#endif
          { pad_c = '0'; }
 80027b8:	2330      	movs	r3, #48	; 0x30
 80027ba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80027be:	e002      	b.n	80027c6 <npf_vpprintf+0x4e6>
        }
      } else { pad_c = ' '; }
 80027c0:	2320      	movs	r3, #32
 80027c2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }
#endif

    // Compute the number of bytes to truncate or '0'-pad.
    if (fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) {
 80027c6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d014      	beq.n	80027f8 <npf_vpprintf+0x518>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      if (!inf_or_nan) { // float precision is after the decimal point
 80027ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d111      	bne.n	80027f8 <npf_vpprintf+0x518>
        int const prec_start =
          (fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DECIMAL) ? frac_chars : cbuf_len;
 80027d4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d101      	bne.n	80027e0 <npf_vpprintf+0x500>
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	e001      	b.n	80027e4 <npf_vpprintf+0x504>
 80027e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        int const prec_start =
 80027e4:	657b      	str	r3, [r7, #84]	; 0x54
        prec_pad = npf_max(0, fs.prec - prec_start);
 80027e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	4619      	mov	r1, r3
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7ff f83a 	bl	8001868 <npf_max>
 80027f4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
#endif
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Given the full converted length, how many pad bytes?
    field_pad = fs.field_width - cbuf_len - !!sign_c;
 80027f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8002804:	2a00      	cmp	r2, #0
 8002806:	bf14      	ite	ne
 8002808:	2201      	movne	r2, #1
 800280a:	2200      	moveq	r2, #0
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (need_0x) { field_pad -= 2; }
 8002814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d004      	beq.n	8002826 <npf_vpprintf+0x546>
 800281c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002820:	3b02      	subs	r3, #2
 8002822:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    if ((fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DECIMAL) && !fs.prec && !fs.alt_form) {
 8002826:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800282a:	2b08      	cmp	r3, #8
 800282c:	d10b      	bne.n	8002846 <npf_vpprintf+0x566>
 800282e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d108      	bne.n	8002846 <npf_vpprintf+0x566>
 8002834:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <npf_vpprintf+0x566>
      ++field_pad; // 0-pad, no decimal point.
 800283c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002840:	3301      	adds	r3, #1
 8002842:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    field_pad -= prec_pad;
 8002846:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800284a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#endif
    field_pad = npf_max(0, field_pad);
 8002854:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002858:	2000      	movs	r0, #0
 800285a:	f7ff f805 	bl	8001868 <npf_max>
 800285e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
#endif // NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Apply right-justified field width if requested
    if (!fs.left_justified && pad_c) { // If leading zeros pad, sign goes first.
 8002862:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002866:	2b00      	cmp	r3, #0
 8002868:	d14d      	bne.n	8002906 <npf_vpprintf+0x626>
 800286a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800286e:	2b00      	cmp	r3, #0
 8002870:	d049      	beq.n	8002906 <npf_vpprintf+0x626>
      if (pad_c == '0') {
 8002872:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002876:	2b30      	cmp	r3, #48	; 0x30
 8002878:	d128      	bne.n	80028cc <npf_vpprintf+0x5ec>
        if (sign_c) { NPF_PUTC(sign_c); sign_c = 0; }
 800287a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <npf_vpprintf+0x5b8>
 8002882:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002886:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fd10 	bl	80022b2 <npf_putc_cnt>
 8002892:	2300      	movs	r3, #0
 8002894:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        // Pad byte is '0', write '0x' before '0' pad chars.
        if (need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 8002898:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d015      	beq.n	80028cc <npf_vpprintf+0x5ec>
 80028a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028a4:	4619      	mov	r1, r3
 80028a6:	2030      	movs	r0, #48	; 0x30
 80028a8:	f7ff fd03 	bl	80022b2 <npf_putc_cnt>
 80028ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028b0:	4619      	mov	r1, r3
 80028b2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80028b6:	f7ff fcfc 	bl	80022b2 <npf_putc_cnt>
      }
      while (field_pad-- > 0) { NPF_PUTC(pad_c); }
 80028ba:	e007      	b.n	80028cc <npf_vpprintf+0x5ec>
 80028bc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80028c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fcf3 	bl	80022b2 <npf_putc_cnt>
 80028cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	dcf0      	bgt.n	80028bc <npf_vpprintf+0x5dc>
      // Pad byte is ' ', write '0x' after ' ' pad chars but before number.
      if ((pad_c != '0') && need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 80028da:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80028de:	2b30      	cmp	r3, #48	; 0x30
 80028e0:	d023      	beq.n	800292a <npf_vpprintf+0x64a>
 80028e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d01f      	beq.n	800292a <npf_vpprintf+0x64a>
 80028ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028ee:	4619      	mov	r1, r3
 80028f0:	2030      	movs	r0, #48	; 0x30
 80028f2:	f7ff fcde 	bl	80022b2 <npf_putc_cnt>
 80028f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028fa:	4619      	mov	r1, r3
 80028fc:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002900:	f7ff fcd7 	bl	80022b2 <npf_putc_cnt>
 8002904:	e011      	b.n	800292a <npf_vpprintf+0x64a>
    } else
#endif
    { if (need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); } } // no pad, '0x' requested.
 8002906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00e      	beq.n	800292c <npf_vpprintf+0x64c>
 800290e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002912:	4619      	mov	r1, r3
 8002914:	2030      	movs	r0, #48	; 0x30
 8002916:	f7ff fccc 	bl	80022b2 <npf_putc_cnt>
 800291a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800291e:	4619      	mov	r1, r3
 8002920:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002924:	f7ff fcc5 	bl	80022b2 <npf_putc_cnt>
 8002928:	e000      	b.n	800292c <npf_vpprintf+0x64c>
      if ((pad_c != '0') && need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 800292a:	bf00      	nop

    // Write the converted payload
    if (fs.conv_spec == NPF_FMT_SPEC_CONV_STRING) {
 800292c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002930:	2b02      	cmp	r3, #2
 8002932:	d117      	bne.n	8002964 <npf_vpprintf+0x684>
      for (int i = 0; i < cbuf_len; ++i) { NPF_PUTC(cbuf[i]); }
 8002934:	2300      	movs	r3, #0
 8002936:	667b      	str	r3, [r7, #100]	; 0x64
 8002938:	e00e      	b.n	8002958 <npf_vpprintf+0x678>
 800293a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800293c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002940:	4413      	add	r3, r2
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800294a:	4619      	mov	r1, r3
 800294c:	4610      	mov	r0, r2
 800294e:	f7ff fcb0 	bl	80022b2 <npf_putc_cnt>
 8002952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002954:	3301      	adds	r3, #1
 8002956:	667b      	str	r3, [r7, #100]	; 0x64
 8002958:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800295a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800295e:	429a      	cmp	r2, r3
 8002960:	dbeb      	blt.n	800293a <npf_vpprintf+0x65a>
 8002962:	e059      	b.n	8002a18 <npf_vpprintf+0x738>
    } else {
      if (sign_c) { NPF_PUTC(sign_c); }
 8002964:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002968:	2b00      	cmp	r3, #0
 800296a:	d007      	beq.n	800297c <npf_vpprintf+0x69c>
 800296c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002970:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fc9b 	bl	80022b2 <npf_putc_cnt>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      if (fs.conv_spec != NPF_FMT_SPEC_CONV_FLOAT_DECIMAL) {
 800297c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002980:	2b08      	cmp	r3, #8
 8002982:	d00e      	beq.n	80029a2 <npf_vpprintf+0x6c2>
#endif

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
        while (prec_pad-- > 0) { NPF_PUTC('0'); } // int precision leads.
 8002984:	e005      	b.n	8002992 <npf_vpprintf+0x6b2>
 8002986:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800298a:	4619      	mov	r1, r3
 800298c:	2030      	movs	r0, #48	; 0x30
 800298e:	f7ff fc90 	bl	80022b2 <npf_putc_cnt>
 8002992:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002996:	1e5a      	subs	r2, r3, #1
 8002998:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800299c:	2b00      	cmp	r3, #0
 800299e:	dcf2      	bgt.n	8002986 <npf_vpprintf+0x6a6>
 80029a0:	e01e      	b.n	80029e0 <npf_vpprintf+0x700>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      } else {
        // if 0 precision, skip the fractional part and '.'
        // if 0 prec + alternative form, keep the '.'
        if (!fs.prec && !fs.alt_form) { ++cbuf; --cbuf_len; }
 80029a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d11b      	bne.n	80029e0 <npf_vpprintf+0x700>
 80029a8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d117      	bne.n	80029e0 <npf_vpprintf+0x700>
 80029b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029b4:	3301      	adds	r3, #1
 80029b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029be:	3b01      	subs	r3, #1
 80029c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#if NANOPRINTF_USE_BINARY_FORMAT_SPECIFIERS == 1
      if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) {
        while (cbuf_len) { NPF_PUTC('0' + ((u.binval >> --cbuf_len) & 1)); }
      } else
#endif
      { while (cbuf_len-- > 0) { NPF_PUTC(cbuf[cbuf_len]); } } // payload is reversed
 80029c4:	e00c      	b.n	80029e0 <npf_vpprintf+0x700>
 80029c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80029ce:	4413      	add	r3, r2
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029d8:	4619      	mov	r1, r3
 80029da:	4610      	mov	r0, r2
 80029dc:	f7ff fc69 	bl	80022b2 <npf_putc_cnt>
 80029e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029e4:	1e5a      	subs	r2, r3, #1
 80029e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	dceb      	bgt.n	80029c6 <npf_vpprintf+0x6e6>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      // real precision comes after the number.
      if ((fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DECIMAL) && !inf_or_nan) {
 80029ee:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d110      	bne.n	8002a18 <npf_vpprintf+0x738>
 80029f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10d      	bne.n	8002a18 <npf_vpprintf+0x738>
        while (prec_pad-- > 0) { NPF_PUTC('0'); }
 80029fc:	e005      	b.n	8002a0a <npf_vpprintf+0x72a>
 80029fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a02:	4619      	mov	r1, r3
 8002a04:	2030      	movs	r0, #48	; 0x30
 8002a06:	f7ff fc54 	bl	80022b2 <npf_putc_cnt>
 8002a0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a0e:	1e5a      	subs	r2, r3, #1
 8002a10:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	dcf2      	bgt.n	80029fe <npf_vpprintf+0x71e>
      }
#endif
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    if (fs.left_justified && pad_c) { // Apply left-justified field width
 8002a18:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <npf_vpprintf+0x768>
 8002a20:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00f      	beq.n	8002a48 <npf_vpprintf+0x768>
      while (field_pad-- > 0) { NPF_PUTC(pad_c); }
 8002a28:	e007      	b.n	8002a3a <npf_vpprintf+0x75a>
 8002a2a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002a2e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fc3c 	bl	80022b2 <npf_putc_cnt>
 8002a3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a3e:	1e5a      	subs	r2, r3, #1
 8002a40:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	dcf0      	bgt.n	8002a2a <npf_vpprintf+0x74a>
  while (*cur) {
 8002a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f47f ac57 	bne.w	8002302 <npf_vpprintf+0x22>
    }
#endif
  }

  return pc_cnt.n;
 8002a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	37a0      	adds	r7, #160	; 0xa0
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop

08002a60 <npf_snprintf>:
  int const rv = npf_vpprintf(pc, pc_ctx, format, val);
  va_end(val);
  return rv;
}

int npf_snprintf(char *buffer, size_t bufsz, const char *format, ...) {
 8002a60:	b40c      	push	{r2, r3}
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
  va_list val;
  va_start(val, format);
 8002a6c:	f107 031c 	add.w	r3, r7, #28
 8002a70:	60bb      	str	r3, [r7, #8]
  int const rv = npf_vsnprintf(buffer, bufsz, format, val);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	6839      	ldr	r1, [r7, #0]
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f809 	bl	8002a90 <npf_vsnprintf>
 8002a7e:	60f8      	str	r0, [r7, #12]
  va_end(val);
  return rv;
 8002a80:	68fb      	ldr	r3, [r7, #12]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a8c:	b002      	add	sp, #8
 8002a8e:	4770      	bx	lr

08002a90 <npf_vsnprintf>:

int npf_vsnprintf(char *buffer, size_t bufsz, char const *format, va_list vlist) {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
  npf_bufputc_ctx_t bufputc_ctx;
  bufputc_ctx.dst = buffer;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	617b      	str	r3, [r7, #20]
  bufputc_ctx.len = bufsz;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	61bb      	str	r3, [r7, #24]
  bufputc_ctx.cur = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]

  npf_putc const pc = buffer ? npf_bufputc : npf_bufputc_nop;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <npf_vsnprintf+0x24>
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <npf_vsnprintf+0x50>)
 8002ab2:	e000      	b.n	8002ab6 <npf_vsnprintf+0x26>
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <npf_vsnprintf+0x54>)
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
  int const n = npf_vpprintf(pc, &bufputc_ctx, format, vlist);
 8002ab8:	f107 0114 	add.w	r1, r7, #20
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ac2:	f7ff fc0d 	bl	80022e0 <npf_vpprintf>
 8002ac6:	6238      	str	r0, [r7, #32]
  pc('\0', &bufputc_ctx);
 8002ac8:	f107 0214 	add.w	r2, r7, #20
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	4611      	mov	r1, r2
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	4798      	blx	r3
  if (bufsz && (n >= (int)bufsz)) { buffer[0] = '\0'; }
#elif defined(NANOPRINTF_SNPRINTF_SAFE_TRIM_STRING_ON_OVERFLOW)
  if (bufsz && (n >= (int)bufsz)) { buffer[bufsz - 1] = '\0'; }
#endif

  return n;
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3728      	adds	r7, #40	; 0x28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	08002261 	.word	0x08002261
 8002ae4:	0800229d 	.word	0x0800229d

08002ae8 <myApp_init>:
volatile static uint16_t ADC_raw[adc_Channels];
volatile uint32_t guiTimer;
wakeUpSource lastWakeUpSource;

//functions
void myApp_init() {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
	startADC();
 8002aee:	f000 fa8b 	bl	8003008 <startADC>
	//SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP); //Enable debug in stop
	//HAL_PWREx_EnableUltraLowPower();
	//HAL_PWREx_EnableFastWakeUp();

	/* Enable Power Clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <myApp_init+0x48>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <myApp_init+0x48>)
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6593      	str	r3, [r2, #88]	; 0x58
 8002afe:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <myApp_init+0x48>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	607b      	str	r3, [r7, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
	/* Ensure that MSI is wake-up system clock */
	__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <myApp_init+0x48>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	4a08      	ldr	r2, [pc, #32]	; (8002b30 <myApp_init+0x48>)
 8002b10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b14:	6093      	str	r3, [r2, #8]

	while (ADCrunning) {
 8002b16:	bf00      	nop
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <myApp_init+0x4c>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1fa      	bne.n	8002b18 <myApp_init+0x30>
		//wait for ADC
	}

	//LCD
	lcd_SetFont((GFXfont*) &FreeSans9pt7bMod);
 8002b22:	4805      	ldr	r0, [pc, #20]	; (8002b38 <myApp_init+0x50>)
 8002b24:	f006 fd1a 	bl	800955c <lcd_SetFont>
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	20000378 	.word	0x20000378
 8002b38:	0800ce38 	.word	0x0800ce38

08002b3c <myApp_loop>:

void myApp_loop() {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	startADC();
 8002b40:	f000 fa62 	bl	8003008 <startADC>
	GNSS_Power();
 8002b44:	f001 f85e 	bl	8003c04 <GNSS_Power>
	if (LCD_Power() == LCD_READY) {
 8002b48:	f006 fc7e 	bl	8009448 <LCD_Power>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d10e      	bne.n	8002b70 <myApp_loop+0x34>
		drawHeader();
 8002b52:	f000 f859 	bl	8002c08 <drawHeader>
		drawGNSS();
 8002b56:	f000 f907 	bl	8002d68 <drawGNSS>
		while ((lcd_draw() == LCD_SENDING_DATA)) {
 8002b5a:	e001      	b.n	8002b60 <myApp_loop+0x24>
			goToIdle(); //wait for DMA services to finish
 8002b5c:	f000 f814 	bl	8002b88 <goToIdle>
		while ((lcd_draw() == LCD_SENDING_DATA)) {
 8002b60:	f006 ff38 	bl	80099d4 <lcd_draw>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d0f8      	beq.n	8002b5c <myApp_loop+0x20>
		}
	}
	while (ADCrunning) {
 8002b6a:	e001      	b.n	8002b70 <myApp_loop+0x34>
		goToIdle(); //wait for ADC services to finish
 8002b6c:	f000 f80c 	bl	8002b88 <goToIdle>
	while (ADCrunning) {
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <myApp_loop+0x48>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f8      	bne.n	8002b6c <myApp_loop+0x30>
	}
	goToSleep();
 8002b7a:	f000 f80d 	bl	8002b98 <goToSleep>
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000378 	.word	0x20000378

08002b88 <goToIdle>:

static void goToIdle() {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f003 fb6a 	bl	8006268 <HAL_PWR_EnterSLEEPMode>
}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <goToSleep>:

static void goToSleep() {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
	if (superCapmV < mV_OV) {
 8002b9c:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <goToSleep+0x60>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d81d      	bhi.n	8002be4 <goToSleep+0x4c>
		HAL_GPIO_WritePin(SolarEN_GPIO_Port, SolarEN_Pin, GPIO_PIN_SET); //Allow charging
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bb2:	f003 fb31 	bl	8006218 <HAL_GPIO_WritePin>
		GNSS_Prep_Stop();
 8002bb6:	f000 fff7 	bl	8003ba8 <GNSS_Prep_Stop>
		HAL_SuspendTick();
 8002bba:	f001 fb21 	bl	8004200 <HAL_SuspendTick>
		do {
			lastWakeUpSource = WKUP_CLEAR;
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <goToSleep+0x64>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
			HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	f003 fc2f 	bl	8006428 <HAL_PWREx_EnterSTOP2Mode>
			__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002bca:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <goToSleep+0x68>)
 8002bcc:	221f      	movs	r2, #31
 8002bce:	619a      	str	r2, [r3, #24]
		} while (lastWakeUpSource == WKUP_LPUART);
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <goToSleep+0x64>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d0f2      	beq.n	8002bbe <goToSleep+0x26>
		LL_LPUART_DisableIT_WKUP(LPUART1);
 8002bd8:	480a      	ldr	r0, [pc, #40]	; (8002c04 <goToSleep+0x6c>)
 8002bda:	f7fe fe12 	bl	8001802 <LL_LPUART_DisableIT_WKUP>
		HAL_ResumeTick();
 8002bde:	f001 fb1f 	bl	8004220 <HAL_ResumeTick>
	} else {
		//Battery is charged
		HAL_GPIO_WritePin(SolarEN_GPIO_Port, SolarEN_Pin, GPIO_PIN_RESET); //disable charging
	}
}
 8002be2:	e006      	b.n	8002bf2 <goToSleep+0x5a>
		HAL_GPIO_WritePin(SolarEN_GPIO_Port, SolarEN_Pin, GPIO_PIN_RESET); //disable charging
 8002be4:	2200      	movs	r2, #0
 8002be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bee:	f003 fb13 	bl	8006218 <HAL_GPIO_WritePin>
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	2000037c 	.word	0x2000037c
 8002bfc:	20000394 	.word	0x20000394
 8002c00:	40007000 	.word	0x40007000
 8002c04:	40008000 	.word	0x40008000

08002c08 <drawHeader>:

static void drawHeader() {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af02      	add	r7, sp, #8
	lcd_clearLines(0, LCD_row_Height * 2);
 8002c0e:	2122      	movs	r1, #34	; 0x22
 8002c10:	2000      	movs	r0, #0
 8002c12:	f006 fe45 	bl	80098a0 <lcd_clearLines>
//Date Time
	printDateTime();
 8002c16:	f000 f863 	bl	8002ce0 <printDateTime>
//Battery
	lcd_SetCursor(80, LCD_row_Height - 2);
 8002c1a:	210f      	movs	r1, #15
 8002c1c:	2050      	movs	r0, #80	; 0x50
 8002c1e:	f006 fc83 	bl	8009528 <lcd_SetCursor>
	lcd_print(npf_snprintf(strbuffer, strbufferSize, "%3.2fV", (float) superCapmV / 1000.0f));
 8002c22:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <drawHeader+0xb8>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002cc4 <drawHeader+0xbc>
 8002c32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c36:	ee16 0a90 	vmov	r0, s13
 8002c3a:	f7fd fc85 	bl	8000548 <__aeabi_f2d>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	e9cd 2300 	strd	r2, r3, [sp]
 8002c46:	4a20      	ldr	r2, [pc, #128]	; (8002cc8 <drawHeader+0xc0>)
 8002c48:	2114      	movs	r1, #20
 8002c4a:	4820      	ldr	r0, [pc, #128]	; (8002ccc <drawHeader+0xc4>)
 8002c4c:	f7ff ff08 	bl	8002a60 <npf_snprintf>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f006 fd1e 	bl	8009694 <lcd_print>
//Temp
	lcd_SetCursor(94, (LCD_row_Height * 2) - 2);
 8002c58:	2120      	movs	r1, #32
 8002c5a:	205e      	movs	r0, #94	; 0x5e
 8002c5c:	f006 fc64 	bl	8009528 <lcd_SetCursor>
	lcd_print(npf_snprintf(strbuffer, strbufferSize, "%.2dC", (int) tempC));
 8002c60:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <drawHeader+0xc8>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1b      	ldr	r2, [pc, #108]	; (8002cd4 <drawHeader+0xcc>)
 8002c66:	2114      	movs	r1, #20
 8002c68:	4818      	ldr	r0, [pc, #96]	; (8002ccc <drawHeader+0xc4>)
 8002c6a:	f7ff fef9 	bl	8002a60 <npf_snprintf>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f006 fd0f 	bl	8009694 <lcd_print>
	//GNSS Status
	if (GNSSlastRate == GNSS_ON) {
 8002c76:	4b18      	ldr	r3, [pc, #96]	; (8002cd8 <drawHeader+0xd0>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d107      	bne.n	8002c90 <drawHeader+0x88>
		lcd_drawLine(0, 0, 0, 15, LCD_BLACK);
 8002c80:	2300      	movs	r3, #0
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	230f      	movs	r3, #15
 8002c86:	2200      	movs	r2, #0
 8002c88:	2100      	movs	r1, #0
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f006 fdc6 	bl	800981c <lcd_drawLine>
	}
	if (GNSSAlive) {
 8002c90:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <drawHeader+0xd4>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d007      	beq.n	8002caa <drawHeader+0xa2>
		lcd_drawLine(0, 16, 0, 32, LCD_BLACK);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	2320      	movs	r3, #32
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2110      	movs	r1, #16
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f006 fdb9 	bl	800981c <lcd_drawLine>
	}
//Div line
	lcd_drawLine(0, LCD_row_Height * 2, 127, LCD_row_Height * 2, LCD_BLACK);
 8002caa:	2300      	movs	r3, #0
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2322      	movs	r3, #34	; 0x22
 8002cb0:	227f      	movs	r2, #127	; 0x7f
 8002cb2:	2122      	movs	r1, #34	; 0x22
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f006 fdb1 	bl	800981c <lcd_drawLine>
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	2000037c 	.word	0x2000037c
 8002cc4:	447a0000 	.word	0x447a0000
 8002cc8:	0800c644 	.word	0x0800c644
 8002ccc:	20000d70 	.word	0x20000d70
 8002cd0:	20000380 	.word	0x20000380
 8002cd4:	0800c64c 	.word	0x0800c64c
 8002cd8:	2000039c 	.word	0x2000039c
 8002cdc:	200003a4 	.word	0x200003a4

08002ce0 <printDateTime>:

static void printDateTime() {
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b088      	sub	sp, #32
 8002ce4:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002ce6:	1d3b      	adds	r3, r7, #4
 8002ce8:	2200      	movs	r2, #0
 8002cea:	4619      	mov	r1, r3
 8002cec:	481a      	ldr	r0, [pc, #104]	; (8002d58 <printDateTime+0x78>)
 8002cee:	f004 fdd7 	bl	80078a0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002cf2:	463b      	mov	r3, r7
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	4817      	ldr	r0, [pc, #92]	; (8002d58 <printDateTime+0x78>)
 8002cfa:	f004 feb4 	bl	8007a66 <HAL_RTC_GetDate>
	lcd_SetCursor(1, LCD_row_Height - 2);
 8002cfe:	210f      	movs	r1, #15
 8002d00:	2001      	movs	r0, #1
 8002d02:	f006 fc11 	bl	8009528 <lcd_SetCursor>
	lcd_print(npf_snprintf(strbuffer, strbufferSize, "%02d:%02d:%02d ", sTime.Hours, sTime.Minutes, sTime.Seconds));
 8002d06:	793b      	ldrb	r3, [r7, #4]
 8002d08:	4619      	mov	r1, r3
 8002d0a:	797b      	ldrb	r3, [r7, #5]
 8002d0c:	79ba      	ldrb	r2, [r7, #6]
 8002d0e:	9201      	str	r2, [sp, #4]
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	460b      	mov	r3, r1
 8002d14:	4a11      	ldr	r2, [pc, #68]	; (8002d5c <printDateTime+0x7c>)
 8002d16:	2114      	movs	r1, #20
 8002d18:	4811      	ldr	r0, [pc, #68]	; (8002d60 <printDateTime+0x80>)
 8002d1a:	f7ff fea1 	bl	8002a60 <npf_snprintf>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f006 fcb7 	bl	8009694 <lcd_print>
	lcd_SetCursor(1, (LCD_row_Height * 2) - 2);
 8002d26:	2120      	movs	r1, #32
 8002d28:	2001      	movs	r0, #1
 8002d2a:	f006 fbfd 	bl	8009528 <lcd_SetCursor>
	lcd_print(npf_snprintf(strbuffer, strbufferSize, "%02d/%02d/%02d", sDate.Date, sDate.Month, sDate.Year));
 8002d2e:	78bb      	ldrb	r3, [r7, #2]
 8002d30:	4619      	mov	r1, r3
 8002d32:	787b      	ldrb	r3, [r7, #1]
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	9201      	str	r2, [sp, #4]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4a09      	ldr	r2, [pc, #36]	; (8002d64 <printDateTime+0x84>)
 8002d3e:	2114      	movs	r1, #20
 8002d40:	4807      	ldr	r0, [pc, #28]	; (8002d60 <printDateTime+0x80>)
 8002d42:	f7ff fe8d 	bl	8002a60 <npf_snprintf>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f006 fca3 	bl	8009694 <lcd_print>
}
 8002d4e:	bf00      	nop
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	200002a8 	.word	0x200002a8
 8002d5c:	0800c654 	.word	0x0800c654
 8002d60:	20000d70 	.word	0x20000d70
 8002d64:	0800c664 	.word	0x0800c664

08002d68 <drawGNSS>:

static void drawGNSS() {
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af02      	add	r7, sp, #8
	if (GNSSNewData) {
 8002d6e:	4b82      	ldr	r3, [pc, #520]	; (8002f78 <drawGNSS+0x210>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80a3 	beq.w	8002ec0 <drawGNSS+0x158>
		lcd_clearLines((LCD_row_Height * 2) + 2, LCD_row_Height * 6);
 8002d7a:	2166      	movs	r1, #102	; 0x66
 8002d7c:	2024      	movs	r0, #36	; 0x24
 8002d7e:	f006 fd8f 	bl	80098a0 <lcd_clearLines>
		lcd_SetCursor(1, LCD_row_Height * 3);
 8002d82:	2133      	movs	r1, #51	; 0x33
 8002d84:	2001      	movs	r0, #1
 8002d86:	f006 fbcf 	bl	8009528 <lcd_SetCursor>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "%8.4f ", fabsf(getLat())));
 8002d8a:	f000 fe31 	bl	80039f0 <getLat>
 8002d8e:	eef0 7a40 	vmov.f32	s15, s0
 8002d92:	eef0 7ae7 	vabs.f32	s15, s15
 8002d96:	ee17 0a90 	vmov	r0, s15
 8002d9a:	f7fd fbd5 	bl	8000548 <__aeabi_f2d>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	e9cd 2300 	strd	r2, r3, [sp]
 8002da6:	4a75      	ldr	r2, [pc, #468]	; (8002f7c <drawGNSS+0x214>)
 8002da8:	2114      	movs	r1, #20
 8002daa:	4875      	ldr	r0, [pc, #468]	; (8002f80 <drawGNSS+0x218>)
 8002dac:	f7ff fe58 	bl	8002a60 <npf_snprintf>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4618      	mov	r0, r3
 8002db4:	f006 fc6e 	bl	8009694 <lcd_print>
		if (getLat() < 0) {
 8002db8:	f000 fe1a 	bl	80039f0 <getLat>
 8002dbc:	eef0 7a40 	vmov.f32	s15, s0
 8002dc0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc8:	d503      	bpl.n	8002dd2 <drawGNSS+0x6a>
			lcd_print_char('S');
 8002dca:	2053      	movs	r0, #83	; 0x53
 8002dcc:	f006 fc90 	bl	80096f0 <lcd_print_char>
 8002dd0:	e002      	b.n	8002dd8 <drawGNSS+0x70>
		} else {
			lcd_print_char('N');
 8002dd2:	204e      	movs	r0, #78	; 0x4e
 8002dd4:	f006 fc8c 	bl	80096f0 <lcd_print_char>
		}
		lcd_SetCursor(1, LCD_row_Height * 4);
 8002dd8:	2144      	movs	r1, #68	; 0x44
 8002dda:	2001      	movs	r0, #1
 8002ddc:	f006 fba4 	bl	8009528 <lcd_SetCursor>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "%8.4f ", fabsf(getLong())));
 8002de0:	f000 fe2e 	bl	8003a40 <getLong>
 8002de4:	eef0 7a40 	vmov.f32	s15, s0
 8002de8:	eef0 7ae7 	vabs.f32	s15, s15
 8002dec:	ee17 0a90 	vmov	r0, s15
 8002df0:	f7fd fbaa 	bl	8000548 <__aeabi_f2d>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	e9cd 2300 	strd	r2, r3, [sp]
 8002dfc:	4a5f      	ldr	r2, [pc, #380]	; (8002f7c <drawGNSS+0x214>)
 8002dfe:	2114      	movs	r1, #20
 8002e00:	485f      	ldr	r0, [pc, #380]	; (8002f80 <drawGNSS+0x218>)
 8002e02:	f7ff fe2d 	bl	8002a60 <npf_snprintf>
 8002e06:	4603      	mov	r3, r0
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f006 fc43 	bl	8009694 <lcd_print>
		if (getLong() < 0) {
 8002e0e:	f000 fe17 	bl	8003a40 <getLong>
 8002e12:	eef0 7a40 	vmov.f32	s15, s0
 8002e16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1e:	d503      	bpl.n	8002e28 <drawGNSS+0xc0>
			lcd_print_char('W');
 8002e20:	2057      	movs	r0, #87	; 0x57
 8002e22:	f006 fc65 	bl	80096f0 <lcd_print_char>
 8002e26:	e002      	b.n	8002e2e <drawGNSS+0xc6>
		} else {
			lcd_print_char('E');
 8002e28:	2045      	movs	r0, #69	; 0x45
 8002e2a:	f006 fc61 	bl	80096f0 <lcd_print_char>
		}

		lcd_SetCursor(1, LCD_row_Height * 5);
 8002e2e:	2155      	movs	r1, #85	; 0x55
 8002e30:	2001      	movs	r0, #1
 8002e32:	f006 fb79 	bl	8009528 <lcd_SetCursor>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Sat:%d Acc:%2.0fm", getNumSatellites(), getHAcc() > 99.9 ? 99.9 : getHAcc()));
 8002e36:	f000 fe8d 	bl	8003b54 <getNumSatellites>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	461c      	mov	r4, r3
 8002e3e:	f000 fe27 	bl	8003a90 <getHAcc>
 8002e42:	ee10 3a10 	vmov	r3, s0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd fb7e 	bl	8000548 <__aeabi_f2d>
 8002e4c:	a348      	add	r3, pc, #288	; (adr r3, 8002f70 <drawGNSS+0x208>)
 8002e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e52:	f7fd fe61 	bl	8000b18 <__aeabi_dcmpgt>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <drawGNSS+0xfc>
 8002e5c:	a344      	add	r3, pc, #272	; (adr r3, 8002f70 <drawGNSS+0x208>)
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	e008      	b.n	8002e76 <drawGNSS+0x10e>
 8002e64:	f000 fe14 	bl	8003a90 <getHAcc>
 8002e68:	ee10 3a10 	vmov	r3, s0
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fd fb6b 	bl	8000548 <__aeabi_f2d>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	e9cd 2300 	strd	r2, r3, [sp]
 8002e7a:	4623      	mov	r3, r4
 8002e7c:	4a41      	ldr	r2, [pc, #260]	; (8002f84 <drawGNSS+0x21c>)
 8002e7e:	2114      	movs	r1, #20
 8002e80:	483f      	ldr	r0, [pc, #252]	; (8002f80 <drawGNSS+0x218>)
 8002e82:	f7ff fded 	bl	8002a60 <npf_snprintf>
 8002e86:	4603      	mov	r3, r0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f006 fc03 	bl	8009694 <lcd_print>

		lcd_SetCursor(1, LCD_row_Height * 6);
 8002e8e:	2166      	movs	r1, #102	; 0x66
 8002e90:	2001      	movs	r0, #1
 8002e92:	f006 fb49 	bl	8009528 <lcd_SetCursor>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "%dkph HD:%d", getGroundSpeed_kph(), getMotionHeading_deg()));
 8002e96:	f000 fe21 	bl	8003adc <getGroundSpeed_kph>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	461c      	mov	r4, r3
 8002e9e:	f000 fe45 	bl	8003b2c <getMotionHeading_deg>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	4623      	mov	r3, r4
 8002ea8:	4a37      	ldr	r2, [pc, #220]	; (8002f88 <drawGNSS+0x220>)
 8002eaa:	2114      	movs	r1, #20
 8002eac:	4834      	ldr	r0, [pc, #208]	; (8002f80 <drawGNSS+0x218>)
 8002eae:	f7ff fdd7 	bl	8002a60 <npf_snprintf>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f006 fbed 	bl	8009694 <lcd_print>
		GNSSNewData = false;
 8002eba:	4b2f      	ldr	r3, [pc, #188]	; (8002f78 <drawGNSS+0x210>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	701a      	strb	r2, [r3, #0]
	}

	//GNSS Age
	lcd_clearLines((LCD_row_Height * 6) + 2, LCD_row_Height * 7);
 8002ec0:	2177      	movs	r1, #119	; 0x77
 8002ec2:	2068      	movs	r0, #104	; 0x68
 8002ec4:	f006 fcec 	bl	80098a0 <lcd_clearLines>
	lcd_SetCursor(2, LCD_row_Height * 7);
 8002ec8:	2177      	movs	r1, #119	; 0x77
 8002eca:	2002      	movs	r0, #2
 8002ecc:	f006 fb2c 	bl	8009528 <lcd_SetCursor>
	if (GNSSlastPacketAge < 90) {
 8002ed0:	4b2e      	ldr	r3, [pc, #184]	; (8002f8c <drawGNSS+0x224>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b59      	cmp	r3, #89	; 0x59
 8002ed6:	d80b      	bhi.n	8002ef0 <drawGNSS+0x188>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%lus", GNSSlastPacketAge));
 8002ed8:	4b2c      	ldr	r3, [pc, #176]	; (8002f8c <drawGNSS+0x224>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a2c      	ldr	r2, [pc, #176]	; (8002f90 <drawGNSS+0x228>)
 8002ede:	2114      	movs	r1, #20
 8002ee0:	4827      	ldr	r0, [pc, #156]	; (8002f80 <drawGNSS+0x218>)
 8002ee2:	f7ff fdbd 	bl	8002a60 <npf_snprintf>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f006 fbd3 	bl	8009694 <lcd_print>
	} else if (GNSSlastPacketAge < 3600) {
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%.1fm", (float) GNSSlastPacketAge / 60.0f));
	} else {
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%.1fh", (float) GNSSlastPacketAge / 3600.0f));
	}
}
 8002eee:	e03b      	b.n	8002f68 <drawGNSS+0x200>
	} else if (GNSSlastPacketAge < 3600) {
 8002ef0:	4b26      	ldr	r3, [pc, #152]	; (8002f8c <drawGNSS+0x224>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8002ef8:	d21b      	bcs.n	8002f32 <drawGNSS+0x1ca>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%.1fm", (float) GNSSlastPacketAge / 60.0f));
 8002efa:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <drawGNSS+0x224>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f06:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002f94 <drawGNSS+0x22c>
 8002f0a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f0e:	ee16 0a90 	vmov	r0, s13
 8002f12:	f7fd fb19 	bl	8000548 <__aeabi_f2d>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	e9cd 2300 	strd	r2, r3, [sp]
 8002f1e:	4a1e      	ldr	r2, [pc, #120]	; (8002f98 <drawGNSS+0x230>)
 8002f20:	2114      	movs	r1, #20
 8002f22:	4817      	ldr	r0, [pc, #92]	; (8002f80 <drawGNSS+0x218>)
 8002f24:	f7ff fd9c 	bl	8002a60 <npf_snprintf>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f006 fbb2 	bl	8009694 <lcd_print>
}
 8002f30:	e01a      	b.n	8002f68 <drawGNSS+0x200>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%.1fh", (float) GNSSlastPacketAge / 3600.0f));
 8002f32:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <drawGNSS+0x224>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3e:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002f9c <drawGNSS+0x234>
 8002f42:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f46:	ee16 0a90 	vmov	r0, s13
 8002f4a:	f7fd fafd 	bl	8000548 <__aeabi_f2d>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	e9cd 2300 	strd	r2, r3, [sp]
 8002f56:	4a12      	ldr	r2, [pc, #72]	; (8002fa0 <drawGNSS+0x238>)
 8002f58:	2114      	movs	r1, #20
 8002f5a:	4809      	ldr	r0, [pc, #36]	; (8002f80 <drawGNSS+0x218>)
 8002f5c:	f7ff fd80 	bl	8002a60 <npf_snprintf>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f006 fb96 	bl	8009694 <lcd_print>
}
 8002f68:	bf00      	nop
 8002f6a:	3704      	adds	r7, #4
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd90      	pop	{r4, r7, pc}
 8002f70:	9999999a 	.word	0x9999999a
 8002f74:	4058f999 	.word	0x4058f999
 8002f78:	20000004 	.word	0x20000004
 8002f7c:	0800c674 	.word	0x0800c674
 8002f80:	20000d70 	.word	0x20000d70
 8002f84:	0800c67c 	.word	0x0800c67c
 8002f88:	0800c690 	.word	0x0800c690
 8002f8c:	200003a0 	.word	0x200003a0
 8002f90:	0800c69c 	.word	0x0800c69c
 8002f94:	42700000 	.word	0x42700000
 8002f98:	0800c6a8 	.word	0x0800c6a8
 8002f9c:	45610000 	.word	0x45610000
 8002fa0:	0800c6b4 	.word	0x0800c6b4

08002fa4 <setTimeGNSS>:

void setTimeGNSS() {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sTime.Hours = GNSS_getHour();
 8002faa:	f000 fcfd 	bl	80039a8 <GNSS_getHour>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = GNSS_getMin();
 8002fb2:	f000 fd05 	bl	80039c0 <GNSS_getMin>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = GNSS_getSec();
 8002fba:	f000 fd0d 	bl	80039d8 <GNSS_getSec>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71bb      	strb	r3, [r7, #6]
	sDate.Year = (uint8_t) (GNSS_getYear() - (uint16_t) 2000);
 8002fc2:	f000 fccd 	bl	8003960 <GNSS_getYear>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	3330      	adds	r3, #48	; 0x30
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	70fb      	strb	r3, [r7, #3]
	sDate.Month = GNSS_getMonth();
 8002fd0:	f000 fcd2 	bl	8003978 <GNSS_getMonth>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	707b      	strb	r3, [r7, #1]
	sDate.Date = GNSS_getDay();
 8002fd8:	f000 fcda 	bl	8003990 <GNSS_getDay>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	70bb      	strb	r3, [r7, #2]
	sDate.WeekDay = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	703b      	strb	r3, [r7, #0]

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002fe4:	1d3b      	adds	r3, r7, #4
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4806      	ldr	r0, [pc, #24]	; (8003004 <setTimeGNSS+0x60>)
 8002fec:	f004 fbbb 	bl	8007766 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002ff0:	463b      	mov	r3, r7
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4803      	ldr	r0, [pc, #12]	; (8003004 <setTimeGNSS+0x60>)
 8002ff8:	f004 fcae 	bl	8007958 <HAL_RTC_SetDate>
}
 8002ffc:	bf00      	nop
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	200002a8 	.word	0x200002a8

08003008 <startADC>:

static void startADC() {
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
	if (ADCrunning) {
 800300c:	4b10      	ldr	r3, [pc, #64]	; (8003050 <startADC+0x48>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d11a      	bne.n	800304c <startADC+0x44>
		//ADC already running
		return;
	}

	ADCrunning = true;
 8003016:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <startADC+0x48>)
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
	if (abs(tempC - ADCtempCalibrate) >= 10){ //Re-calibrate every 10 degree swing.
 800301c:	4b0d      	ldr	r3, [pc, #52]	; (8003054 <startADC+0x4c>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <startADC+0x50>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	bfb8      	it	lt
 800302a:	425b      	neglt	r3, r3
 800302c:	2b09      	cmp	r3, #9
 800302e:	dd07      	ble.n	8003040 <startADC+0x38>
		HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003030:	217f      	movs	r1, #127	; 0x7f
 8003032:	480a      	ldr	r0, [pc, #40]	; (800305c <startADC+0x54>)
 8003034:	f002 fb9e 	bl	8005774 <HAL_ADCEx_Calibration_Start>
		ADCtempCalibrate = tempC;
 8003038:	4b06      	ldr	r3, [pc, #24]	; (8003054 <startADC+0x4c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a06      	ldr	r2, [pc, #24]	; (8003058 <startADC+0x50>)
 800303e:	6013      	str	r3, [r2, #0]
	}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_raw, adc_Channels);
 8003040:	2203      	movs	r2, #3
 8003042:	4907      	ldr	r1, [pc, #28]	; (8003060 <startADC+0x58>)
 8003044:	4805      	ldr	r0, [pc, #20]	; (800305c <startADC+0x54>)
 8003046:	f001 fc59 	bl	80048fc <HAL_ADC_Start_DMA>
 800304a:	e000      	b.n	800304e <startADC+0x46>
		return;
 800304c:	bf00      	nop
}
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20000378 	.word	0x20000378
 8003054:	20000380 	.word	0x20000380
 8003058:	20000384 	.word	0x20000384
 800305c:	200001fc 	.word	0x200001fc
 8003060:	20000388 	.word	0x20000388

08003064 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 800306c:	4822      	ldr	r0, [pc, #136]	; (80030f8 <HAL_ADC_ConvCpltCallback+0x94>)
 800306e:	f001 fcc9 	bl	8004a04 <HAL_ADC_Stop_DMA>

	uint32_t vref = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(ADC_raw[2], ADC_RESOLUTION_12B);
 8003072:	4b22      	ldr	r3, [pc, #136]	; (80030fc <HAL_ADC_ConvCpltCallback+0x98>)
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800307c:	fb02 f303 	mul.w	r3, r2, r3
 8003080:	4a1f      	ldr	r2, [pc, #124]	; (8003100 <HAL_ADC_ConvCpltCallback+0x9c>)
 8003082:	8892      	ldrh	r2, [r2, #4]
 8003084:	b292      	uxth	r2, r2
 8003086:	fbb3 f3f2 	udiv	r3, r3, r2
 800308a:	60fb      	str	r3, [r7, #12]

	//solarmV = ADC_raw[0];
	superCapmV = ((uint32_t) ADC_raw[0] * vref * 2) / 4095UL;
 800308c:	4b1c      	ldr	r3, [pc, #112]	; (8003100 <HAL_ADC_ConvCpltCallback+0x9c>)
 800308e:	881b      	ldrh	r3, [r3, #0]
 8003090:	b29b      	uxth	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	fb02 f303 	mul.w	r3, r2, r3
 800309a:	005a      	lsls	r2, r3, #1
 800309c:	4b19      	ldr	r3, [pc, #100]	; (8003104 <HAL_ADC_ConvCpltCallback+0xa0>)
 800309e:	fba3 1302 	umull	r1, r3, r3, r2
 80030a2:	1ad2      	subs	r2, r2, r3
 80030a4:	0852      	lsrs	r2, r2, #1
 80030a6:	4413      	add	r3, r2
 80030a8:	0adb      	lsrs	r3, r3, #11
 80030aa:	4a17      	ldr	r2, [pc, #92]	; (8003108 <HAL_ADC_ConvCpltCallback+0xa4>)
 80030ac:	6013      	str	r3, [r2, #0]

	//Temperature
	tempC = __HAL_ADC_CALC_TEMPERATURE(vref, ADC_raw[1], ADC_RESOLUTION_12B);
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <HAL_ADC_ConvCpltCallback+0x9c>)
 80030b0:	885b      	ldrh	r3, [r3, #2]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	fb02 f303 	mul.w	r3, r2, r3
 80030bc:	4a13      	ldr	r2, [pc, #76]	; (800310c <HAL_ADC_ConvCpltCallback+0xa8>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	099b      	lsrs	r3, r3, #6
 80030c4:	461a      	mov	r2, r3
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_ADC_ConvCpltCallback+0xac>)
 80030c8:	881b      	ldrh	r3, [r3, #0]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2264      	movs	r2, #100	; 0x64
 80030ce:	fb03 f202 	mul.w	r2, r3, r2
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_ADC_ConvCpltCallback+0xb0>)
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	4619      	mov	r1, r3
 80030d8:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <HAL_ADC_ConvCpltCallback+0xac>)
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	1acb      	subs	r3, r1, r3
 80030de:	fb92 f3f3 	sdiv	r3, r2, r3
 80030e2:	331e      	adds	r3, #30
 80030e4:	4a0c      	ldr	r2, [pc, #48]	; (8003118 <HAL_ADC_ConvCpltCallback+0xb4>)
 80030e6:	6013      	str	r3, [r2, #0]

	ADCrunning = false;
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <HAL_ADC_ConvCpltCallback+0xb8>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	701a      	strb	r2, [r3, #0]
}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	200001fc 	.word	0x200001fc
 80030fc:	1fff75aa 	.word	0x1fff75aa
 8003100:	20000388 	.word	0x20000388
 8003104:	00100101 	.word	0x00100101
 8003108:	2000037c 	.word	0x2000037c
 800310c:	057619f1 	.word	0x057619f1
 8003110:	1fff75a8 	.word	0x1fff75a8
 8003114:	1fff75ca 	.word	0x1fff75ca
 8003118:	20000380 	.word	0x20000380
 800311c:	20000378 	.word	0x20000378

08003120 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
	guiTimer++;
 8003128:	4b07      	ldr	r3, [pc, #28]	; (8003148 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	3301      	adds	r3, #1
 800312e:	4a06      	ldr	r2, [pc, #24]	; (8003148 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 8003130:	6013      	str	r3, [r2, #0]
	GNSSlastPacketAge++;
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3301      	adds	r3, #1
 8003138:	4a04      	ldr	r2, [pc, #16]	; (800314c <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 800313a:	6013      	str	r3, [r2, #0]
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	20000390 	.word	0x20000390
 800314c:	200003a0 	.word	0x200003a0

08003150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003156:	4b0f      	ldr	r3, [pc, #60]	; (8003194 <HAL_MspInit+0x44>)
 8003158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315a:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <HAL_MspInit+0x44>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6613      	str	r3, [r2, #96]	; 0x60
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <HAL_MspInit+0x44>)
 8003164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	607b      	str	r3, [r7, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800316e:	4b09      	ldr	r3, [pc, #36]	; (8003194 <HAL_MspInit+0x44>)
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	4a08      	ldr	r2, [pc, #32]	; (8003194 <HAL_MspInit+0x44>)
 8003174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003178:	6593      	str	r3, [r2, #88]	; 0x58
 800317a:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_MspInit+0x44>)
 800317c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000

08003198 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b09e      	sub	sp, #120	; 0x78
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	60da      	str	r2, [r3, #12]
 80031ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031b0:	f107 0310 	add.w	r3, r7, #16
 80031b4:	2254      	movs	r2, #84	; 0x54
 80031b6:	2100      	movs	r1, #0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f006 fd1d 	bl	8009bf8 <memset>
  if(hadc->Instance==ADC1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a33      	ldr	r2, [pc, #204]	; (8003290 <HAL_ADC_MspInit+0xf8>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d15f      	bne.n	8003288 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80031c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031cc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80031ce:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80031d2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031d4:	f107 0310 	add.w	r3, r7, #16
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 ff51 	bl	8007080 <HAL_RCCEx_PeriphCLKConfig>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80031e4:	f7fe fb08 	bl	80017f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80031e8:	4b2a      	ldr	r3, [pc, #168]	; (8003294 <HAL_ADC_MspInit+0xfc>)
 80031ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ec:	4a29      	ldr	r2, [pc, #164]	; (8003294 <HAL_ADC_MspInit+0xfc>)
 80031ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031f4:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_ADC_MspInit+0xfc>)
 80031f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003200:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_ADC_MspInit+0xfc>)
 8003202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003204:	4a23      	ldr	r2, [pc, #140]	; (8003294 <HAL_ADC_MspInit+0xfc>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800320c:	4b21      	ldr	r3, [pc, #132]	; (8003294 <HAL_ADC_MspInit+0xfc>)
 800320e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003218:	2302      	movs	r3, #2
 800321a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800321c:	230b      	movs	r3, #11
 800321e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003224:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003228:	4619      	mov	r1, r3
 800322a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800322e:	f002 fe89 	bl	8005f44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003232:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_ADC_MspInit+0x100>)
 8003234:	4a19      	ldr	r2, [pc, #100]	; (800329c <HAL_ADC_MspInit+0x104>)
 8003236:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003238:	4b17      	ldr	r3, [pc, #92]	; (8003298 <HAL_ADC_MspInit+0x100>)
 800323a:	2200      	movs	r2, #0
 800323c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800323e:	4b16      	ldr	r3, [pc, #88]	; (8003298 <HAL_ADC_MspInit+0x100>)
 8003240:	2200      	movs	r2, #0
 8003242:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003244:	4b14      	ldr	r3, [pc, #80]	; (8003298 <HAL_ADC_MspInit+0x100>)
 8003246:	2200      	movs	r2, #0
 8003248:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800324a:	4b13      	ldr	r3, [pc, #76]	; (8003298 <HAL_ADC_MspInit+0x100>)
 800324c:	2280      	movs	r2, #128	; 0x80
 800324e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <HAL_ADC_MspInit+0x100>)
 8003252:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003256:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003258:	4b0f      	ldr	r3, [pc, #60]	; (8003298 <HAL_ADC_MspInit+0x100>)
 800325a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800325e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003260:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <HAL_ADC_MspInit+0x100>)
 8003262:	2200      	movs	r2, #0
 8003264:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003266:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <HAL_ADC_MspInit+0x100>)
 8003268:	2200      	movs	r2, #0
 800326a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800326c:	480a      	ldr	r0, [pc, #40]	; (8003298 <HAL_ADC_MspInit+0x100>)
 800326e:	f002 fbf3 	bl	8005a58 <HAL_DMA_Init>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003278:	f7fe fabe 	bl	80017f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a06      	ldr	r2, [pc, #24]	; (8003298 <HAL_ADC_MspInit+0x100>)
 8003280:	64da      	str	r2, [r3, #76]	; 0x4c
 8003282:	4a05      	ldr	r2, [pc, #20]	; (8003298 <HAL_ADC_MspInit+0x100>)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003288:	bf00      	nop
 800328a:	3778      	adds	r7, #120	; 0x78
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	50040000 	.word	0x50040000
 8003294:	40021000 	.word	0x40021000
 8003298:	20000260 	.word	0x20000260
 800329c:	40020008 	.word	0x40020008

080032a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b098      	sub	sp, #96	; 0x60
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032a8:	f107 030c 	add.w	r3, r7, #12
 80032ac:	2254      	movs	r2, #84	; 0x54
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f006 fca1 	bl	8009bf8 <memset>
  if(hrtc->Instance==RTC)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a13      	ldr	r2, [pc, #76]	; (8003308 <HAL_RTC_MspInit+0x68>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d11f      	bne.n	8003300 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80032c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032c4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80032c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ca:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032cc:	f107 030c 	add.w	r3, r7, #12
 80032d0:	4618      	mov	r0, r3
 80032d2:	f003 fed5 	bl	8007080 <HAL_RCCEx_PeriphCLKConfig>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80032dc:	f7fe fa8c 	bl	80017f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032e0:	4b0a      	ldr	r3, [pc, #40]	; (800330c <HAL_RTC_MspInit+0x6c>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	4a09      	ldr	r2, [pc, #36]	; (800330c <HAL_RTC_MspInit+0x6c>)
 80032e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80032f0:	2200      	movs	r2, #0
 80032f2:	2100      	movs	r1, #0
 80032f4:	2003      	movs	r0, #3
 80032f6:	f002 fb78 	bl	80059ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80032fa:	2003      	movs	r0, #3
 80032fc:	f002 fb91 	bl	8005a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003300:	bf00      	nop
 8003302:	3760      	adds	r7, #96	; 0x60
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40002800 	.word	0x40002800
 800330c:	40021000 	.word	0x40021000

08003310 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08a      	sub	sp, #40	; 0x28
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003318:	f107 0314 	add.w	r3, r7, #20
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	60da      	str	r2, [r3, #12]
 8003326:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a30      	ldr	r2, [pc, #192]	; (80033f0 <HAL_SPI_MspInit+0xe0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d159      	bne.n	80033e6 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003332:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <HAL_SPI_MspInit+0xe4>)
 8003334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003336:	4a2f      	ldr	r2, [pc, #188]	; (80033f4 <HAL_SPI_MspInit+0xe4>)
 8003338:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800333c:	6613      	str	r3, [r2, #96]	; 0x60
 800333e:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <HAL_SPI_MspInit+0xe4>)
 8003340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003342:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800334a:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <HAL_SPI_MspInit+0xe4>)
 800334c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800334e:	4a29      	ldr	r2, [pc, #164]	; (80033f4 <HAL_SPI_MspInit+0xe4>)
 8003350:	f043 0301 	orr.w	r3, r3, #1
 8003354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003356:	4b27      	ldr	r3, [pc, #156]	; (80033f4 <HAL_SPI_MspInit+0xe4>)
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003362:	23e0      	movs	r3, #224	; 0xe0
 8003364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003366:	2302      	movs	r3, #2
 8003368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800336e:	2303      	movs	r3, #3
 8003370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003372:	2305      	movs	r3, #5
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003376:	f107 0314 	add.w	r3, r7, #20
 800337a:	4619      	mov	r1, r3
 800337c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003380:	f002 fde0 	bl	8005f44 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003384:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <HAL_SPI_MspInit+0xe8>)
 8003386:	4a1d      	ldr	r2, [pc, #116]	; (80033fc <HAL_SPI_MspInit+0xec>)
 8003388:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800338a:	4b1b      	ldr	r3, [pc, #108]	; (80033f8 <HAL_SPI_MspInit+0xe8>)
 800338c:	2201      	movs	r2, #1
 800338e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003390:	4b19      	ldr	r3, [pc, #100]	; (80033f8 <HAL_SPI_MspInit+0xe8>)
 8003392:	2210      	movs	r2, #16
 8003394:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003396:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <HAL_SPI_MspInit+0xe8>)
 8003398:	2200      	movs	r2, #0
 800339a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800339c:	4b16      	ldr	r3, [pc, #88]	; (80033f8 <HAL_SPI_MspInit+0xe8>)
 800339e:	2280      	movs	r2, #128	; 0x80
 80033a0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033a2:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <HAL_SPI_MspInit+0xe8>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033a8:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <HAL_SPI_MspInit+0xe8>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80033ae:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_SPI_MspInit+0xe8>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033b4:	4b10      	ldr	r3, [pc, #64]	; (80033f8 <HAL_SPI_MspInit+0xe8>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80033ba:	480f      	ldr	r0, [pc, #60]	; (80033f8 <HAL_SPI_MspInit+0xe8>)
 80033bc:	f002 fb4c 	bl	8005a58 <HAL_DMA_Init>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80033c6:	f7fe fa17 	bl	80017f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a0a      	ldr	r2, [pc, #40]	; (80033f8 <HAL_SPI_MspInit+0xe8>)
 80033ce:	655a      	str	r2, [r3, #84]	; 0x54
 80033d0:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <HAL_SPI_MspInit+0xe8>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80033d6:	2200      	movs	r2, #0
 80033d8:	2100      	movs	r1, #0
 80033da:	2023      	movs	r0, #35	; 0x23
 80033dc:	f002 fb05 	bl	80059ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80033e0:	2023      	movs	r0, #35	; 0x23
 80033e2:	f002 fb1e 	bl	8005a22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033e6:	bf00      	nop
 80033e8:	3728      	adds	r7, #40	; 0x28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40013000 	.word	0x40013000
 80033f4:	40021000 	.word	0x40021000
 80033f8:	20000330 	.word	0x20000330
 80033fc:	40020030 	.word	0x40020030

08003400 <LL_LPUART_IsActiveFlag_ORE>:
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b08      	cmp	r3, #8
 8003412:	d101      	bne.n	8003418 <LL_LPUART_IsActiveFlag_ORE+0x18>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <LL_LPUART_IsActiveFlag_ORE+0x1a>
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <LL_LPUART_IsActiveFlag_WKUP>:
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_WUF) == (USART_ISR_WUF)) ? 1UL : 0UL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003436:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800343a:	d101      	bne.n	8003440 <LL_LPUART_IsActiveFlag_WKUP+0x1a>
 800343c:	2301      	movs	r3, #1
 800343e:	e000      	b.n	8003442 <LL_LPUART_IsActiveFlag_WKUP+0x1c>
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <LL_LPUART_ClearFlag_ORE>:
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2208      	movs	r2, #8
 800345a:	621a      	str	r2, [r3, #32]
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <LL_LPUART_ClearFlag_WKUP>:
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_WUCF);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003476:	621a      	str	r2, [r3, #32]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <LL_LPUART_IsEnabledIT_WKUP>:
  * @rmtoll CR3          WUFIE         LL_LPUART_IsEnabledIT_WKUP
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_WKUP(const USART_TypeDef *LPUARTx)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR3, USART_CR3_WUFIE) == (USART_CR3_WUFIE)) ? 1UL : 0UL);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003494:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003498:	d101      	bne.n	800349e <LL_LPUART_IsEnabledIT_WKUP+0x1a>
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <LL_LPUART_IsEnabledIT_WKUP+0x1c>
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034b0:	e7fe      	b.n	80034b0 <NMI_Handler+0x4>

080034b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034b2:	b480      	push	{r7}
 80034b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034b6:	e7fe      	b.n	80034b6 <HardFault_Handler+0x4>

080034b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034bc:	e7fe      	b.n	80034bc <MemManage_Handler+0x4>

080034be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034be:	b480      	push	{r7}
 80034c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034c2:	e7fe      	b.n	80034c2 <BusFault_Handler+0x4>

080034c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034c8:	e7fe      	b.n	80034c8 <UsageFault_Handler+0x4>

080034ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ca:	b480      	push	{r7}
 80034cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034f8:	f000 fe62 	bl	80041c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	bd80      	pop	{r7, pc}

08003500 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003504:	4803      	ldr	r0, [pc, #12]	; (8003514 <RTC_WKUP_IRQHandler+0x14>)
 8003506:	f004 fc61 	bl	8007dcc <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  lastWakeUpSource = WKUP_RTC;
 800350a:	4b03      	ldr	r3, [pc, #12]	; (8003518 <RTC_WKUP_IRQHandler+0x18>)
 800350c:	2202      	movs	r2, #2
 800350e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003510:	bf00      	nop
 8003512:	bd80      	pop	{r7, pc}
 8003514:	200002a8 	.word	0x200002a8
 8003518:	20000394 	.word	0x20000394

0800351c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <DMA1_Channel1_IRQHandler+0x10>)
 8003522:	f002 fc30 	bl	8005d86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000260 	.word	0x20000260

08003530 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003534:	4802      	ldr	r0, [pc, #8]	; (8003540 <DMA1_Channel3_IRQHandler+0x10>)
 8003536:	f002 fc26 	bl	8005d86 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	20000330 	.word	0x20000330

08003544 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003548:	4802      	ldr	r0, [pc, #8]	; (8003554 <SPI1_IRQHandler+0x10>)
 800354a:	f004 ff6b 	bl	8008424 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	200002cc 	.word	0x200002cc

08003558 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  /* USER CODE BEGIN LPUART1_IRQn 1 */
	if (LL_LPUART_IsActiveFlag_WKUP(LPUART1) && LL_LPUART_IsEnabledIT_WKUP(LPUART1)) {
 800355c:	480f      	ldr	r0, [pc, #60]	; (800359c <LPUART1_IRQHandler+0x44>)
 800355e:	f7ff ff62 	bl	8003426 <LL_LPUART_IsActiveFlag_WKUP>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00b      	beq.n	8003580 <LPUART1_IRQHandler+0x28>
 8003568:	480c      	ldr	r0, [pc, #48]	; (800359c <LPUART1_IRQHandler+0x44>)
 800356a:	f7ff ff8b 	bl	8003484 <LL_LPUART_IsEnabledIT_WKUP>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <LPUART1_IRQHandler+0x28>
		LL_LPUART_ClearFlag_WKUP(LPUART1);
 8003574:	4809      	ldr	r0, [pc, #36]	; (800359c <LPUART1_IRQHandler+0x44>)
 8003576:	f7ff ff77 	bl	8003468 <LL_LPUART_ClearFlag_WKUP>
		lastWakeUpSource = WKUP_LPUART;
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <LPUART1_IRQHandler+0x48>)
 800357c:	2201      	movs	r2, #1
 800357e:	701a      	strb	r2, [r3, #0]
	}
	if (LL_LPUART_IsActiveFlag_ORE(LPUART1)) { //If overrun has occured
 8003580:	4806      	ldr	r0, [pc, #24]	; (800359c <LPUART1_IRQHandler+0x44>)
 8003582:	f7ff ff3d 	bl	8003400 <LL_LPUART_IsActiveFlag_ORE>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <LPUART1_IRQHandler+0x3a>
		LL_LPUART_ClearFlag_ORE(LPUART1);
 800358c:	4803      	ldr	r0, [pc, #12]	; (800359c <LPUART1_IRQHandler+0x44>)
 800358e:	f7ff ff5e 	bl	800344e <LL_LPUART_ClearFlag_ORE>
	}

	LPUART_CharReception_Callback();
 8003592:	f000 fd77 	bl	8004084 <LPUART_CharReception_Callback>
  /* USER CODE END LPUART1_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40008000 	.word	0x40008000
 80035a0:	20000394 	.word	0x20000394

080035a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return 1;
 80035a8:	2301      	movs	r3, #1
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <_kill>:

int _kill(int pid, int sig)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035be:	f006 fae3 	bl	8009b88 <__errno>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2216      	movs	r2, #22
 80035c6:	601a      	str	r2, [r3, #0]
  return -1;
 80035c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <_exit>:

void _exit (int status)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035dc:	f04f 31ff 	mov.w	r1, #4294967295
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff ffe7 	bl	80035b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035e6:	e7fe      	b.n	80035e6 <_exit+0x12>

080035e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
 80035f8:	e00a      	b.n	8003610 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035fa:	f3af 8000 	nop.w
 80035fe:	4601      	mov	r1, r0
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	60ba      	str	r2, [r7, #8]
 8003606:	b2ca      	uxtb	r2, r1
 8003608:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	3301      	adds	r3, #1
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	429a      	cmp	r2, r3
 8003616:	dbf0      	blt.n	80035fa <_read+0x12>
  }

  return len;
 8003618:	687b      	ldr	r3, [r7, #4]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b086      	sub	sp, #24
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	e009      	b.n	8003648 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	1c5a      	adds	r2, r3, #1
 8003638:	60ba      	str	r2, [r7, #8]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	3301      	adds	r3, #1
 8003646:	617b      	str	r3, [r7, #20]
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	429a      	cmp	r2, r3
 800364e:	dbf1      	blt.n	8003634 <_write+0x12>
  }
  return len;
 8003650:	687b      	ldr	r3, [r7, #4]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <_close>:

int _close(int file)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003682:	605a      	str	r2, [r3, #4]
  return 0;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <_isatty>:

int _isatty(int file)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800369a:	2301      	movs	r3, #1
}
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
	...

080036c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036cc:	4a14      	ldr	r2, [pc, #80]	; (8003720 <_sbrk+0x5c>)
 80036ce:	4b15      	ldr	r3, [pc, #84]	; (8003724 <_sbrk+0x60>)
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036d8:	4b13      	ldr	r3, [pc, #76]	; (8003728 <_sbrk+0x64>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d102      	bne.n	80036e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <_sbrk+0x64>)
 80036e2:	4a12      	ldr	r2, [pc, #72]	; (800372c <_sbrk+0x68>)
 80036e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <_sbrk+0x64>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4413      	add	r3, r2
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d207      	bcs.n	8003704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036f4:	f006 fa48 	bl	8009b88 <__errno>
 80036f8:	4603      	mov	r3, r0
 80036fa:	220c      	movs	r2, #12
 80036fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003702:	e009      	b.n	8003718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003704:	4b08      	ldr	r3, [pc, #32]	; (8003728 <_sbrk+0x64>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800370a:	4b07      	ldr	r3, [pc, #28]	; (8003728 <_sbrk+0x64>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	4a05      	ldr	r2, [pc, #20]	; (8003728 <_sbrk+0x64>)
 8003714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003716:	68fb      	ldr	r3, [r7, #12]
}
 8003718:	4618      	mov	r0, r3
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20010000 	.word	0x20010000
 8003724:	00000400 	.word	0x00000400
 8003728:	20000398 	.word	0x20000398
 800372c:	20000da0 	.word	0x20000da0

08003730 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003734:	4b06      	ldr	r3, [pc, #24]	; (8003750 <SystemInit+0x20>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	4a05      	ldr	r2, [pc, #20]	; (8003750 <SystemInit+0x20>)
 800373c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003744:	bf00      	nop
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003754:	f8df d034 	ldr.w	sp, [pc, #52]	; 800378c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003758:	f7ff ffea 	bl	8003730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 800375c:	480c      	ldr	r0, [pc, #48]	; (8003790 <LoopForever+0x6>)
  ldr r1, =_edata
 800375e:	490d      	ldr	r1, [pc, #52]	; (8003794 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003760:	4a0d      	ldr	r2, [pc, #52]	; (8003798 <LoopForever+0xe>)
  movs r3, #0
 8003762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003764:	e002      	b.n	800376c <LoopCopyDataInit>

08003766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800376a:	3304      	adds	r3, #4

0800376c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800376c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800376e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003770:	d3f9      	bcc.n	8003766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003772:	4a0a      	ldr	r2, [pc, #40]	; (800379c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003774:	4c0a      	ldr	r4, [pc, #40]	; (80037a0 <LoopForever+0x16>)
  movs r3, #0
 8003776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003778:	e001      	b.n	800377e <LoopFillZerobss>

0800377a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800377a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800377c:	3204      	adds	r2, #4

0800377e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800377e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003780:	d3fb      	bcc.n	800377a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003782:	f006 fa07 	bl	8009b94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003786:	f7fd fd11 	bl	80011ac <main>

0800378a <LoopForever>:

LoopForever:
    b LoopForever
 800378a:	e7fe      	b.n	800378a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800378c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003794:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003798:	0800d2ec 	.word	0x0800d2ec
  ldr r2, =_sbss
 800379c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80037a0:	20000da0 	.word	0x20000da0

080037a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037a4:	e7fe      	b.n	80037a4 <ADC1_IRQHandler>

080037a6 <LL_LPUART_IsEnabled>:
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <LL_LPUART_IsEnabled+0x18>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <LL_LPUART_IsEnabled+0x1a>
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <LL_LPUART_EnableInStopMode>:
{
 80037cc:	b480      	push	{r7}
 80037ce:	b089      	sub	sp, #36	; 0x24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_UESM);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	e853 3f00 	ldrex	r3, [r3]
 80037de:	60bb      	str	r3, [r7, #8]
   return(result);
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f043 0302 	orr.w	r3, r3, #2
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	61ba      	str	r2, [r7, #24]
 80037ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	6979      	ldr	r1, [r7, #20]
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	613b      	str	r3, [r7, #16]
   return(result);
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e9      	bne.n	80037d4 <LL_LPUART_EnableInStopMode+0x8>
}
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	3724      	adds	r7, #36	; 0x24
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <LL_LPUART_IsActiveFlag_RXNE>:
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	2b20      	cmp	r3, #32
 8003820:	d101      	bne.n	8003826 <LL_LPUART_IsActiveFlag_RXNE+0x18>
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <LL_LPUART_IsActiveFlag_RXNE+0x1a>
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <LL_LPUART_IsActiveFlag_TC>:
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d101      	bne.n	800384c <LL_LPUART_IsActiveFlag_TC+0x18>
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <LL_LPUART_IsActiveFlag_TC+0x1a>
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr

0800385a <LL_LPUART_IsActiveFlag_TXE>:
{
 800385a:	b480      	push	{r7}
 800385c:	b083      	sub	sp, #12
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800386a:	2b80      	cmp	r3, #128	; 0x80
 800386c:	d101      	bne.n	8003872 <LL_LPUART_IsActiveFlag_TXE+0x18>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <LL_LPUART_IsActiveFlag_TXE+0x1a>
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <LL_LPUART_IsActiveFlag_REACK>:
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003890:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003894:	d101      	bne.n	800389a <LL_LPUART_IsActiveFlag_REACK+0x1a>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <LL_LPUART_IsActiveFlag_REACK+0x1c>
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <LL_LPUART_ClearFlag_ORE>:
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2208      	movs	r2, #8
 80038b4:	621a      	str	r2, [r3, #32]
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <LL_LPUART_ClearFlag_WKUP>:
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_WUCF);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	bf00      	nop
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <LL_LPUART_EnableIT_WKUP>:
{
 80038de:	b480      	push	{r7}
 80038e0:	b089      	sub	sp, #36	; 0x24
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_WUFIE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	3308      	adds	r3, #8
 80038ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	e853 3f00 	ldrex	r3, [r3]
 80038f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038fa:	61fb      	str	r3, [r7, #28]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3308      	adds	r3, #8
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	61ba      	str	r2, [r7, #24]
 8003904:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	6979      	ldr	r1, [r7, #20]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	613b      	str	r3, [r7, #16]
   return(result);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e7      	bne.n	80038e6 <LL_LPUART_EnableIT_WKUP+0x8>
}
 8003916:	bf00      	nop
 8003918:	bf00      	nop
 800391a:	3724      	adds	r7, #36	; 0x24
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <LL_LPUART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_LPUART_ReceiveData8
  * @param  LPUARTx LPUART Instance
  * @retval Time Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_LPUART_ReceiveData8(const USART_TypeDef *LPUARTx)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003930:	b29b      	uxth	r3, r3
 8003932:	b2db      	uxtb	r3, r3
}
 8003934:	4618      	mov	r0, r3
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <LL_LPUART_TransmitData8>:
  * @param  LPUARTx LPUART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	70fb      	strb	r3, [r7, #3]
  LPUARTx->TDR = Value;
 800394c:	78fb      	ldrb	r3, [r7, #3]
 800394e:	b29a      	uxth	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <GNSS_getYear>:
static void GNSS_Set_Power(enum GNSS_rate);
static void LPUART_Transmit(uint8_t *pData, uint16_t Size, uint32_t Timeout);

//Functions
//Time
uint16_t GNSS_getYear() {
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.year;
 8003964:	4b03      	ldr	r3, [pc, #12]	; (8003974 <GNSS_getYear+0x14>)
 8003966:	889b      	ldrh	r3, [r3, #4]
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000410 	.word	0x20000410

08003978 <GNSS_getMonth>:
uint8_t GNSS_getMonth() {
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.month;
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <GNSS_getMonth+0x14>)
 800397e:	799b      	ldrb	r3, [r3, #6]
}
 8003980:	4618      	mov	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	20000410 	.word	0x20000410

08003990 <GNSS_getDay>:
uint8_t GNSS_getDay() {
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.day;
 8003994:	4b03      	ldr	r3, [pc, #12]	; (80039a4 <GNSS_getDay+0x14>)
 8003996:	79db      	ldrb	r3, [r3, #7]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	20000410 	.word	0x20000410

080039a8 <GNSS_getHour>:
uint8_t GNSS_getHour() {
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.hour;
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <GNSS_getHour+0x14>)
 80039ae:	7a1b      	ldrb	r3, [r3, #8]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000410 	.word	0x20000410

080039c0 <GNSS_getMin>:
uint8_t GNSS_getMin() {
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.min;
 80039c4:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <GNSS_getMin+0x14>)
 80039c6:	7a5b      	ldrb	r3, [r3, #9]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	20000410 	.word	0x20000410

080039d8 <GNSS_getSec>:
uint8_t GNSS_getSec() {
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.sec;
 80039dc:	4b03      	ldr	r3, [pc, #12]	; (80039ec <GNSS_getSec+0x14>)
 80039de:	7a9b      	ldrb	r3, [r3, #10]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop
 80039ec:	20000410 	.word	0x20000410

080039f0 <getLat>:

//Location
float getLat() {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
	return ((float) ubx_nav_pvt.lat_deg) * 1e-7;
 80039f4:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <getLat+0x48>)
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	ee07 3a90 	vmov	s15, r3
 80039fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a00:	ee17 0a90 	vmov	r0, s15
 8003a04:	f7fc fda0 	bl	8000548 <__aeabi_f2d>
 8003a08:	a309      	add	r3, pc, #36	; (adr r3, 8003a30 <getLat+0x40>)
 8003a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a0e:	f7fc fdf3 	bl	80005f8 <__aeabi_dmul>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	f7fd f8c5 	bl	8000ba8 <__aeabi_d2f>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	ee07 3a90 	vmov	s15, r3
}
 8003a24:	eeb0 0a67 	vmov.f32	s0, s15
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	f3af 8000 	nop.w
 8003a30:	9abcaf48 	.word	0x9abcaf48
 8003a34:	3e7ad7f2 	.word	0x3e7ad7f2
 8003a38:	20000410 	.word	0x20000410
 8003a3c:	00000000 	.word	0x00000000

08003a40 <getLong>:

float getLong() {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
	return ((float) ubx_nav_pvt.lon_deg) * 1e-7;
 8003a44:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <getLong+0x48>)
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	ee07 3a90 	vmov	s15, r3
 8003a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a50:	ee17 0a90 	vmov	r0, s15
 8003a54:	f7fc fd78 	bl	8000548 <__aeabi_f2d>
 8003a58:	a309      	add	r3, pc, #36	; (adr r3, 8003a80 <getLong+0x40>)
 8003a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5e:	f7fc fdcb 	bl	80005f8 <__aeabi_dmul>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4610      	mov	r0, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	f7fd f89d 	bl	8000ba8 <__aeabi_d2f>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	ee07 3a90 	vmov	s15, r3
}
 8003a74:	eeb0 0a67 	vmov.f32	s0, s15
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	f3af 8000 	nop.w
 8003a80:	9abcaf48 	.word	0x9abcaf48
 8003a84:	3e7ad7f2 	.word	0x3e7ad7f2
 8003a88:	20000410 	.word	0x20000410
 8003a8c:	00000000 	.word	0x00000000

08003a90 <getHAcc>:

float getHAcc() {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
	return (float)ubx_nav_pvt.hacc * 1e-3;
 8003a94:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <getHAcc+0x48>)
 8003a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a98:	ee07 3a90 	vmov	s15, r3
 8003a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa0:	ee17 0a90 	vmov	r0, s15
 8003aa4:	f7fc fd50 	bl	8000548 <__aeabi_f2d>
 8003aa8:	a309      	add	r3, pc, #36	; (adr r3, 8003ad0 <getHAcc+0x40>)
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	f7fc fda3 	bl	80005f8 <__aeabi_dmul>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	4619      	mov	r1, r3
 8003aba:	f7fd f875 	bl	8000ba8 <__aeabi_d2f>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	ee07 3a90 	vmov	s15, r3
}
 8003ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	f3af 8000 	nop.w
 8003ad0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003ad4:	3f50624d 	.word	0x3f50624d
 8003ad8:	20000410 	.word	0x20000410

08003adc <getGroundSpeed_kph>:

uint8_t getGroundSpeed_kph() {
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
	uint32_t returnSpeed = ((ubx_nav_pvt.gspeed / 1000) * 3600) / 1000; // km/h
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <getGroundSpeed_kph+0x48>)
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae6:	4a10      	ldr	r2, [pc, #64]	; (8003b28 <getGroundSpeed_kph+0x4c>)
 8003ae8:	fb82 1203 	smull	r1, r2, r2, r3
 8003aec:	1192      	asrs	r2, r2, #6
 8003aee:	17db      	asrs	r3, r3, #31
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	4a0b      	ldr	r2, [pc, #44]	; (8003b28 <getGroundSpeed_kph+0x4c>)
 8003afc:	fb82 1203 	smull	r1, r2, r2, r3
 8003b00:	1192      	asrs	r2, r2, #6
 8003b02:	17db      	asrs	r3, r3, #31
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	607b      	str	r3, [r7, #4]
	if (returnSpeed > 255) {
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2bff      	cmp	r3, #255	; 0xff
 8003b0c:	d901      	bls.n	8003b12 <getGroundSpeed_kph+0x36>
		return (uint8_t) 255;
 8003b0e:	23ff      	movs	r3, #255	; 0xff
 8003b10:	e001      	b.n	8003b16 <getGroundSpeed_kph+0x3a>
	}
	return (uint8_t) (returnSpeed);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	b2db      	uxtb	r3, r3
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	20000410 	.word	0x20000410
 8003b28:	10624dd3 	.word	0x10624dd3

08003b2c <getMotionHeading_deg>:
uint8_t getMotionHeading_deg() {
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
	return (uint8_t) (ubx_nav_pvt.headmot / 10000UL);
 8003b30:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <getMotionHeading_deg+0x20>)
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	461a      	mov	r2, r3
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <getMotionHeading_deg+0x24>)
 8003b38:	fba3 2302 	umull	r2, r3, r3, r2
 8003b3c:	0b5b      	lsrs	r3, r3, #13
 8003b3e:	b2db      	uxtb	r3, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	20000410 	.word	0x20000410
 8003b50:	d1b71759 	.word	0xd1b71759

08003b54 <getNumSatellites>:

//Status
uint8_t getNumSatellites() {
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.numsv;
 8003b58:	4b03      	ldr	r3, [pc, #12]	; (8003b68 <getNumSatellites+0x14>)
 8003b5a:	7ddb      	ldrb	r3, [r3, #23]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20000410 	.word	0x20000410

08003b6c <getFixType>:

enum GNSS_FixType getFixType() {
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
	return (enum GNSS_FixType) ubx_nav_pvt.fix;
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <getFixType+0x14>)
 8003b72:	7d1b      	ldrb	r3, [r3, #20]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000410 	.word	0x20000410

08003b84 <isTimeFullyResolved>:

bool isGnssFixOk() {
	return ubx_nav_pvt.flags & gnssFixOKmask;
}

bool isTimeFullyResolved() {
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.valid & timeFullyResolved;
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <isTimeFullyResolved+0x20>)
 8003b8a:	7adb      	ldrb	r3, [r3, #11]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf14      	ite	ne
 8003b94:	2301      	movne	r3, #1
 8003b96:	2300      	moveq	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	20000410 	.word	0x20000410

08003ba8 <GNSS_Prep_Stop>:

void GNSS_Prep_Stop() {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
	if (!LL_LPUART_IsEnabled(LPUART1)){
 8003bac:	4814      	ldr	r0, [pc, #80]	; (8003c00 <GNSS_Prep_Stop+0x58>)
 8003bae:	f7ff fdfa 	bl	80037a6 <LL_LPUART_IsEnabled>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d021      	beq.n	8003bfc <GNSS_Prep_Stop+0x54>
		return;
	}
	while (LL_LPUART_IsActiveFlag_RXNE(LPUART1)) { //Empty RX buffer
 8003bb8:	e006      	b.n	8003bc8 <GNSS_Prep_Stop+0x20>
		parse(LL_LPUART_ReceiveData8(LPUART1));
 8003bba:	4811      	ldr	r0, [pc, #68]	; (8003c00 <GNSS_Prep_Stop+0x58>)
 8003bbc:	f7ff feb2 	bl	8003924 <LL_LPUART_ReceiveData8>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 f922 	bl	8003e0c <parse>
	while (LL_LPUART_IsActiveFlag_RXNE(LPUART1)) { //Empty RX buffer
 8003bc8:	480d      	ldr	r0, [pc, #52]	; (8003c00 <GNSS_Prep_Stop+0x58>)
 8003bca:	f7ff fe20 	bl	800380e <LL_LPUART_IsActiveFlag_RXNE>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d1f2      	bne.n	8003bba <GNSS_Prep_Stop+0x12>
	}
	LL_LPUART_ClearFlag_ORE(LPUART1);
 8003bd4:	480a      	ldr	r0, [pc, #40]	; (8003c00 <GNSS_Prep_Stop+0x58>)
 8003bd6:	f7ff fe67 	bl	80038a8 <LL_LPUART_ClearFlag_ORE>
	/* Make sure that LPUART is ready to receive */
	while (LL_LPUART_IsActiveFlag_REACK(LPUART1) == 0) {
 8003bda:	bf00      	nop
 8003bdc:	4808      	ldr	r0, [pc, #32]	; (8003c00 <GNSS_Prep_Stop+0x58>)
 8003bde:	f7ff fe4f 	bl	8003880 <LL_LPUART_IsActiveFlag_REACK>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f9      	beq.n	8003bdc <GNSS_Prep_Stop+0x34>
	}
	LL_LPUART_ClearFlag_WKUP(LPUART1);
 8003be8:	4805      	ldr	r0, [pc, #20]	; (8003c00 <GNSS_Prep_Stop+0x58>)
 8003bea:	f7ff fe6a 	bl	80038c2 <LL_LPUART_ClearFlag_WKUP>
	LL_LPUART_EnableIT_WKUP(LPUART1);
 8003bee:	4804      	ldr	r0, [pc, #16]	; (8003c00 <GNSS_Prep_Stop+0x58>)
 8003bf0:	f7ff fe75 	bl	80038de <LL_LPUART_EnableIT_WKUP>
	LL_LPUART_EnableInStopMode(LPUART1);
 8003bf4:	4802      	ldr	r0, [pc, #8]	; (8003c00 <GNSS_Prep_Stop+0x58>)
 8003bf6:	f7ff fde9 	bl	80037cc <LL_LPUART_EnableInStopMode>
 8003bfa:	e000      	b.n	8003bfe <GNSS_Prep_Stop+0x56>
		return;
 8003bfc:	bf00      	nop
}
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40008000 	.word	0x40008000

08003c04 <GNSS_Power>:

void GNSS_Power() {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
	switch (GNSSlastRate) {
 8003c08:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <GNSS_Power+0x7c>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d014      	beq.n	8003c3c <GNSS_Power+0x38>
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	dc31      	bgt.n	8003c7a <GNSS_Power+0x76>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <GNSS_Power+0x1c>
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d004      	beq.n	8003c28 <GNSS_Power+0x24>
		if (superCapmV < mV_GNSS_OFF) {
			GNSS_Set_Power(GNSS_STOP);
		}
		break;
	}
}
 8003c1e:	e02c      	b.n	8003c7a <GNSS_Power+0x76>
		GNSS_Set_Power(GNSS_STOP);
 8003c20:	2001      	movs	r0, #1
 8003c22:	f000 f833 	bl	8003c8c <GNSS_Set_Power>
		break;
 8003c26:	e028      	b.n	8003c7a <GNSS_Power+0x76>
		if (superCapmV >= mV_GNSS_ON) {
 8003c28:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <GNSS_Power+0x80>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f640 52ab 	movw	r2, #3499	; 0xdab
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d91f      	bls.n	8003c74 <GNSS_Power+0x70>
			GNSS_Set_Power(GNSS_ON);
 8003c34:	2002      	movs	r0, #2
 8003c36:	f000 f829 	bl	8003c8c <GNSS_Set_Power>
		break;
 8003c3a:	e01b      	b.n	8003c74 <GNSS_Power+0x70>
		if ((superCapmV < (mV_GNSS_ON - 150)) && (getFixType() >= FIX_3D) && (GNSSlastPacketAge < 2)) {
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <GNSS_Power+0x80>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f640 5215 	movw	r2, #3349	; 0xd15
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d80b      	bhi.n	8003c60 <GNSS_Power+0x5c>
 8003c48:	f7ff ff90 	bl	8003b6c <getFixType>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b02      	cmp	r3, #2
 8003c50:	d906      	bls.n	8003c60 <GNSS_Power+0x5c>
 8003c52:	4b0d      	ldr	r3, [pc, #52]	; (8003c88 <GNSS_Power+0x84>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d802      	bhi.n	8003c60 <GNSS_Power+0x5c>
			GNSS_Set_Power(GNSS_STOP);
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	f000 f816 	bl	8003c8c <GNSS_Set_Power>
		if (superCapmV < mV_GNSS_OFF) {
 8003c60:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <GNSS_Power+0x80>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d805      	bhi.n	8003c78 <GNSS_Power+0x74>
			GNSS_Set_Power(GNSS_STOP);
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	f000 f80d 	bl	8003c8c <GNSS_Set_Power>
		break;
 8003c72:	e001      	b.n	8003c78 <GNSS_Power+0x74>
		break;
 8003c74:	bf00      	nop
 8003c76:	e000      	b.n	8003c7a <GNSS_Power+0x76>
		break;
 8003c78:	bf00      	nop
}
 8003c7a:	bf00      	nop
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	2000039c 	.word	0x2000039c
 8003c84:	2000037c 	.word	0x2000037c
 8003c88:	200003a0 	.word	0x200003a0

08003c8c <GNSS_Set_Power>:

static void GNSS_Set_Power(enum GNSS_rate newRate) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	71fb      	strb	r3, [r7, #7]
	if (newRate == GNSSlastRate) {
 8003c96:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <GNSS_Set_Power+0x4c>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	79fa      	ldrb	r2, [r7, #7]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d015      	beq.n	8003cce <GNSS_Set_Power+0x42>
		return;
	}
	if (newRate == GNSS_ON) {
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d107      	bne.n	8003cb8 <GNSS_Set_Power+0x2c>
		//Run
		USER_LPUART1_UART_Init();
 8003ca8:	f7fd fd80 	bl	80017ac <USER_LPUART1_UART_Init>
		GNSS_Config();
 8003cac:	f000 f818 	bl	8003ce0 <GNSS_Config>
		GNSSlastRate = GNSS_ON;
 8003cb0:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <GNSS_Set_Power+0x4c>)
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	701a      	strb	r2, [r3, #0]
 8003cb6:	e00b      	b.n	8003cd0 <GNSS_Set_Power+0x44>
	} else {
		//Assume GNSS_STOP
		GNSSAlive = false;
 8003cb8:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <GNSS_Set_Power+0x50>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
		GNSS_Sleep();
 8003cbe:	f000 f861 	bl	8003d84 <GNSS_Sleep>
		USER_LPUART1_UART_DeInit();
 8003cc2:	f7fd fd79 	bl	80017b8 <USER_LPUART1_UART_DeInit>
		GNSSlastRate = GNSS_STOP;
 8003cc6:	4b04      	ldr	r3, [pc, #16]	; (8003cd8 <GNSS_Set_Power+0x4c>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	e000      	b.n	8003cd0 <GNSS_Set_Power+0x44>
		return;
 8003cce:	bf00      	nop
	}
}
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	2000039c 	.word	0x2000039c
 8003cdc:	200003a4 	.word	0x200003a4

08003ce0 <GNSS_Config>:

void GNSS_Config() {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
	//Wakeup
	HAL_GPIO_WritePin(GNSS_EXT_GPIO_Port, GNSS_EXT_Pin, GPIO_PIN_SET);
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	2110      	movs	r1, #16
 8003ce8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cec:	f002 fa94 	bl	8006218 <HAL_GPIO_WritePin>
	LPUART_Transmit((uint8_t*) 0xff, 1, HAL_MAX_DELAY);
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	20ff      	movs	r0, #255	; 0xff
 8003cf8:	f000 f9da 	bl	80040b0 <LPUART_Transmit>
	HAL_Delay(500);
 8003cfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d00:	f7fd fd30 	bl	8001764 <HAL_Delay>

	//Turn off a bunch of stuff
	LPUART_Transmit((uint8_t*) &UBX_NAV_GGA_OFF, sizeof(UBX_NAV_GGA_OFF), HAL_MAX_DELAY);
 8003d04:	f04f 32ff 	mov.w	r2, #4294967295
 8003d08:	2110      	movs	r1, #16
 8003d0a:	4817      	ldr	r0, [pc, #92]	; (8003d68 <GNSS_Config+0x88>)
 8003d0c:	f000 f9d0 	bl	80040b0 <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_GLL_OFF, sizeof(UBX_NAV_GLL_OFF), HAL_MAX_DELAY);
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295
 8003d14:	2110      	movs	r1, #16
 8003d16:	4815      	ldr	r0, [pc, #84]	; (8003d6c <GNSS_Config+0x8c>)
 8003d18:	f000 f9ca 	bl	80040b0 <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_GSA_OFF, sizeof(UBX_NAV_GSA_OFF), HAL_MAX_DELAY);
 8003d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d20:	2110      	movs	r1, #16
 8003d22:	4813      	ldr	r0, [pc, #76]	; (8003d70 <GNSS_Config+0x90>)
 8003d24:	f000 f9c4 	bl	80040b0 <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_GSV_OFF, sizeof(UBX_NAV_GSV_OFF), HAL_MAX_DELAY);
 8003d28:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2c:	2110      	movs	r1, #16
 8003d2e:	4811      	ldr	r0, [pc, #68]	; (8003d74 <GNSS_Config+0x94>)
 8003d30:	f000 f9be 	bl	80040b0 <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_GSV_OFF, sizeof(UBX_NAV_GSV_OFF), HAL_MAX_DELAY);
 8003d34:	f04f 32ff 	mov.w	r2, #4294967295
 8003d38:	2110      	movs	r1, #16
 8003d3a:	480e      	ldr	r0, [pc, #56]	; (8003d74 <GNSS_Config+0x94>)
 8003d3c:	f000 f9b8 	bl	80040b0 <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_RMC_OFF, sizeof(UBX_NAV_RMC_OFF), HAL_MAX_DELAY);
 8003d40:	f04f 32ff 	mov.w	r2, #4294967295
 8003d44:	2110      	movs	r1, #16
 8003d46:	480c      	ldr	r0, [pc, #48]	; (8003d78 <GNSS_Config+0x98>)
 8003d48:	f000 f9b2 	bl	80040b0 <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_VTG_OFF, sizeof(UBX_NAV_VTG_OFF), HAL_MAX_DELAY);
 8003d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d50:	2110      	movs	r1, #16
 8003d52:	480a      	ldr	r0, [pc, #40]	; (8003d7c <GNSS_Config+0x9c>)
 8003d54:	f000 f9ac 	bl	80040b0 <LPUART_Transmit>
	//Enable PVT message
	LPUART_Transmit((uint8_t*) &UBX_NAV_PVT_ON, sizeof(UBX_NAV_PVT_ON), HAL_MAX_DELAY);
 8003d58:	f04f 32ff 	mov.w	r2, #4294967295
 8003d5c:	2110      	movs	r1, #16
 8003d5e:	4808      	ldr	r0, [pc, #32]	; (8003d80 <GNSS_Config+0xa0>)
 8003d60:	f000 f9a6 	bl	80040b0 <LPUART_Transmit>
}
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	0800ce90 	.word	0x0800ce90
 8003d6c:	0800cea0 	.word	0x0800cea0
 8003d70:	0800ceb0 	.word	0x0800ceb0
 8003d74:	0800cec0 	.word	0x0800cec0
 8003d78:	0800ced0 	.word	0x0800ced0
 8003d7c:	0800cee0 	.word	0x0800cee0
 8003d80:	0800cef0 	.word	0x0800cef0

08003d84 <GNSS_Sleep>:

void GNSS_Sleep() {
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GNSS_EXT_GPIO_Port, GNSS_EXT_Pin, GPIO_PIN_RESET);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2110      	movs	r1, #16
 8003d8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d90:	f002 fa42 	bl	8006218 <HAL_GPIO_WritePin>
}
 8003d94:	bf00      	nop
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <Checksum>:

//Parsing
uint16_t Checksum(volatile uint8_t *data, uint16_t len) {
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	807b      	strh	r3, [r7, #2]
	if (!data) {
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <Checksum+0x16>
		return 0;
 8003daa:	2300      	movs	r3, #0
 8003dac:	e025      	b.n	8003dfa <Checksum+0x62>
	}
	uint8_t checksum_buffer[2] = { 0, 0 };
 8003dae:	2300      	movs	r3, #0
 8003db0:	813b      	strh	r3, [r7, #8]
	for (unsigned int i = 0; i < len; i++) {
 8003db2:	2300      	movs	r3, #0
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	e010      	b.n	8003dda <Checksum+0x42>
		checksum_buffer[0] += data[i];
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	7a3b      	ldrb	r3, [r7, #8]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	723b      	strb	r3, [r7, #8]
		checksum_buffer[1] += checksum_buffer[0];
 8003dca:	7a7a      	ldrb	r2, [r7, #9]
 8003dcc:	7a3b      	ldrb	r3, [r7, #8]
 8003dce:	4413      	add	r3, r2
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	727b      	strb	r3, [r7, #9]
	for (unsigned int i = 0; i < len; i++) {
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	887b      	ldrh	r3, [r7, #2]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d3ea      	bcc.n	8003db8 <Checksum+0x20>
	}
	return ((uint16_t) checksum_buffer_[1]) << 8 | checksum_buffer_[0];
 8003de2:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <Checksum+0x70>)
 8003de4:	785b      	ldrb	r3, [r3, #1]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	b21a      	sxth	r2, r3
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <Checksum+0x70>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	b21b      	sxth	r3, r3
 8003df4:	4313      	orrs	r3, r2
 8003df6:	b21b      	sxth	r3, r3
 8003df8:	b29b      	uxth	r3, r3
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	200003ac 	.word	0x200003ac

08003e0c <parse>:

void parse(uint8_t byte_read) {
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	71fb      	strb	r3, [r7, #7]
	/* Identify the packet header */
	if (parser_pos_ < 2) {
 8003e16:	4b91      	ldr	r3, [pc, #580]	; (800405c <parse+0x250>)
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d814      	bhi.n	8003e4a <parse+0x3e>
		if (byte_read == UBX_HEADER_[parser_pos_]) {
 8003e20:	4b8e      	ldr	r3, [pc, #568]	; (800405c <parse+0x250>)
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	4b8d      	ldr	r3, [pc, #564]	; (8004060 <parse+0x254>)
 8003e2a:	5c9b      	ldrb	r3, [r3, r2]
 8003e2c:	79fa      	ldrb	r2, [r7, #7]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d107      	bne.n	8003e42 <parse+0x36>
			parser_pos_++;
 8003e32:	4b8a      	ldr	r3, [pc, #552]	; (800405c <parse+0x250>)
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3301      	adds	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	4b87      	ldr	r3, [pc, #540]	; (800405c <parse+0x250>)
 8003e3e:	801a      	strh	r2, [r3, #0]
 8003e40:	e108      	b.n	8004054 <parse+0x248>
		} else {
			parser_pos_ = 0;
 8003e42:	4b86      	ldr	r3, [pc, #536]	; (800405c <parse+0x250>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	801a      	strh	r2, [r3, #0]
 8003e48:	e104      	b.n	8004054 <parse+0x248>
		}
		/* Message class */
	} else if (parser_pos_ == 2) {
 8003e4a:	4b84      	ldr	r3, [pc, #528]	; (800405c <parse+0x250>)
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d116      	bne.n	8003e82 <parse+0x76>
		if (byte_read == UBX_NAV_CLASS_) {
 8003e54:	2201      	movs	r2, #1
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d10e      	bne.n	8003e7a <parse+0x6e>
			pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003e5c:	4b7f      	ldr	r3, [pc, #508]	; (800405c <parse+0x250>)
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b02      	subs	r3, #2
 8003e64:	497f      	ldr	r1, [pc, #508]	; (8004064 <parse+0x258>)
 8003e66:	79fa      	ldrb	r2, [r7, #7]
 8003e68:	54ca      	strb	r2, [r1, r3]
			parser_pos_++;
 8003e6a:	4b7c      	ldr	r3, [pc, #496]	; (800405c <parse+0x250>)
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	3301      	adds	r3, #1
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	4b79      	ldr	r3, [pc, #484]	; (800405c <parse+0x250>)
 8003e76:	801a      	strh	r2, [r3, #0]
 8003e78:	e0ec      	b.n	8004054 <parse+0x248>
		} else {
			parser_pos_ = 0;
 8003e7a:	4b78      	ldr	r3, [pc, #480]	; (800405c <parse+0x250>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	801a      	strh	r2, [r3, #0]
 8003e80:	e0e8      	b.n	8004054 <parse+0x248>
		}
		/* Message ID */
	} else if (parser_pos_ == 3) {
 8003e82:	4b76      	ldr	r3, [pc, #472]	; (800405c <parse+0x250>)
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b03      	cmp	r3, #3
 8003e8a:	d116      	bne.n	8003eba <parse+0xae>
		if (byte_read == UBX_NAV_PVT) {
 8003e8c:	2207      	movs	r2, #7
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d10e      	bne.n	8003eb2 <parse+0xa6>
			pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003e94:	4b71      	ldr	r3, [pc, #452]	; (800405c <parse+0x250>)
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b02      	subs	r3, #2
 8003e9c:	4971      	ldr	r1, [pc, #452]	; (8004064 <parse+0x258>)
 8003e9e:	79fa      	ldrb	r2, [r7, #7]
 8003ea0:	54ca      	strb	r2, [r1, r3]
			parser_pos_++;
 8003ea2:	4b6e      	ldr	r3, [pc, #440]	; (800405c <parse+0x250>)
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	4b6b      	ldr	r3, [pc, #428]	; (800405c <parse+0x250>)
 8003eae:	801a      	strh	r2, [r3, #0]
 8003eb0:	e0d0      	b.n	8004054 <parse+0x248>
		} else {
			parser_pos_ = 0;
 8003eb2:	4b6a      	ldr	r3, [pc, #424]	; (800405c <parse+0x250>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	e0cc      	b.n	8004054 <parse+0x248>
		}
		/* Messgae length */
	} else if (parser_pos_ == 4) {
 8003eba:	4b68      	ldr	r3, [pc, #416]	; (800405c <parse+0x250>)
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b04      	cmp	r3, #4
 8003ec2:	d111      	bne.n	8003ee8 <parse+0xdc>
		msg_len_buffer_[0] = byte_read;
 8003ec4:	4a68      	ldr	r2, [pc, #416]	; (8004068 <parse+0x25c>)
 8003ec6:	79fb      	ldrb	r3, [r7, #7]
 8003ec8:	7013      	strb	r3, [r2, #0]
		pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003eca:	4b64      	ldr	r3, [pc, #400]	; (800405c <parse+0x250>)
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b02      	subs	r3, #2
 8003ed2:	4964      	ldr	r1, [pc, #400]	; (8004064 <parse+0x258>)
 8003ed4:	79fa      	ldrb	r2, [r7, #7]
 8003ed6:	54ca      	strb	r2, [r1, r3]
		parser_pos_++;
 8003ed8:	4b60      	ldr	r3, [pc, #384]	; (800405c <parse+0x250>)
 8003eda:	881b      	ldrh	r3, [r3, #0]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3301      	adds	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	4b5e      	ldr	r3, [pc, #376]	; (800405c <parse+0x250>)
 8003ee4:	801a      	strh	r2, [r3, #0]
 8003ee6:	e0b5      	b.n	8004054 <parse+0x248>
		/* Message length */
	} else if (parser_pos_ == 5) {
 8003ee8:	4b5c      	ldr	r3, [pc, #368]	; (800405c <parse+0x250>)
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b05      	cmp	r3, #5
 8003ef0:	d12a      	bne.n	8003f48 <parse+0x13c>
		msg_len_buffer_[1] = byte_read;
 8003ef2:	4a5d      	ldr	r2, [pc, #372]	; (8004068 <parse+0x25c>)
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	7053      	strb	r3, [r2, #1]
		msg_len_ = ((uint16_t) msg_len_buffer_[1]) << 8 | msg_len_buffer_[0];
 8003ef8:	4b5b      	ldr	r3, [pc, #364]	; (8004068 <parse+0x25c>)
 8003efa:	785b      	ldrb	r3, [r3, #1]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	b21a      	sxth	r2, r3
 8003f02:	4b59      	ldr	r3, [pc, #356]	; (8004068 <parse+0x25c>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	b21b      	sxth	r3, r3
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	b21b      	sxth	r3, r3
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	4b56      	ldr	r3, [pc, #344]	; (800406c <parse+0x260>)
 8003f12:	801a      	strh	r2, [r3, #0]
		pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003f14:	4b51      	ldr	r3, [pc, #324]	; (800405c <parse+0x250>)
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b02      	subs	r3, #2
 8003f1c:	4951      	ldr	r1, [pc, #324]	; (8004064 <parse+0x258>)
 8003f1e:	79fa      	ldrb	r2, [r7, #7]
 8003f20:	54ca      	strb	r2, [r1, r3]
		if (msg_len_ == UBX_PVT_LEN_) {
 8003f22:	235c      	movs	r3, #92	; 0x5c
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	4b51      	ldr	r3, [pc, #324]	; (800406c <parse+0x260>)
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d107      	bne.n	8003f40 <parse+0x134>
			parser_pos_++;
 8003f30:	4b4a      	ldr	r3, [pc, #296]	; (800405c <parse+0x250>)
 8003f32:	881b      	ldrh	r3, [r3, #0]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3301      	adds	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	4b48      	ldr	r3, [pc, #288]	; (800405c <parse+0x250>)
 8003f3c:	801a      	strh	r2, [r3, #0]
		} else {
			parser_pos_ = 0;
		}
		return;
 8003f3e:	e089      	b.n	8004054 <parse+0x248>
			parser_pos_ = 0;
 8003f40:	4b46      	ldr	r3, [pc, #280]	; (800405c <parse+0x250>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	801a      	strh	r2, [r3, #0]
		return;
 8003f46:	e085      	b.n	8004054 <parse+0x248>
		/* Message payload */
	} else if (parser_pos_ < (msg_len_ + UBX_HEADER_LEN_)) {
 8003f48:	4b44      	ldr	r3, [pc, #272]	; (800405c <parse+0x250>)
 8003f4a:	881b      	ldrh	r3, [r3, #0]
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	4b46      	ldr	r3, [pc, #280]	; (800406c <parse+0x260>)
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	4619      	mov	r1, r3
 8003f58:	2306      	movs	r3, #6
 8003f5a:	440b      	add	r3, r1
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	da0e      	bge.n	8003f7e <parse+0x172>
		pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003f60:	4b3e      	ldr	r3, [pc, #248]	; (800405c <parse+0x250>)
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b02      	subs	r3, #2
 8003f68:	493e      	ldr	r1, [pc, #248]	; (8004064 <parse+0x258>)
 8003f6a:	79fa      	ldrb	r2, [r7, #7]
 8003f6c:	54ca      	strb	r2, [r1, r3]
		parser_pos_++;
 8003f6e:	4b3b      	ldr	r3, [pc, #236]	; (800405c <parse+0x250>)
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3301      	adds	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	4b38      	ldr	r3, [pc, #224]	; (800405c <parse+0x250>)
 8003f7a:	801a      	strh	r2, [r3, #0]
 8003f7c:	e06a      	b.n	8004054 <parse+0x248>
		/* Checksum */
	} else if (parser_pos_ == (msg_len_ + UBX_HEADER_LEN_)) {
 8003f7e:	4b37      	ldr	r3, [pc, #220]	; (800405c <parse+0x250>)
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b39      	ldr	r3, [pc, #228]	; (800406c <parse+0x260>)
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	2306      	movs	r3, #6
 8003f90:	440b      	add	r3, r1
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d10a      	bne.n	8003fac <parse+0x1a0>
		checksum_buffer_[0] = byte_read;
 8003f96:	4a36      	ldr	r2, [pc, #216]	; (8004070 <parse+0x264>)
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	7013      	strb	r3, [r2, #0]
		parser_pos_++;
 8003f9c:	4b2f      	ldr	r3, [pc, #188]	; (800405c <parse+0x250>)
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	4b2d      	ldr	r3, [pc, #180]	; (800405c <parse+0x250>)
 8003fa8:	801a      	strh	r2, [r3, #0]
 8003faa:	e053      	b.n	8004054 <parse+0x248>
	} else {
		checksum_buffer_[1] = byte_read;
 8003fac:	4a30      	ldr	r2, [pc, #192]	; (8004070 <parse+0x264>)
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	7053      	strb	r3, [r2, #1]
		uint16_t received_checksum = ((uint16_t) checksum_buffer_[1]) << 8 | checksum_buffer_[0];
 8003fb2:	4b2f      	ldr	r3, [pc, #188]	; (8004070 <parse+0x264>)
 8003fb4:	785b      	ldrb	r3, [r3, #1]
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	021b      	lsls	r3, r3, #8
 8003fba:	b21a      	sxth	r2, r3
 8003fbc:	4b2c      	ldr	r3, [pc, #176]	; (8004070 <parse+0x264>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	b21b      	sxth	r3, r3
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	b21b      	sxth	r3, r3
 8003fc8:	81fb      	strh	r3, [r7, #14]
		uint16_t computed_checksum = Checksum(pvt_buffer_, msg_len_ + UBX_HEADER_LEN_);
 8003fca:	2306      	movs	r3, #6
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	4b27      	ldr	r3, [pc, #156]	; (800406c <parse+0x260>)
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4822      	ldr	r0, [pc, #136]	; (8004064 <parse+0x258>)
 8003fdc:	f7ff fedc 	bl	8003d98 <Checksum>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	81bb      	strh	r3, [r7, #12]
		if (computed_checksum == received_checksum) {
 8003fe4:	89ba      	ldrh	r2, [r7, #12]
 8003fe6:	89fb      	ldrh	r3, [r7, #14]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d130      	bne.n	800404e <parse+0x242>
			if (pvt_buffer_[20 + UBX_PAYLOAD_OFFSET_] >= FIX_2D) {
 8003fec:	2304      	movs	r3, #4
 8003fee:	3314      	adds	r3, #20
 8003ff0:	4a1c      	ldr	r2, [pc, #112]	; (8004064 <parse+0x258>)
 8003ff2:	5cd3      	ldrb	r3, [r2, r3]
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d915      	bls.n	8004026 <parse+0x21a>
				memcpy(&ubx_nav_pvt, (void*)  pvt_buffer_ + UBX_PAYLOAD_OFFSET_, UBX_PVT_LEN_);
 8003ffa:	2304      	movs	r3, #4
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4b19      	ldr	r3, [pc, #100]	; (8004064 <parse+0x258>)
 8004000:	4413      	add	r3, r2
 8004002:	225c      	movs	r2, #92	; 0x5c
 8004004:	4619      	mov	r1, r3
 8004006:	481b      	ldr	r0, [pc, #108]	; (8004074 <parse+0x268>)
 8004008:	f005 fde8 	bl	8009bdc <memcpy>
				GNSSlastPacketAge = 0;
 800400c:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <parse+0x26c>)
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]
				if (isTimeFullyResolved()) {
 8004012:	f7ff fdb7 	bl	8003b84 <isTimeFullyResolved>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <parse+0x214>
					setTimeGNSS();
 800401c:	f7fe ffc2 	bl	8002fa4 <setTimeGNSS>
				}
				GNSSNewData = true;
 8004020:	4b16      	ldr	r3, [pc, #88]	; (800407c <parse+0x270>)
 8004022:	2201      	movs	r2, #1
 8004024:	701a      	strb	r2, [r3, #0]
			}
			GNSSAlive = !GNSSAlive;
 8004026:	4b16      	ldr	r3, [pc, #88]	; (8004080 <parse+0x274>)
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf14      	ite	ne
 8004030:	2301      	movne	r3, #1
 8004032:	2300      	moveq	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	f083 0301 	eor.w	r3, r3, #1
 800403a:	b2db      	uxtb	r3, r3
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	b2da      	uxtb	r2, r3
 8004042:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <parse+0x274>)
 8004044:	701a      	strb	r2, [r3, #0]
			parser_pos_ = 0;
 8004046:	4b05      	ldr	r3, [pc, #20]	; (800405c <parse+0x250>)
 8004048:	2200      	movs	r2, #0
 800404a:	801a      	strh	r2, [r3, #0]
 800404c:	e002      	b.n	8004054 <parse+0x248>
		} else {
			parser_pos_ = 0;
 800404e:	4b03      	ldr	r3, [pc, #12]	; (800405c <parse+0x250>)
 8004050:	2200      	movs	r2, #0
 8004052:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	200003a6 	.word	0x200003a6
 8004060:	0800cf00 	.word	0x0800cf00
 8004064:	200003b0 	.word	0x200003b0
 8004068:	200003a8 	.word	0x200003a8
 800406c:	200003aa 	.word	0x200003aa
 8004070:	200003ac 	.word	0x200003ac
 8004074:	20000410 	.word	0x20000410
 8004078:	200003a0 	.word	0x200003a0
 800407c:	20000004 	.word	0x20000004
 8004080:	200003a4 	.word	0x200003a4

08004084 <LPUART_CharReception_Callback>:

void LPUART_CharReception_Callback(void) {
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
	while (LL_LPUART_IsActiveFlag_RXNE(LPUART1)) {
 8004088:	e006      	b.n	8004098 <LPUART_CharReception_Callback+0x14>
		parse(LL_LPUART_ReceiveData8(LPUART1));
 800408a:	4808      	ldr	r0, [pc, #32]	; (80040ac <LPUART_CharReception_Callback+0x28>)
 800408c:	f7ff fc4a 	bl	8003924 <LL_LPUART_ReceiveData8>
 8004090:	4603      	mov	r3, r0
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff feba 	bl	8003e0c <parse>
	while (LL_LPUART_IsActiveFlag_RXNE(LPUART1)) {
 8004098:	4804      	ldr	r0, [pc, #16]	; (80040ac <LPUART_CharReception_Callback+0x28>)
 800409a:	f7ff fbb8 	bl	800380e <LL_LPUART_IsActiveFlag_RXNE>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1f2      	bne.n	800408a <LPUART_CharReception_Callback+0x6>
	}
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	40008000 	.word	0x40008000

080040b0 <LPUART_Transmit>:

static void LPUART_Transmit(uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	460b      	mov	r3, r1
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	817b      	strh	r3, [r7, #10]
	if ((pData == NULL) || (Size == 0U)) {
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d022      	beq.n	800410a <LPUART_Transmit+0x5a>
 80040c4:	897b      	ldrh	r3, [r7, #10]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01f      	beq.n	800410a <LPUART_Transmit+0x5a>
		return;
	}

	while (Size--) {
 80040ca:	e011      	b.n	80040f0 <LPUART_Transmit+0x40>
		/* Wait for TXE flag to be raised */
		while (!LL_LPUART_IsActiveFlag_TXE(LPUART1)) {
 80040cc:	bf00      	nop
 80040ce:	4811      	ldr	r0, [pc, #68]	; (8004114 <LPUART_Transmit+0x64>)
 80040d0:	f7ff fbc3 	bl	800385a <LL_LPUART_IsActiveFlag_TXE>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f9      	beq.n	80040ce <LPUART_Transmit+0x1e>
		}
		uint8_t sendThis = (uint8_t) (*pData);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	75fb      	strb	r3, [r7, #23]
		LL_LPUART_TransmitData8(LPUART1, sendThis);
 80040e0:	7dfb      	ldrb	r3, [r7, #23]
 80040e2:	4619      	mov	r1, r3
 80040e4:	480b      	ldr	r0, [pc, #44]	; (8004114 <LPUART_Transmit+0x64>)
 80040e6:	f7ff fc2b 	bl	8003940 <LL_LPUART_TransmitData8>
		pData++;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3301      	adds	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
	while (Size--) {
 80040f0:	897b      	ldrh	r3, [r7, #10]
 80040f2:	1e5a      	subs	r2, r3, #1
 80040f4:	817a      	strh	r2, [r7, #10]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e8      	bne.n	80040cc <LPUART_Transmit+0x1c>
	}

	/* Wait for TC flag to be raised for last char */
	while (!LL_LPUART_IsActiveFlag_TC(LPUART1)) {
 80040fa:	bf00      	nop
 80040fc:	4805      	ldr	r0, [pc, #20]	; (8004114 <LPUART_Transmit+0x64>)
 80040fe:	f7ff fb99 	bl	8003834 <LL_LPUART_IsActiveFlag_TC>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f9      	beq.n	80040fc <LPUART_Transmit+0x4c>
 8004108:	e000      	b.n	800410c <LPUART_Transmit+0x5c>
		return;
 800410a:	bf00      	nop
	}
}
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40008000 	.word	0x40008000

08004118 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800411e:	2300      	movs	r3, #0
 8004120:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004122:	2003      	movs	r0, #3
 8004124:	f001 fc56 	bl	80059d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004128:	200f      	movs	r0, #15
 800412a:	f000 f80d 	bl	8004148 <HAL_InitTick>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	71fb      	strb	r3, [r7, #7]
 8004138:	e001      	b.n	800413e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800413a:	f7ff f809 	bl	8003150 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800413e:	79fb      	ldrb	r3, [r7, #7]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004150:	2300      	movs	r3, #0
 8004152:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004154:	4b17      	ldr	r3, [pc, #92]	; (80041b4 <HAL_InitTick+0x6c>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d023      	beq.n	80041a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800415c:	4b16      	ldr	r3, [pc, #88]	; (80041b8 <HAL_InitTick+0x70>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <HAL_InitTick+0x6c>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	4619      	mov	r1, r3
 8004166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800416a:	fbb3 f3f1 	udiv	r3, r3, r1
 800416e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004172:	4618      	mov	r0, r3
 8004174:	f001 fc63 	bl	8005a3e <HAL_SYSTICK_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10f      	bne.n	800419e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b0f      	cmp	r3, #15
 8004182:	d809      	bhi.n	8004198 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004184:	2200      	movs	r2, #0
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	f04f 30ff 	mov.w	r0, #4294967295
 800418c:	f001 fc2d 	bl	80059ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004190:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <HAL_InitTick+0x74>)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e007      	b.n	80041a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	73fb      	strb	r3, [r7, #15]
 800419c:	e004      	b.n	80041a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	73fb      	strb	r3, [r7, #15]
 80041a2:	e001      	b.n	80041a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	2000000c 	.word	0x2000000c
 80041b8:	20000000 	.word	0x20000000
 80041bc:	20000008 	.word	0x20000008

080041c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <HAL_IncTick+0x20>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_IncTick+0x24>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4413      	add	r3, r2
 80041d0:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <HAL_IncTick+0x24>)
 80041d2:	6013      	str	r3, [r2, #0]
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	2000000c 	.word	0x2000000c
 80041e4:	2000046c 	.word	0x2000046c

080041e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return uwTick;
 80041ec:	4b03      	ldr	r3, [pc, #12]	; (80041fc <HAL_GetTick+0x14>)
 80041ee:	681b      	ldr	r3, [r3, #0]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	2000046c 	.word	0x2000046c

08004200 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004204:	4b05      	ldr	r3, [pc, #20]	; (800421c <HAL_SuspendTick+0x1c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a04      	ldr	r2, [pc, #16]	; (800421c <HAL_SuspendTick+0x1c>)
 800420a:	f023 0302 	bic.w	r3, r3, #2
 800420e:	6013      	str	r3, [r2, #0]
}
 8004210:	bf00      	nop
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	e000e010 	.word	0xe000e010

08004220 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004224:	4b05      	ldr	r3, [pc, #20]	; (800423c <HAL_ResumeTick+0x1c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a04      	ldr	r2, [pc, #16]	; (800423c <HAL_ResumeTick+0x1c>)
 800422a:	f043 0302 	orr.w	r3, r3, #2
 800422e:	6013      	str	r3, [r2, #0]
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	e000e010 	.word	0xe000e010

08004240 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	609a      	str	r2, [r3, #8]
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	431a      	orrs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	609a      	str	r2, [r3, #8]
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3360      	adds	r3, #96	; 0x60
 80042ba:	461a      	mov	r2, r3
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4b08      	ldr	r3, [pc, #32]	; (80042ec <LL_ADC_SetOffset+0x44>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80042e0:	bf00      	nop
 80042e2:	371c      	adds	r7, #28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	03fff000 	.word	0x03fff000

080042f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3360      	adds	r3, #96	; 0x60
 80042fe:	461a      	mov	r2, r3
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004310:	4618      	mov	r0, r3
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	3360      	adds	r3, #96	; 0x60
 800432c:	461a      	mov	r2, r3
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	431a      	orrs	r2, r3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800436a:	2300      	movs	r3, #0
}
 800436c:	4618      	mov	r0, r3
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3330      	adds	r3, #48	; 0x30
 8004388:	461a      	mov	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	0a1b      	lsrs	r3, r3, #8
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	f003 030c 	and.w	r3, r3, #12
 8004394:	4413      	add	r3, r2
 8004396:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f003 031f 	and.w	r3, r3, #31
 80043a2:	211f      	movs	r1, #31
 80043a4:	fa01 f303 	lsl.w	r3, r1, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	401a      	ands	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	0e9b      	lsrs	r3, r3, #26
 80043b0:	f003 011f 	and.w	r1, r3, #31
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f003 031f 	and.w	r3, r3, #31
 80043ba:	fa01 f303 	lsl.w	r3, r1, r3
 80043be:	431a      	orrs	r2, r3
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80043c4:	bf00      	nop
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3314      	adds	r3, #20
 80043e0:	461a      	mov	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	0e5b      	lsrs	r3, r3, #25
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	4413      	add	r3, r2
 80043ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	0d1b      	lsrs	r3, r3, #20
 80043f8:	f003 031f 	and.w	r3, r3, #31
 80043fc:	2107      	movs	r1, #7
 80043fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	401a      	ands	r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	0d1b      	lsrs	r3, r3, #20
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	fa01 f303 	lsl.w	r3, r1, r3
 8004414:	431a      	orrs	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
	...

08004428 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004440:	43db      	mvns	r3, r3
 8004442:	401a      	ands	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f003 0318 	and.w	r3, r3, #24
 800444a:	4908      	ldr	r1, [pc, #32]	; (800446c <LL_ADC_SetChannelSingleDiff+0x44>)
 800444c:	40d9      	lsrs	r1, r3
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	400b      	ands	r3, r1
 8004452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004456:	431a      	orrs	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800445e:	bf00      	nop
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	0007ffff 	.word	0x0007ffff

08004470 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004480:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6093      	str	r3, [r2, #8]
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044a8:	d101      	bne.n	80044ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80044cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044f8:	d101      	bne.n	80044fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800451c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004520:	f043 0201 	orr.w	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004544:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004548:	f043 0202 	orr.w	r2, r3, #2
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <LL_ADC_IsEnabled+0x18>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <LL_ADC_IsEnabled+0x1a>
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	370c      	adds	r7, #12
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004582:	b480      	push	{r7}
 8004584:	b083      	sub	sp, #12
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b02      	cmp	r3, #2
 8004594:	d101      	bne.n	800459a <LL_ADC_IsDisableOngoing+0x18>
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <LL_ADC_IsDisableOngoing+0x1a>
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045bc:	f043 0204 	orr.w	r2, r3, #4
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045e4:	f043 0210 	orr.w	r2, r3, #16
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b04      	cmp	r3, #4
 800460a:	d101      	bne.n	8004610 <LL_ADC_REG_IsConversionOngoing+0x18>
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800462e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004632:	f043 0220 	orr.w	r2, r3, #32
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b08      	cmp	r3, #8
 8004658:	d101      	bne.n	800465e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800465a:	2301      	movs	r3, #1
 800465c:	e000      	b.n	8004660 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004674:	2300      	movs	r3, #0
 8004676:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004678:	2300      	movs	r3, #0
 800467a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e12c      	b.n	80048e0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004690:	2b00      	cmp	r3, #0
 8004692:	d109      	bne.n	80046a8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7fe fd7f 	bl	8003198 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fef1 	bl	8004494 <LL_ADC_IsDeepPowerDownEnabled>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d004      	beq.n	80046c2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff fed7 	bl	8004470 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff ff0c 	bl	80044e4 <LL_ADC_IsInternalRegulatorEnabled>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d115      	bne.n	80046fe <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff fef0 	bl	80044bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046dc:	4b82      	ldr	r3, [pc, #520]	; (80048e8 <HAL_ADC_Init+0x27c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	099b      	lsrs	r3, r3, #6
 80046e2:	4a82      	ldr	r2, [pc, #520]	; (80048ec <HAL_ADC_Init+0x280>)
 80046e4:	fba2 2303 	umull	r2, r3, r2, r3
 80046e8:	099b      	lsrs	r3, r3, #6
 80046ea:	3301      	adds	r3, #1
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046f0:	e002      	b.n	80046f8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	3b01      	subs	r3, #1
 80046f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f9      	bne.n	80046f2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff feee 	bl	80044e4 <LL_ADC_IsInternalRegulatorEnabled>
 8004708:	4603      	mov	r3, r0
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10d      	bne.n	800472a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004712:	f043 0210 	orr.w	r2, r3, #16
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471e:	f043 0201 	orr.w	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff ff62 	bl	80045f8 <LL_ADC_REG_IsConversionOngoing>
 8004734:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473a:	f003 0310 	and.w	r3, r3, #16
 800473e:	2b00      	cmp	r3, #0
 8004740:	f040 80c5 	bne.w	80048ce <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	2b00      	cmp	r3, #0
 8004748:	f040 80c1 	bne.w	80048ce <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004750:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004754:	f043 0202 	orr.w	r2, r3, #2
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fefb 	bl	800455c <LL_ADC_IsEnabled>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800476c:	4860      	ldr	r0, [pc, #384]	; (80048f0 <HAL_ADC_Init+0x284>)
 800476e:	f7ff fef5 	bl	800455c <LL_ADC_IsEnabled>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d105      	bne.n	8004784 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	4619      	mov	r1, r3
 800477e:	485d      	ldr	r0, [pc, #372]	; (80048f4 <HAL_ADC_Init+0x288>)
 8004780:	f7ff fd5e 	bl	8004240 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	7e5b      	ldrb	r3, [r3, #25]
 8004788:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800478e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004794:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800479a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047a2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047a4:	4313      	orrs	r3, r2
 80047a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d106      	bne.n	80047c0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	3b01      	subs	r3, #1
 80047b8:	045b      	lsls	r3, r3, #17
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	4313      	orrs	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d009      	beq.n	80047dc <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047cc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4313      	orrs	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	4b45      	ldr	r3, [pc, #276]	; (80048f8 <HAL_ADC_Init+0x28c>)
 80047e4:	4013      	ands	r3, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6812      	ldr	r2, [r2, #0]
 80047ea:	69b9      	ldr	r1, [r7, #24]
 80047ec:	430b      	orrs	r3, r1
 80047ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff feff 	bl	80045f8 <LL_ADC_REG_IsConversionOngoing>
 80047fa:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f7ff ff20 	bl	8004646 <LL_ADC_INJ_IsConversionOngoing>
 8004806:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d13d      	bne.n	800488a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d13a      	bne.n	800488a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004818:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004820:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004822:	4313      	orrs	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004830:	f023 0302 	bic.w	r3, r3, #2
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	69b9      	ldr	r1, [r7, #24]
 800483a:	430b      	orrs	r3, r1
 800483c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004844:	2b01      	cmp	r3, #1
 8004846:	d118      	bne.n	800487a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004852:	f023 0304 	bic.w	r3, r3, #4
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800485e:	4311      	orrs	r1, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004864:	4311      	orrs	r1, r2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800486a:	430a      	orrs	r2, r1
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	611a      	str	r2, [r3, #16]
 8004878:	e007      	b.n	800488a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0201 	bic.w	r2, r2, #1
 8004888:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d10c      	bne.n	80048ac <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	f023 010f 	bic.w	r1, r3, #15
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	1e5a      	subs	r2, r3, #1
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30
 80048aa:	e007      	b.n	80048bc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 020f 	bic.w	r2, r2, #15
 80048ba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c0:	f023 0303 	bic.w	r3, r3, #3
 80048c4:	f043 0201 	orr.w	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	655a      	str	r2, [r3, #84]	; 0x54
 80048cc:	e007      	b.n	80048de <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d2:	f043 0210 	orr.w	r2, r3, #16
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80048de:	7ffb      	ldrb	r3, [r7, #31]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3720      	adds	r7, #32
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000000 	.word	0x20000000
 80048ec:	053e2d63 	.word	0x053e2d63
 80048f0:	50040000 	.word	0x50040000
 80048f4:	50040300 	.word	0x50040300
 80048f8:	fff0c007 	.word	0xfff0c007

080048fc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff fe73 	bl	80045f8 <LL_ADC_REG_IsConversionOngoing>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d167      	bne.n	80049e8 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800491e:	2b01      	cmp	r3, #1
 8004920:	d101      	bne.n	8004926 <HAL_ADC_Start_DMA+0x2a>
 8004922:	2302      	movs	r3, #2
 8004924:	e063      	b.n	80049ee <HAL_ADC_Start_DMA+0xf2>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 fd7a 	bl	8005428 <ADC_Enable>
 8004934:	4603      	mov	r3, r0
 8004936:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d14f      	bne.n	80049de <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004942:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004946:	f023 0301 	bic.w	r3, r3, #1
 800494a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d006      	beq.n	800496c <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004962:	f023 0206 	bic.w	r2, r3, #6
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	659a      	str	r2, [r3, #88]	; 0x58
 800496a:	e002      	b.n	8004972 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004976:	4a20      	ldr	r2, [pc, #128]	; (80049f8 <HAL_ADC_Start_DMA+0xfc>)
 8004978:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497e:	4a1f      	ldr	r2, [pc, #124]	; (80049fc <HAL_ADC_Start_DMA+0x100>)
 8004980:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004986:	4a1e      	ldr	r2, [pc, #120]	; (8004a00 <HAL_ADC_Start_DMA+0x104>)
 8004988:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	221c      	movs	r2, #28
 8004990:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f042 0210 	orr.w	r2, r2, #16
 80049a8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0201 	orr.w	r2, r2, #1
 80049b8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3340      	adds	r3, #64	; 0x40
 80049c4:	4619      	mov	r1, r3
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f001 f8fd 	bl	8005bc8 <HAL_DMA_Start_IT>
 80049ce:	4603      	mov	r3, r0
 80049d0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff fde6 	bl	80045a8 <LL_ADC_REG_StartConversion>
 80049dc:	e006      	b.n	80049ec <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80049e6:	e001      	b.n	80049ec <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80049e8:	2302      	movs	r3, #2
 80049ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80049ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3718      	adds	r7, #24
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	080055f3 	.word	0x080055f3
 80049fc:	080056cb 	.word	0x080056cb
 8004a00:	080056e7 	.word	0x080056e7

08004a04 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_ADC_Stop_DMA+0x16>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e051      	b.n	8004abe <HAL_ADC_Stop_DMA+0xba>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004a22:	2103      	movs	r1, #3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 fc43 	bl	80052b0 <ADC_ConversionStop>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d13f      	bne.n	8004ab4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68da      	ldr	r2, [r3, #12]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0201 	bic.w	r2, r2, #1
 8004a42:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d10f      	bne.n	8004a72 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a56:	4618      	mov	r0, r3
 8004a58:	f001 f916 	bl	8005c88 <HAL_DMA_Abort>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d005      	beq.n	8004a72 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0210 	bic.w	r2, r2, #16
 8004a80:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d105      	bne.n	8004a94 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fd53 	bl	8005534 <ADC_Disable>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	73fb      	strb	r3, [r7, #15]
 8004a92:	e002      	b.n	8004a9a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fd4d 	bl	8005534 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d109      	bne.n	8004ab4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	f043 0201 	orr.w	r2, r3, #1
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004ae2:	bf00      	nop
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
	...

08004af0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b0b6      	sub	sp, #216	; 0xd8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x22>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e3b9      	b.n	8005286 <HAL_ADC_ConfigChannel+0x796>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff fd6a 	bl	80045f8 <LL_ADC_REG_IsConversionOngoing>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f040 839e 	bne.w	8005268 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	2b05      	cmp	r3, #5
 8004b32:	d824      	bhi.n	8004b7e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	3b02      	subs	r3, #2
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d81b      	bhi.n	8004b76 <HAL_ADC_ConfigChannel+0x86>
 8004b3e:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <HAL_ADC_ConfigChannel+0x54>)
 8004b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b44:	08004b55 	.word	0x08004b55
 8004b48:	08004b5d 	.word	0x08004b5d
 8004b4c:	08004b65 	.word	0x08004b65
 8004b50:	08004b6d 	.word	0x08004b6d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	220c      	movs	r2, #12
 8004b58:	605a      	str	r2, [r3, #4]
          break;
 8004b5a:	e011      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	2212      	movs	r2, #18
 8004b60:	605a      	str	r2, [r3, #4]
          break;
 8004b62:	e00d      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	2218      	movs	r2, #24
 8004b68:	605a      	str	r2, [r3, #4]
          break;
 8004b6a:	e009      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b72:	605a      	str	r2, [r3, #4]
          break;
 8004b74:	e004      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2206      	movs	r2, #6
 8004b7a:	605a      	str	r2, [r3, #4]
          break;
 8004b7c:	e000      	b.n	8004b80 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004b7e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	6859      	ldr	r1, [r3, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f7ff fbf3 	bl	8004378 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fd2e 	bl	80045f8 <LL_ADC_REG_IsConversionOngoing>
 8004b9c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff fd4e 	bl	8004646 <LL_ADC_INJ_IsConversionOngoing>
 8004baa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004bae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f040 81a6 	bne.w	8004f04 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004bb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f040 81a1 	bne.w	8004f04 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	6819      	ldr	r1, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f7ff fbfe 	bl	80043d0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	695a      	ldr	r2, [r3, #20]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	08db      	lsrs	r3, r3, #3
 8004be0:	f003 0303 	and.w	r3, r3, #3
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d00a      	beq.n	8004c0c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	6919      	ldr	r1, [r3, #16]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c06:	f7ff fb4f 	bl	80042a8 <LL_ADC_SetOffset>
 8004c0a:	e17b      	b.n	8004f04 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2100      	movs	r1, #0
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fb6c 	bl	80042f0 <LL_ADC_GetOffsetChannel>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <HAL_ADC_ConfigChannel+0x148>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2100      	movs	r1, #0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff fb61 	bl	80042f0 <LL_ADC_GetOffsetChannel>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	0e9b      	lsrs	r3, r3, #26
 8004c32:	f003 021f 	and.w	r2, r3, #31
 8004c36:	e01e      	b.n	8004c76 <HAL_ADC_ConfigChannel+0x186>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff fb56 	bl	80042f0 <LL_ADC_GetOffsetChannel>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c4e:	fa93 f3a3 	rbit	r3, r3
 8004c52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8004c56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8004c5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 8004c66:	2320      	movs	r3, #32
 8004c68:	e004      	b.n	8004c74 <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 8004c6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c6e:	fab3 f383 	clz	r3, r3
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d105      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x19e>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	0e9b      	lsrs	r3, r3, #26
 8004c88:	f003 031f 	and.w	r3, r3, #31
 8004c8c:	e018      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x1d0>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c9a:	fa93 f3a3 	rbit	r3, r3
 8004c9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004ca2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004caa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004cb2:	2320      	movs	r3, #32
 8004cb4:	e004      	b.n	8004cc0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004cb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cba:	fab3 f383 	clz	r3, r3
 8004cbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d106      	bne.n	8004cd2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	2100      	movs	r1, #0
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff fb25 	bl	800431c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff fb09 	bl	80042f0 <LL_ADC_GetOffsetChannel>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <HAL_ADC_ConfigChannel+0x20e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2101      	movs	r1, #1
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff fafe 	bl	80042f0 <LL_ADC_GetOffsetChannel>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	0e9b      	lsrs	r3, r3, #26
 8004cf8:	f003 021f 	and.w	r2, r3, #31
 8004cfc:	e01e      	b.n	8004d3c <HAL_ADC_ConfigChannel+0x24c>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2101      	movs	r1, #1
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff faf3 	bl	80042f0 <LL_ADC_GetOffsetChannel>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d14:	fa93 f3a3 	rbit	r3, r3
 8004d18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004d1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004d24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d101      	bne.n	8004d30 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004d2c:	2320      	movs	r3, #32
 8004d2e:	e004      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004d30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d34:	fab3 f383 	clz	r3, r3
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d105      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0x264>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	0e9b      	lsrs	r3, r3, #26
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	e018      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x296>
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d60:	fa93 f3a3 	rbit	r3, r3
 8004d64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004d68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004d70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004d78:	2320      	movs	r3, #32
 8004d7a:	e004      	b.n	8004d86 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d80:	fab3 f383 	clz	r3, r3
 8004d84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d106      	bne.n	8004d98 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	2101      	movs	r1, #1
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7ff fac2 	bl	800431c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff faa6 	bl	80042f0 <LL_ADC_GetOffsetChannel>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10a      	bne.n	8004dc4 <HAL_ADC_ConfigChannel+0x2d4>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2102      	movs	r1, #2
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff fa9b 	bl	80042f0 <LL_ADC_GetOffsetChannel>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	0e9b      	lsrs	r3, r3, #26
 8004dbe:	f003 021f 	and.w	r2, r3, #31
 8004dc2:	e01e      	b.n	8004e02 <HAL_ADC_ConfigChannel+0x312>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2102      	movs	r1, #2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff fa90 	bl	80042f0 <LL_ADC_GetOffsetChannel>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dda:	fa93 f3a3 	rbit	r3, r3
 8004dde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004dea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004df2:	2320      	movs	r3, #32
 8004df4:	e004      	b.n	8004e00 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004df6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dfa:	fab3 f383 	clz	r3, r3
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d105      	bne.n	8004e1a <HAL_ADC_ConfigChannel+0x32a>
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	0e9b      	lsrs	r3, r3, #26
 8004e14:	f003 031f 	and.w	r3, r3, #31
 8004e18:	e016      	b.n	8004e48 <HAL_ADC_ConfigChannel+0x358>
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e26:	fa93 f3a3 	rbit	r3, r3
 8004e2a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004e2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004e32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004e3a:	2320      	movs	r3, #32
 8004e3c:	e004      	b.n	8004e48 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e42:	fab3 f383 	clz	r3, r3
 8004e46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d106      	bne.n	8004e5a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2200      	movs	r2, #0
 8004e52:	2102      	movs	r1, #2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fa61 	bl	800431c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2103      	movs	r1, #3
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff fa45 	bl	80042f0 <LL_ADC_GetOffsetChannel>
 8004e66:	4603      	mov	r3, r0
 8004e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10a      	bne.n	8004e86 <HAL_ADC_ConfigChannel+0x396>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2103      	movs	r1, #3
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fa3a 	bl	80042f0 <LL_ADC_GetOffsetChannel>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	0e9b      	lsrs	r3, r3, #26
 8004e80:	f003 021f 	and.w	r2, r3, #31
 8004e84:	e017      	b.n	8004eb6 <HAL_ADC_ConfigChannel+0x3c6>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2103      	movs	r1, #3
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fa2f 	bl	80042f0 <LL_ADC_GetOffsetChannel>
 8004e92:	4603      	mov	r3, r0
 8004e94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e98:	fa93 f3a3 	rbit	r3, r3
 8004e9c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004e9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ea0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004ea2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004ea8:	2320      	movs	r3, #32
 8004eaa:	e003      	b.n	8004eb4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004eac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eae:	fab3 f383 	clz	r3, r3
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <HAL_ADC_ConfigChannel+0x3de>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	0e9b      	lsrs	r3, r3, #26
 8004ec8:	f003 031f 	and.w	r3, r3, #31
 8004ecc:	e011      	b.n	8004ef2 <HAL_ADC_ConfigChannel+0x402>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ed6:	fa93 f3a3 	rbit	r3, r3
 8004eda:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ede:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004ee6:	2320      	movs	r3, #32
 8004ee8:	e003      	b.n	8004ef2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eec:	fab3 f383 	clz	r3, r3
 8004ef0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d106      	bne.n	8004f04 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2200      	movs	r2, #0
 8004efc:	2103      	movs	r1, #3
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff fa0c 	bl	800431c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7ff fb27 	bl	800455c <LL_ADC_IsEnabled>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f040 813f 	bne.w	8005194 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6819      	ldr	r1, [r3, #0]
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	461a      	mov	r2, r3
 8004f24:	f7ff fa80 	bl	8004428 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	4a8e      	ldr	r2, [pc, #568]	; (8005168 <HAL_ADC_ConfigChannel+0x678>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	f040 8130 	bne.w	8005194 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10b      	bne.n	8004f5c <HAL_ADC_ConfigChannel+0x46c>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	0e9b      	lsrs	r3, r3, #26
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	f003 031f 	and.w	r3, r3, #31
 8004f50:	2b09      	cmp	r3, #9
 8004f52:	bf94      	ite	ls
 8004f54:	2301      	movls	r3, #1
 8004f56:	2300      	movhi	r3, #0
 8004f58:	b2db      	uxtb	r3, r3
 8004f5a:	e019      	b.n	8004f90 <HAL_ADC_ConfigChannel+0x4a0>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f64:	fa93 f3a3 	rbit	r3, r3
 8004f68:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f6c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004f74:	2320      	movs	r3, #32
 8004f76:	e003      	b.n	8004f80 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004f78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f7a:	fab3 f383 	clz	r3, r3
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	3301      	adds	r3, #1
 8004f82:	f003 031f 	and.w	r3, r3, #31
 8004f86:	2b09      	cmp	r3, #9
 8004f88:	bf94      	ite	ls
 8004f8a:	2301      	movls	r3, #1
 8004f8c:	2300      	movhi	r3, #0
 8004f8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d079      	beq.n	8005088 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d107      	bne.n	8004fb0 <HAL_ADC_ConfigChannel+0x4c0>
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	0e9b      	lsrs	r3, r3, #26
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	069b      	lsls	r3, r3, #26
 8004faa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fae:	e015      	b.n	8004fdc <HAL_ADC_ConfigChannel+0x4ec>
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb8:	fa93 f3a3 	rbit	r3, r3
 8004fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d101      	bne.n	8004fcc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004fc8:	2320      	movs	r3, #32
 8004fca:	e003      	b.n	8004fd4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fce:	fab3 f383 	clz	r3, r3
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	069b      	lsls	r3, r3, #26
 8004fd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d109      	bne.n	8004ffc <HAL_ADC_ConfigChannel+0x50c>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	0e9b      	lsrs	r3, r3, #26
 8004fee:	3301      	adds	r3, #1
 8004ff0:	f003 031f 	and.w	r3, r3, #31
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ffa:	e017      	b.n	800502c <HAL_ADC_ConfigChannel+0x53c>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005004:	fa93 f3a3 	rbit	r3, r3
 8005008:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800500a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800500e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8005014:	2320      	movs	r3, #32
 8005016:	e003      	b.n	8005020 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8005018:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800501a:	fab3 f383 	clz	r3, r3
 800501e:	b2db      	uxtb	r3, r3
 8005020:	3301      	adds	r3, #1
 8005022:	f003 031f 	and.w	r3, r3, #31
 8005026:	2101      	movs	r1, #1
 8005028:	fa01 f303 	lsl.w	r3, r1, r3
 800502c:	ea42 0103 	orr.w	r1, r2, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005038:	2b00      	cmp	r3, #0
 800503a:	d10a      	bne.n	8005052 <HAL_ADC_ConfigChannel+0x562>
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	0e9b      	lsrs	r3, r3, #26
 8005042:	3301      	adds	r3, #1
 8005044:	f003 021f 	and.w	r2, r3, #31
 8005048:	4613      	mov	r3, r2
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	4413      	add	r3, r2
 800504e:	051b      	lsls	r3, r3, #20
 8005050:	e018      	b.n	8005084 <HAL_ADC_ConfigChannel+0x594>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505a:	fa93 f3a3 	rbit	r3, r3
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005062:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800506a:	2320      	movs	r3, #32
 800506c:	e003      	b.n	8005076 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800506e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005070:	fab3 f383 	clz	r3, r3
 8005074:	b2db      	uxtb	r3, r3
 8005076:	3301      	adds	r3, #1
 8005078:	f003 021f 	and.w	r2, r3, #31
 800507c:	4613      	mov	r3, r2
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	4413      	add	r3, r2
 8005082:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005084:	430b      	orrs	r3, r1
 8005086:	e080      	b.n	800518a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005090:	2b00      	cmp	r3, #0
 8005092:	d107      	bne.n	80050a4 <HAL_ADC_ConfigChannel+0x5b4>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	0e9b      	lsrs	r3, r3, #26
 800509a:	3301      	adds	r3, #1
 800509c:	069b      	lsls	r3, r3, #26
 800509e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050a2:	e015      	b.n	80050d0 <HAL_ADC_ConfigChannel+0x5e0>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ac:	fa93 f3a3 	rbit	r3, r3
 80050b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80050b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80050b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80050bc:	2320      	movs	r3, #32
 80050be:	e003      	b.n	80050c8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80050c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c2:	fab3 f383 	clz	r3, r3
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	3301      	adds	r3, #1
 80050ca:	069b      	lsls	r3, r3, #26
 80050cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d109      	bne.n	80050f0 <HAL_ADC_ConfigChannel+0x600>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	0e9b      	lsrs	r3, r3, #26
 80050e2:	3301      	adds	r3, #1
 80050e4:	f003 031f 	and.w	r3, r3, #31
 80050e8:	2101      	movs	r1, #1
 80050ea:	fa01 f303 	lsl.w	r3, r1, r3
 80050ee:	e017      	b.n	8005120 <HAL_ADC_ConfigChannel+0x630>
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	fa93 f3a3 	rbit	r3, r3
 80050fc:	61fb      	str	r3, [r7, #28]
  return result;
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8005108:	2320      	movs	r3, #32
 800510a:	e003      	b.n	8005114 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	fab3 f383 	clz	r3, r3
 8005112:	b2db      	uxtb	r3, r3
 8005114:	3301      	adds	r3, #1
 8005116:	f003 031f 	and.w	r3, r3, #31
 800511a:	2101      	movs	r1, #1
 800511c:	fa01 f303 	lsl.w	r3, r1, r3
 8005120:	ea42 0103 	orr.w	r1, r2, r3
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10d      	bne.n	800514c <HAL_ADC_ConfigChannel+0x65c>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	0e9b      	lsrs	r3, r3, #26
 8005136:	3301      	adds	r3, #1
 8005138:	f003 021f 	and.w	r2, r3, #31
 800513c:	4613      	mov	r3, r2
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	4413      	add	r3, r2
 8005142:	3b1e      	subs	r3, #30
 8005144:	051b      	lsls	r3, r3, #20
 8005146:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800514a:	e01d      	b.n	8005188 <HAL_ADC_ConfigChannel+0x698>
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	fa93 f3a3 	rbit	r3, r3
 8005158:	613b      	str	r3, [r7, #16]
  return result;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d103      	bne.n	800516c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005164:	2320      	movs	r3, #32
 8005166:	e005      	b.n	8005174 <HAL_ADC_ConfigChannel+0x684>
 8005168:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	fab3 f383 	clz	r3, r3
 8005172:	b2db      	uxtb	r3, r3
 8005174:	3301      	adds	r3, #1
 8005176:	f003 021f 	and.w	r2, r3, #31
 800517a:	4613      	mov	r3, r2
 800517c:	005b      	lsls	r3, r3, #1
 800517e:	4413      	add	r3, r2
 8005180:	3b1e      	subs	r3, #30
 8005182:	051b      	lsls	r3, r3, #20
 8005184:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005188:	430b      	orrs	r3, r1
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	6892      	ldr	r2, [r2, #8]
 800518e:	4619      	mov	r1, r3
 8005190:	f7ff f91e 	bl	80043d0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	4b3d      	ldr	r3, [pc, #244]	; (8005290 <HAL_ADC_ConfigChannel+0x7a0>)
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d06c      	beq.n	800527a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051a0:	483c      	ldr	r0, [pc, #240]	; (8005294 <HAL_ADC_ConfigChannel+0x7a4>)
 80051a2:	f7ff f873 	bl	800428c <LL_ADC_GetCommonPathInternalCh>
 80051a6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a3a      	ldr	r2, [pc, #232]	; (8005298 <HAL_ADC_ConfigChannel+0x7a8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d127      	bne.n	8005204 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d121      	bne.n	8005204 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a35      	ldr	r2, [pc, #212]	; (800529c <HAL_ADC_ConfigChannel+0x7ac>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d157      	bne.n	800527a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051d2:	4619      	mov	r1, r3
 80051d4:	482f      	ldr	r0, [pc, #188]	; (8005294 <HAL_ADC_ConfigChannel+0x7a4>)
 80051d6:	f7ff f846 	bl	8004266 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051da:	4b31      	ldr	r3, [pc, #196]	; (80052a0 <HAL_ADC_ConfigChannel+0x7b0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	099b      	lsrs	r3, r3, #6
 80051e0:	4a30      	ldr	r2, [pc, #192]	; (80052a4 <HAL_ADC_ConfigChannel+0x7b4>)
 80051e2:	fba2 2303 	umull	r2, r3, r2, r3
 80051e6:	099b      	lsrs	r3, r3, #6
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	4613      	mov	r3, r2
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051f4:	e002      	b.n	80051fc <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3b01      	subs	r3, #1
 80051fa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1f9      	bne.n	80051f6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005202:	e03a      	b.n	800527a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a27      	ldr	r2, [pc, #156]	; (80052a8 <HAL_ADC_ConfigChannel+0x7b8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d113      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x746>
 800520e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10d      	bne.n	8005236 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1f      	ldr	r2, [pc, #124]	; (800529c <HAL_ADC_ConfigChannel+0x7ac>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d12a      	bne.n	800527a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005224:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800522c:	4619      	mov	r1, r3
 800522e:	4819      	ldr	r0, [pc, #100]	; (8005294 <HAL_ADC_ConfigChannel+0x7a4>)
 8005230:	f7ff f819 	bl	8004266 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005234:	e021      	b.n	800527a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1c      	ldr	r2, [pc, #112]	; (80052ac <HAL_ADC_ConfigChannel+0x7bc>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d11c      	bne.n	800527a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d116      	bne.n	800527a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a12      	ldr	r2, [pc, #72]	; (800529c <HAL_ADC_ConfigChannel+0x7ac>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d111      	bne.n	800527a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800525a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800525e:	4619      	mov	r1, r3
 8005260:	480c      	ldr	r0, [pc, #48]	; (8005294 <HAL_ADC_ConfigChannel+0x7a4>)
 8005262:	f7ff f800 	bl	8004266 <LL_ADC_SetCommonPathInternalCh>
 8005266:	e008      	b.n	800527a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005282:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005286:	4618      	mov	r0, r3
 8005288:	37d8      	adds	r7, #216	; 0xd8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	80080000 	.word	0x80080000
 8005294:	50040300 	.word	0x50040300
 8005298:	c7520000 	.word	0xc7520000
 800529c:	50040000 	.word	0x50040000
 80052a0:	20000000 	.word	0x20000000
 80052a4:	053e2d63 	.word	0x053e2d63
 80052a8:	cb840000 	.word	0xcb840000
 80052ac:	80000001 	.word	0x80000001

080052b0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff f996 	bl	80045f8 <LL_ADC_REG_IsConversionOngoing>
 80052cc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff f9b7 	bl	8004646 <LL_ADC_INJ_IsConversionOngoing>
 80052d8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d103      	bne.n	80052e8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 8098 	beq.w	8005418 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d02a      	beq.n	800534c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	7e5b      	ldrb	r3, [r3, #25]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d126      	bne.n	800534c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	7e1b      	ldrb	r3, [r3, #24]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d122      	bne.n	800534c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005306:	2301      	movs	r3, #1
 8005308:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800530a:	e014      	b.n	8005336 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	4a45      	ldr	r2, [pc, #276]	; (8005424 <ADC_ConversionStop+0x174>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d90d      	bls.n	8005330 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005318:	f043 0210 	orr.w	r2, r3, #16
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005324:	f043 0201 	orr.w	r2, r3, #1
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e074      	b.n	800541a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	3301      	adds	r3, #1
 8005334:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005340:	2b40      	cmp	r3, #64	; 0x40
 8005342:	d1e3      	bne.n	800530c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2240      	movs	r2, #64	; 0x40
 800534a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d014      	beq.n	800537c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff f94e 	bl	80045f8 <LL_ADC_REG_IsConversionOngoing>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00c      	beq.n	800537c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff f90b 	bl	8004582 <LL_ADC_IsDisableOngoing>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d104      	bne.n	800537c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff f92a 	bl	80045d0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d014      	beq.n	80053ac <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff f95d 	bl	8004646 <LL_ADC_INJ_IsConversionOngoing>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00c      	beq.n	80053ac <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff f8f3 	bl	8004582 <LL_ADC_IsDisableOngoing>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d104      	bne.n	80053ac <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff f939 	bl	800461e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d005      	beq.n	80053be <ADC_ConversionStop+0x10e>
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2b03      	cmp	r3, #3
 80053b6:	d105      	bne.n	80053c4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80053b8:	230c      	movs	r3, #12
 80053ba:	617b      	str	r3, [r7, #20]
        break;
 80053bc:	e005      	b.n	80053ca <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80053be:	2308      	movs	r3, #8
 80053c0:	617b      	str	r3, [r7, #20]
        break;
 80053c2:	e002      	b.n	80053ca <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80053c4:	2304      	movs	r3, #4
 80053c6:	617b      	str	r3, [r7, #20]
        break;
 80053c8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80053ca:	f7fe ff0d 	bl	80041e8 <HAL_GetTick>
 80053ce:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80053d0:	e01b      	b.n	800540a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80053d2:	f7fe ff09 	bl	80041e8 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	2b05      	cmp	r3, #5
 80053de:	d914      	bls.n	800540a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689a      	ldr	r2, [r3, #8]
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	4013      	ands	r3, r2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00d      	beq.n	800540a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f2:	f043 0210 	orr.w	r2, r3, #16
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fe:	f043 0201 	orr.w	r2, r3, #1
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e007      	b.n	800541a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	4013      	ands	r3, r2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1dc      	bne.n	80053d2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3720      	adds	r7, #32
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	a33fffff 	.word	0xa33fffff

08005428 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005430:	2300      	movs	r3, #0
 8005432:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff f88f 	bl	800455c <LL_ADC_IsEnabled>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d169      	bne.n	8005518 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	4b36      	ldr	r3, [pc, #216]	; (8005524 <ADC_Enable+0xfc>)
 800544c:	4013      	ands	r3, r2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00d      	beq.n	800546e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005456:	f043 0210 	orr.w	r2, r3, #16
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005462:	f043 0201 	orr.w	r2, r3, #1
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e055      	b.n	800551a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff f84a 	bl	800450c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005478:	482b      	ldr	r0, [pc, #172]	; (8005528 <ADC_Enable+0x100>)
 800547a:	f7fe ff07 	bl	800428c <LL_ADC_GetCommonPathInternalCh>
 800547e:	4603      	mov	r3, r0
 8005480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d013      	beq.n	80054b0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005488:	4b28      	ldr	r3, [pc, #160]	; (800552c <ADC_Enable+0x104>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	099b      	lsrs	r3, r3, #6
 800548e:	4a28      	ldr	r2, [pc, #160]	; (8005530 <ADC_Enable+0x108>)
 8005490:	fba2 2303 	umull	r2, r3, r2, r3
 8005494:	099b      	lsrs	r3, r3, #6
 8005496:	1c5a      	adds	r2, r3, #1
 8005498:	4613      	mov	r3, r2
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80054a2:	e002      	b.n	80054aa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	3b01      	subs	r3, #1
 80054a8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1f9      	bne.n	80054a4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80054b0:	f7fe fe9a 	bl	80041e8 <HAL_GetTick>
 80054b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054b6:	e028      	b.n	800550a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff f84d 	bl	800455c <LL_ADC_IsEnabled>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d104      	bne.n	80054d2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff f81d 	bl	800450c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80054d2:	f7fe fe89 	bl	80041e8 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d914      	bls.n	800550a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d00d      	beq.n	800550a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f2:	f043 0210 	orr.w	r2, r3, #16
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fe:	f043 0201 	orr.w	r2, r3, #1
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e007      	b.n	800551a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b01      	cmp	r3, #1
 8005516:	d1cf      	bne.n	80054b8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	8000003f 	.word	0x8000003f
 8005528:	50040300 	.word	0x50040300
 800552c:	20000000 	.word	0x20000000
 8005530:	053e2d63 	.word	0x053e2d63

08005534 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4618      	mov	r0, r3
 8005542:	f7ff f81e 	bl	8004582 <LL_ADC_IsDisableOngoing>
 8005546:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff f805 	bl	800455c <LL_ADC_IsEnabled>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d047      	beq.n	80055e8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d144      	bne.n	80055e8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 030d 	and.w	r3, r3, #13
 8005568:	2b01      	cmp	r3, #1
 800556a:	d10c      	bne.n	8005586 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f7fe ffdf 	bl	8004534 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2203      	movs	r2, #3
 800557c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800557e:	f7fe fe33 	bl	80041e8 <HAL_GetTick>
 8005582:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005584:	e029      	b.n	80055da <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558a:	f043 0210 	orr.w	r2, r3, #16
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005596:	f043 0201 	orr.w	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e023      	b.n	80055ea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80055a2:	f7fe fe21 	bl	80041e8 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d914      	bls.n	80055da <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00d      	beq.n	80055da <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055c2:	f043 0210 	orr.w	r2, r3, #16
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ce:	f043 0201 	orr.w	r2, r3, #1
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e007      	b.n	80055ea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1dc      	bne.n	80055a2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005608:	2b00      	cmp	r3, #0
 800560a:	d14b      	bne.n	80056a4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005610:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	2b00      	cmp	r3, #0
 8005624:	d021      	beq.n	800566a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f7fe fe91 	bl	8004352 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d032      	beq.n	800569c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d12b      	bne.n	800569c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005648:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d11f      	bne.n	800569c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005660:	f043 0201 	orr.w	r2, r3, #1
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	655a      	str	r2, [r3, #84]	; 0x54
 8005668:	e018      	b.n	800569c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d111      	bne.n	800569c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d105      	bne.n	800569c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005694:	f043 0201 	orr.w	r2, r3, #1
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7fd fce1 	bl	8003064 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80056a2:	e00e      	b.n	80056c2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f7ff fa12 	bl	8004ada <HAL_ADC_ErrorCallback>
}
 80056b6:	e004      	b.n	80056c2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	4798      	blx	r3
}
 80056c2:	bf00      	nop
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b084      	sub	sp, #16
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f7ff f9f4 	bl	8004ac6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80056de:	bf00      	nop
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b084      	sub	sp, #16
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005704:	f043 0204 	orr.w	r2, r3, #4
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f7ff f9e4 	bl	8004ada <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005712:	bf00      	nop
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <LL_ADC_StartCalibration>:
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
 8005722:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800572c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005736:	4313      	orrs	r3, r2
 8005738:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	609a      	str	r2, [r3, #8]
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <LL_ADC_IsCalibrationOnGoing>:
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800575c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005760:	d101      	bne.n	8005766 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800577e:	2300      	movs	r3, #0
 8005780:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_ADCEx_Calibration_Start+0x1c>
 800578c:	2302      	movs	r3, #2
 800578e:	e04d      	b.n	800582c <HAL_ADCEx_Calibration_Start+0xb8>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff fecb 	bl	8005534 <ADC_Disable>
 800579e:	4603      	mov	r3, r0
 80057a0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d136      	bne.n	8005816 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80057b0:	f023 0302 	bic.w	r3, r3, #2
 80057b4:	f043 0202 	orr.w	r2, r3, #2
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6839      	ldr	r1, [r7, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff ffa9 	bl	800571a <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80057c8:	e014      	b.n	80057f4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	3301      	adds	r3, #1
 80057ce:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80057d6:	d30d      	bcc.n	80057f4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057dc:	f023 0312 	bic.w	r3, r3, #18
 80057e0:	f043 0210 	orr.w	r2, r3, #16
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e01b      	b.n	800582c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff ffa7 	bl	800574c <LL_ADC_IsCalibrationOnGoing>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e2      	bne.n	80057ca <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005808:	f023 0303 	bic.w	r3, r3, #3
 800580c:	f043 0201 	orr.w	r2, r3, #1
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	655a      	str	r2, [r3, #84]	; 0x54
 8005814:	e005      	b.n	8005822 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581a:	f043 0210 	orr.w	r2, r3, #16
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800582a:	7bfb      	ldrb	r3, [r7, #15]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <__NVIC_SetPriorityGrouping>:
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005844:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <__NVIC_SetPriorityGrouping+0x44>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800584a:	68ba      	ldr	r2, [r7, #8]
 800584c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005850:	4013      	ands	r3, r2
 8005852:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800585c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005866:	4a04      	ldr	r2, [pc, #16]	; (8005878 <__NVIC_SetPriorityGrouping+0x44>)
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	60d3      	str	r3, [r2, #12]
}
 800586c:	bf00      	nop
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr
 8005878:	e000ed00 	.word	0xe000ed00

0800587c <__NVIC_GetPriorityGrouping>:
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005880:	4b04      	ldr	r3, [pc, #16]	; (8005894 <__NVIC_GetPriorityGrouping+0x18>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	0a1b      	lsrs	r3, r3, #8
 8005886:	f003 0307 	and.w	r3, r3, #7
}
 800588a:	4618      	mov	r0, r3
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	e000ed00 	.word	0xe000ed00

08005898 <__NVIC_EnableIRQ>:
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	db0b      	blt.n	80058c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	f003 021f 	and.w	r2, r3, #31
 80058b0:	4907      	ldr	r1, [pc, #28]	; (80058d0 <__NVIC_EnableIRQ+0x38>)
 80058b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	2001      	movs	r0, #1
 80058ba:	fa00 f202 	lsl.w	r2, r0, r2
 80058be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80058c2:	bf00      	nop
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	e000e100 	.word	0xe000e100

080058d4 <__NVIC_SetPriority>:
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	6039      	str	r1, [r7, #0]
 80058de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	db0a      	blt.n	80058fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	490c      	ldr	r1, [pc, #48]	; (8005920 <__NVIC_SetPriority+0x4c>)
 80058ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058f2:	0112      	lsls	r2, r2, #4
 80058f4:	b2d2      	uxtb	r2, r2
 80058f6:	440b      	add	r3, r1
 80058f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80058fc:	e00a      	b.n	8005914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	b2da      	uxtb	r2, r3
 8005902:	4908      	ldr	r1, [pc, #32]	; (8005924 <__NVIC_SetPriority+0x50>)
 8005904:	79fb      	ldrb	r3, [r7, #7]
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	3b04      	subs	r3, #4
 800590c:	0112      	lsls	r2, r2, #4
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	440b      	add	r3, r1
 8005912:	761a      	strb	r2, [r3, #24]
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr
 8005920:	e000e100 	.word	0xe000e100
 8005924:	e000ed00 	.word	0xe000ed00

08005928 <NVIC_EncodePriority>:
{
 8005928:	b480      	push	{r7}
 800592a:	b089      	sub	sp, #36	; 0x24
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f1c3 0307 	rsb	r3, r3, #7
 8005942:	2b04      	cmp	r3, #4
 8005944:	bf28      	it	cs
 8005946:	2304      	movcs	r3, #4
 8005948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	3304      	adds	r3, #4
 800594e:	2b06      	cmp	r3, #6
 8005950:	d902      	bls.n	8005958 <NVIC_EncodePriority+0x30>
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	3b03      	subs	r3, #3
 8005956:	e000      	b.n	800595a <NVIC_EncodePriority+0x32>
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800595c:	f04f 32ff 	mov.w	r2, #4294967295
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	fa02 f303 	lsl.w	r3, r2, r3
 8005966:	43da      	mvns	r2, r3
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	401a      	ands	r2, r3
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005970:	f04f 31ff 	mov.w	r1, #4294967295
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	fa01 f303 	lsl.w	r3, r1, r3
 800597a:	43d9      	mvns	r1, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005980:	4313      	orrs	r3, r2
}
 8005982:	4618      	mov	r0, r3
 8005984:	3724      	adds	r7, #36	; 0x24
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
	...

08005990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3b01      	subs	r3, #1
 800599c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80059a0:	d301      	bcc.n	80059a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80059a2:	2301      	movs	r3, #1
 80059a4:	e00f      	b.n	80059c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059a6:	4a0a      	ldr	r2, [pc, #40]	; (80059d0 <SysTick_Config+0x40>)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059ae:	210f      	movs	r1, #15
 80059b0:	f04f 30ff 	mov.w	r0, #4294967295
 80059b4:	f7ff ff8e 	bl	80058d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059b8:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <SysTick_Config+0x40>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059be:	4b04      	ldr	r3, [pc, #16]	; (80059d0 <SysTick_Config+0x40>)
 80059c0:	2207      	movs	r2, #7
 80059c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	e000e010 	.word	0xe000e010

080059d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff ff29 	bl	8005834 <__NVIC_SetPriorityGrouping>
}
 80059e2:	bf00      	nop
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b086      	sub	sp, #24
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	4603      	mov	r3, r0
 80059f2:	60b9      	str	r1, [r7, #8]
 80059f4:	607a      	str	r2, [r7, #4]
 80059f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80059f8:	2300      	movs	r3, #0
 80059fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80059fc:	f7ff ff3e 	bl	800587c <__NVIC_GetPriorityGrouping>
 8005a00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	6978      	ldr	r0, [r7, #20]
 8005a08:	f7ff ff8e 	bl	8005928 <NVIC_EncodePriority>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a12:	4611      	mov	r1, r2
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7ff ff5d 	bl	80058d4 <__NVIC_SetPriority>
}
 8005a1a:	bf00      	nop
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b082      	sub	sp, #8
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	4603      	mov	r3, r0
 8005a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7ff ff31 	bl	8005898 <__NVIC_EnableIRQ>
}
 8005a36:	bf00      	nop
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7ff ffa2 	bl	8005990 <SysTick_Config>
 8005a4c:	4603      	mov	r3, r0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
	...

08005a58 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e098      	b.n	8005b9c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	4b4d      	ldr	r3, [pc, #308]	; (8005ba8 <HAL_DMA_Init+0x150>)
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d80f      	bhi.n	8005a96 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	4b4b      	ldr	r3, [pc, #300]	; (8005bac <HAL_DMA_Init+0x154>)
 8005a7e:	4413      	add	r3, r2
 8005a80:	4a4b      	ldr	r2, [pc, #300]	; (8005bb0 <HAL_DMA_Init+0x158>)
 8005a82:	fba2 2303 	umull	r2, r3, r2, r3
 8005a86:	091b      	lsrs	r3, r3, #4
 8005a88:	009a      	lsls	r2, r3, #2
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a48      	ldr	r2, [pc, #288]	; (8005bb4 <HAL_DMA_Init+0x15c>)
 8005a92:	641a      	str	r2, [r3, #64]	; 0x40
 8005a94:	e00e      	b.n	8005ab4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	4b46      	ldr	r3, [pc, #280]	; (8005bb8 <HAL_DMA_Init+0x160>)
 8005a9e:	4413      	add	r3, r2
 8005aa0:	4a43      	ldr	r2, [pc, #268]	; (8005bb0 <HAL_DMA_Init+0x158>)
 8005aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa6:	091b      	lsrs	r3, r3, #4
 8005aa8:	009a      	lsls	r2, r3, #2
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a42      	ldr	r2, [pc, #264]	; (8005bbc <HAL_DMA_Init+0x164>)
 8005ab2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ace:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005ad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005af0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b0e:	d039      	beq.n	8005b84 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b14:	4a27      	ldr	r2, [pc, #156]	; (8005bb4 <HAL_DMA_Init+0x15c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d11a      	bne.n	8005b50 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005b1a:	4b29      	ldr	r3, [pc, #164]	; (8005bc0 <HAL_DMA_Init+0x168>)
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b22:	f003 031c 	and.w	r3, r3, #28
 8005b26:	210f      	movs	r1, #15
 8005b28:	fa01 f303 	lsl.w	r3, r1, r3
 8005b2c:	43db      	mvns	r3, r3
 8005b2e:	4924      	ldr	r1, [pc, #144]	; (8005bc0 <HAL_DMA_Init+0x168>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005b34:	4b22      	ldr	r3, [pc, #136]	; (8005bc0 <HAL_DMA_Init+0x168>)
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6859      	ldr	r1, [r3, #4]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b40:	f003 031c 	and.w	r3, r3, #28
 8005b44:	fa01 f303 	lsl.w	r3, r1, r3
 8005b48:	491d      	ldr	r1, [pc, #116]	; (8005bc0 <HAL_DMA_Init+0x168>)
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]
 8005b4e:	e019      	b.n	8005b84 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005b50:	4b1c      	ldr	r3, [pc, #112]	; (8005bc4 <HAL_DMA_Init+0x16c>)
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b58:	f003 031c 	and.w	r3, r3, #28
 8005b5c:	210f      	movs	r1, #15
 8005b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b62:	43db      	mvns	r3, r3
 8005b64:	4917      	ldr	r1, [pc, #92]	; (8005bc4 <HAL_DMA_Init+0x16c>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005b6a:	4b16      	ldr	r3, [pc, #88]	; (8005bc4 <HAL_DMA_Init+0x16c>)
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6859      	ldr	r1, [r3, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b76:	f003 031c 	and.w	r3, r3, #28
 8005b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7e:	4911      	ldr	r1, [pc, #68]	; (8005bc4 <HAL_DMA_Init+0x16c>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr
 8005ba8:	40020407 	.word	0x40020407
 8005bac:	bffdfff8 	.word	0xbffdfff8
 8005bb0:	cccccccd 	.word	0xcccccccd
 8005bb4:	40020000 	.word	0x40020000
 8005bb8:	bffdfbf8 	.word	0xbffdfbf8
 8005bbc:	40020400 	.word	0x40020400
 8005bc0:	400200a8 	.word	0x400200a8
 8005bc4:	400204a8 	.word	0x400204a8

08005bc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_DMA_Start_IT+0x20>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e04b      	b.n	8005c80 <HAL_DMA_Start_IT+0xb8>
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d13a      	bne.n	8005c72 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0201 	bic.w	r2, r2, #1
 8005c18:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	68b9      	ldr	r1, [r7, #8]
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 f95f 	bl	8005ee4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d008      	beq.n	8005c40 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 020e 	orr.w	r2, r2, #14
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	e00f      	b.n	8005c60 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0204 	bic.w	r2, r2, #4
 8005c4e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 020a 	orr.w	r2, r2, #10
 8005c5e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0201 	orr.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	e005      	b.n	8005c7e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d008      	beq.n	8005cb2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2204      	movs	r2, #4
 8005ca4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e022      	b.n	8005cf8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 020e 	bic.w	r2, r2, #14
 8005cc0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0201 	bic.w	r2, r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd6:	f003 021c 	and.w	r2, r3, #28
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cde:	2101      	movs	r1, #1
 8005ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ce4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	2b02      	cmp	r3, #2
 8005d1a:	d005      	beq.n	8005d28 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2204      	movs	r2, #4
 8005d20:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	73fb      	strb	r3, [r7, #15]
 8005d26:	e029      	b.n	8005d7c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 020e 	bic.w	r2, r2, #14
 8005d36:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0201 	bic.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4c:	f003 021c 	and.w	r2, r3, #28
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d54:	2101      	movs	r1, #1
 8005d56:	fa01 f202 	lsl.w	r2, r1, r2
 8005d5a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	4798      	blx	r3
    }
  }
  return status;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da2:	f003 031c 	and.w	r3, r3, #28
 8005da6:	2204      	movs	r2, #4
 8005da8:	409a      	lsls	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4013      	ands	r3, r2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d026      	beq.n	8005e00 <HAL_DMA_IRQHandler+0x7a>
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d021      	beq.n	8005e00 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d107      	bne.n	8005dda <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0204 	bic.w	r2, r2, #4
 8005dd8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dde:	f003 021c 	and.w	r2, r3, #28
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	2104      	movs	r1, #4
 8005de8:	fa01 f202 	lsl.w	r2, r1, r2
 8005dec:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d071      	beq.n	8005eda <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005dfe:	e06c      	b.n	8005eda <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e04:	f003 031c 	and.w	r3, r3, #28
 8005e08:	2202      	movs	r2, #2
 8005e0a:	409a      	lsls	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d02e      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xec>
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d029      	beq.n	8005e72 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0320 	and.w	r3, r3, #32
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d10b      	bne.n	8005e44 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 020a 	bic.w	r2, r2, #10
 8005e3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e48:	f003 021c 	and.w	r2, r3, #28
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e50:	2102      	movs	r1, #2
 8005e52:	fa01 f202 	lsl.w	r2, r1, r2
 8005e56:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d038      	beq.n	8005eda <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005e70:	e033      	b.n	8005eda <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e76:	f003 031c 	and.w	r3, r3, #28
 8005e7a:	2208      	movs	r2, #8
 8005e7c:	409a      	lsls	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4013      	ands	r3, r2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d02a      	beq.n	8005edc <HAL_DMA_IRQHandler+0x156>
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f003 0308 	and.w	r3, r3, #8
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d025      	beq.n	8005edc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 020e 	bic.w	r2, r2, #14
 8005e9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea4:	f003 021c 	and.w	r2, r3, #28
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	2101      	movs	r1, #1
 8005eae:	fa01 f202 	lsl.w	r2, r1, r2
 8005eb2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d004      	beq.n	8005edc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005eda:	bf00      	nop
 8005edc:	bf00      	nop
}
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef6:	f003 021c 	and.w	r2, r3, #28
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efe:	2101      	movs	r1, #1
 8005f00:	fa01 f202 	lsl.w	r2, r1, r2
 8005f04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	2b10      	cmp	r3, #16
 8005f14:	d108      	bne.n	8005f28 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005f26:	e007      	b.n	8005f38 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	60da      	str	r2, [r3, #12]
}
 8005f38:	bf00      	nop
 8005f3a:	3714      	adds	r7, #20
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f52:	e148      	b.n	80061e6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	2101      	movs	r1, #1
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f60:	4013      	ands	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f000 813a 	beq.w	80061e0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f003 0303 	and.w	r3, r3, #3
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d005      	beq.n	8005f84 <HAL_GPIO_Init+0x40>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f003 0303 	and.w	r3, r3, #3
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	d130      	bne.n	8005fe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	2203      	movs	r2, #3
 8005f90:	fa02 f303 	lsl.w	r3, r2, r3
 8005f94:	43db      	mvns	r3, r3
 8005f96:	693a      	ldr	r2, [r7, #16]
 8005f98:	4013      	ands	r3, r2
 8005f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	68da      	ldr	r2, [r3, #12]
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005fba:	2201      	movs	r2, #1
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	43db      	mvns	r3, r3
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	091b      	lsrs	r3, r3, #4
 8005fd0:	f003 0201 	and.w	r2, r3, #1
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f003 0303 	and.w	r3, r3, #3
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d017      	beq.n	8006022 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	005b      	lsls	r3, r3, #1
 8005ffc:	2203      	movs	r2, #3
 8005ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8006002:	43db      	mvns	r3, r3
 8006004:	693a      	ldr	r2, [r7, #16]
 8006006:	4013      	ands	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	fa02 f303 	lsl.w	r3, r2, r3
 8006016:	693a      	ldr	r2, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d123      	bne.n	8006076 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	08da      	lsrs	r2, r3, #3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	3208      	adds	r2, #8
 8006036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	220f      	movs	r2, #15
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	43db      	mvns	r3, r3
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4013      	ands	r3, r2
 8006050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	691a      	ldr	r2, [r3, #16]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	fa02 f303 	lsl.w	r3, r2, r3
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	4313      	orrs	r3, r2
 8006066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	08da      	lsrs	r2, r3, #3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	3208      	adds	r2, #8
 8006070:	6939      	ldr	r1, [r7, #16]
 8006072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	2203      	movs	r2, #3
 8006082:	fa02 f303 	lsl.w	r3, r2, r3
 8006086:	43db      	mvns	r3, r3
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4013      	ands	r3, r2
 800608c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f003 0203 	and.w	r2, r3, #3
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 8094 	beq.w	80061e0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060b8:	4b52      	ldr	r3, [pc, #328]	; (8006204 <HAL_GPIO_Init+0x2c0>)
 80060ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060bc:	4a51      	ldr	r2, [pc, #324]	; (8006204 <HAL_GPIO_Init+0x2c0>)
 80060be:	f043 0301 	orr.w	r3, r3, #1
 80060c2:	6613      	str	r3, [r2, #96]	; 0x60
 80060c4:	4b4f      	ldr	r3, [pc, #316]	; (8006204 <HAL_GPIO_Init+0x2c0>)
 80060c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	60bb      	str	r3, [r7, #8]
 80060ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80060d0:	4a4d      	ldr	r2, [pc, #308]	; (8006208 <HAL_GPIO_Init+0x2c4>)
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	089b      	lsrs	r3, r3, #2
 80060d6:	3302      	adds	r3, #2
 80060d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f003 0303 	and.w	r3, r3, #3
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	220f      	movs	r2, #15
 80060e8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ec:	43db      	mvns	r3, r3
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4013      	ands	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80060fa:	d00d      	beq.n	8006118 <HAL_GPIO_Init+0x1d4>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	4a43      	ldr	r2, [pc, #268]	; (800620c <HAL_GPIO_Init+0x2c8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d007      	beq.n	8006114 <HAL_GPIO_Init+0x1d0>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a42      	ldr	r2, [pc, #264]	; (8006210 <HAL_GPIO_Init+0x2cc>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d101      	bne.n	8006110 <HAL_GPIO_Init+0x1cc>
 800610c:	2302      	movs	r3, #2
 800610e:	e004      	b.n	800611a <HAL_GPIO_Init+0x1d6>
 8006110:	2307      	movs	r3, #7
 8006112:	e002      	b.n	800611a <HAL_GPIO_Init+0x1d6>
 8006114:	2301      	movs	r3, #1
 8006116:	e000      	b.n	800611a <HAL_GPIO_Init+0x1d6>
 8006118:	2300      	movs	r3, #0
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	f002 0203 	and.w	r2, r2, #3
 8006120:	0092      	lsls	r2, r2, #2
 8006122:	4093      	lsls	r3, r2
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800612a:	4937      	ldr	r1, [pc, #220]	; (8006208 <HAL_GPIO_Init+0x2c4>)
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	089b      	lsrs	r3, r3, #2
 8006130:	3302      	adds	r3, #2
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006138:	4b36      	ldr	r3, [pc, #216]	; (8006214 <HAL_GPIO_Init+0x2d0>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	43db      	mvns	r3, r3
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4013      	ands	r3, r2
 8006146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800615c:	4a2d      	ldr	r2, [pc, #180]	; (8006214 <HAL_GPIO_Init+0x2d0>)
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006162:	4b2c      	ldr	r3, [pc, #176]	; (8006214 <HAL_GPIO_Init+0x2d0>)
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	43db      	mvns	r3, r3
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4013      	ands	r3, r2
 8006170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006186:	4a23      	ldr	r2, [pc, #140]	; (8006214 <HAL_GPIO_Init+0x2d0>)
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800618c:	4b21      	ldr	r3, [pc, #132]	; (8006214 <HAL_GPIO_Init+0x2d0>)
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	43db      	mvns	r3, r3
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	4013      	ands	r3, r2
 800619a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d003      	beq.n	80061b0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80061b0:	4a18      	ldr	r2, [pc, #96]	; (8006214 <HAL_GPIO_Init+0x2d0>)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80061b6:	4b17      	ldr	r3, [pc, #92]	; (8006214 <HAL_GPIO_Init+0x2d0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	43db      	mvns	r3, r3
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4013      	ands	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80061da:	4a0e      	ldr	r2, [pc, #56]	; (8006214 <HAL_GPIO_Init+0x2d0>)
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	3301      	adds	r3, #1
 80061e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	fa22 f303 	lsr.w	r3, r2, r3
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f47f aeaf 	bne.w	8005f54 <HAL_GPIO_Init+0x10>
  }
}
 80061f6:	bf00      	nop
 80061f8:	bf00      	nop
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr
 8006204:	40021000 	.word	0x40021000
 8006208:	40010000 	.word	0x40010000
 800620c:	48000400 	.word	0x48000400
 8006210:	48000800 	.word	0x48000800
 8006214:	40010400 	.word	0x40010400

08006218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	807b      	strh	r3, [r7, #2]
 8006224:	4613      	mov	r3, r2
 8006226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006228:	787b      	ldrb	r3, [r7, #1]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800622e:	887a      	ldrh	r2, [r7, #2]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006234:	e002      	b.n	800623c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006236:	887a      	ldrh	r2, [r7, #2]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800623c:	bf00      	nop
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800624c:	4b05      	ldr	r3, [pc, #20]	; (8006264 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a04      	ldr	r2, [pc, #16]	; (8006264 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006256:	6013      	str	r3, [r2, #0]
}
 8006258:	bf00      	nop
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	40007000 	.word	0x40007000

08006268 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	460b      	mov	r3, r1
 8006272:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10c      	bne.n	8006294 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800627a:	4b13      	ldr	r3, [pc, #76]	; (80062c8 <HAL_PWR_EnterSLEEPMode+0x60>)
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006286:	d10e      	bne.n	80062a6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006288:	f000 f896 	bl	80063b8 <HAL_PWREx_DisableLowPowerRunMode>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d009      	beq.n	80062a6 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8006292:	e016      	b.n	80062c2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8006294:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800629c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062a0:	d001      	beq.n	80062a6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80062a2:	f000 f879 	bl	8006398 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80062a6:	4b09      	ldr	r3, [pc, #36]	; (80062cc <HAL_PWR_EnterSLEEPMode+0x64>)
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	4a08      	ldr	r2, [pc, #32]	; (80062cc <HAL_PWR_EnterSLEEPMode+0x64>)
 80062ac:	f023 0304 	bic.w	r3, r3, #4
 80062b0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d101      	bne.n	80062bc <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80062b8:	bf30      	wfi
 80062ba:	e002      	b.n	80062c2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80062bc:	bf40      	sev
    __WFE();
 80062be:	bf20      	wfe
    __WFE();
 80062c0:	bf20      	wfe
  }

}
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40007000 	.word	0x40007000
 80062cc:	e000ed00 	.word	0xe000ed00

080062d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80062d4:	4b04      	ldr	r3, [pc, #16]	; (80062e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80062dc:	4618      	mov	r0, r3
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40007000 	.word	0x40007000

080062ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062fa:	d130      	bne.n	800635e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80062fc:	4b23      	ldr	r3, [pc, #140]	; (800638c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006308:	d038      	beq.n	800637c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800630a:	4b20      	ldr	r3, [pc, #128]	; (800638c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006312:	4a1e      	ldr	r2, [pc, #120]	; (800638c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006314:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006318:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800631a:	4b1d      	ldr	r3, [pc, #116]	; (8006390 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2232      	movs	r2, #50	; 0x32
 8006320:	fb02 f303 	mul.w	r3, r2, r3
 8006324:	4a1b      	ldr	r2, [pc, #108]	; (8006394 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006326:	fba2 2303 	umull	r2, r3, r2, r3
 800632a:	0c9b      	lsrs	r3, r3, #18
 800632c:	3301      	adds	r3, #1
 800632e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006330:	e002      	b.n	8006338 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3b01      	subs	r3, #1
 8006336:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006338:	4b14      	ldr	r3, [pc, #80]	; (800638c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006344:	d102      	bne.n	800634c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1f2      	bne.n	8006332 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800634c:	4b0f      	ldr	r3, [pc, #60]	; (800638c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006358:	d110      	bne.n	800637c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e00f      	b.n	800637e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800635e:	4b0b      	ldr	r3, [pc, #44]	; (800638c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800636a:	d007      	beq.n	800637c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800636c:	4b07      	ldr	r3, [pc, #28]	; (800638c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006374:	4a05      	ldr	r2, [pc, #20]	; (800638c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006376:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800637a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	40007000 	.word	0x40007000
 8006390:	20000000 	.word	0x20000000
 8006394:	431bde83 	.word	0x431bde83

08006398 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800639c:	4b05      	ldr	r3, [pc, #20]	; (80063b4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a04      	ldr	r2, [pc, #16]	; (80063b4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80063a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063a6:	6013      	str	r3, [r2, #0]
}
 80063a8:	bf00      	nop
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40007000 	.word	0x40007000

080063b8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80063be:	4b17      	ldr	r3, [pc, #92]	; (800641c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a16      	ldr	r2, [pc, #88]	; (800641c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80063c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063c8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063ca:	4b15      	ldr	r3, [pc, #84]	; (8006420 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2232      	movs	r2, #50	; 0x32
 80063d0:	fb02 f303 	mul.w	r3, r2, r3
 80063d4:	4a13      	ldr	r2, [pc, #76]	; (8006424 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80063d6:	fba2 2303 	umull	r2, r3, r2, r3
 80063da:	0c9b      	lsrs	r3, r3, #18
 80063dc:	3301      	adds	r3, #1
 80063de:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80063e0:	e002      	b.n	80063e8 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3b01      	subs	r3, #1
 80063e6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80063e8:	4b0c      	ldr	r3, [pc, #48]	; (800641c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80063ea:	695b      	ldr	r3, [r3, #20]
 80063ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063f4:	d102      	bne.n	80063fc <HAL_PWREx_DisableLowPowerRunMode+0x44>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1f2      	bne.n	80063e2 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80063fc:	4b07      	ldr	r3, [pc, #28]	; (800641c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006408:	d101      	bne.n	800640e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 800640a:	2303      	movs	r3, #3
 800640c:	e000      	b.n	8006410 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr
 800641c:	40007000 	.word	0x40007000
 8006420:	20000000 	.word	0x20000000
 8006424:	431bde83 	.word	0x431bde83

08006428 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	4603      	mov	r3, r0
 8006430:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8006432:	4b11      	ldr	r3, [pc, #68]	; (8006478 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f023 0307 	bic.w	r3, r3, #7
 800643a:	4a0f      	ldr	r2, [pc, #60]	; (8006478 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800643c:	f043 0302 	orr.w	r3, r3, #2
 8006440:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006442:	4b0e      	ldr	r3, [pc, #56]	; (800647c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	4a0d      	ldr	r2, [pc, #52]	; (800647c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006448:	f043 0304 	orr.w	r3, r3, #4
 800644c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800644e:	79fb      	ldrb	r3, [r7, #7]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006454:	bf30      	wfi
 8006456:	e002      	b.n	800645e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006458:	bf40      	sev
    __WFE();
 800645a:	bf20      	wfe
    __WFE();
 800645c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800645e:	4b07      	ldr	r3, [pc, #28]	; (800647c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	4a06      	ldr	r2, [pc, #24]	; (800647c <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006464:	f023 0304 	bic.w	r3, r3, #4
 8006468:	6113      	str	r3, [r2, #16]
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	40007000 	.word	0x40007000
 800647c:	e000ed00 	.word	0xe000ed00

08006480 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d102      	bne.n	8006494 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	f000 bc02 	b.w	8006c98 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006494:	4b96      	ldr	r3, [pc, #600]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f003 030c 	and.w	r3, r3, #12
 800649c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800649e:	4b94      	ldr	r3, [pc, #592]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0310 	and.w	r3, r3, #16
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 80e4 	beq.w	800667e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <HAL_RCC_OscConfig+0x4c>
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	2b0c      	cmp	r3, #12
 80064c0:	f040 808b 	bne.w	80065da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	f040 8087 	bne.w	80065da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064cc:	4b88      	ldr	r3, [pc, #544]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0302 	and.w	r3, r3, #2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <HAL_RCC_OscConfig+0x64>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e3d9      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a1a      	ldr	r2, [r3, #32]
 80064e8:	4b81      	ldr	r3, [pc, #516]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0308 	and.w	r3, r3, #8
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d004      	beq.n	80064fe <HAL_RCC_OscConfig+0x7e>
 80064f4:	4b7e      	ldr	r3, [pc, #504]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064fc:	e005      	b.n	800650a <HAL_RCC_OscConfig+0x8a>
 80064fe:	4b7c      	ldr	r3, [pc, #496]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006504:	091b      	lsrs	r3, r3, #4
 8006506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800650a:	4293      	cmp	r3, r2
 800650c:	d223      	bcs.n	8006556 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	4618      	mov	r0, r3
 8006514:	f000 fd54 	bl	8006fc0 <RCC_SetFlashLatencyFromMSIRange>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e3ba      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006522:	4b73      	ldr	r3, [pc, #460]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a72      	ldr	r2, [pc, #456]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006528:	f043 0308 	orr.w	r3, r3, #8
 800652c:	6013      	str	r3, [r2, #0]
 800652e:	4b70      	ldr	r3, [pc, #448]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a1b      	ldr	r3, [r3, #32]
 800653a:	496d      	ldr	r1, [pc, #436]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 800653c:	4313      	orrs	r3, r2
 800653e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006540:	4b6b      	ldr	r3, [pc, #428]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	69db      	ldr	r3, [r3, #28]
 800654c:	021b      	lsls	r3, r3, #8
 800654e:	4968      	ldr	r1, [pc, #416]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006550:	4313      	orrs	r3, r2
 8006552:	604b      	str	r3, [r1, #4]
 8006554:	e025      	b.n	80065a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006556:	4b66      	ldr	r3, [pc, #408]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a65      	ldr	r2, [pc, #404]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 800655c:	f043 0308 	orr.w	r3, r3, #8
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	4b63      	ldr	r3, [pc, #396]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	4960      	ldr	r1, [pc, #384]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006570:	4313      	orrs	r3, r2
 8006572:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006574:	4b5e      	ldr	r3, [pc, #376]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	69db      	ldr	r3, [r3, #28]
 8006580:	021b      	lsls	r3, r3, #8
 8006582:	495b      	ldr	r1, [pc, #364]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006584:	4313      	orrs	r3, r2
 8006586:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d109      	bne.n	80065a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	4618      	mov	r0, r3
 8006594:	f000 fd14 	bl	8006fc0 <RCC_SetFlashLatencyFromMSIRange>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e37a      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065a2:	f000 fc81 	bl	8006ea8 <HAL_RCC_GetSysClockFreq>
 80065a6:	4602      	mov	r2, r0
 80065a8:	4b51      	ldr	r3, [pc, #324]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	091b      	lsrs	r3, r3, #4
 80065ae:	f003 030f 	and.w	r3, r3, #15
 80065b2:	4950      	ldr	r1, [pc, #320]	; (80066f4 <HAL_RCC_OscConfig+0x274>)
 80065b4:	5ccb      	ldrb	r3, [r1, r3]
 80065b6:	f003 031f 	and.w	r3, r3, #31
 80065ba:	fa22 f303 	lsr.w	r3, r2, r3
 80065be:	4a4e      	ldr	r2, [pc, #312]	; (80066f8 <HAL_RCC_OscConfig+0x278>)
 80065c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80065c2:	4b4e      	ldr	r3, [pc, #312]	; (80066fc <HAL_RCC_OscConfig+0x27c>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fd fdbe 	bl	8004148 <HAL_InitTick>
 80065cc:	4603      	mov	r3, r0
 80065ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80065d0:	7bfb      	ldrb	r3, [r7, #15]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d052      	beq.n	800667c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
 80065d8:	e35e      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d032      	beq.n	8006648 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80065e2:	4b43      	ldr	r3, [pc, #268]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a42      	ldr	r2, [pc, #264]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 80065e8:	f043 0301 	orr.w	r3, r3, #1
 80065ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065ee:	f7fd fdfb 	bl	80041e8 <HAL_GetTick>
 80065f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065f4:	e008      	b.n	8006608 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065f6:	f7fd fdf7 	bl	80041e8 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	2b02      	cmp	r3, #2
 8006602:	d901      	bls.n	8006608 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e347      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006608:	4b39      	ldr	r3, [pc, #228]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0f0      	beq.n	80065f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006614:	4b36      	ldr	r3, [pc, #216]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a35      	ldr	r2, [pc, #212]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 800661a:	f043 0308 	orr.w	r3, r3, #8
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	4b33      	ldr	r3, [pc, #204]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a1b      	ldr	r3, [r3, #32]
 800662c:	4930      	ldr	r1, [pc, #192]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 800662e:	4313      	orrs	r3, r2
 8006630:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006632:	4b2f      	ldr	r3, [pc, #188]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	492b      	ldr	r1, [pc, #172]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006642:	4313      	orrs	r3, r2
 8006644:	604b      	str	r3, [r1, #4]
 8006646:	e01a      	b.n	800667e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006648:	4b29      	ldr	r3, [pc, #164]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a28      	ldr	r2, [pc, #160]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 800664e:	f023 0301 	bic.w	r3, r3, #1
 8006652:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006654:	f7fd fdc8 	bl	80041e8 <HAL_GetTick>
 8006658:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800665a:	e008      	b.n	800666e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800665c:	f7fd fdc4 	bl	80041e8 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d901      	bls.n	800666e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e314      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800666e:	4b20      	ldr	r3, [pc, #128]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1f0      	bne.n	800665c <HAL_RCC_OscConfig+0x1dc>
 800667a:	e000      	b.n	800667e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800667c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d073      	beq.n	8006772 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	2b08      	cmp	r3, #8
 800668e:	d005      	beq.n	800669c <HAL_RCC_OscConfig+0x21c>
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b0c      	cmp	r3, #12
 8006694:	d10e      	bne.n	80066b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	2b03      	cmp	r3, #3
 800669a:	d10b      	bne.n	80066b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800669c:	4b14      	ldr	r3, [pc, #80]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d063      	beq.n	8006770 <HAL_RCC_OscConfig+0x2f0>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d15f      	bne.n	8006770 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e2f1      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066bc:	d106      	bne.n	80066cc <HAL_RCC_OscConfig+0x24c>
 80066be:	4b0c      	ldr	r3, [pc, #48]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a0b      	ldr	r2, [pc, #44]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 80066c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c8:	6013      	str	r3, [r2, #0]
 80066ca:	e025      	b.n	8006718 <HAL_RCC_OscConfig+0x298>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066d4:	d114      	bne.n	8006700 <HAL_RCC_OscConfig+0x280>
 80066d6:	4b06      	ldr	r3, [pc, #24]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a05      	ldr	r2, [pc, #20]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 80066dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	4b03      	ldr	r3, [pc, #12]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a02      	ldr	r2, [pc, #8]	; (80066f0 <HAL_RCC_OscConfig+0x270>)
 80066e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066ec:	6013      	str	r3, [r2, #0]
 80066ee:	e013      	b.n	8006718 <HAL_RCC_OscConfig+0x298>
 80066f0:	40021000 	.word	0x40021000
 80066f4:	0800ce48 	.word	0x0800ce48
 80066f8:	20000000 	.word	0x20000000
 80066fc:	20000008 	.word	0x20000008
 8006700:	4ba0      	ldr	r3, [pc, #640]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a9f      	ldr	r2, [pc, #636]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	4b9d      	ldr	r3, [pc, #628]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a9c      	ldr	r2, [pc, #624]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d013      	beq.n	8006748 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006720:	f7fd fd62 	bl	80041e8 <HAL_GetTick>
 8006724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006726:	e008      	b.n	800673a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006728:	f7fd fd5e 	bl	80041e8 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	2b64      	cmp	r3, #100	; 0x64
 8006734:	d901      	bls.n	800673a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006736:	2303      	movs	r3, #3
 8006738:	e2ae      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800673a:	4b92      	ldr	r3, [pc, #584]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006742:	2b00      	cmp	r3, #0
 8006744:	d0f0      	beq.n	8006728 <HAL_RCC_OscConfig+0x2a8>
 8006746:	e014      	b.n	8006772 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006748:	f7fd fd4e 	bl	80041e8 <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006750:	f7fd fd4a 	bl	80041e8 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b64      	cmp	r3, #100	; 0x64
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e29a      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006762:	4b88      	ldr	r3, [pc, #544]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1f0      	bne.n	8006750 <HAL_RCC_OscConfig+0x2d0>
 800676e:	e000      	b.n	8006772 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d060      	beq.n	8006840 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	2b04      	cmp	r3, #4
 8006782:	d005      	beq.n	8006790 <HAL_RCC_OscConfig+0x310>
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	2b0c      	cmp	r3, #12
 8006788:	d119      	bne.n	80067be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2b02      	cmp	r3, #2
 800678e:	d116      	bne.n	80067be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006790:	4b7c      	ldr	r3, [pc, #496]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <HAL_RCC_OscConfig+0x328>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e277      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067a8:	4b76      	ldr	r3, [pc, #472]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	061b      	lsls	r3, r3, #24
 80067b6:	4973      	ldr	r1, [pc, #460]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067bc:	e040      	b.n	8006840 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d023      	beq.n	800680e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067c6:	4b6f      	ldr	r3, [pc, #444]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a6e      	ldr	r2, [pc, #440]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 80067cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d2:	f7fd fd09 	bl	80041e8 <HAL_GetTick>
 80067d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067d8:	e008      	b.n	80067ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067da:	f7fd fd05 	bl	80041e8 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	2b02      	cmp	r3, #2
 80067e6:	d901      	bls.n	80067ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e255      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067ec:	4b65      	ldr	r3, [pc, #404]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d0f0      	beq.n	80067da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067f8:	4b62      	ldr	r3, [pc, #392]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	061b      	lsls	r3, r3, #24
 8006806:	495f      	ldr	r1, [pc, #380]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006808:	4313      	orrs	r3, r2
 800680a:	604b      	str	r3, [r1, #4]
 800680c:	e018      	b.n	8006840 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800680e:	4b5d      	ldr	r3, [pc, #372]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a5c      	ldr	r2, [pc, #368]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681a:	f7fd fce5 	bl	80041e8 <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006820:	e008      	b.n	8006834 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006822:	f7fd fce1 	bl	80041e8 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e231      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006834:	4b53      	ldr	r3, [pc, #332]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1f0      	bne.n	8006822 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b00      	cmp	r3, #0
 800684a:	d03c      	beq.n	80068c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01c      	beq.n	800688e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006854:	4b4b      	ldr	r3, [pc, #300]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800685a:	4a4a      	ldr	r2, [pc, #296]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 800685c:	f043 0301 	orr.w	r3, r3, #1
 8006860:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006864:	f7fd fcc0 	bl	80041e8 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800686c:	f7fd fcbc 	bl	80041e8 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e20c      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800687e:	4b41      	ldr	r3, [pc, #260]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006884:	f003 0302 	and.w	r3, r3, #2
 8006888:	2b00      	cmp	r3, #0
 800688a:	d0ef      	beq.n	800686c <HAL_RCC_OscConfig+0x3ec>
 800688c:	e01b      	b.n	80068c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800688e:	4b3d      	ldr	r3, [pc, #244]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006894:	4a3b      	ldr	r2, [pc, #236]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006896:	f023 0301 	bic.w	r3, r3, #1
 800689a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800689e:	f7fd fca3 	bl	80041e8 <HAL_GetTick>
 80068a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068a4:	e008      	b.n	80068b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068a6:	f7fd fc9f 	bl	80041e8 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e1ef      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068b8:	4b32      	ldr	r3, [pc, #200]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 80068ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1ef      	bne.n	80068a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 80a6 	beq.w	8006a20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068d4:	2300      	movs	r3, #0
 80068d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80068d8:	4b2a      	ldr	r3, [pc, #168]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 80068da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10d      	bne.n	8006900 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068e4:	4b27      	ldr	r3, [pc, #156]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 80068e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e8:	4a26      	ldr	r2, [pc, #152]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 80068ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ee:	6593      	str	r3, [r2, #88]	; 0x58
 80068f0:	4b24      	ldr	r3, [pc, #144]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 80068f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068f8:	60bb      	str	r3, [r7, #8]
 80068fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068fc:	2301      	movs	r3, #1
 80068fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006900:	4b21      	ldr	r3, [pc, #132]	; (8006988 <HAL_RCC_OscConfig+0x508>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006908:	2b00      	cmp	r3, #0
 800690a:	d118      	bne.n	800693e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800690c:	4b1e      	ldr	r3, [pc, #120]	; (8006988 <HAL_RCC_OscConfig+0x508>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a1d      	ldr	r2, [pc, #116]	; (8006988 <HAL_RCC_OscConfig+0x508>)
 8006912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006916:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006918:	f7fd fc66 	bl	80041e8 <HAL_GetTick>
 800691c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800691e:	e008      	b.n	8006932 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006920:	f7fd fc62 	bl	80041e8 <HAL_GetTick>
 8006924:	4602      	mov	r2, r0
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	1ad3      	subs	r3, r2, r3
 800692a:	2b02      	cmp	r3, #2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e1b2      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006932:	4b15      	ldr	r3, [pc, #84]	; (8006988 <HAL_RCC_OscConfig+0x508>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0f0      	beq.n	8006920 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d108      	bne.n	8006958 <HAL_RCC_OscConfig+0x4d8>
 8006946:	4b0f      	ldr	r3, [pc, #60]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694c:	4a0d      	ldr	r2, [pc, #52]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 800694e:	f043 0301 	orr.w	r3, r3, #1
 8006952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006956:	e029      	b.n	80069ac <HAL_RCC_OscConfig+0x52c>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	2b05      	cmp	r3, #5
 800695e:	d115      	bne.n	800698c <HAL_RCC_OscConfig+0x50c>
 8006960:	4b08      	ldr	r3, [pc, #32]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006966:	4a07      	ldr	r2, [pc, #28]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006968:	f043 0304 	orr.w	r3, r3, #4
 800696c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006970:	4b04      	ldr	r3, [pc, #16]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006976:	4a03      	ldr	r2, [pc, #12]	; (8006984 <HAL_RCC_OscConfig+0x504>)
 8006978:	f043 0301 	orr.w	r3, r3, #1
 800697c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006980:	e014      	b.n	80069ac <HAL_RCC_OscConfig+0x52c>
 8006982:	bf00      	nop
 8006984:	40021000 	.word	0x40021000
 8006988:	40007000 	.word	0x40007000
 800698c:	4b9a      	ldr	r3, [pc, #616]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 800698e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006992:	4a99      	ldr	r2, [pc, #612]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006994:	f023 0301 	bic.w	r3, r3, #1
 8006998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800699c:	4b96      	ldr	r3, [pc, #600]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 800699e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a2:	4a95      	ldr	r2, [pc, #596]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 80069a4:	f023 0304 	bic.w	r3, r3, #4
 80069a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d016      	beq.n	80069e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b4:	f7fd fc18 	bl	80041e8 <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069ba:	e00a      	b.n	80069d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069bc:	f7fd fc14 	bl	80041e8 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e162      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069d2:	4b89      	ldr	r3, [pc, #548]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 80069d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0ed      	beq.n	80069bc <HAL_RCC_OscConfig+0x53c>
 80069e0:	e015      	b.n	8006a0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e2:	f7fd fc01 	bl	80041e8 <HAL_GetTick>
 80069e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069e8:	e00a      	b.n	8006a00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ea:	f7fd fbfd 	bl	80041e8 <HAL_GetTick>
 80069ee:	4602      	mov	r2, r0
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d901      	bls.n	8006a00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e14b      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a00:	4b7d      	ldr	r3, [pc, #500]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1ed      	bne.n	80069ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a0e:	7ffb      	ldrb	r3, [r7, #31]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d105      	bne.n	8006a20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a14:	4b78      	ldr	r3, [pc, #480]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a18:	4a77      	ldr	r2, [pc, #476]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d03c      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d01c      	beq.n	8006a6e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a34:	4b70      	ldr	r3, [pc, #448]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a3a:	4a6f      	ldr	r2, [pc, #444]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006a3c:	f043 0301 	orr.w	r3, r3, #1
 8006a40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a44:	f7fd fbd0 	bl	80041e8 <HAL_GetTick>
 8006a48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a4a:	e008      	b.n	8006a5e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a4c:	f7fd fbcc 	bl	80041e8 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d901      	bls.n	8006a5e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e11c      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a5e:	4b66      	ldr	r3, [pc, #408]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0ef      	beq.n	8006a4c <HAL_RCC_OscConfig+0x5cc>
 8006a6c:	e01b      	b.n	8006aa6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a6e:	4b62      	ldr	r3, [pc, #392]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a74:	4a60      	ldr	r2, [pc, #384]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006a76:	f023 0301 	bic.w	r3, r3, #1
 8006a7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a7e:	f7fd fbb3 	bl	80041e8 <HAL_GetTick>
 8006a82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a84:	e008      	b.n	8006a98 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a86:	f7fd fbaf 	bl	80041e8 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d901      	bls.n	8006a98 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e0ff      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a98:	4b57      	ldr	r3, [pc, #348]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1ef      	bne.n	8006a86 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 80f3 	beq.w	8006c96 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	f040 80c9 	bne.w	8006c4c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006aba:	4b4f      	ldr	r3, [pc, #316]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f003 0203 	and.w	r2, r3, #3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d12c      	bne.n	8006b28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d123      	bne.n	8006b28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d11b      	bne.n	8006b28 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d113      	bne.n	8006b28 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0a:	085b      	lsrs	r3, r3, #1
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d109      	bne.n	8006b28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	085b      	lsrs	r3, r3, #1
 8006b20:	3b01      	subs	r3, #1
 8006b22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d06b      	beq.n	8006c00 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	2b0c      	cmp	r3, #12
 8006b2c:	d062      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006b2e:	4b32      	ldr	r3, [pc, #200]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e0ac      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006b3e:	4b2e      	ldr	r3, [pc, #184]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a2d      	ldr	r2, [pc, #180]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006b44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b48:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b4a:	f7fd fb4d 	bl	80041e8 <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b50:	e008      	b.n	8006b64 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b52:	f7fd fb49 	bl	80041e8 <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d901      	bls.n	8006b64 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e099      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b64:	4b24      	ldr	r3, [pc, #144]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1f0      	bne.n	8006b52 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b70:	4b21      	ldr	r3, [pc, #132]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	4b21      	ldr	r3, [pc, #132]	; (8006bfc <HAL_RCC_OscConfig+0x77c>)
 8006b76:	4013      	ands	r3, r2
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b80:	3a01      	subs	r2, #1
 8006b82:	0112      	lsls	r2, r2, #4
 8006b84:	4311      	orrs	r1, r2
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b8a:	0212      	lsls	r2, r2, #8
 8006b8c:	4311      	orrs	r1, r2
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b92:	0852      	lsrs	r2, r2, #1
 8006b94:	3a01      	subs	r2, #1
 8006b96:	0552      	lsls	r2, r2, #21
 8006b98:	4311      	orrs	r1, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006b9e:	0852      	lsrs	r2, r2, #1
 8006ba0:	3a01      	subs	r2, #1
 8006ba2:	0652      	lsls	r2, r2, #25
 8006ba4:	4311      	orrs	r1, r2
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006baa:	06d2      	lsls	r2, r2, #27
 8006bac:	430a      	orrs	r2, r1
 8006bae:	4912      	ldr	r1, [pc, #72]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006bb4:	4b10      	ldr	r3, [pc, #64]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a0f      	ldr	r2, [pc, #60]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bc0:	4b0d      	ldr	r3, [pc, #52]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	4a0c      	ldr	r2, [pc, #48]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006bcc:	f7fd fb0c 	bl	80041e8 <HAL_GetTick>
 8006bd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bd2:	e008      	b.n	8006be6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bd4:	f7fd fb08 	bl	80041e8 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e058      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006be6:	4b04      	ldr	r3, [pc, #16]	; (8006bf8 <HAL_RCC_OscConfig+0x778>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d0f0      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bf2:	e050      	b.n	8006c96 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e04f      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c00:	4b27      	ldr	r3, [pc, #156]	; (8006ca0 <HAL_RCC_OscConfig+0x820>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d144      	bne.n	8006c96 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006c0c:	4b24      	ldr	r3, [pc, #144]	; (8006ca0 <HAL_RCC_OscConfig+0x820>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a23      	ldr	r2, [pc, #140]	; (8006ca0 <HAL_RCC_OscConfig+0x820>)
 8006c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c18:	4b21      	ldr	r3, [pc, #132]	; (8006ca0 <HAL_RCC_OscConfig+0x820>)
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	4a20      	ldr	r2, [pc, #128]	; (8006ca0 <HAL_RCC_OscConfig+0x820>)
 8006c1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c24:	f7fd fae0 	bl	80041e8 <HAL_GetTick>
 8006c28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c2a:	e008      	b.n	8006c3e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c2c:	f7fd fadc 	bl	80041e8 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d901      	bls.n	8006c3e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006c3a:	2303      	movs	r3, #3
 8006c3c:	e02c      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c3e:	4b18      	ldr	r3, [pc, #96]	; (8006ca0 <HAL_RCC_OscConfig+0x820>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0f0      	beq.n	8006c2c <HAL_RCC_OscConfig+0x7ac>
 8006c4a:	e024      	b.n	8006c96 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	2b0c      	cmp	r3, #12
 8006c50:	d01f      	beq.n	8006c92 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c52:	4b13      	ldr	r3, [pc, #76]	; (8006ca0 <HAL_RCC_OscConfig+0x820>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a12      	ldr	r2, [pc, #72]	; (8006ca0 <HAL_RCC_OscConfig+0x820>)
 8006c58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5e:	f7fd fac3 	bl	80041e8 <HAL_GetTick>
 8006c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c64:	e008      	b.n	8006c78 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c66:	f7fd fabf 	bl	80041e8 <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e00f      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c78:	4b09      	ldr	r3, [pc, #36]	; (8006ca0 <HAL_RCC_OscConfig+0x820>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1f0      	bne.n	8006c66 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006c84:	4b06      	ldr	r3, [pc, #24]	; (8006ca0 <HAL_RCC_OscConfig+0x820>)
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	4905      	ldr	r1, [pc, #20]	; (8006ca0 <HAL_RCC_OscConfig+0x820>)
 8006c8a:	4b06      	ldr	r3, [pc, #24]	; (8006ca4 <HAL_RCC_OscConfig+0x824>)
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	60cb      	str	r3, [r1, #12]
 8006c90:	e001      	b.n	8006c96 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e000      	b.n	8006c98 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3720      	adds	r7, #32
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	40021000 	.word	0x40021000
 8006ca4:	feeefffc 	.word	0xfeeefffc

08006ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e0e7      	b.n	8006e8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cbc:	4b75      	ldr	r3, [pc, #468]	; (8006e94 <HAL_RCC_ClockConfig+0x1ec>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0307 	and.w	r3, r3, #7
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d910      	bls.n	8006cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cca:	4b72      	ldr	r3, [pc, #456]	; (8006e94 <HAL_RCC_ClockConfig+0x1ec>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f023 0207 	bic.w	r2, r3, #7
 8006cd2:	4970      	ldr	r1, [pc, #448]	; (8006e94 <HAL_RCC_ClockConfig+0x1ec>)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cda:	4b6e      	ldr	r3, [pc, #440]	; (8006e94 <HAL_RCC_ClockConfig+0x1ec>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d001      	beq.n	8006cec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e0cf      	b.n	8006e8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d010      	beq.n	8006d1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	4b66      	ldr	r3, [pc, #408]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d908      	bls.n	8006d1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d08:	4b63      	ldr	r3, [pc, #396]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	4960      	ldr	r1, [pc, #384]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d04c      	beq.n	8006dc0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d107      	bne.n	8006d3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d2e:	4b5a      	ldr	r3, [pc, #360]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d121      	bne.n	8006d7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e0a6      	b.n	8006e8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d107      	bne.n	8006d56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d46:	4b54      	ldr	r3, [pc, #336]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d115      	bne.n	8006d7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e09a      	b.n	8006e8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d107      	bne.n	8006d6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d5e:	4b4e      	ldr	r3, [pc, #312]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0302 	and.w	r3, r3, #2
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d109      	bne.n	8006d7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e08e      	b.n	8006e8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d6e:	4b4a      	ldr	r3, [pc, #296]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e086      	b.n	8006e8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d7e:	4b46      	ldr	r3, [pc, #280]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	f023 0203 	bic.w	r2, r3, #3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	4943      	ldr	r1, [pc, #268]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d90:	f7fd fa2a 	bl	80041e8 <HAL_GetTick>
 8006d94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d96:	e00a      	b.n	8006dae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d98:	f7fd fa26 	bl	80041e8 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e06e      	b.n	8006e8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dae:	4b3a      	ldr	r3, [pc, #232]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f003 020c 	and.w	r2, r3, #12
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d1eb      	bne.n	8006d98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d010      	beq.n	8006dee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689a      	ldr	r2, [r3, #8]
 8006dd0:	4b31      	ldr	r3, [pc, #196]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d208      	bcs.n	8006dee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ddc:	4b2e      	ldr	r3, [pc, #184]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	492b      	ldr	r1, [pc, #172]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dee:	4b29      	ldr	r3, [pc, #164]	; (8006e94 <HAL_RCC_ClockConfig+0x1ec>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	683a      	ldr	r2, [r7, #0]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d210      	bcs.n	8006e1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dfc:	4b25      	ldr	r3, [pc, #148]	; (8006e94 <HAL_RCC_ClockConfig+0x1ec>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f023 0207 	bic.w	r2, r3, #7
 8006e04:	4923      	ldr	r1, [pc, #140]	; (8006e94 <HAL_RCC_ClockConfig+0x1ec>)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e0c:	4b21      	ldr	r3, [pc, #132]	; (8006e94 <HAL_RCC_ClockConfig+0x1ec>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0307 	and.w	r3, r3, #7
 8006e14:	683a      	ldr	r2, [r7, #0]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d001      	beq.n	8006e1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e036      	b.n	8006e8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0304 	and.w	r3, r3, #4
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d008      	beq.n	8006e3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e2a:	4b1b      	ldr	r3, [pc, #108]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	4918      	ldr	r1, [pc, #96]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 0308 	and.w	r3, r3, #8
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d009      	beq.n	8006e5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e48:	4b13      	ldr	r3, [pc, #76]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	00db      	lsls	r3, r3, #3
 8006e56:	4910      	ldr	r1, [pc, #64]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e5c:	f000 f824 	bl	8006ea8 <HAL_RCC_GetSysClockFreq>
 8006e60:	4602      	mov	r2, r0
 8006e62:	4b0d      	ldr	r3, [pc, #52]	; (8006e98 <HAL_RCC_ClockConfig+0x1f0>)
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	091b      	lsrs	r3, r3, #4
 8006e68:	f003 030f 	and.w	r3, r3, #15
 8006e6c:	490b      	ldr	r1, [pc, #44]	; (8006e9c <HAL_RCC_ClockConfig+0x1f4>)
 8006e6e:	5ccb      	ldrb	r3, [r1, r3]
 8006e70:	f003 031f 	and.w	r3, r3, #31
 8006e74:	fa22 f303 	lsr.w	r3, r2, r3
 8006e78:	4a09      	ldr	r2, [pc, #36]	; (8006ea0 <HAL_RCC_ClockConfig+0x1f8>)
 8006e7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e7c:	4b09      	ldr	r3, [pc, #36]	; (8006ea4 <HAL_RCC_ClockConfig+0x1fc>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fd f961 	bl	8004148 <HAL_InitTick>
 8006e86:	4603      	mov	r3, r0
 8006e88:	72fb      	strb	r3, [r7, #11]

  return status;
 8006e8a:	7afb      	ldrb	r3, [r7, #11]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	40022000 	.word	0x40022000
 8006e98:	40021000 	.word	0x40021000
 8006e9c:	0800ce48 	.word	0x0800ce48
 8006ea0:	20000000 	.word	0x20000000
 8006ea4:	20000008 	.word	0x20000008

08006ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b089      	sub	sp, #36	; 0x24
 8006eac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61fb      	str	r3, [r7, #28]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eb6:	4b3e      	ldr	r3, [pc, #248]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	f003 030c 	and.w	r3, r3, #12
 8006ebe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006ec0:	4b3b      	ldr	r3, [pc, #236]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f003 0303 	and.w	r3, r3, #3
 8006ec8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d005      	beq.n	8006edc <HAL_RCC_GetSysClockFreq+0x34>
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	2b0c      	cmp	r3, #12
 8006ed4:	d121      	bne.n	8006f1a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d11e      	bne.n	8006f1a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006edc:	4b34      	ldr	r3, [pc, #208]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 0308 	and.w	r3, r3, #8
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d107      	bne.n	8006ef8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006ee8:	4b31      	ldr	r3, [pc, #196]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006eee:	0a1b      	lsrs	r3, r3, #8
 8006ef0:	f003 030f 	and.w	r3, r3, #15
 8006ef4:	61fb      	str	r3, [r7, #28]
 8006ef6:	e005      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ef8:	4b2d      	ldr	r3, [pc, #180]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	091b      	lsrs	r3, r3, #4
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006f04:	4a2b      	ldr	r2, [pc, #172]	; (8006fb4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f0c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10d      	bne.n	8006f30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f18:	e00a      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	2b04      	cmp	r3, #4
 8006f1e:	d102      	bne.n	8006f26 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f20:	4b25      	ldr	r3, [pc, #148]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f22:	61bb      	str	r3, [r7, #24]
 8006f24:	e004      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	2b08      	cmp	r3, #8
 8006f2a:	d101      	bne.n	8006f30 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f2c:	4b23      	ldr	r3, [pc, #140]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x114>)
 8006f2e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	2b0c      	cmp	r3, #12
 8006f34:	d134      	bne.n	8006fa0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f36:	4b1e      	ldr	r3, [pc, #120]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d003      	beq.n	8006f4e <HAL_RCC_GetSysClockFreq+0xa6>
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d003      	beq.n	8006f54 <HAL_RCC_GetSysClockFreq+0xac>
 8006f4c:	e005      	b.n	8006f5a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006f4e:	4b1a      	ldr	r3, [pc, #104]	; (8006fb8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f50:	617b      	str	r3, [r7, #20]
      break;
 8006f52:	e005      	b.n	8006f60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006f54:	4b19      	ldr	r3, [pc, #100]	; (8006fbc <HAL_RCC_GetSysClockFreq+0x114>)
 8006f56:	617b      	str	r3, [r7, #20]
      break;
 8006f58:	e002      	b.n	8006f60 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	617b      	str	r3, [r7, #20]
      break;
 8006f5e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f60:	4b13      	ldr	r3, [pc, #76]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	091b      	lsrs	r3, r3, #4
 8006f66:	f003 0307 	and.w	r3, r3, #7
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006f6e:	4b10      	ldr	r3, [pc, #64]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	0a1b      	lsrs	r3, r3, #8
 8006f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	fb03 f202 	mul.w	r2, r3, r2
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f84:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f86:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	0e5b      	lsrs	r3, r3, #25
 8006f8c:	f003 0303 	and.w	r3, r3, #3
 8006f90:	3301      	adds	r3, #1
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006fa0:	69bb      	ldr	r3, [r7, #24]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3724      	adds	r7, #36	; 0x24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	0800ce60 	.word	0x0800ce60
 8006fb8:	00f42400 	.word	0x00f42400
 8006fbc:	007a1200 	.word	0x007a1200

08006fc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006fc8:	2300      	movs	r3, #0
 8006fca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006fcc:	4b2a      	ldr	r3, [pc, #168]	; (8007078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d003      	beq.n	8006fe0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006fd8:	f7ff f97a 	bl	80062d0 <HAL_PWREx_GetVoltageRange>
 8006fdc:	6178      	str	r0, [r7, #20]
 8006fde:	e014      	b.n	800700a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fe0:	4b25      	ldr	r3, [pc, #148]	; (8007078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe4:	4a24      	ldr	r2, [pc, #144]	; (8007078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fea:	6593      	str	r3, [r2, #88]	; 0x58
 8006fec:	4b22      	ldr	r3, [pc, #136]	; (8007078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006ff8:	f7ff f96a 	bl	80062d0 <HAL_PWREx_GetVoltageRange>
 8006ffc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006ffe:	4b1e      	ldr	r3, [pc, #120]	; (8007078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007002:	4a1d      	ldr	r2, [pc, #116]	; (8007078 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007008:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007010:	d10b      	bne.n	800702a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2b80      	cmp	r3, #128	; 0x80
 8007016:	d919      	bls.n	800704c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2ba0      	cmp	r3, #160	; 0xa0
 800701c:	d902      	bls.n	8007024 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800701e:	2302      	movs	r3, #2
 8007020:	613b      	str	r3, [r7, #16]
 8007022:	e013      	b.n	800704c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007024:	2301      	movs	r3, #1
 8007026:	613b      	str	r3, [r7, #16]
 8007028:	e010      	b.n	800704c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b80      	cmp	r3, #128	; 0x80
 800702e:	d902      	bls.n	8007036 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007030:	2303      	movs	r3, #3
 8007032:	613b      	str	r3, [r7, #16]
 8007034:	e00a      	b.n	800704c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b80      	cmp	r3, #128	; 0x80
 800703a:	d102      	bne.n	8007042 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800703c:	2302      	movs	r3, #2
 800703e:	613b      	str	r3, [r7, #16]
 8007040:	e004      	b.n	800704c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b70      	cmp	r3, #112	; 0x70
 8007046:	d101      	bne.n	800704c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007048:	2301      	movs	r3, #1
 800704a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800704c:	4b0b      	ldr	r3, [pc, #44]	; (800707c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f023 0207 	bic.w	r2, r3, #7
 8007054:	4909      	ldr	r1, [pc, #36]	; (800707c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	4313      	orrs	r3, r2
 800705a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800705c:	4b07      	ldr	r3, [pc, #28]	; (800707c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0307 	and.w	r3, r3, #7
 8007064:	693a      	ldr	r2, [r7, #16]
 8007066:	429a      	cmp	r2, r3
 8007068:	d001      	beq.n	800706e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e000      	b.n	8007070 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	40021000 	.word	0x40021000
 800707c:	40022000 	.word	0x40022000

08007080 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b086      	sub	sp, #24
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007088:	2300      	movs	r3, #0
 800708a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800708c:	2300      	movs	r3, #0
 800708e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007098:	2b00      	cmp	r3, #0
 800709a:	d031      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80070a4:	d01a      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80070a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80070aa:	d814      	bhi.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d009      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80070b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070b4:	d10f      	bne.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80070b6:	4b5d      	ldr	r3, [pc, #372]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	4a5c      	ldr	r2, [pc, #368]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070c2:	e00c      	b.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	3304      	adds	r3, #4
 80070c8:	2100      	movs	r1, #0
 80070ca:	4618      	mov	r0, r3
 80070cc:	f000 f9de 	bl	800748c <RCCEx_PLLSAI1_Config>
 80070d0:	4603      	mov	r3, r0
 80070d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070d4:	e003      	b.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	74fb      	strb	r3, [r7, #19]
      break;
 80070da:	e000      	b.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80070dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070de:	7cfb      	ldrb	r3, [r7, #19]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10b      	bne.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070e4:	4b51      	ldr	r3, [pc, #324]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f2:	494e      	ldr	r1, [pc, #312]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80070fa:	e001      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070fc:	7cfb      	ldrb	r3, [r7, #19]
 80070fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 809e 	beq.w	800724a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800710e:	2300      	movs	r3, #0
 8007110:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007112:	4b46      	ldr	r3, [pc, #280]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800711e:	2301      	movs	r3, #1
 8007120:	e000      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007122:	2300      	movs	r3, #0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00d      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007128:	4b40      	ldr	r3, [pc, #256]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800712a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712c:	4a3f      	ldr	r2, [pc, #252]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800712e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007132:	6593      	str	r3, [r2, #88]	; 0x58
 8007134:	4b3d      	ldr	r3, [pc, #244]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800713c:	60bb      	str	r3, [r7, #8]
 800713e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007140:	2301      	movs	r3, #1
 8007142:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007144:	4b3a      	ldr	r3, [pc, #232]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a39      	ldr	r2, [pc, #228]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800714a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800714e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007150:	f7fd f84a 	bl	80041e8 <HAL_GetTick>
 8007154:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007156:	e009      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007158:	f7fd f846 	bl	80041e8 <HAL_GetTick>
 800715c:	4602      	mov	r2, r0
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	2b02      	cmp	r3, #2
 8007164:	d902      	bls.n	800716c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007166:	2303      	movs	r3, #3
 8007168:	74fb      	strb	r3, [r7, #19]
        break;
 800716a:	e005      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800716c:	4b30      	ldr	r3, [pc, #192]	; (8007230 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0ef      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007178:	7cfb      	ldrb	r3, [r7, #19]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d15a      	bne.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800717e:	4b2b      	ldr	r3, [pc, #172]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007188:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d01e      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	429a      	cmp	r2, r3
 8007198:	d019      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800719a:	4b24      	ldr	r3, [pc, #144]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800719c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071a6:	4b21      	ldr	r3, [pc, #132]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ac:	4a1f      	ldr	r2, [pc, #124]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071b6:	4b1d      	ldr	r3, [pc, #116]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071bc:	4a1b      	ldr	r2, [pc, #108]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80071c6:	4a19      	ldr	r2, [pc, #100]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d016      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d8:	f7fd f806 	bl	80041e8 <HAL_GetTick>
 80071dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071de:	e00b      	b.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071e0:	f7fd f802 	bl	80041e8 <HAL_GetTick>
 80071e4:	4602      	mov	r2, r0
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d902      	bls.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80071f2:	2303      	movs	r3, #3
 80071f4:	74fb      	strb	r3, [r7, #19]
            break;
 80071f6:	e006      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071f8:	4b0c      	ldr	r3, [pc, #48]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0ec      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007206:	7cfb      	ldrb	r3, [r7, #19]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d10b      	bne.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800720c:	4b07      	ldr	r3, [pc, #28]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800720e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007212:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721a:	4904      	ldr	r1, [pc, #16]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800721c:	4313      	orrs	r3, r2
 800721e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007222:	e009      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007224:	7cfb      	ldrb	r3, [r7, #19]
 8007226:	74bb      	strb	r3, [r7, #18]
 8007228:	e006      	b.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800722a:	bf00      	nop
 800722c:	40021000 	.word	0x40021000
 8007230:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007234:	7cfb      	ldrb	r3, [r7, #19]
 8007236:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007238:	7c7b      	ldrb	r3, [r7, #17]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d105      	bne.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800723e:	4b8a      	ldr	r3, [pc, #552]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007242:	4a89      	ldr	r2, [pc, #548]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007248:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007256:	4b84      	ldr	r3, [pc, #528]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800725c:	f023 0203 	bic.w	r2, r3, #3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	4980      	ldr	r1, [pc, #512]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007266:	4313      	orrs	r3, r2
 8007268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00a      	beq.n	800728e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007278:	4b7b      	ldr	r3, [pc, #492]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800727a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800727e:	f023 020c 	bic.w	r2, r3, #12
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007286:	4978      	ldr	r1, [pc, #480]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007288:	4313      	orrs	r3, r2
 800728a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0320 	and.w	r3, r3, #32
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00a      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800729a:	4b73      	ldr	r3, [pc, #460]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800729c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a8:	496f      	ldr	r1, [pc, #444]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072aa:	4313      	orrs	r3, r2
 80072ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00a      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072bc:	4b6a      	ldr	r3, [pc, #424]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ca:	4967      	ldr	r1, [pc, #412]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072cc:	4313      	orrs	r3, r2
 80072ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00a      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80072de:	4b62      	ldr	r3, [pc, #392]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ec:	495e      	ldr	r1, [pc, #376]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00a      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007300:	4b59      	ldr	r3, [pc, #356]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007306:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730e:	4956      	ldr	r1, [pc, #344]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007310:	4313      	orrs	r3, r2
 8007312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00a      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007322:	4b51      	ldr	r3, [pc, #324]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007328:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007330:	494d      	ldr	r1, [pc, #308]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007332:	4313      	orrs	r3, r2
 8007334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d028      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007344:	4b48      	ldr	r3, [pc, #288]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800734a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	4945      	ldr	r1, [pc, #276]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007354:	4313      	orrs	r3, r2
 8007356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007362:	d106      	bne.n	8007372 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007364:	4b40      	ldr	r3, [pc, #256]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	4a3f      	ldr	r2, [pc, #252]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800736a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800736e:	60d3      	str	r3, [r2, #12]
 8007370:	e011      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800737a:	d10c      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3304      	adds	r3, #4
 8007380:	2101      	movs	r1, #1
 8007382:	4618      	mov	r0, r3
 8007384:	f000 f882 	bl	800748c <RCCEx_PLLSAI1_Config>
 8007388:	4603      	mov	r3, r0
 800738a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800738c:	7cfb      	ldrb	r3, [r7, #19]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d001      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007392:	7cfb      	ldrb	r3, [r7, #19]
 8007394:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d028      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073a2:	4b31      	ldr	r3, [pc, #196]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b0:	492d      	ldr	r1, [pc, #180]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073c0:	d106      	bne.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073c2:	4b29      	ldr	r3, [pc, #164]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	4a28      	ldr	r2, [pc, #160]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073cc:	60d3      	str	r3, [r2, #12]
 80073ce:	e011      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073d8:	d10c      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3304      	adds	r3, #4
 80073de:	2101      	movs	r1, #1
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 f853 	bl	800748c <RCCEx_PLLSAI1_Config>
 80073e6:	4603      	mov	r3, r0
 80073e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073ea:	7cfb      	ldrb	r3, [r7, #19]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80073f0:	7cfb      	ldrb	r3, [r7, #19]
 80073f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01c      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007400:	4b19      	ldr	r3, [pc, #100]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007406:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800740e:	4916      	ldr	r1, [pc, #88]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007410:	4313      	orrs	r3, r2
 8007412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800741a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800741e:	d10c      	bne.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3304      	adds	r3, #4
 8007424:	2102      	movs	r1, #2
 8007426:	4618      	mov	r0, r3
 8007428:	f000 f830 	bl	800748c <RCCEx_PLLSAI1_Config>
 800742c:	4603      	mov	r3, r0
 800742e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007430:	7cfb      	ldrb	r3, [r7, #19]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8007436:	7cfb      	ldrb	r3, [r7, #19]
 8007438:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00a      	beq.n	800745c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007446:	4b08      	ldr	r3, [pc, #32]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800744c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007454:	4904      	ldr	r1, [pc, #16]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007456:	4313      	orrs	r3, r2
 8007458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800745c:	7cbb      	ldrb	r3, [r7, #18]
}
 800745e:	4618      	mov	r0, r3
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	40021000 	.word	0x40021000

0800746c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007470:	4b05      	ldr	r3, [pc, #20]	; (8007488 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a04      	ldr	r2, [pc, #16]	; (8007488 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007476:	f043 0304 	orr.w	r3, r3, #4
 800747a:	6013      	str	r3, [r2, #0]
}
 800747c:	bf00      	nop
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	40021000 	.word	0x40021000

0800748c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007496:	2300      	movs	r3, #0
 8007498:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800749a:	4b74      	ldr	r3, [pc, #464]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	f003 0303 	and.w	r3, r3, #3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d018      	beq.n	80074d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80074a6:	4b71      	ldr	r3, [pc, #452]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f003 0203 	and.w	r2, r3, #3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d10d      	bne.n	80074d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
       ||
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d009      	beq.n	80074d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80074be:	4b6b      	ldr	r3, [pc, #428]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	091b      	lsrs	r3, r3, #4
 80074c4:	f003 0307 	and.w	r3, r3, #7
 80074c8:	1c5a      	adds	r2, r3, #1
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
       ||
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d047      	beq.n	8007562 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	73fb      	strb	r3, [r7, #15]
 80074d6:	e044      	b.n	8007562 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2b03      	cmp	r3, #3
 80074de:	d018      	beq.n	8007512 <RCCEx_PLLSAI1_Config+0x86>
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d825      	bhi.n	8007530 <RCCEx_PLLSAI1_Config+0xa4>
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d002      	beq.n	80074ee <RCCEx_PLLSAI1_Config+0x62>
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d009      	beq.n	8007500 <RCCEx_PLLSAI1_Config+0x74>
 80074ec:	e020      	b.n	8007530 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80074ee:	4b5f      	ldr	r3, [pc, #380]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d11d      	bne.n	8007536 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074fe:	e01a      	b.n	8007536 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007500:	4b5a      	ldr	r3, [pc, #360]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007508:	2b00      	cmp	r3, #0
 800750a:	d116      	bne.n	800753a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007510:	e013      	b.n	800753a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007512:	4b56      	ldr	r3, [pc, #344]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10f      	bne.n	800753e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800751e:	4b53      	ldr	r3, [pc, #332]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d109      	bne.n	800753e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800752e:	e006      	b.n	800753e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	73fb      	strb	r3, [r7, #15]
      break;
 8007534:	e004      	b.n	8007540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007536:	bf00      	nop
 8007538:	e002      	b.n	8007540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800753a:	bf00      	nop
 800753c:	e000      	b.n	8007540 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800753e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10d      	bne.n	8007562 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007546:	4b49      	ldr	r3, [pc, #292]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6819      	ldr	r1, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	3b01      	subs	r3, #1
 8007558:	011b      	lsls	r3, r3, #4
 800755a:	430b      	orrs	r3, r1
 800755c:	4943      	ldr	r1, [pc, #268]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 800755e:	4313      	orrs	r3, r2
 8007560:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d17c      	bne.n	8007662 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007568:	4b40      	ldr	r3, [pc, #256]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a3f      	ldr	r2, [pc, #252]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 800756e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007574:	f7fc fe38 	bl	80041e8 <HAL_GetTick>
 8007578:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800757a:	e009      	b.n	8007590 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800757c:	f7fc fe34 	bl	80041e8 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	2b02      	cmp	r3, #2
 8007588:	d902      	bls.n	8007590 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	73fb      	strb	r3, [r7, #15]
        break;
 800758e:	e005      	b.n	800759c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007590:	4b36      	ldr	r3, [pc, #216]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007598:	2b00      	cmp	r3, #0
 800759a:	d1ef      	bne.n	800757c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d15f      	bne.n	8007662 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d110      	bne.n	80075ca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075a8:	4b30      	ldr	r3, [pc, #192]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80075b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80075b4:	687a      	ldr	r2, [r7, #4]
 80075b6:	6892      	ldr	r2, [r2, #8]
 80075b8:	0211      	lsls	r1, r2, #8
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	68d2      	ldr	r2, [r2, #12]
 80075be:	06d2      	lsls	r2, r2, #27
 80075c0:	430a      	orrs	r2, r1
 80075c2:	492a      	ldr	r1, [pc, #168]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	610b      	str	r3, [r1, #16]
 80075c8:	e027      	b.n	800761a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d112      	bne.n	80075f6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075d0:	4b26      	ldr	r3, [pc, #152]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80075d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	6892      	ldr	r2, [r2, #8]
 80075e0:	0211      	lsls	r1, r2, #8
 80075e2:	687a      	ldr	r2, [r7, #4]
 80075e4:	6912      	ldr	r2, [r2, #16]
 80075e6:	0852      	lsrs	r2, r2, #1
 80075e8:	3a01      	subs	r2, #1
 80075ea:	0552      	lsls	r2, r2, #21
 80075ec:	430a      	orrs	r2, r1
 80075ee:	491f      	ldr	r1, [pc, #124]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	610b      	str	r3, [r1, #16]
 80075f4:	e011      	b.n	800761a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075f6:	4b1d      	ldr	r3, [pc, #116]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80075fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	6892      	ldr	r2, [r2, #8]
 8007606:	0211      	lsls	r1, r2, #8
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6952      	ldr	r2, [r2, #20]
 800760c:	0852      	lsrs	r2, r2, #1
 800760e:	3a01      	subs	r2, #1
 8007610:	0652      	lsls	r2, r2, #25
 8007612:	430a      	orrs	r2, r1
 8007614:	4915      	ldr	r1, [pc, #84]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007616:	4313      	orrs	r3, r2
 8007618:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800761a:	4b14      	ldr	r3, [pc, #80]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a13      	ldr	r2, [pc, #76]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007620:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007624:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007626:	f7fc fddf 	bl	80041e8 <HAL_GetTick>
 800762a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800762c:	e009      	b.n	8007642 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800762e:	f7fc fddb 	bl	80041e8 <HAL_GetTick>
 8007632:	4602      	mov	r2, r0
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	2b02      	cmp	r3, #2
 800763a:	d902      	bls.n	8007642 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800763c:	2303      	movs	r3, #3
 800763e:	73fb      	strb	r3, [r7, #15]
          break;
 8007640:	e005      	b.n	800764e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007642:	4b0a      	ldr	r3, [pc, #40]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800764a:	2b00      	cmp	r3, #0
 800764c:	d0ef      	beq.n	800762e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d106      	bne.n	8007662 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007654:	4b05      	ldr	r3, [pc, #20]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007656:	691a      	ldr	r2, [r3, #16]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	4903      	ldr	r1, [pc, #12]	; (800766c <RCCEx_PLLSAI1_Config+0x1e0>)
 800765e:	4313      	orrs	r3, r2
 8007660:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007662:	7bfb      	ldrb	r3, [r7, #15]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	40021000 	.word	0x40021000

08007670 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d06c      	beq.n	800775c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d106      	bne.n	800769c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7fb fe02 	bl	80032a0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2202      	movs	r2, #2
 80076a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	22ca      	movs	r2, #202	; 0xca
 80076aa:	625a      	str	r2, [r3, #36]	; 0x24
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2253      	movs	r2, #83	; 0x53
 80076b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 fa49 	bl	8007b4c <RTC_EnterInitMode>
 80076ba:	4603      	mov	r3, r0
 80076bc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80076be:	7bfb      	ldrb	r3, [r7, #15]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d14b      	bne.n	800775c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	6812      	ldr	r2, [r2, #0]
 80076ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076d6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	6899      	ldr	r1, [r3, #8]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	431a      	orrs	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	431a      	orrs	r2, r3
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	68d2      	ldr	r2, [r2, #12]
 80076fe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6919      	ldr	r1, [r3, #16]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	041a      	lsls	r2, r3, #16
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	430a      	orrs	r2, r1
 8007712:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fa4d 	bl	8007bb4 <RTC_ExitInitMode>
 800771a:	4603      	mov	r3, r0
 800771c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d11b      	bne.n	800775c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 0203 	bic.w	r2, r2, #3
 8007732:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	69da      	ldr	r2, [r3, #28]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	22ff      	movs	r2, #255	; 0xff
 8007752:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800775c:	7bfb      	ldrb	r3, [r7, #15]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007766:	b590      	push	{r4, r7, lr}
 8007768:	b087      	sub	sp, #28
 800776a:	af00      	add	r7, sp, #0
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d101      	bne.n	8007780 <HAL_RTC_SetTime+0x1a>
 800777c:	2302      	movs	r3, #2
 800777e:	e08b      	b.n	8007898 <HAL_RTC_SetTime+0x132>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	22ca      	movs	r2, #202	; 0xca
 8007796:	625a      	str	r2, [r3, #36]	; 0x24
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2253      	movs	r2, #83	; 0x53
 800779e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f9d3 	bl	8007b4c <RTC_EnterInitMode>
 80077a6:	4603      	mov	r3, r0
 80077a8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80077aa:	7cfb      	ldrb	r3, [r7, #19]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d163      	bne.n	8007878 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d126      	bne.n	8007804 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d102      	bne.n	80077ca <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2200      	movs	r2, #0
 80077c8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fa2e 	bl	8007c30 <RTC_ByteToBcd2>
 80077d4:	4603      	mov	r3, r0
 80077d6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	785b      	ldrb	r3, [r3, #1]
 80077dc:	4618      	mov	r0, r3
 80077de:	f000 fa27 	bl	8007c30 <RTC_ByteToBcd2>
 80077e2:	4603      	mov	r3, r0
 80077e4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80077e6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	789b      	ldrb	r3, [r3, #2]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fa1f 	bl	8007c30 <RTC_ByteToBcd2>
 80077f2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077f4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	78db      	ldrb	r3, [r3, #3]
 80077fc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80077fe:	4313      	orrs	r3, r2
 8007800:	617b      	str	r3, [r7, #20]
 8007802:	e018      	b.n	8007836 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800780e:	2b00      	cmp	r3, #0
 8007810:	d102      	bne.n	8007818 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2200      	movs	r2, #0
 8007816:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	785b      	ldrb	r3, [r3, #1]
 8007822:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007824:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800782a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	78db      	ldrb	r3, [r3, #3]
 8007830:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007832:	4313      	orrs	r3, r2
 8007834:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007840:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007844:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	689a      	ldr	r2, [r3, #8]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007854:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6899      	ldr	r1, [r3, #8]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	68da      	ldr	r2, [r3, #12]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	431a      	orrs	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	f000 f9a0 	bl	8007bb4 <RTC_ExitInitMode>
 8007874:	4603      	mov	r3, r0
 8007876:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	22ff      	movs	r2, #255	; 0xff
 800787e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007880:	7cfb      	ldrb	r3, [r7, #19]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d103      	bne.n	800788e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007896:	7cfb      	ldrb	r3, [r7, #19]
}
 8007898:	4618      	mov	r0, r3
 800789a:	371c      	adds	r7, #28
 800789c:	46bd      	mov	sp, r7
 800789e:	bd90      	pop	{r4, r7, pc}

080078a0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80078ce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80078d2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	0c1b      	lsrs	r3, r3, #16
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	0a1b      	lsrs	r3, r3, #8
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	0d9b      	lsrs	r3, r3, #22
 8007906:	b2db      	uxtb	r3, r3
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	b2da      	uxtb	r2, r3
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d11a      	bne.n	800794e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	4618      	mov	r0, r3
 800791e:	f000 f9a7 	bl	8007c70 <RTC_Bcd2ToByte>
 8007922:	4603      	mov	r3, r0
 8007924:	461a      	mov	r2, r3
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	785b      	ldrb	r3, [r3, #1]
 800792e:	4618      	mov	r0, r3
 8007930:	f000 f99e 	bl	8007c70 <RTC_Bcd2ToByte>
 8007934:	4603      	mov	r3, r0
 8007936:	461a      	mov	r2, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	789b      	ldrb	r3, [r3, #2]
 8007940:	4618      	mov	r0, r3
 8007942:	f000 f995 	bl	8007c70 <RTC_Bcd2ToByte>
 8007946:	4603      	mov	r3, r0
 8007948:	461a      	mov	r2, r3
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3718      	adds	r7, #24
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007958:	b590      	push	{r4, r7, lr}
 800795a:	b087      	sub	sp, #28
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f893 3020 	ldrb.w	r3, [r3, #32]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d101      	bne.n	8007972 <HAL_RTC_SetDate+0x1a>
 800796e:	2302      	movs	r3, #2
 8007970:	e075      	b.n	8007a5e <HAL_RTC_SetDate+0x106>
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2202      	movs	r2, #2
 800797e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10e      	bne.n	80079a6 <HAL_RTC_SetDate+0x4e>
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	785b      	ldrb	r3, [r3, #1]
 800798c:	f003 0310 	and.w	r3, r3, #16
 8007990:	2b00      	cmp	r3, #0
 8007992:	d008      	beq.n	80079a6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	785b      	ldrb	r3, [r3, #1]
 8007998:	f023 0310 	bic.w	r3, r3, #16
 800799c:	b2db      	uxtb	r3, r3
 800799e:	330a      	adds	r3, #10
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d11c      	bne.n	80079e6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	78db      	ldrb	r3, [r3, #3]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 f93d 	bl	8007c30 <RTC_ByteToBcd2>
 80079b6:	4603      	mov	r3, r0
 80079b8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	785b      	ldrb	r3, [r3, #1]
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 f936 	bl	8007c30 <RTC_ByteToBcd2>
 80079c4:	4603      	mov	r3, r0
 80079c6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80079c8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	789b      	ldrb	r3, [r3, #2]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 f92e 	bl	8007c30 <RTC_ByteToBcd2>
 80079d4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80079d6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80079e0:	4313      	orrs	r3, r2
 80079e2:	617b      	str	r3, [r7, #20]
 80079e4:	e00e      	b.n	8007a04 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	78db      	ldrb	r3, [r3, #3]
 80079ea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	785b      	ldrb	r3, [r3, #1]
 80079f0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80079f2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80079f8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007a00:	4313      	orrs	r3, r2
 8007a02:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	22ca      	movs	r2, #202	; 0xca
 8007a0a:	625a      	str	r2, [r3, #36]	; 0x24
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2253      	movs	r2, #83	; 0x53
 8007a12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007a14:	68f8      	ldr	r0, [r7, #12]
 8007a16:	f000 f899 	bl	8007b4c <RTC_EnterInitMode>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007a1e:	7cfb      	ldrb	r3, [r7, #19]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d10c      	bne.n	8007a3e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a32:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 f8bd 	bl	8007bb4 <RTC_ExitInitMode>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	22ff      	movs	r2, #255	; 0xff
 8007a44:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007a46:	7cfb      	ldrb	r3, [r7, #19]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d103      	bne.n	8007a54 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007a5c:	7cfb      	ldrb	r3, [r7, #19]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	371c      	adds	r7, #28
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd90      	pop	{r4, r7, pc}

08007a66 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b086      	sub	sp, #24
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	60f8      	str	r0, [r7, #12]
 8007a6e:	60b9      	str	r1, [r7, #8]
 8007a70:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a7c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a80:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	0c1b      	lsrs	r3, r3, #16
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	0a1b      	lsrs	r3, r3, #8
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	f003 031f 	and.w	r3, r3, #31
 8007a96:	b2da      	uxtb	r2, r3
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	0b5b      	lsrs	r3, r3, #13
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	f003 0307 	and.w	r3, r3, #7
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d11a      	bne.n	8007af6 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	78db      	ldrb	r3, [r3, #3]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 f8d3 	bl	8007c70 <RTC_Bcd2ToByte>
 8007aca:	4603      	mov	r3, r0
 8007acc:	461a      	mov	r2, r3
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	785b      	ldrb	r3, [r3, #1]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 f8ca 	bl	8007c70 <RTC_Bcd2ToByte>
 8007adc:	4603      	mov	r3, r0
 8007ade:	461a      	mov	r2, r3
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	789b      	ldrb	r3, [r3, #2]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 f8c1 	bl	8007c70 <RTC_Bcd2ToByte>
 8007aee:	4603      	mov	r3, r0
 8007af0:	461a      	mov	r2, r3
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68da      	ldr	r2, [r3, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b16:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007b18:	f7fc fb66 	bl	80041e8 <HAL_GetTick>
 8007b1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b1e:	e009      	b.n	8007b34 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007b20:	f7fc fb62 	bl	80041e8 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b2e:	d901      	bls.n	8007b34 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e007      	b.n	8007b44 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	f003 0320 	and.w	r3, r3, #32
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0ee      	beq.n	8007b20 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d120      	bne.n	8007ba8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007b6e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007b70:	f7fc fb3a 	bl	80041e8 <HAL_GetTick>
 8007b74:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007b76:	e00d      	b.n	8007b94 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007b78:	f7fc fb36 	bl	80041e8 <HAL_GetTick>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	1ad3      	subs	r3, r2, r3
 8007b82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b86:	d905      	bls.n	8007b94 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007b88:	2303      	movs	r3, #3
 8007b8a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2203      	movs	r2, #3
 8007b90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d102      	bne.n	8007ba8 <RTC_EnterInitMode+0x5c>
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d1e7      	bne.n	8007b78 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007bc0:	4b1a      	ldr	r3, [pc, #104]	; (8007c2c <RTC_ExitInitMode+0x78>)
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	4a19      	ldr	r2, [pc, #100]	; (8007c2c <RTC_ExitInitMode+0x78>)
 8007bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bca:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007bcc:	4b17      	ldr	r3, [pc, #92]	; (8007c2c <RTC_ExitInitMode+0x78>)
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	f003 0320 	and.w	r3, r3, #32
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10c      	bne.n	8007bf2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7ff ff91 	bl	8007b00 <HAL_RTC_WaitForSynchro>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d01e      	beq.n	8007c22 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2203      	movs	r2, #3
 8007be8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	73fb      	strb	r3, [r7, #15]
 8007bf0:	e017      	b.n	8007c22 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007bf2:	4b0e      	ldr	r3, [pc, #56]	; (8007c2c <RTC_ExitInitMode+0x78>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	4a0d      	ldr	r2, [pc, #52]	; (8007c2c <RTC_ExitInitMode+0x78>)
 8007bf8:	f023 0320 	bic.w	r3, r3, #32
 8007bfc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7ff ff7e 	bl	8007b00 <HAL_RTC_WaitForSynchro>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d005      	beq.n	8007c16 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2203      	movs	r2, #3
 8007c0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007c16:	4b05      	ldr	r3, [pc, #20]	; (8007c2c <RTC_ExitInitMode+0x78>)
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	4a04      	ldr	r2, [pc, #16]	; (8007c2c <RTC_ExitInitMode+0x78>)
 8007c1c:	f043 0320 	orr.w	r3, r3, #32
 8007c20:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	40002800 	.word	0x40002800

08007c30 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	4603      	mov	r3, r0
 8007c38:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007c42:	e005      	b.n	8007c50 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	3301      	adds	r3, #1
 8007c48:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007c4a:	7afb      	ldrb	r3, [r7, #11]
 8007c4c:	3b0a      	subs	r3, #10
 8007c4e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007c50:	7afb      	ldrb	r3, [r7, #11]
 8007c52:	2b09      	cmp	r3, #9
 8007c54:	d8f6      	bhi.n	8007c44 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	011b      	lsls	r3, r3, #4
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	7afb      	ldrb	r3, [r7, #11]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	b2db      	uxtb	r3, r3
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3714      	adds	r7, #20
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	4603      	mov	r3, r0
 8007c78:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	091b      	lsrs	r3, r3, #4
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	461a      	mov	r2, r3
 8007c82:	0092      	lsls	r2, r2, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	005b      	lsls	r3, r3, #1
 8007c88:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007c8a:	79fb      	ldrb	r3, [r7, #7]
 8007c8c:	f003 030f 	and.w	r3, r3, #15
 8007c90:	b2da      	uxtb	r2, r3
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
 8007c94:	4413      	add	r3, r2
 8007c96:	b2db      	uxtb	r3, r3
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3714      	adds	r7, #20
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d101      	bne.n	8007cbe <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e07f      	b.n	8007dbe <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2202      	movs	r2, #2
 8007cca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	22ca      	movs	r2, #202	; 0xca
 8007cd4:	625a      	str	r2, [r3, #36]	; 0x24
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2253      	movs	r2, #83	; 0x53
 8007cdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	689a      	ldr	r2, [r3, #8]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cec:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007cfe:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d120      	bne.n	8007d50 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8007d0e:	f7fc fa6b 	bl	80041e8 <HAL_GetTick>
 8007d12:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8007d14:	e015      	b.n	8007d42 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d16:	f7fc fa67 	bl	80041e8 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d24:	d90d      	bls.n	8007d42 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	22ff      	movs	r2, #255	; 0xff
 8007d2c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2203      	movs	r2, #3
 8007d32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	e03d      	b.n	8007dbe <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f003 0304 	and.w	r3, r3, #4
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d0e2      	beq.n	8007d16 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f023 0107 	bic.w	r1, r3, #7
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007d6c:	4b16      	ldr	r3, [pc, #88]	; (8007dc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a15      	ldr	r2, [pc, #84]	; (8007dc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007d72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d76:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007d78:	4b13      	ldr	r3, [pc, #76]	; (8007dc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	4a12      	ldr	r2, [pc, #72]	; (8007dc8 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007d7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d82:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689a      	ldr	r2, [r3, #8]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d92:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	689a      	ldr	r2, [r3, #8]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007da2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	22ff      	movs	r2, #255	; 0xff
 8007daa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3718      	adds	r7, #24
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	40010400 	.word	0x40010400

08007dcc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8007dd4:	4b0f      	ldr	r3, [pc, #60]	; (8007e14 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8007dd6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007dda:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00b      	beq.n	8007e02 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007dfa:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7fb f98f 	bl	8003120 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8007e0a:	bf00      	nop
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	40010400 	.word	0x40010400

08007e18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e095      	b.n	8007f56 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d108      	bne.n	8007e44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e3a:	d009      	beq.n	8007e50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	61da      	str	r2, [r3, #28]
 8007e42:	e005      	b.n	8007e50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d106      	bne.n	8007e70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7fb fa50 	bl	8003310 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2202      	movs	r2, #2
 8007e74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e90:	d902      	bls.n	8007e98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007e92:	2300      	movs	r3, #0
 8007e94:	60fb      	str	r3, [r7, #12]
 8007e96:	e002      	b.n	8007e9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007ea6:	d007      	beq.n	8007eb8 <HAL_SPI_Init+0xa0>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007eb0:	d002      	beq.n	8007eb8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f003 0302 	and.w	r3, r3, #2
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	f003 0301 	and.w	r3, r3, #1
 8007edc:	431a      	orrs	r2, r3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efa:	ea42 0103 	orr.w	r1, r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f02:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	0c1b      	lsrs	r3, r3, #16
 8007f14:	f003 0204 	and.w	r2, r3, #4
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	f003 0310 	and.w	r3, r3, #16
 8007f20:	431a      	orrs	r2, r3
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f26:	f003 0308 	and.w	r3, r3, #8
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007f34:	ea42 0103 	orr.w	r1, r2, r3
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b088      	sub	sp, #32
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	603b      	str	r3, [r7, #0]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d101      	bne.n	8007f80 <HAL_SPI_Transmit+0x22>
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	e158      	b.n	8008232 <HAL_SPI_Transmit+0x2d4>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f88:	f7fc f92e 	bl	80041e8 <HAL_GetTick>
 8007f8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f8e:	88fb      	ldrh	r3, [r7, #6]
 8007f90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f98:	b2db      	uxtb	r3, r3
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d002      	beq.n	8007fa4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fa2:	e13d      	b.n	8008220 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d002      	beq.n	8007fb0 <HAL_SPI_Transmit+0x52>
 8007faa:	88fb      	ldrh	r3, [r7, #6]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d102      	bne.n	8007fb6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fb4:	e134      	b.n	8008220 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2203      	movs	r2, #3
 8007fba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	88fa      	ldrh	r2, [r7, #6]
 8007fce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	88fa      	ldrh	r2, [r7, #6]
 8007fd4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008000:	d10f      	bne.n	8008022 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008010:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008020:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802c:	2b40      	cmp	r3, #64	; 0x40
 800802e:	d007      	beq.n	8008040 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800803e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008048:	d94b      	bls.n	80080e2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d002      	beq.n	8008058 <HAL_SPI_Transmit+0xfa>
 8008052:	8afb      	ldrh	r3, [r7, #22]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d13e      	bne.n	80080d6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805c:	881a      	ldrh	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008068:	1c9a      	adds	r2, r3, #2
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008072:	b29b      	uxth	r3, r3
 8008074:	3b01      	subs	r3, #1
 8008076:	b29a      	uxth	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800807c:	e02b      	b.n	80080d6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	f003 0302 	and.w	r3, r3, #2
 8008088:	2b02      	cmp	r3, #2
 800808a:	d112      	bne.n	80080b2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008090:	881a      	ldrh	r2, [r3, #0]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809c:	1c9a      	adds	r2, r3, #2
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3b01      	subs	r3, #1
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080b0:	e011      	b.n	80080d6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080b2:	f7fc f899 	bl	80041e8 <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d803      	bhi.n	80080ca <HAL_SPI_Transmit+0x16c>
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c8:	d102      	bne.n	80080d0 <HAL_SPI_Transmit+0x172>
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d102      	bne.n	80080d6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080d4:	e0a4      	b.n	8008220 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080da:	b29b      	uxth	r3, r3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1ce      	bne.n	800807e <HAL_SPI_Transmit+0x120>
 80080e0:	e07c      	b.n	80081dc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <HAL_SPI_Transmit+0x192>
 80080ea:	8afb      	ldrh	r3, [r7, #22]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d170      	bne.n	80081d2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d912      	bls.n	8008120 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fe:	881a      	ldrh	r2, [r3, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810a:	1c9a      	adds	r2, r3, #2
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008114:	b29b      	uxth	r3, r3
 8008116:	3b02      	subs	r3, #2
 8008118:	b29a      	uxth	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800811e:	e058      	b.n	80081d2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	330c      	adds	r3, #12
 800812a:	7812      	ldrb	r2, [r2, #0]
 800812c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	1c5a      	adds	r2, r3, #1
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800813c:	b29b      	uxth	r3, r3
 800813e:	3b01      	subs	r3, #1
 8008140:	b29a      	uxth	r2, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008146:	e044      	b.n	80081d2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b02      	cmp	r3, #2
 8008154:	d12b      	bne.n	80081ae <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800815a:	b29b      	uxth	r3, r3
 800815c:	2b01      	cmp	r3, #1
 800815e:	d912      	bls.n	8008186 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008164:	881a      	ldrh	r2, [r3, #0]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008170:	1c9a      	adds	r2, r3, #2
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800817a:	b29b      	uxth	r3, r3
 800817c:	3b02      	subs	r3, #2
 800817e:	b29a      	uxth	r2, r3
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008184:	e025      	b.n	80081d2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	330c      	adds	r3, #12
 8008190:	7812      	ldrb	r2, [r2, #0]
 8008192:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	3b01      	subs	r3, #1
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081ac:	e011      	b.n	80081d2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081ae:	f7fc f81b 	bl	80041e8 <HAL_GetTick>
 80081b2:	4602      	mov	r2, r0
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d803      	bhi.n	80081c6 <HAL_SPI_Transmit+0x268>
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c4:	d102      	bne.n	80081cc <HAL_SPI_Transmit+0x26e>
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d102      	bne.n	80081d2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80081cc:	2303      	movs	r3, #3
 80081ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80081d0:	e026      	b.n	8008220 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1b5      	bne.n	8008148 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 fbe7 	bl	80089b4 <SPI_EndRxTxTransaction>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2220      	movs	r2, #32
 80081f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10a      	bne.n	8008210 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081fa:	2300      	movs	r3, #0
 80081fc:	613b      	str	r3, [r7, #16]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	613b      	str	r3, [r7, #16]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	613b      	str	r3, [r7, #16]
 800820e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008214:	2b00      	cmp	r3, #0
 8008216:	d002      	beq.n	800821e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008218:	2301      	movs	r3, #1
 800821a:	77fb      	strb	r3, [r7, #31]
 800821c:	e000      	b.n	8008220 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800821e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2201      	movs	r2, #1
 8008224:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008230:	7ffb      	ldrb	r3, [r7, #31]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3720      	adds	r7, #32
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
	...

0800823c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	4613      	mov	r3, r2
 8008248:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008254:	2b01      	cmp	r3, #1
 8008256:	d101      	bne.n	800825c <HAL_SPI_Transmit_DMA+0x20>
 8008258:	2302      	movs	r3, #2
 800825a:	e0d8      	b.n	800840e <HAL_SPI_Transmit_DMA+0x1d2>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b01      	cmp	r3, #1
 800826e:	d002      	beq.n	8008276 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008270:	2302      	movs	r3, #2
 8008272:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008274:	e0c6      	b.n	8008404 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d002      	beq.n	8008282 <HAL_SPI_Transmit_DMA+0x46>
 800827c:	88fb      	ldrh	r3, [r7, #6]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d102      	bne.n	8008288 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008286:	e0bd      	b.n	8008404 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2203      	movs	r2, #3
 800828c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2200      	movs	r2, #0
 8008294:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	88fa      	ldrh	r2, [r7, #6]
 80082a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	88fa      	ldrh	r2, [r7, #6]
 80082a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	2200      	movs	r2, #0
 80082ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2200      	movs	r2, #0
 80082be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082d2:	d10f      	bne.n	80082f4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f8:	4a47      	ldr	r2, [pc, #284]	; (8008418 <HAL_SPI_Transmit_DMA+0x1dc>)
 80082fa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008300:	4a46      	ldr	r2, [pc, #280]	; (800841c <HAL_SPI_Transmit_DMA+0x1e0>)
 8008302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008308:	4a45      	ldr	r2, [pc, #276]	; (8008420 <HAL_SPI_Transmit_DMA+0x1e4>)
 800830a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008310:	2200      	movs	r2, #0
 8008312:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008322:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800832c:	d82d      	bhi.n	800838a <HAL_SPI_Transmit_DMA+0x14e>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008332:	699b      	ldr	r3, [r3, #24]
 8008334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008338:	d127      	bne.n	800838a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800833e:	b29b      	uxth	r3, r3
 8008340:	f003 0301 	and.w	r3, r3, #1
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10f      	bne.n	8008368 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	685a      	ldr	r2, [r3, #4]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008356:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800835c:	b29b      	uxth	r3, r3
 800835e:	085b      	lsrs	r3, r3, #1
 8008360:	b29a      	uxth	r2, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008366:	e010      	b.n	800838a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	685a      	ldr	r2, [r3, #4]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008376:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800837c:	b29b      	uxth	r3, r3
 800837e:	085b      	lsrs	r3, r3, #1
 8008380:	b29b      	uxth	r3, r3
 8008382:	3301      	adds	r3, #1
 8008384:	b29a      	uxth	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008392:	4619      	mov	r1, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	330c      	adds	r3, #12
 800839a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083a0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80083a2:	f7fd fc11 	bl	8005bc8 <HAL_DMA_Start_IT>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00c      	beq.n	80083c6 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083b0:	f043 0210 	orr.w	r2, r3, #16
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80083c4:	e01e      	b.n	8008404 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d0:	2b40      	cmp	r3, #64	; 0x40
 80083d2:	d007      	beq.n	80083e4 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083e2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685a      	ldr	r2, [r3, #4]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f042 0220 	orr.w	r2, r2, #32
 80083f2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	685a      	ldr	r2, [r3, #4]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f042 0202 	orr.w	r2, r2, #2
 8008402:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2200      	movs	r2, #0
 8008408:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800840c:	7dfb      	ldrb	r3, [r7, #23]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	080086f3 	.word	0x080086f3
 800841c:	0800864d 	.word	0x0800864d
 8008420:	0800870f 	.word	0x0800870f

08008424 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b088      	sub	sp, #32
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	099b      	lsrs	r3, r3, #6
 8008440:	f003 0301 	and.w	r3, r3, #1
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10f      	bne.n	8008468 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00a      	beq.n	8008468 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	099b      	lsrs	r3, r3, #6
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d004      	beq.n	8008468 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	4798      	blx	r3
    return;
 8008466:	e0d7      	b.n	8008618 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	085b      	lsrs	r3, r3, #1
 800846c:	f003 0301 	and.w	r3, r3, #1
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00a      	beq.n	800848a <HAL_SPI_IRQHandler+0x66>
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	09db      	lsrs	r3, r3, #7
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	2b00      	cmp	r3, #0
 800847e:	d004      	beq.n	800848a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	4798      	blx	r3
    return;
 8008488:	e0c6      	b.n	8008618 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	095b      	lsrs	r3, r3, #5
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d10c      	bne.n	80084b0 <HAL_SPI_IRQHandler+0x8c>
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	099b      	lsrs	r3, r3, #6
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d106      	bne.n	80084b0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	0a1b      	lsrs	r3, r3, #8
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f000 80b4 	beq.w	8008618 <HAL_SPI_IRQHandler+0x1f4>
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	095b      	lsrs	r3, r3, #5
 80084b4:	f003 0301 	and.w	r3, r3, #1
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	f000 80ad 	beq.w	8008618 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80084be:	69bb      	ldr	r3, [r7, #24]
 80084c0:	099b      	lsrs	r3, r3, #6
 80084c2:	f003 0301 	and.w	r3, r3, #1
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d023      	beq.n	8008512 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d011      	beq.n	80084fa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084da:	f043 0204 	orr.w	r2, r3, #4
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084e2:	2300      	movs	r3, #0
 80084e4:	617b      	str	r3, [r7, #20]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68db      	ldr	r3, [r3, #12]
 80084ec:	617b      	str	r3, [r7, #20]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	617b      	str	r3, [r7, #20]
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	e00b      	b.n	8008512 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084fa:	2300      	movs	r3, #0
 80084fc:	613b      	str	r3, [r7, #16]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	613b      	str	r3, [r7, #16]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	613b      	str	r3, [r7, #16]
 800850e:	693b      	ldr	r3, [r7, #16]
        return;
 8008510:	e082      	b.n	8008618 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	095b      	lsrs	r3, r3, #5
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	2b00      	cmp	r3, #0
 800851c:	d014      	beq.n	8008548 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008522:	f043 0201 	orr.w	r2, r3, #1
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800852a:	2300      	movs	r3, #0
 800852c:	60fb      	str	r3, [r7, #12]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	60fb      	str	r3, [r7, #12]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008544:	601a      	str	r2, [r3, #0]
 8008546:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	0a1b      	lsrs	r3, r3, #8
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00c      	beq.n	800856e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008558:	f043 0208 	orr.w	r2, r3, #8
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008560:	2300      	movs	r3, #0
 8008562:	60bb      	str	r3, [r7, #8]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	60bb      	str	r3, [r7, #8]
 800856c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008572:	2b00      	cmp	r3, #0
 8008574:	d04f      	beq.n	8008616 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008584:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	f003 0302 	and.w	r3, r3, #2
 8008594:	2b00      	cmp	r3, #0
 8008596:	d104      	bne.n	80085a2 <HAL_SPI_IRQHandler+0x17e>
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d034      	beq.n	800860c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	685a      	ldr	r2, [r3, #4]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f022 0203 	bic.w	r2, r2, #3
 80085b0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d011      	beq.n	80085de <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085be:	4a18      	ldr	r2, [pc, #96]	; (8008620 <HAL_SPI_IRQHandler+0x1fc>)
 80085c0:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fd fb9c 	bl	8005d04 <HAL_DMA_Abort_IT>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d005      	beq.n	80085de <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d016      	beq.n	8008614 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ea:	4a0d      	ldr	r2, [pc, #52]	; (8008620 <HAL_SPI_IRQHandler+0x1fc>)
 80085ec:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fd fb86 	bl	8005d04 <HAL_DMA_Abort_IT>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00a      	beq.n	8008614 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008602:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800860a:	e003      	b.n	8008614 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f813 	bl	8008638 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008612:	e000      	b.n	8008616 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008614:	bf00      	nop
    return;
 8008616:	bf00      	nop
  }
}
 8008618:	3720      	adds	r7, #32
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	0800874f 	.word	0x0800874f

08008624 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b086      	sub	sp, #24
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008658:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800865a:	f7fb fdc5 	bl	80041e8 <HAL_GetTick>
 800865e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 0320 	and.w	r3, r3, #32
 800866a:	2b20      	cmp	r3, #32
 800866c:	d03b      	beq.n	80086e6 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	685a      	ldr	r2, [r3, #4]
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 0220 	bic.w	r2, r2, #32
 800867c:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f022 0202 	bic.w	r2, r2, #2
 800868c:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800868e:	693a      	ldr	r2, [r7, #16]
 8008690:	2164      	movs	r1, #100	; 0x64
 8008692:	6978      	ldr	r0, [r7, #20]
 8008694:	f000 f98e 	bl	80089b4 <SPI_EndRxTxTransaction>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d005      	beq.n	80086aa <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086a2:	f043 0220 	orr.w	r2, r3, #32
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10a      	bne.n	80086c8 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086b2:	2300      	movs	r3, #0
 80086b4:	60fb      	str	r3, [r7, #12]
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	60fb      	str	r3, [r7, #12]
 80086c6:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2200      	movs	r2, #0
 80086cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	2201      	movs	r2, #1
 80086d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d003      	beq.n	80086e6 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80086de:	6978      	ldr	r0, [r7, #20]
 80086e0:	f7ff ffaa 	bl	8008638 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80086e4:	e002      	b.n	80086ec <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80086e6:	6978      	ldr	r0, [r7, #20]
 80086e8:	f001 fa2c 	bl	8009b44 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086ec:	3718      	adds	r7, #24
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fe:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f7ff ff8f 	bl	8008624 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008706:	bf00      	nop
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b084      	sub	sp, #16
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871a:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f022 0203 	bic.w	r2, r2, #3
 800872a:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008730:	f043 0210 	orr.w	r2, r3, #16
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f7ff ff79 	bl	8008638 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008746:	bf00      	nop
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b084      	sub	sp, #16
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800876a:	68f8      	ldr	r0, [r7, #12]
 800876c:	f7ff ff64 	bl	8008638 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008770:	bf00      	nop
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b088      	sub	sp, #32
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	603b      	str	r3, [r7, #0]
 8008784:	4613      	mov	r3, r2
 8008786:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008788:	f7fb fd2e 	bl	80041e8 <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008790:	1a9b      	subs	r3, r3, r2
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	4413      	add	r3, r2
 8008796:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008798:	f7fb fd26 	bl	80041e8 <HAL_GetTick>
 800879c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800879e:	4b39      	ldr	r3, [pc, #228]	; (8008884 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	015b      	lsls	r3, r3, #5
 80087a4:	0d1b      	lsrs	r3, r3, #20
 80087a6:	69fa      	ldr	r2, [r7, #28]
 80087a8:	fb02 f303 	mul.w	r3, r2, r3
 80087ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087ae:	e054      	b.n	800885a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087b6:	d050      	beq.n	800885a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80087b8:	f7fb fd16 	bl	80041e8 <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	69fa      	ldr	r2, [r7, #28]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d902      	bls.n	80087ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d13d      	bne.n	800884a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80087dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087e6:	d111      	bne.n	800880c <SPI_WaitFlagStateUntilTimeout+0x94>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087f0:	d004      	beq.n	80087fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087fa:	d107      	bne.n	800880c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800880a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008814:	d10f      	bne.n	8008836 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008834:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008846:	2303      	movs	r3, #3
 8008848:	e017      	b.n	800887a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	3b01      	subs	r3, #1
 8008858:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	4013      	ands	r3, r2
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	429a      	cmp	r2, r3
 8008868:	bf0c      	ite	eq
 800886a:	2301      	moveq	r3, #1
 800886c:	2300      	movne	r3, #0
 800886e:	b2db      	uxtb	r3, r3
 8008870:	461a      	mov	r2, r3
 8008872:	79fb      	ldrb	r3, [r7, #7]
 8008874:	429a      	cmp	r2, r3
 8008876:	d19b      	bne.n	80087b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3720      	adds	r7, #32
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	20000000 	.word	0x20000000

08008888 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b08a      	sub	sp, #40	; 0x28
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
 8008894:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8008896:	2300      	movs	r3, #0
 8008898:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800889a:	f7fb fca5 	bl	80041e8 <HAL_GetTick>
 800889e:	4602      	mov	r2, r0
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	1a9b      	subs	r3, r3, r2
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	4413      	add	r3, r2
 80088a8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80088aa:	f7fb fc9d 	bl	80041e8 <HAL_GetTick>
 80088ae:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	330c      	adds	r3, #12
 80088b6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80088b8:	4b3d      	ldr	r3, [pc, #244]	; (80089b0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	4613      	mov	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	00da      	lsls	r2, r3, #3
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	0d1b      	lsrs	r3, r3, #20
 80088c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ca:	fb02 f303 	mul.w	r3, r2, r3
 80088ce:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80088d0:	e060      	b.n	8008994 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80088d8:	d107      	bne.n	80088ea <SPI_WaitFifoStateUntilTimeout+0x62>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d104      	bne.n	80088ea <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088f0:	d050      	beq.n	8008994 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80088f2:	f7fb fc79 	bl	80041e8 <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	6a3b      	ldr	r3, [r7, #32]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088fe:	429a      	cmp	r2, r3
 8008900:	d902      	bls.n	8008908 <SPI_WaitFifoStateUntilTimeout+0x80>
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	2b00      	cmp	r3, #0
 8008906:	d13d      	bne.n	8008984 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008916:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008920:	d111      	bne.n	8008946 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	689b      	ldr	r3, [r3, #8]
 8008926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800892a:	d004      	beq.n	8008936 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008934:	d107      	bne.n	8008946 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008944:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800894e:	d10f      	bne.n	8008970 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800895e:	601a      	str	r2, [r3, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	681a      	ldr	r2, [r3, #0]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800896e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e010      	b.n	80089a6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800898a:	2300      	movs	r3, #0
 800898c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	3b01      	subs	r3, #1
 8008992:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689a      	ldr	r2, [r3, #8]
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	4013      	ands	r3, r2
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d196      	bne.n	80088d2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80089a4:	2300      	movs	r3, #0
}
 80089a6:	4618      	mov	r0, r3
 80089a8:	3728      	adds	r7, #40	; 0x28
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20000000 	.word	0x20000000

080089b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b086      	sub	sp, #24
 80089b8:	af02      	add	r7, sp, #8
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f7ff ff5b 	bl	8008888 <SPI_WaitFifoStateUntilTimeout>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d007      	beq.n	80089e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089dc:	f043 0220 	orr.w	r2, r3, #32
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e027      	b.n	8008a38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2200      	movs	r2, #0
 80089f0:	2180      	movs	r1, #128	; 0x80
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f7ff fec0 	bl	8008778 <SPI_WaitFlagStateUntilTimeout>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d007      	beq.n	8008a0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a02:	f043 0220 	orr.w	r2, r3, #32
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e014      	b.n	8008a38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f7ff ff34 	bl	8008888 <SPI_WaitFifoStateUntilTimeout>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d007      	beq.n	8008a36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a2a:	f043 0220 	orr.w	r2, r3, #32
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e000      	b.n	8008a38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3710      	adds	r7, #16
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b08b      	sub	sp, #44	; 0x2c
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	60b9      	str	r1, [r7, #8]
 8008a4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	fa93 f3a3 	rbit	r3, r3
 8008a5a:	613b      	str	r3, [r7, #16]
  return result;
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008a60:	69bb      	ldr	r3, [r7, #24]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008a66:	2320      	movs	r3, #32
 8008a68:	e003      	b.n	8008a72 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	fab3 f383 	clz	r3, r3
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	005b      	lsls	r3, r3, #1
 8008a74:	2103      	movs	r1, #3
 8008a76:	fa01 f303 	lsl.w	r3, r1, r3
 8008a7a:	43db      	mvns	r3, r3
 8008a7c:	401a      	ands	r2, r3
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	fa93 f3a3 	rbit	r3, r3
 8008a88:	61fb      	str	r3, [r7, #28]
  return result;
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d101      	bne.n	8008a98 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008a94:	2320      	movs	r3, #32
 8008a96:	e003      	b.n	8008aa0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a9a:	fab3 f383 	clz	r3, r3
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	005b      	lsls	r3, r3, #1
 8008aa2:	6879      	ldr	r1, [r7, #4]
 8008aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa8:	431a      	orrs	r2, r3
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	601a      	str	r2, [r3, #0]
}
 8008aae:	bf00      	nop
 8008ab0:	372c      	adds	r7, #44	; 0x2c
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b085      	sub	sp, #20
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	60f8      	str	r0, [r7, #12]
 8008ac2:	60b9      	str	r1, [r7, #8]
 8008ac4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	43db      	mvns	r3, r3
 8008ace:	401a      	ands	r2, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	fb01 f303 	mul.w	r3, r1, r3
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	605a      	str	r2, [r3, #4]
}
 8008ade:	bf00      	nop
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b08b      	sub	sp, #44	; 0x2c
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	60f8      	str	r0, [r7, #12]
 8008af2:	60b9      	str	r1, [r7, #8]
 8008af4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	689a      	ldr	r2, [r3, #8]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	fa93 f3a3 	rbit	r3, r3
 8008b04:	613b      	str	r3, [r7, #16]
  return result;
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008b10:	2320      	movs	r3, #32
 8008b12:	e003      	b.n	8008b1c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	fab3 f383 	clz	r3, r3
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	005b      	lsls	r3, r3, #1
 8008b1e:	2103      	movs	r1, #3
 8008b20:	fa01 f303 	lsl.w	r3, r1, r3
 8008b24:	43db      	mvns	r3, r3
 8008b26:	401a      	ands	r2, r3
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b2c:	6a3b      	ldr	r3, [r7, #32]
 8008b2e:	fa93 f3a3 	rbit	r3, r3
 8008b32:	61fb      	str	r3, [r7, #28]
  return result;
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008b3e:	2320      	movs	r3, #32
 8008b40:	e003      	b.n	8008b4a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b44:	fab3 f383 	clz	r3, r3
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	005b      	lsls	r3, r3, #1
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b52:	431a      	orrs	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008b58:	bf00      	nop
 8008b5a:	372c      	adds	r7, #44	; 0x2c
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b08b      	sub	sp, #44	; 0x2c
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	68da      	ldr	r2, [r3, #12]
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	fa93 f3a3 	rbit	r3, r3
 8008b7e:	613b      	str	r3, [r7, #16]
  return result;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d101      	bne.n	8008b8e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008b8a:	2320      	movs	r3, #32
 8008b8c:	e003      	b.n	8008b96 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	fab3 f383 	clz	r3, r3
 8008b94:	b2db      	uxtb	r3, r3
 8008b96:	005b      	lsls	r3, r3, #1
 8008b98:	2103      	movs	r1, #3
 8008b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b9e:	43db      	mvns	r3, r3
 8008ba0:	401a      	ands	r2, r3
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ba6:	6a3b      	ldr	r3, [r7, #32]
 8008ba8:	fa93 f3a3 	rbit	r3, r3
 8008bac:	61fb      	str	r3, [r7, #28]
  return result;
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008bb8:	2320      	movs	r3, #32
 8008bba:	e003      	b.n	8008bc4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bbe:	fab3 f383 	clz	r3, r3
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	005b      	lsls	r3, r3, #1
 8008bc6:	6879      	ldr	r1, [r7, #4]
 8008bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bcc:	431a      	orrs	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	60da      	str	r2, [r3, #12]
}
 8008bd2:	bf00      	nop
 8008bd4:	372c      	adds	r7, #44	; 0x2c
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b08b      	sub	sp, #44	; 0x2c
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	60f8      	str	r0, [r7, #12]
 8008be6:	60b9      	str	r1, [r7, #8]
 8008be8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6a1a      	ldr	r2, [r3, #32]
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	fa93 f3a3 	rbit	r3, r3
 8008bf8:	613b      	str	r3, [r7, #16]
  return result;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d101      	bne.n	8008c08 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008c04:	2320      	movs	r3, #32
 8008c06:	e003      	b.n	8008c10 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	fab3 f383 	clz	r3, r3
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	210f      	movs	r1, #15
 8008c14:	fa01 f303 	lsl.w	r3, r1, r3
 8008c18:	43db      	mvns	r3, r3
 8008c1a:	401a      	ands	r2, r3
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	fa93 f3a3 	rbit	r3, r3
 8008c26:	61fb      	str	r3, [r7, #28]
  return result;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008c32:	2320      	movs	r3, #32
 8008c34:	e003      	b.n	8008c3e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	fab3 f383 	clz	r3, r3
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	6879      	ldr	r1, [r7, #4]
 8008c42:	fa01 f303 	lsl.w	r3, r1, r3
 8008c46:	431a      	orrs	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008c4c:	bf00      	nop
 8008c4e:	372c      	adds	r7, #44	; 0x2c
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b08b      	sub	sp, #44	; 0x2c
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	0a1b      	lsrs	r3, r3, #8
 8008c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	fa93 f3a3 	rbit	r3, r3
 8008c74:	613b      	str	r3, [r7, #16]
  return result;
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d101      	bne.n	8008c84 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008c80:	2320      	movs	r3, #32
 8008c82:	e003      	b.n	8008c8c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	fab3 f383 	clz	r3, r3
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	210f      	movs	r1, #15
 8008c90:	fa01 f303 	lsl.w	r3, r1, r3
 8008c94:	43db      	mvns	r3, r3
 8008c96:	401a      	ands	r2, r3
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	0a1b      	lsrs	r3, r3, #8
 8008c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	fa93 f3a3 	rbit	r3, r3
 8008ca4:	61fb      	str	r3, [r7, #28]
  return result;
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d101      	bne.n	8008cb4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008cb0:	2320      	movs	r3, #32
 8008cb2:	e003      	b.n	8008cbc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	fab3 f383 	clz	r3, r3
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	6879      	ldr	r1, [r7, #4]
 8008cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8008cca:	bf00      	nop
 8008ccc:	372c      	adds	r7, #44	; 0x2c
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b088      	sub	sp, #32
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	fa93 f3a3 	rbit	r3, r3
 8008cec:	60fb      	str	r3, [r7, #12]
  return result;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d101      	bne.n	8008cfc <LL_GPIO_Init+0x26>
    return 32U;
 8008cf8:	2320      	movs	r3, #32
 8008cfa:	e003      	b.n	8008d04 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	fab3 f383 	clz	r3, r3
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8008d06:	e048      	b.n	8008d9a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	2101      	movs	r1, #1
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	fa01 f303 	lsl.w	r3, r1, r3
 8008d14:	4013      	ands	r3, r2
 8008d16:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8008d18:	69bb      	ldr	r3, [r7, #24]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d03a      	beq.n	8008d94 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d003      	beq.n	8008d2e <LL_GPIO_Init+0x58>
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d10e      	bne.n	8008d4c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	461a      	mov	r2, r3
 8008d34:	69b9      	ldr	r1, [r7, #24]
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7ff fed7 	bl	8008aea <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	6819      	ldr	r1, [r3, #0]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	461a      	mov	r2, r3
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f7ff feb7 	bl	8008aba <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	461a      	mov	r2, r3
 8008d52:	69b9      	ldr	r1, [r7, #24]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7ff ff05 	bl	8008b64 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d111      	bne.n	8008d86 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	2bff      	cmp	r3, #255	; 0xff
 8008d66:	d807      	bhi.n	8008d78 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	695b      	ldr	r3, [r3, #20]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	69b9      	ldr	r1, [r7, #24]
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f7ff ff34 	bl	8008bde <LL_GPIO_SetAFPin_0_7>
 8008d76:	e006      	b.n	8008d86 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	69b9      	ldr	r1, [r7, #24]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7ff ff69 	bl	8008c58 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	69b9      	ldr	r1, [r7, #24]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7ff fe56 	bl	8008a40 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	3301      	adds	r3, #1
 8008d98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	fa22 f303 	lsr.w	r3, r2, r3
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1af      	bne.n	8008d08 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3720      	adds	r7, #32
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <LL_LPUART_IsEnabled>:
{
 8008db2:	b480      	push	{r7}
 8008db4:	b083      	sub	sp, #12
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d101      	bne.n	8008dca <LL_LPUART_IsEnabled+0x18>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e000      	b.n	8008dcc <LL_LPUART_IsEnabled+0x1a>
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <LL_LPUART_SetStopBitsLength>:
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
 8008de0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	431a      	orrs	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	605a      	str	r2, [r3, #4]
}
 8008df2:	bf00      	nop
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <LL_LPUART_SetHWFlowCtrl>:
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b083      	sub	sp, #12
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	431a      	orrs	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	609a      	str	r2, [r3, #8]
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr

08008e24 <LL_LPUART_SetBaudRate>:
{
 8008e24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e28:	b086      	sub	sp, #24
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6178      	str	r0, [r7, #20]
 8008e2e:	6139      	str	r1, [r7, #16]
 8008e30:	60fa      	str	r2, [r7, #12]
  if (BaudRate != 0U)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d025      	beq.n	8008e84 <LL_LPUART_SetBaudRate+0x60>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, BaudRate);
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	461c      	mov	r4, r3
 8008e3e:	4615      	mov	r5, r2
 8008e40:	f04f 0200 	mov.w	r2, #0
 8008e44:	f04f 0300 	mov.w	r3, #0
 8008e48:	022b      	lsls	r3, r5, #8
 8008e4a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008e4e:	0222      	lsls	r2, r4, #8
 8008e50:	68f9      	ldr	r1, [r7, #12]
 8008e52:	0849      	lsrs	r1, r1, #1
 8008e54:	2000      	movs	r0, #0
 8008e56:	4688      	mov	r8, r1
 8008e58:	4681      	mov	r9, r0
 8008e5a:	eb12 0a08 	adds.w	sl, r2, r8
 8008e5e:	eb43 0b09 	adc.w	fp, r3, r9
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	603b      	str	r3, [r7, #0]
 8008e68:	607a      	str	r2, [r7, #4]
 8008e6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e6e:	4650      	mov	r0, sl
 8008e70:	4659      	mov	r1, fp
 8008e72:	f7f7 fee9 	bl	8000c48 <__aeabi_uldivmod>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	60da      	str	r2, [r3, #12]
}
 8008e84:	bf00      	nop
 8008e86:	3718      	adds	r7, #24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08008e90 <LL_APB1_GRP2_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_ForceReset(uint32_t Periphs)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b083      	sub	sp, #12
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8008e98:	4b05      	ldr	r3, [pc, #20]	; (8008eb0 <LL_APB1_GRP2_ForceReset+0x20>)
 8008e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e9c:	4904      	ldr	r1, [pc, #16]	; (8008eb0 <LL_APB1_GRP2_ForceReset+0x20>)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8008ea4:	bf00      	nop
 8008ea6:	370c      	adds	r7, #12
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr
 8008eb0:	40021000 	.word	0x40021000

08008eb4 <LL_APB1_GRP2_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_ReleaseReset(uint32_t Periphs)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b083      	sub	sp, #12
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8008ebc:	4b06      	ldr	r3, [pc, #24]	; (8008ed8 <LL_APB1_GRP2_ReleaseReset+0x24>)
 8008ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	43db      	mvns	r3, r3
 8008ec4:	4904      	ldr	r1, [pc, #16]	; (8008ed8 <LL_APB1_GRP2_ReleaseReset+0x24>)
 8008ec6:	4013      	ands	r3, r2
 8008ec8:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8008eca:	bf00      	nop
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	40021000 	.word	0x40021000

08008edc <LL_LPUART_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_LPUART_DeInit(const USART_TypeDef *LPUARTx)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LPUART_INSTANCE(LPUARTx));

  if (LPUARTx == LPUART1)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a08      	ldr	r2, [pc, #32]	; (8008f0c <LL_LPUART_DeInit+0x30>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d106      	bne.n	8008efe <LL_LPUART_DeInit+0x22>
  {
    /* Force reset of LPUART peripheral */
    LL_APB1_GRP2_ForceReset(LL_APB1_GRP2_PERIPH_LPUART1);
 8008ef0:	2001      	movs	r0, #1
 8008ef2:	f7ff ffcd 	bl	8008e90 <LL_APB1_GRP2_ForceReset>

    /* Release reset of LPUART peripheral */
    LL_APB1_GRP2_ReleaseReset(LL_APB1_GRP2_PERIPH_LPUART1);
 8008ef6:	2001      	movs	r0, #1
 8008ef8:	f7ff ffdc 	bl	8008eb4 <LL_APB1_GRP2_ReleaseReset>
 8008efc:	e001      	b.n	8008f02 <LL_LPUART_DeInit+0x26>
  }
  else
  {
    status = ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3710      	adds	r7, #16
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	40008000 	.word	0x40008000

08008f10 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f7ff ff47 	bl	8008db2 <LL_LPUART_IsEnabled>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d12f      	bne.n	8008f8a <LL_LPUART_Init+0x7a>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	4b19      	ldr	r3, [pc, #100]	; (8008f94 <LL_LPUART_Init+0x84>)
 8008f30:	4013      	ands	r3, r2
 8008f32:	683a      	ldr	r2, [r7, #0]
 8008f34:	6851      	ldr	r1, [r2, #4]
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	68d2      	ldr	r2, [r2, #12]
 8008f3a:	4311      	orrs	r1, r2
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	6912      	ldr	r2, [r2, #16]
 8008f40:	430a      	orrs	r2, r1
 8008f42:	431a      	orrs	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7ff ff42 	bl	8008dd8 <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f7ff ff4f 	bl	8008dfe <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8008f60:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008f64:	f000 f8e2 	bl	800912c <LL_RCC_GetLPUARTClockFreq>
 8008f68:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00c      	beq.n	8008f8a <LL_LPUART_Init+0x7a>
        && (LPUART_InitStruct->BaudRate != 0U))
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d008      	beq.n	8008f8a <LL_LPUART_Init+0x7a>
    {
      status = SUCCESS;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	461a      	mov	r2, r3
 8008f82:	68b9      	ldr	r1, [r7, #8]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff ff4d 	bl	8008e24 <LL_LPUART_SetBaudRate>
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }

  return (status);
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	efffe9f3 	.word	0xefffe9f3

08008f98 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8008f9c:	4b07      	ldr	r3, [pc, #28]	; (8008fbc <LL_RCC_HSI_IsReady+0x24>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fa8:	d101      	bne.n	8008fae <LL_RCC_HSI_IsReady+0x16>
 8008faa:	2301      	movs	r3, #1
 8008fac:	e000      	b.n	8008fb0 <LL_RCC_HSI_IsReady+0x18>
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	40021000 	.word	0x40021000

08008fc0 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8008fc4:	4b07      	ldr	r3, [pc, #28]	; (8008fe4 <LL_RCC_LSE_IsReady+0x24>)
 8008fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fca:	f003 0302 	and.w	r3, r3, #2
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d101      	bne.n	8008fd6 <LL_RCC_LSE_IsReady+0x16>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e000      	b.n	8008fd8 <LL_RCC_LSE_IsReady+0x18>
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	40021000 	.word	0x40021000

08008fe8 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8008fec:	4b06      	ldr	r3, [pc, #24]	; (8009008 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0308 	and.w	r3, r3, #8
 8008ff4:	2b08      	cmp	r3, #8
 8008ff6:	d101      	bne.n	8008ffc <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	e000      	b.n	8008ffe <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr
 8009008:	40021000 	.word	0x40021000

0800900c <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800900c:	b480      	push	{r7}
 800900e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8009010:	4b04      	ldr	r3, [pc, #16]	; (8009024 <LL_RCC_MSI_GetRange+0x18>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009018:	4618      	mov	r0, r3
 800901a:	46bd      	mov	sp, r7
 800901c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009020:	4770      	bx	lr
 8009022:	bf00      	nop
 8009024:	40021000 	.word	0x40021000

08009028 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8009028:	b480      	push	{r7}
 800902a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800902c:	4b04      	ldr	r3, [pc, #16]	; (8009040 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800902e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009032:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8009036:	4618      	mov	r0, r3
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr
 8009040:	40021000 	.word	0x40021000

08009044 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8009044:	b480      	push	{r7}
 8009046:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009048:	4b04      	ldr	r3, [pc, #16]	; (800905c <LL_RCC_GetSysClkSource+0x18>)
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	f003 030c 	and.w	r3, r3, #12
}
 8009050:	4618      	mov	r0, r3
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop
 800905c:	40021000 	.word	0x40021000

08009060 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8009060:	b480      	push	{r7}
 8009062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009064:	4b04      	ldr	r3, [pc, #16]	; (8009078 <LL_RCC_GetAHBPrescaler+0x18>)
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800906c:	4618      	mov	r0, r3
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	40021000 	.word	0x40021000

0800907c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800907c:	b480      	push	{r7}
 800907e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009080:	4b04      	ldr	r3, [pc, #16]	; (8009094 <LL_RCC_GetAPB1Prescaler+0x18>)
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8009088:	4618      	mov	r0, r3
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	40021000 	.word	0x40021000

08009098 <LL_RCC_GetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80090a0:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <LL_RCC_GetLPUARTClockSource+0x20>)
 80090a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4013      	ands	r3, r2
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	40021000 	.word	0x40021000

080090bc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80090bc:	b480      	push	{r7}
 80090be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80090c0:	4b04      	ldr	r3, [pc, #16]	; (80090d4 <LL_RCC_PLL_GetMainSource+0x18>)
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	f003 0303 	and.w	r3, r3, #3
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	40021000 	.word	0x40021000

080090d8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80090d8:	b480      	push	{r7}
 80090da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80090dc:	4b04      	ldr	r3, [pc, #16]	; (80090f0 <LL_RCC_PLL_GetN+0x18>)
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	0a1b      	lsrs	r3, r3, #8
 80090e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	40021000 	.word	0x40021000

080090f4 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80090f4:	b480      	push	{r7}
 80090f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80090f8:	4b04      	ldr	r3, [pc, #16]	; (800910c <LL_RCC_PLL_GetR+0x18>)
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8009100:	4618      	mov	r0, r3
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	40021000 	.word	0x40021000

08009110 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009114:	4b04      	ldr	r3, [pc, #16]	; (8009128 <LL_RCC_PLL_GetDivider+0x18>)
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800911c:	4618      	mov	r0, r3
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	40021000 	.word	0x40021000

0800912c <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8009134:	2300      	movs	r3, #0
 8009136:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff ffad 	bl	8009098 <LL_RCC_GetLPUARTClockSource>
 800913e:	4603      	mov	r3, r0
 8009140:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009144:	d019      	beq.n	800917a <LL_RCC_GetLPUARTClockFreq+0x4e>
 8009146:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800914a:	d82b      	bhi.n	80091a4 <LL_RCC_GetLPUARTClockFreq+0x78>
 800914c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009150:	d00b      	beq.n	800916a <LL_RCC_GetLPUARTClockFreq+0x3e>
 8009152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009156:	d825      	bhi.n	80091a4 <LL_RCC_GetLPUARTClockFreq+0x78>
 8009158:	2b00      	cmp	r3, #0
 800915a:	d017      	beq.n	800918c <LL_RCC_GetLPUARTClockFreq+0x60>
 800915c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009160:	d120      	bne.n	80091a4 <LL_RCC_GetLPUARTClockFreq+0x78>
  {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      lpuart_frequency = RCC_GetSystemClockFreq();
 8009162:	f000 f82b 	bl	80091bc <RCC_GetSystemClockFreq>
 8009166:	60f8      	str	r0, [r7, #12]
      break;
 8009168:	e021      	b.n	80091ae <LL_RCC_GetLPUARTClockFreq+0x82>

    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() != 0U)
 800916a:	f7ff ff15 	bl	8008f98 <LL_RCC_HSI_IsReady>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d019      	beq.n	80091a8 <LL_RCC_GetLPUARTClockFreq+0x7c>
      {
        lpuart_frequency = HSI_VALUE;
 8009174:	4b10      	ldr	r3, [pc, #64]	; (80091b8 <LL_RCC_GetLPUARTClockFreq+0x8c>)
 8009176:	60fb      	str	r3, [r7, #12]
      }
      break;
 8009178:	e016      	b.n	80091a8 <LL_RCC_GetLPUARTClockFreq+0x7c>

    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() != 0U)
 800917a:	f7ff ff21 	bl	8008fc0 <LL_RCC_LSE_IsReady>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d013      	beq.n	80091ac <LL_RCC_GetLPUARTClockFreq+0x80>
      {
        lpuart_frequency = LSE_VALUE;
 8009184:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009188:	60fb      	str	r3, [r7, #12]
      }
      break;
 800918a:	e00f      	b.n	80091ac <LL_RCC_GetLPUARTClockFreq+0x80>

    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800918c:	f000 f816 	bl	80091bc <RCC_GetSystemClockFreq>
 8009190:	4603      	mov	r3, r0
 8009192:	4618      	mov	r0, r3
 8009194:	f000 f8a2 	bl	80092dc <RCC_GetHCLKClockFreq>
 8009198:	4603      	mov	r3, r0
 800919a:	4618      	mov	r0, r3
 800919c:	f000 f8b4 	bl	8009308 <RCC_GetPCLK1ClockFreq>
 80091a0:	60f8      	str	r0, [r7, #12]
      break;
 80091a2:	e004      	b.n	80091ae <LL_RCC_GetLPUARTClockFreq+0x82>

    default:
      break;
 80091a4:	bf00      	nop
 80091a6:	e002      	b.n	80091ae <LL_RCC_GetLPUARTClockFreq+0x82>
      break;
 80091a8:	bf00      	nop
 80091aa:	e000      	b.n	80091ae <LL_RCC_GetLPUARTClockFreq+0x82>
      break;
 80091ac:	bf00      	nop
  }

  return lpuart_frequency;
 80091ae:	68fb      	ldr	r3, [r7, #12]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	00f42400 	.word	0x00f42400

080091bc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80091c2:	f7ff ff3f 	bl	8009044 <LL_RCC_GetSysClkSource>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b0c      	cmp	r3, #12
 80091ca:	d851      	bhi.n	8009270 <RCC_GetSystemClockFreq+0xb4>
 80091cc:	a201      	add	r2, pc, #4	; (adr r2, 80091d4 <RCC_GetSystemClockFreq+0x18>)
 80091ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d2:	bf00      	nop
 80091d4:	08009209 	.word	0x08009209
 80091d8:	08009271 	.word	0x08009271
 80091dc:	08009271 	.word	0x08009271
 80091e0:	08009271 	.word	0x08009271
 80091e4:	0800925d 	.word	0x0800925d
 80091e8:	08009271 	.word	0x08009271
 80091ec:	08009271 	.word	0x08009271
 80091f0:	08009271 	.word	0x08009271
 80091f4:	08009263 	.word	0x08009263
 80091f8:	08009271 	.word	0x08009271
 80091fc:	08009271 	.word	0x08009271
 8009200:	08009271 	.word	0x08009271
 8009204:	08009269 	.word	0x08009269
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009208:	f7ff feee 	bl	8008fe8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d111      	bne.n	8009236 <RCC_GetSystemClockFreq+0x7a>
 8009212:	f7ff fee9 	bl	8008fe8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009216:	4603      	mov	r3, r0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d004      	beq.n	8009226 <RCC_GetSystemClockFreq+0x6a>
 800921c:	f7ff fef6 	bl	800900c <LL_RCC_MSI_GetRange>
 8009220:	4603      	mov	r3, r0
 8009222:	0a1b      	lsrs	r3, r3, #8
 8009224:	e003      	b.n	800922e <RCC_GetSystemClockFreq+0x72>
 8009226:	f7ff feff 	bl	8009028 <LL_RCC_MSI_GetRangeAfterStandby>
 800922a:	4603      	mov	r3, r0
 800922c:	0a1b      	lsrs	r3, r3, #8
 800922e:	4a28      	ldr	r2, [pc, #160]	; (80092d0 <RCC_GetSystemClockFreq+0x114>)
 8009230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009234:	e010      	b.n	8009258 <RCC_GetSystemClockFreq+0x9c>
 8009236:	f7ff fed7 	bl	8008fe8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d004      	beq.n	800924a <RCC_GetSystemClockFreq+0x8e>
 8009240:	f7ff fee4 	bl	800900c <LL_RCC_MSI_GetRange>
 8009244:	4603      	mov	r3, r0
 8009246:	091b      	lsrs	r3, r3, #4
 8009248:	e003      	b.n	8009252 <RCC_GetSystemClockFreq+0x96>
 800924a:	f7ff feed 	bl	8009028 <LL_RCC_MSI_GetRangeAfterStandby>
 800924e:	4603      	mov	r3, r0
 8009250:	091b      	lsrs	r3, r3, #4
 8009252:	4a1f      	ldr	r2, [pc, #124]	; (80092d0 <RCC_GetSystemClockFreq+0x114>)
 8009254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009258:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800925a:	e033      	b.n	80092c4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800925c:	4b1d      	ldr	r3, [pc, #116]	; (80092d4 <RCC_GetSystemClockFreq+0x118>)
 800925e:	607b      	str	r3, [r7, #4]
      break;
 8009260:	e030      	b.n	80092c4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8009262:	4b1d      	ldr	r3, [pc, #116]	; (80092d8 <RCC_GetSystemClockFreq+0x11c>)
 8009264:	607b      	str	r3, [r7, #4]
      break;
 8009266:	e02d      	b.n	80092c4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8009268:	f000 f862 	bl	8009330 <RCC_PLL_GetFreqDomain_SYS>
 800926c:	6078      	str	r0, [r7, #4]
      break;
 800926e:	e029      	b.n	80092c4 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009270:	f7ff feba 	bl	8008fe8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d111      	bne.n	800929e <RCC_GetSystemClockFreq+0xe2>
 800927a:	f7ff feb5 	bl	8008fe8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d004      	beq.n	800928e <RCC_GetSystemClockFreq+0xd2>
 8009284:	f7ff fec2 	bl	800900c <LL_RCC_MSI_GetRange>
 8009288:	4603      	mov	r3, r0
 800928a:	0a1b      	lsrs	r3, r3, #8
 800928c:	e003      	b.n	8009296 <RCC_GetSystemClockFreq+0xda>
 800928e:	f7ff fecb 	bl	8009028 <LL_RCC_MSI_GetRangeAfterStandby>
 8009292:	4603      	mov	r3, r0
 8009294:	0a1b      	lsrs	r3, r3, #8
 8009296:	4a0e      	ldr	r2, [pc, #56]	; (80092d0 <RCC_GetSystemClockFreq+0x114>)
 8009298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800929c:	e010      	b.n	80092c0 <RCC_GetSystemClockFreq+0x104>
 800929e:	f7ff fea3 	bl	8008fe8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d004      	beq.n	80092b2 <RCC_GetSystemClockFreq+0xf6>
 80092a8:	f7ff feb0 	bl	800900c <LL_RCC_MSI_GetRange>
 80092ac:	4603      	mov	r3, r0
 80092ae:	091b      	lsrs	r3, r3, #4
 80092b0:	e003      	b.n	80092ba <RCC_GetSystemClockFreq+0xfe>
 80092b2:	f7ff feb9 	bl	8009028 <LL_RCC_MSI_GetRangeAfterStandby>
 80092b6:	4603      	mov	r3, r0
 80092b8:	091b      	lsrs	r3, r3, #4
 80092ba:	4a05      	ldr	r2, [pc, #20]	; (80092d0 <RCC_GetSystemClockFreq+0x114>)
 80092bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092c0:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80092c2:	bf00      	nop
  }

  return frequency;
 80092c4:	687b      	ldr	r3, [r7, #4]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	0800ce60 	.word	0x0800ce60
 80092d4:	00f42400 	.word	0x00f42400
 80092d8:	007a1200 	.word	0x007a1200

080092dc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80092e4:	f7ff febc 	bl	8009060 <LL_RCC_GetAHBPrescaler>
 80092e8:	4603      	mov	r3, r0
 80092ea:	091b      	lsrs	r3, r3, #4
 80092ec:	f003 030f 	and.w	r3, r3, #15
 80092f0:	4a04      	ldr	r2, [pc, #16]	; (8009304 <RCC_GetHCLKClockFreq+0x28>)
 80092f2:	5cd3      	ldrb	r3, [r2, r3]
 80092f4:	461a      	mov	r2, r3
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	40d3      	lsrs	r3, r2
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	0800ce48 	.word	0x0800ce48

08009308 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009310:	f7ff feb4 	bl	800907c <LL_RCC_GetAPB1Prescaler>
 8009314:	4603      	mov	r3, r0
 8009316:	0a1b      	lsrs	r3, r3, #8
 8009318:	4a04      	ldr	r2, [pc, #16]	; (800932c <RCC_GetPCLK1ClockFreq+0x24>)
 800931a:	5cd3      	ldrb	r3, [r2, r3]
 800931c:	461a      	mov	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	40d3      	lsrs	r3, r2
}
 8009322:	4618      	mov	r0, r3
 8009324:	3708      	adds	r7, #8
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	0800ce58 	.word	0x0800ce58

08009330 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8009330:	b590      	push	{r4, r7, lr}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8009336:	f7ff fec1 	bl	80090bc <LL_RCC_PLL_GetMainSource>
 800933a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	2b03      	cmp	r3, #3
 8009340:	d036      	beq.n	80093b0 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	2b03      	cmp	r3, #3
 8009346:	d836      	bhi.n	80093b6 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d003      	beq.n	8009356 <RCC_PLL_GetFreqDomain_SYS+0x26>
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	2b02      	cmp	r3, #2
 8009352:	d02a      	beq.n	80093aa <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8009354:	e02f      	b.n	80093b6 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009356:	f7ff fe47 	bl	8008fe8 <LL_RCC_MSI_IsEnabledRangeSelect>
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d111      	bne.n	8009384 <RCC_PLL_GetFreqDomain_SYS+0x54>
 8009360:	f7ff fe42 	bl	8008fe8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d004      	beq.n	8009374 <RCC_PLL_GetFreqDomain_SYS+0x44>
 800936a:	f7ff fe4f 	bl	800900c <LL_RCC_MSI_GetRange>
 800936e:	4603      	mov	r3, r0
 8009370:	0a1b      	lsrs	r3, r3, #8
 8009372:	e003      	b.n	800937c <RCC_PLL_GetFreqDomain_SYS+0x4c>
 8009374:	f7ff fe58 	bl	8009028 <LL_RCC_MSI_GetRangeAfterStandby>
 8009378:	4603      	mov	r3, r0
 800937a:	0a1b      	lsrs	r3, r3, #8
 800937c:	4a2f      	ldr	r2, [pc, #188]	; (800943c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800937e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009382:	e010      	b.n	80093a6 <RCC_PLL_GetFreqDomain_SYS+0x76>
 8009384:	f7ff fe30 	bl	8008fe8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d004      	beq.n	8009398 <RCC_PLL_GetFreqDomain_SYS+0x68>
 800938e:	f7ff fe3d 	bl	800900c <LL_RCC_MSI_GetRange>
 8009392:	4603      	mov	r3, r0
 8009394:	091b      	lsrs	r3, r3, #4
 8009396:	e003      	b.n	80093a0 <RCC_PLL_GetFreqDomain_SYS+0x70>
 8009398:	f7ff fe46 	bl	8009028 <LL_RCC_MSI_GetRangeAfterStandby>
 800939c:	4603      	mov	r3, r0
 800939e:	091b      	lsrs	r3, r3, #4
 80093a0:	4a26      	ldr	r2, [pc, #152]	; (800943c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80093a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093a6:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80093a8:	e02f      	b.n	800940a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80093aa:	4b25      	ldr	r3, [pc, #148]	; (8009440 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 80093ac:	607b      	str	r3, [r7, #4]
      break;
 80093ae:	e02c      	b.n	800940a <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80093b0:	4b24      	ldr	r3, [pc, #144]	; (8009444 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 80093b2:	607b      	str	r3, [r7, #4]
      break;
 80093b4:	e029      	b.n	800940a <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80093b6:	f7ff fe17 	bl	8008fe8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80093ba:	4603      	mov	r3, r0
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d111      	bne.n	80093e4 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80093c0:	f7ff fe12 	bl	8008fe8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d004      	beq.n	80093d4 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80093ca:	f7ff fe1f 	bl	800900c <LL_RCC_MSI_GetRange>
 80093ce:	4603      	mov	r3, r0
 80093d0:	0a1b      	lsrs	r3, r3, #8
 80093d2:	e003      	b.n	80093dc <RCC_PLL_GetFreqDomain_SYS+0xac>
 80093d4:	f7ff fe28 	bl	8009028 <LL_RCC_MSI_GetRangeAfterStandby>
 80093d8:	4603      	mov	r3, r0
 80093da:	0a1b      	lsrs	r3, r3, #8
 80093dc:	4a17      	ldr	r2, [pc, #92]	; (800943c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80093de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093e2:	e010      	b.n	8009406 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 80093e4:	f7ff fe00 	bl	8008fe8 <LL_RCC_MSI_IsEnabledRangeSelect>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d004      	beq.n	80093f8 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 80093ee:	f7ff fe0d 	bl	800900c <LL_RCC_MSI_GetRange>
 80093f2:	4603      	mov	r3, r0
 80093f4:	091b      	lsrs	r3, r3, #4
 80093f6:	e003      	b.n	8009400 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 80093f8:	f7ff fe16 	bl	8009028 <LL_RCC_MSI_GetRangeAfterStandby>
 80093fc:	4603      	mov	r3, r0
 80093fe:	091b      	lsrs	r3, r3, #4
 8009400:	4a0e      	ldr	r2, [pc, #56]	; (800943c <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8009402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009406:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8009408:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800940a:	f7ff fe81 	bl	8009110 <LL_RCC_PLL_GetDivider>
 800940e:	4603      	mov	r3, r0
 8009410:	091b      	lsrs	r3, r3, #4
 8009412:	3301      	adds	r3, #1
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	fbb2 f4f3 	udiv	r4, r2, r3
 800941a:	f7ff fe5d 	bl	80090d8 <LL_RCC_PLL_GetN>
 800941e:	4603      	mov	r3, r0
 8009420:	fb03 f404 	mul.w	r4, r3, r4
 8009424:	f7ff fe66 	bl	80090f4 <LL_RCC_PLL_GetR>
 8009428:	4603      	mov	r3, r0
 800942a:	0e5b      	lsrs	r3, r3, #25
 800942c:	3301      	adds	r3, #1
 800942e:	005b      	lsls	r3, r3, #1
 8009430:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8009434:	4618      	mov	r0, r3
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	bd90      	pop	{r4, r7, pc}
 800943c:	0800ce60 	.word	0x0800ce60
 8009440:	00f42400 	.word	0x00f42400
 8009444:	007a1200 	.word	0x007a1200

08009448 <LCD_Power>:
static void lcd_clear(void); 			//Clear Display
static bool lcd_hasData();
static uint8_t lcd_writeChar(uint8_t x, uint8_t y, uint8_t c);

//Functions
lcd_State_enum LCD_Power() {
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
	switch (lcd_state) {
 800944c:	4b33      	ldr	r3, [pc, #204]	; (800951c <LCD_Power+0xd4>)
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	b2db      	uxtb	r3, r3
 8009452:	2b04      	cmp	r3, #4
 8009454:	d85c      	bhi.n	8009510 <LCD_Power+0xc8>
 8009456:	a201      	add	r2, pc, #4	; (adr r2, 800945c <LCD_Power+0x14>)
 8009458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945c:	08009471 	.word	0x08009471
 8009460:	08009497 	.word	0x08009497
 8009464:	080094e5 	.word	0x080094e5
 8009468:	08009511 	.word	0x08009511
 800946c:	08009511 	.word	0x08009511
	case LCD_OFF:
		if (superCapmV >= mV_LCD_SLOW) {
 8009470:	4b2b      	ldr	r3, [pc, #172]	; (8009520 <LCD_Power+0xd8>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8009478:	4293      	cmp	r3, r2
 800947a:	d944      	bls.n	8009506 <LCD_Power+0xbe>
			//Turn on LCD
			lcd_state = LCD_READY;
 800947c:	4b27      	ldr	r3, [pc, #156]	; (800951c <LCD_Power+0xd4>)
 800947e:	2202      	movs	r2, #2
 8009480:	701a      	strb	r2, [r3, #0]
			//HAL_LPTIM_PWM_Start(&hlptim1, 2047, 1023); //32768 DIV16 DIV2048 1HZ
			HAL_GPIO_WritePin(DISP_EN_GPIO_Port, DISP_EN_Pin, GPIO_PIN_SET);
 8009482:	2201      	movs	r2, #1
 8009484:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009488:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800948c:	f7fc fec4 	bl	8006218 <HAL_GPIO_WritePin>
			lcd_clear();
 8009490:	f000 fa3e 	bl	8009910 <lcd_clear>
		}
		break;
 8009494:	e037      	b.n	8009506 <LCD_Power+0xbe>
	case LCD_TIMER:
		if (superCapmV < mV_LCD_OFF) {
 8009496:	4b22      	ldr	r3, [pc, #136]	; (8009520 <LCD_Power+0xd8>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f640 2227 	movw	r2, #2599	; 0xa27
 800949e:	4293      	cmp	r3, r2
 80094a0:	d80a      	bhi.n	80094b8 <LCD_Power+0x70>
			lcd_state = LCD_OFF;
 80094a2:	4b1e      	ldr	r3, [pc, #120]	; (800951c <LCD_Power+0xd4>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DISP_EN_GPIO_Port, DISP_EN_Pin, GPIO_PIN_RESET);
 80094a8:	2200      	movs	r2, #0
 80094aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80094ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80094b2:	f7fc feb1 	bl	8006218 <HAL_GPIO_WritePin>
		} else if ((superCapmV >= mV_LCD_FAST) && (guiTimer >= LCD_RATE_FAST)) {
			lcd_state = LCD_READY;
		} else if (guiTimer >= LCD_RATE_SLOW) {
			lcd_state = LCD_READY;
		}
		break;
 80094b6:	e028      	b.n	800950a <LCD_Power+0xc2>
		} else if ((superCapmV >= mV_LCD_FAST) && (guiTimer >= LCD_RATE_FAST)) {
 80094b8:	4b19      	ldr	r3, [pc, #100]	; (8009520 <LCD_Power+0xd8>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f640 42e3 	movw	r2, #3299	; 0xce3
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d907      	bls.n	80094d4 <LCD_Power+0x8c>
 80094c4:	4b17      	ldr	r3, [pc, #92]	; (8009524 <LCD_Power+0xdc>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d003      	beq.n	80094d4 <LCD_Power+0x8c>
			lcd_state = LCD_READY;
 80094cc:	4b13      	ldr	r3, [pc, #76]	; (800951c <LCD_Power+0xd4>)
 80094ce:	2202      	movs	r2, #2
 80094d0:	701a      	strb	r2, [r3, #0]
		break;
 80094d2:	e01a      	b.n	800950a <LCD_Power+0xc2>
		} else if (guiTimer >= LCD_RATE_SLOW) {
 80094d4:	4b13      	ldr	r3, [pc, #76]	; (8009524 <LCD_Power+0xdc>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b0e      	cmp	r3, #14
 80094da:	d916      	bls.n	800950a <LCD_Power+0xc2>
			lcd_state = LCD_READY;
 80094dc:	4b0f      	ldr	r3, [pc, #60]	; (800951c <LCD_Power+0xd4>)
 80094de:	2202      	movs	r2, #2
 80094e0:	701a      	strb	r2, [r3, #0]
		break;
 80094e2:	e012      	b.n	800950a <LCD_Power+0xc2>
	case LCD_READY:
		if (superCapmV < mV_LCD_OFF) {
 80094e4:	4b0e      	ldr	r3, [pc, #56]	; (8009520 <LCD_Power+0xd8>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f640 2227 	movw	r2, #2599	; 0xa27
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d80e      	bhi.n	800950e <LCD_Power+0xc6>
			lcd_state = LCD_OFF;
 80094f0:	4b0a      	ldr	r3, [pc, #40]	; (800951c <LCD_Power+0xd4>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DISP_EN_GPIO_Port, DISP_EN_Pin, GPIO_PIN_RESET);
 80094f6:	2200      	movs	r2, #0
 80094f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80094fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009500:	f7fc fe8a 	bl	8006218 <HAL_GPIO_WritePin>
		}
		break;
 8009504:	e003      	b.n	800950e <LCD_Power+0xc6>
		break;
 8009506:	bf00      	nop
 8009508:	e002      	b.n	8009510 <LCD_Power+0xc8>
		break;
 800950a:	bf00      	nop
 800950c:	e000      	b.n	8009510 <LCD_Power+0xc8>
		break;
 800950e:	bf00      	nop
	case LCD_SENDING_DATA:
	case LCD_SENDING_CLR:
		break;
	}
	return lcd_state;
 8009510:	4b02      	ldr	r3, [pc, #8]	; (800951c <LCD_Power+0xd4>)
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	b2db      	uxtb	r3, r3
}
 8009516:	4618      	mov	r0, r3
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	20000d8c 	.word	0x20000d8c
 8009520:	2000037c 	.word	0x2000037c
 8009524:	20000390 	.word	0x20000390

08009528 <lcd_SetCursor>:

void lcd_SetCursor(uint8_t x, uint8_t y) {
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	4603      	mov	r3, r0
 8009530:	460a      	mov	r2, r1
 8009532:	71fb      	strb	r3, [r7, #7]
 8009534:	4613      	mov	r3, r2
 8009536:	71bb      	strb	r3, [r7, #6]
	cursor_x = x;
 8009538:	79fb      	ldrb	r3, [r7, #7]
 800953a:	b29a      	uxth	r2, r3
 800953c:	4b05      	ldr	r3, [pc, #20]	; (8009554 <lcd_SetCursor+0x2c>)
 800953e:	801a      	strh	r2, [r3, #0]
	cursor_y = y;
 8009540:	79bb      	ldrb	r3, [r7, #6]
 8009542:	b29a      	uxth	r2, r3
 8009544:	4b04      	ldr	r3, [pc, #16]	; (8009558 <lcd_SetCursor+0x30>)
 8009546:	801a      	strh	r2, [r3, #0]
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr
 8009554:	20000d86 	.word	0x20000d86
 8009558:	20000d84 	.word	0x20000d84

0800955c <lcd_SetFont>:

void lcd_SetFont(GFXfont *f) {
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
	gfxFontPtr = (GFXfont*) f;
 8009564:	4a04      	ldr	r2, [pc, #16]	; (8009578 <lcd_SetFont+0x1c>)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6013      	str	r3, [r2, #0]
}
 800956a:	bf00      	nop
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	20000d88 	.word	0x20000d88

0800957c <lcd_writeChar>:

uint8_t lcd_writeChar(uint8_t x, uint8_t y, uint8_t c) {
 800957c:	b580      	push	{r7, lr}
 800957e:	b088      	sub	sp, #32
 8009580:	af00      	add	r7, sp, #0
 8009582:	4603      	mov	r3, r0
 8009584:	71fb      	strb	r3, [r7, #7]
 8009586:	460b      	mov	r3, r1
 8009588:	71bb      	strb	r3, [r7, #6]
 800958a:	4613      	mov	r3, r2
 800958c:	717b      	strb	r3, [r7, #5]
	if (c >= (uint8_t) gfxFontPtr->first && c <= (uint8_t) gfxFontPtr->last) { //Char present in this font?
 800958e:	4b40      	ldr	r3, [pc, #256]	; (8009690 <lcd_writeChar+0x114>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	891b      	ldrh	r3, [r3, #8]
 8009594:	b2db      	uxtb	r3, r3
 8009596:	797a      	ldrb	r2, [r7, #5]
 8009598:	429a      	cmp	r2, r3
 800959a:	d374      	bcc.n	8009686 <lcd_writeChar+0x10a>
 800959c:	4b3c      	ldr	r3, [pc, #240]	; (8009690 <lcd_writeChar+0x114>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	895b      	ldrh	r3, [r3, #10]
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	797a      	ldrb	r2, [r7, #5]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d86d      	bhi.n	8009686 <lcd_writeChar+0x10a>
		c -= (uint8_t) (gfxFontPtr->first);
 80095aa:	4b39      	ldr	r3, [pc, #228]	; (8009690 <lcd_writeChar+0x114>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	891b      	ldrh	r3, [r3, #8]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	797a      	ldrb	r2, [r7, #5]
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	717b      	strb	r3, [r7, #5]
		GFXglyph glyph = gfxFontPtr->glyph[c];
 80095b8:	4b35      	ldr	r3, [pc, #212]	; (8009690 <lcd_writeChar+0x114>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	797b      	ldrb	r3, [r7, #5]
 80095c0:	00db      	lsls	r3, r3, #3
 80095c2:	441a      	add	r2, r3
 80095c4:	f107 0308 	add.w	r3, r7, #8
 80095c8:	6810      	ldr	r0, [r2, #0]
 80095ca:	6851      	ldr	r1, [r2, #4]
 80095cc:	c303      	stmia	r3!, {r0, r1}
		uint8_t *bitmap = gfxFontPtr->bitmap;
 80095ce:	4b30      	ldr	r3, [pc, #192]	; (8009690 <lcd_writeChar+0x114>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	617b      	str	r3, [r7, #20]

		uint16_t bo = glyph.bitmapOffset;
 80095d6:	893b      	ldrh	r3, [r7, #8]
 80095d8:	83fb      	strh	r3, [r7, #30]
		uint8_t w = glyph.width, h = glyph.height;
 80095da:	7abb      	ldrb	r3, [r7, #10]
 80095dc:	74fb      	strb	r3, [r7, #19]
 80095de:	7afb      	ldrb	r3, [r7, #11]
 80095e0:	74bb      	strb	r3, [r7, #18]
		int8_t xo = glyph.xOffset, yo = glyph.yOffset;
 80095e2:	7b7b      	ldrb	r3, [r7, #13]
 80095e4:	747b      	strb	r3, [r7, #17]
 80095e6:	7bbb      	ldrb	r3, [r7, #14]
 80095e8:	743b      	strb	r3, [r7, #16]
		uint8_t xx, yy, bits = 0, bit = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	76fb      	strb	r3, [r7, #27]
 80095ee:	2300      	movs	r3, #0
 80095f0:	76bb      	strb	r3, [r7, #26]

		for (yy = 0; yy < h; yy++) {
 80095f2:	2300      	movs	r3, #0
 80095f4:	773b      	strb	r3, [r7, #28]
 80095f6:	e040      	b.n	800967a <lcd_writeChar+0xfe>
			for (xx = 0; xx < w; xx++) {
 80095f8:	2300      	movs	r3, #0
 80095fa:	777b      	strb	r3, [r7, #29]
 80095fc:	e036      	b.n	800966c <lcd_writeChar+0xf0>
				if (!(bit++ & 7)) {
 80095fe:	7ebb      	ldrb	r3, [r7, #26]
 8009600:	1c5a      	adds	r2, r3, #1
 8009602:	76ba      	strb	r2, [r7, #26]
 8009604:	f003 0307 	and.w	r3, r3, #7
 8009608:	2b00      	cmp	r3, #0
 800960a:	d107      	bne.n	800961c <lcd_writeChar+0xa0>
					bits = bitmap[bo++];
 800960c:	8bfb      	ldrh	r3, [r7, #30]
 800960e:	1c5a      	adds	r2, r3, #1
 8009610:	83fa      	strh	r2, [r7, #30]
 8009612:	461a      	mov	r2, r3
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	4413      	add	r3, r2
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	76fb      	strb	r3, [r7, #27]
				}
				if (bits & 0x80) {
 800961c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009620:	2b00      	cmp	r3, #0
 8009622:	da1d      	bge.n	8009660 <lcd_writeChar+0xe4>
					lcd_drawPixel(x + xo + xx, y + yo + yy, LCD_BLACK);
 8009624:	79fb      	ldrb	r3, [r7, #7]
 8009626:	b21a      	sxth	r2, r3
 8009628:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800962c:	b21b      	sxth	r3, r3
 800962e:	4413      	add	r3, r2
 8009630:	b21b      	sxth	r3, r3
 8009632:	b29a      	uxth	r2, r3
 8009634:	7f7b      	ldrb	r3, [r7, #29]
 8009636:	b29b      	uxth	r3, r3
 8009638:	4413      	add	r3, r2
 800963a:	b29b      	uxth	r3, r3
 800963c:	b218      	sxth	r0, r3
 800963e:	79bb      	ldrb	r3, [r7, #6]
 8009640:	b21a      	sxth	r2, r3
 8009642:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8009646:	b21b      	sxth	r3, r3
 8009648:	4413      	add	r3, r2
 800964a:	b21b      	sxth	r3, r3
 800964c:	b29a      	uxth	r2, r3
 800964e:	7f3b      	ldrb	r3, [r7, #28]
 8009650:	b29b      	uxth	r3, r3
 8009652:	4413      	add	r3, r2
 8009654:	b29b      	uxth	r3, r3
 8009656:	b21b      	sxth	r3, r3
 8009658:	2200      	movs	r2, #0
 800965a:	4619      	mov	r1, r3
 800965c:	f000 f868 	bl	8009730 <lcd_drawPixel>
				}
				bits <<= 1;
 8009660:	7efb      	ldrb	r3, [r7, #27]
 8009662:	005b      	lsls	r3, r3, #1
 8009664:	76fb      	strb	r3, [r7, #27]
			for (xx = 0; xx < w; xx++) {
 8009666:	7f7b      	ldrb	r3, [r7, #29]
 8009668:	3301      	adds	r3, #1
 800966a:	777b      	strb	r3, [r7, #29]
 800966c:	7f7a      	ldrb	r2, [r7, #29]
 800966e:	7cfb      	ldrb	r3, [r7, #19]
 8009670:	429a      	cmp	r2, r3
 8009672:	d3c4      	bcc.n	80095fe <lcd_writeChar+0x82>
		for (yy = 0; yy < h; yy++) {
 8009674:	7f3b      	ldrb	r3, [r7, #28]
 8009676:	3301      	adds	r3, #1
 8009678:	773b      	strb	r3, [r7, #28]
 800967a:	7f3a      	ldrb	r2, [r7, #28]
 800967c:	7cbb      	ldrb	r3, [r7, #18]
 800967e:	429a      	cmp	r2, r3
 8009680:	d3ba      	bcc.n	80095f8 <lcd_writeChar+0x7c>
			}
		}
		return (uint8_t) glyph.xAdvance; //Advance cursor
 8009682:	7b3b      	ldrb	r3, [r7, #12]
 8009684:	e000      	b.n	8009688 <lcd_writeChar+0x10c>
	}
	return 0;
 8009686:	2300      	movs	r3, #0
}
 8009688:	4618      	mov	r0, r3
 800968a:	3720      	adds	r7, #32
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	20000d88 	.word	0x20000d88

08009694 <lcd_print>:

void lcd_print(int n) {
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
	uint8_t bufPointer = 0;
 800969c:	2300      	movs	r3, #0
 800969e:	73fb      	strb	r3, [r7, #15]
	while (bufPointer < n) {
 80096a0:	e016      	b.n	80096d0 <lcd_print+0x3c>
		cursor_x += lcd_writeChar(cursor_x, cursor_y, strbuffer[bufPointer++]);
 80096a2:	4b10      	ldr	r3, [pc, #64]	; (80096e4 <lcd_print+0x50>)
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	b2d8      	uxtb	r0, r3
 80096a8:	4b0f      	ldr	r3, [pc, #60]	; (80096e8 <lcd_print+0x54>)
 80096aa:	881b      	ldrh	r3, [r3, #0]
 80096ac:	b2d9      	uxtb	r1, r3
 80096ae:	7bfb      	ldrb	r3, [r7, #15]
 80096b0:	1c5a      	adds	r2, r3, #1
 80096b2:	73fa      	strb	r2, [r7, #15]
 80096b4:	461a      	mov	r2, r3
 80096b6:	4b0d      	ldr	r3, [pc, #52]	; (80096ec <lcd_print+0x58>)
 80096b8:	5c9b      	ldrb	r3, [r3, r2]
 80096ba:	461a      	mov	r2, r3
 80096bc:	f7ff ff5e 	bl	800957c <lcd_writeChar>
 80096c0:	4603      	mov	r3, r0
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	4b07      	ldr	r3, [pc, #28]	; (80096e4 <lcd_print+0x50>)
 80096c6:	881b      	ldrh	r3, [r3, #0]
 80096c8:	4413      	add	r3, r2
 80096ca:	b29a      	uxth	r2, r3
 80096cc:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <lcd_print+0x50>)
 80096ce:	801a      	strh	r2, [r3, #0]
	while (bufPointer < n) {
 80096d0:	7bfb      	ldrb	r3, [r7, #15]
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	dce4      	bgt.n	80096a2 <lcd_print+0xe>
	}
}
 80096d8:	bf00      	nop
 80096da:	bf00      	nop
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	20000d86 	.word	0x20000d86
 80096e8:	20000d84 	.word	0x20000d84
 80096ec:	20000d70 	.word	0x20000d70

080096f0 <lcd_print_char>:

void lcd_print_char(uint8_t theChar) {
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	4603      	mov	r3, r0
 80096f8:	71fb      	strb	r3, [r7, #7]
	cursor_x += lcd_writeChar(cursor_x, cursor_y, theChar);
 80096fa:	4b0b      	ldr	r3, [pc, #44]	; (8009728 <lcd_print_char+0x38>)
 80096fc:	881b      	ldrh	r3, [r3, #0]
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	4a0a      	ldr	r2, [pc, #40]	; (800972c <lcd_print_char+0x3c>)
 8009702:	8812      	ldrh	r2, [r2, #0]
 8009704:	b2d1      	uxtb	r1, r2
 8009706:	79fa      	ldrb	r2, [r7, #7]
 8009708:	4618      	mov	r0, r3
 800970a:	f7ff ff37 	bl	800957c <lcd_writeChar>
 800970e:	4603      	mov	r3, r0
 8009710:	b29a      	uxth	r2, r3
 8009712:	4b05      	ldr	r3, [pc, #20]	; (8009728 <lcd_print_char+0x38>)
 8009714:	881b      	ldrh	r3, [r3, #0]
 8009716:	4413      	add	r3, r2
 8009718:	b29a      	uxth	r2, r3
 800971a:	4b03      	ldr	r3, [pc, #12]	; (8009728 <lcd_print_char+0x38>)
 800971c:	801a      	strh	r2, [r3, #0]
}
 800971e:	bf00      	nop
 8009720:	3708      	adds	r7, #8
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	20000d86 	.word	0x20000d86
 800972c:	20000d84 	.word	0x20000d84

08009730 <lcd_drawPixel>:

void lcd_drawPixel(int16_t x, int16_t y, uint8_t bDraw) {
 8009730:	b490      	push	{r4, r7}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	80fb      	strh	r3, [r7, #6]
 800973a:	460b      	mov	r3, r1
 800973c:	80bb      	strh	r3, [r7, #4]
 800973e:	4613      	mov	r3, r2
 8009740:	70fb      	strb	r3, [r7, #3]
	if (x < 0 || y < 0 || x >= LCD_RES_PX_X || y >= LCD_RES_PX_Y)
 8009742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009746:	2b00      	cmp	r3, #0
 8009748:	db61      	blt.n	800980e <lcd_drawPixel+0xde>
 800974a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	db5d      	blt.n	800980e <lcd_drawPixel+0xde>
 8009752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009756:	2b7f      	cmp	r3, #127	; 0x7f
 8009758:	dc59      	bgt.n	800980e <lcd_drawPixel+0xde>
 800975a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800975e:	2b7f      	cmp	r3, #127	; 0x7f
 8009760:	dc55      	bgt.n	800980e <lcd_drawPixel+0xde>
		return;

	uint8_t XbitInByte = (0x01 << (x % 8));
 8009762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009766:	425a      	negs	r2, r3
 8009768:	f003 0307 	and.w	r3, r3, #7
 800976c:	f002 0207 	and.w	r2, r2, #7
 8009770:	bf58      	it	pl
 8009772:	4253      	negpl	r3, r2
 8009774:	b21b      	sxth	r3, r3
 8009776:	461a      	mov	r2, r3
 8009778:	2301      	movs	r3, #1
 800977a:	4093      	lsls	r3, r2
 800977c:	73fb      	strb	r3, [r7, #15]
	uint8_t xx = (x / 8) + 1; //X byte in array
 800977e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009782:	2b00      	cmp	r3, #0
 8009784:	da00      	bge.n	8009788 <lcd_drawPixel+0x58>
 8009786:	3307      	adds	r3, #7
 8009788:	10db      	asrs	r3, r3, #3
 800978a:	b21b      	sxth	r3, r3
 800978c:	b2db      	uxtb	r3, r3
 800978e:	3301      	adds	r3, #1
 8009790:	73bb      	strb	r3, [r7, #14]
	if (bDraw == LCD_WHITE) { //Set bit
 8009792:	78fb      	ldrb	r3, [r7, #3]
 8009794:	2b01      	cmp	r3, #1
 8009796:	d11a      	bne.n	80097ce <lcd_drawPixel+0x9e>
		LCD_BUFFER[y][xx] |= XbitInByte; 	//set bit
 8009798:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800979c:	7bb9      	ldrb	r1, [r7, #14]
 800979e:	481e      	ldr	r0, [pc, #120]	; (8009818 <lcd_drawPixel+0xe8>)
 80097a0:	4613      	mov	r3, r2
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	4413      	add	r3, r2
 80097a6:	005b      	lsls	r3, r3, #1
 80097a8:	4403      	add	r3, r0
 80097aa:	440b      	add	r3, r1
 80097ac:	7818      	ldrb	r0, [r3, #0]
 80097ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80097b2:	7bb9      	ldrb	r1, [r7, #14]
 80097b4:	7bfb      	ldrb	r3, [r7, #15]
 80097b6:	4303      	orrs	r3, r0
 80097b8:	b2dc      	uxtb	r4, r3
 80097ba:	4817      	ldr	r0, [pc, #92]	; (8009818 <lcd_drawPixel+0xe8>)
 80097bc:	4613      	mov	r3, r2
 80097be:	00db      	lsls	r3, r3, #3
 80097c0:	4413      	add	r3, r2
 80097c2:	005b      	lsls	r3, r3, #1
 80097c4:	4403      	add	r3, r0
 80097c6:	440b      	add	r3, r1
 80097c8:	4622      	mov	r2, r4
 80097ca:	701a      	strb	r2, [r3, #0]
 80097cc:	e020      	b.n	8009810 <lcd_drawPixel+0xe0>
	} else {
		LCD_BUFFER[y][xx] &= ~XbitInByte; //clear bit
 80097ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80097d2:	7bb9      	ldrb	r1, [r7, #14]
 80097d4:	4810      	ldr	r0, [pc, #64]	; (8009818 <lcd_drawPixel+0xe8>)
 80097d6:	4613      	mov	r3, r2
 80097d8:	00db      	lsls	r3, r3, #3
 80097da:	4413      	add	r3, r2
 80097dc:	005b      	lsls	r3, r3, #1
 80097de:	4403      	add	r3, r0
 80097e0:	440b      	add	r3, r1
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	b25a      	sxtb	r2, r3
 80097e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097ea:	43db      	mvns	r3, r3
 80097ec:	b25b      	sxtb	r3, r3
 80097ee:	4013      	ands	r3, r2
 80097f0:	b25b      	sxtb	r3, r3
 80097f2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80097f6:	7bb9      	ldrb	r1, [r7, #14]
 80097f8:	b2dc      	uxtb	r4, r3
 80097fa:	4807      	ldr	r0, [pc, #28]	; (8009818 <lcd_drawPixel+0xe8>)
 80097fc:	4613      	mov	r3, r2
 80097fe:	00db      	lsls	r3, r3, #3
 8009800:	4413      	add	r3, r2
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	4403      	add	r3, r0
 8009806:	440b      	add	r3, r1
 8009808:	4622      	mov	r2, r4
 800980a:	701a      	strb	r2, [r3, #0]
 800980c:	e000      	b.n	8009810 <lcd_drawPixel+0xe0>
		return;
 800980e:	bf00      	nop
	}
}
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bc90      	pop	{r4, r7}
 8009816:	4770      	bx	lr
 8009818:	20000470 	.word	0x20000470

0800981c <lcd_drawLine>:

void lcd_drawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
 800981c:	b590      	push	{r4, r7, lr}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	4604      	mov	r4, r0
 8009824:	4608      	mov	r0, r1
 8009826:	4611      	mov	r1, r2
 8009828:	461a      	mov	r2, r3
 800982a:	4623      	mov	r3, r4
 800982c:	71fb      	strb	r3, [r7, #7]
 800982e:	4603      	mov	r3, r0
 8009830:	71bb      	strb	r3, [r7, #6]
 8009832:	460b      	mov	r3, r1
 8009834:	717b      	strb	r3, [r7, #5]
 8009836:	4613      	mov	r3, r2
 8009838:	713b      	strb	r3, [r7, #4]
	if (x0 == x1) {
 800983a:	79fa      	ldrb	r2, [r7, #7]
 800983c:	797b      	ldrb	r3, [r7, #5]
 800983e:	429a      	cmp	r2, r3
 8009840:	d113      	bne.n	800986a <lcd_drawLine+0x4e>
		//Vertical Line
		for (uint8_t i = y0; i <= y1; i++) {
 8009842:	79bb      	ldrb	r3, [r7, #6]
 8009844:	73fb      	strb	r3, [r7, #15]
 8009846:	e00b      	b.n	8009860 <lcd_drawLine+0x44>
			lcd_drawPixel(x0, i, color);
 8009848:	79fb      	ldrb	r3, [r7, #7]
 800984a:	b21b      	sxth	r3, r3
 800984c:	7bfa      	ldrb	r2, [r7, #15]
 800984e:	b211      	sxth	r1, r2
 8009850:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009854:	4618      	mov	r0, r3
 8009856:	f7ff ff6b 	bl	8009730 <lcd_drawPixel>
		for (uint8_t i = y0; i <= y1; i++) {
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	3301      	adds	r3, #1
 800985e:	73fb      	strb	r3, [r7, #15]
 8009860:	7bfa      	ldrb	r2, [r7, #15]
 8009862:	793b      	ldrb	r3, [r7, #4]
 8009864:	429a      	cmp	r2, r3
 8009866:	d9ef      	bls.n	8009848 <lcd_drawLine+0x2c>
			lcd_drawPixel(i, y0, color);
		}
	} else {
		//Angled line
	}
}
 8009868:	e016      	b.n	8009898 <lcd_drawLine+0x7c>
	} else if (y0 == y1) {
 800986a:	79ba      	ldrb	r2, [r7, #6]
 800986c:	793b      	ldrb	r3, [r7, #4]
 800986e:	429a      	cmp	r2, r3
 8009870:	d112      	bne.n	8009898 <lcd_drawLine+0x7c>
		for (uint8_t i = x0; i <= x1; i++) {
 8009872:	79fb      	ldrb	r3, [r7, #7]
 8009874:	73bb      	strb	r3, [r7, #14]
 8009876:	e00b      	b.n	8009890 <lcd_drawLine+0x74>
			lcd_drawPixel(i, y0, color);
 8009878:	7bbb      	ldrb	r3, [r7, #14]
 800987a:	b21b      	sxth	r3, r3
 800987c:	79ba      	ldrb	r2, [r7, #6]
 800987e:	b211      	sxth	r1, r2
 8009880:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009884:	4618      	mov	r0, r3
 8009886:	f7ff ff53 	bl	8009730 <lcd_drawPixel>
		for (uint8_t i = x0; i <= x1; i++) {
 800988a:	7bbb      	ldrb	r3, [r7, #14]
 800988c:	3301      	adds	r3, #1
 800988e:	73bb      	strb	r3, [r7, #14]
 8009890:	7bba      	ldrb	r2, [r7, #14]
 8009892:	797b      	ldrb	r3, [r7, #5]
 8009894:	429a      	cmp	r2, r3
 8009896:	d9ef      	bls.n	8009878 <lcd_drawLine+0x5c>
}
 8009898:	bf00      	nop
 800989a:	3714      	adds	r7, #20
 800989c:	46bd      	mov	sp, r7
 800989e:	bd90      	pop	{r4, r7, pc}

080098a0 <lcd_clearLines>:
	for (uint8_t i = 0; i < h; i++) {
		lcd_drawLine(x, y + i, x + w, y + i, color);
	}
}

void lcd_clearLines(uint8_t y0, uint8_t y1) {
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	4603      	mov	r3, r0
 80098a8:	460a      	mov	r2, r1
 80098aa:	71fb      	strb	r3, [r7, #7]
 80098ac:	4613      	mov	r3, r2
 80098ae:	71bb      	strb	r3, [r7, #6]
	//Clear lines for writing
	while (y0 <= y1) {
 80098b0:	e020      	b.n	80098f4 <lcd_clearLines+0x54>
		for (uint8_t xByte = 1; xByte < (LCD_RES_PX_X_b - 1); xByte++) {
 80098b2:	2301      	movs	r3, #1
 80098b4:	73fb      	strb	r3, [r7, #15]
 80098b6:	e00d      	b.n	80098d4 <lcd_clearLines+0x34>
			LCD_BUFFER[y0][xByte] = 0xff; 	//Clear line
 80098b8:	79fa      	ldrb	r2, [r7, #7]
 80098ba:	7bf9      	ldrb	r1, [r7, #15]
 80098bc:	4813      	ldr	r0, [pc, #76]	; (800990c <lcd_clearLines+0x6c>)
 80098be:	4613      	mov	r3, r2
 80098c0:	00db      	lsls	r3, r3, #3
 80098c2:	4413      	add	r3, r2
 80098c4:	005b      	lsls	r3, r3, #1
 80098c6:	4403      	add	r3, r0
 80098c8:	440b      	add	r3, r1
 80098ca:	22ff      	movs	r2, #255	; 0xff
 80098cc:	701a      	strb	r2, [r3, #0]
		for (uint8_t xByte = 1; xByte < (LCD_RES_PX_X_b - 1); xByte++) {
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
 80098d0:	3301      	adds	r3, #1
 80098d2:	73fb      	strb	r3, [r7, #15]
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	2b10      	cmp	r3, #16
 80098d8:	d9ee      	bls.n	80098b8 <lcd_clearLines+0x18>
		}
		LCD_BUFFER[y0][LCD_RES_PX_X_b - 1] = 0x00; 		//transmit this line
 80098da:	79fa      	ldrb	r2, [r7, #7]
 80098dc:	490b      	ldr	r1, [pc, #44]	; (800990c <lcd_clearLines+0x6c>)
 80098de:	4613      	mov	r3, r2
 80098e0:	00db      	lsls	r3, r3, #3
 80098e2:	4413      	add	r3, r2
 80098e4:	005b      	lsls	r3, r3, #1
 80098e6:	440b      	add	r3, r1
 80098e8:	3311      	adds	r3, #17
 80098ea:	2200      	movs	r2, #0
 80098ec:	701a      	strb	r2, [r3, #0]
		y0++;
 80098ee:	79fb      	ldrb	r3, [r7, #7]
 80098f0:	3301      	adds	r3, #1
 80098f2:	71fb      	strb	r3, [r7, #7]
	while (y0 <= y1) {
 80098f4:	79fa      	ldrb	r2, [r7, #7]
 80098f6:	79bb      	ldrb	r3, [r7, #6]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d9da      	bls.n	80098b2 <lcd_clearLines+0x12>
	}
}
 80098fc:	bf00      	nop
 80098fe:	bf00      	nop
 8009900:	3714      	adds	r7, #20
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	20000470 	.word	0x20000470

08009910 <lcd_clear>:
void lcd_setRotation(uint8_t newRot) {
	if (rotation <= 3)
		rotation = newRot;
}

void lcd_clear(void) {
 8009910:	b590      	push	{r4, r7, lr}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
	uint8_t clearBuffer[] = { MLCD_CM, MLCD_TR };
 8009916:	2304      	movs	r3, #4
 8009918:	713b      	strb	r3, [r7, #4]
 800991a:	2300      	movs	r3, #0
 800991c:	717b      	strb	r3, [r7, #5]
	lcd_state = LCD_SENDING_CLR;
 800991e:	4b2a      	ldr	r3, [pc, #168]	; (80099c8 <lcd_clear+0xb8>)
 8009920:	2204      	movs	r2, #4
 8009922:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_SET);
 8009924:	2201      	movs	r2, #1
 8009926:	f44f 7100 	mov.w	r1, #512	; 0x200
 800992a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800992e:	f7fc fc73 	bl	8006218 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*) &clearBuffer, sizeof(clearBuffer));
 8009932:	1d3b      	adds	r3, r7, #4
 8009934:	2202      	movs	r2, #2
 8009936:	4619      	mov	r1, r3
 8009938:	4824      	ldr	r0, [pc, #144]	; (80099cc <lcd_clear+0xbc>)
 800993a:	f7fe fc7f 	bl	800823c <HAL_SPI_Transmit_DMA>

	//Clear buffer
	for (uint8_t y = 0; y < LCD_RES_PX_Y; y++) {
 800993e:	2300      	movs	r3, #0
 8009940:	71fb      	strb	r3, [r7, #7]
 8009942:	e037      	b.n	80099b4 <lcd_clear+0xa4>
		for (uint8_t x = 0; x < LCD_RES_PX_X_b; x++) {
 8009944:	2300      	movs	r3, #0
 8009946:	71bb      	strb	r3, [r7, #6]
 8009948:	e02e      	b.n	80099a8 <lcd_clear+0x98>
			if (x == 0) {
 800994a:	79bb      	ldrb	r3, [r7, #6]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10e      	bne.n	800996e <lcd_clear+0x5e>
				LCD_BUFFER[y][x] = y + 1; //assign line number
 8009950:	79fa      	ldrb	r2, [r7, #7]
 8009952:	79b9      	ldrb	r1, [r7, #6]
 8009954:	79fb      	ldrb	r3, [r7, #7]
 8009956:	3301      	adds	r3, #1
 8009958:	b2dc      	uxtb	r4, r3
 800995a:	481d      	ldr	r0, [pc, #116]	; (80099d0 <lcd_clear+0xc0>)
 800995c:	4613      	mov	r3, r2
 800995e:	00db      	lsls	r3, r3, #3
 8009960:	4413      	add	r3, r2
 8009962:	005b      	lsls	r3, r3, #1
 8009964:	4403      	add	r3, r0
 8009966:	440b      	add	r3, r1
 8009968:	4622      	mov	r2, r4
 800996a:	701a      	strb	r2, [r3, #0]
 800996c:	e019      	b.n	80099a2 <lcd_clear+0x92>
			} else if (x == (LCD_RES_PX_X_b - 1)) {
 800996e:	79bb      	ldrb	r3, [r7, #6]
 8009970:	2b11      	cmp	r3, #17
 8009972:	d10b      	bne.n	800998c <lcd_clear+0x7c>
				LCD_BUFFER[y][x] = 0x00; //trailer with transmit flag
 8009974:	79fa      	ldrb	r2, [r7, #7]
 8009976:	79b9      	ldrb	r1, [r7, #6]
 8009978:	4815      	ldr	r0, [pc, #84]	; (80099d0 <lcd_clear+0xc0>)
 800997a:	4613      	mov	r3, r2
 800997c:	00db      	lsls	r3, r3, #3
 800997e:	4413      	add	r3, r2
 8009980:	005b      	lsls	r3, r3, #1
 8009982:	4403      	add	r3, r0
 8009984:	440b      	add	r3, r1
 8009986:	2200      	movs	r2, #0
 8009988:	701a      	strb	r2, [r3, #0]
 800998a:	e00a      	b.n	80099a2 <lcd_clear+0x92>
			} else {
				LCD_BUFFER[y][x] = 0xff; //white data
 800998c:	79fa      	ldrb	r2, [r7, #7]
 800998e:	79b9      	ldrb	r1, [r7, #6]
 8009990:	480f      	ldr	r0, [pc, #60]	; (80099d0 <lcd_clear+0xc0>)
 8009992:	4613      	mov	r3, r2
 8009994:	00db      	lsls	r3, r3, #3
 8009996:	4413      	add	r3, r2
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	4403      	add	r3, r0
 800999c:	440b      	add	r3, r1
 800999e:	22ff      	movs	r2, #255	; 0xff
 80099a0:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < LCD_RES_PX_X_b; x++) {
 80099a2:	79bb      	ldrb	r3, [r7, #6]
 80099a4:	3301      	adds	r3, #1
 80099a6:	71bb      	strb	r3, [r7, #6]
 80099a8:	79bb      	ldrb	r3, [r7, #6]
 80099aa:	2b11      	cmp	r3, #17
 80099ac:	d9cd      	bls.n	800994a <lcd_clear+0x3a>
	for (uint8_t y = 0; y < LCD_RES_PX_Y; y++) {
 80099ae:	79fb      	ldrb	r3, [r7, #7]
 80099b0:	3301      	adds	r3, #1
 80099b2:	71fb      	strb	r3, [r7, #7]
 80099b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	dac3      	bge.n	8009944 <lcd_clear+0x34>
			}
		}
	}
}
 80099bc:	bf00      	nop
 80099be:	bf00      	nop
 80099c0:	370c      	adds	r7, #12
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd90      	pop	{r4, r7, pc}
 80099c6:	bf00      	nop
 80099c8:	20000d8c 	.word	0x20000d8c
 80099cc:	200002cc 	.word	0x200002cc
 80099d0:	20000470 	.word	0x20000470

080099d4 <lcd_draw>:

lcd_State_enum lcd_draw(void) {
 80099d4:	b580      	push	{r7, lr}
 80099d6:	af00      	add	r7, sp, #0
	if (lcd_state == LCD_OFF) {
 80099d8:	4b15      	ldr	r3, [pc, #84]	; (8009a30 <lcd_draw+0x5c>)
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d103      	bne.n	80099ea <lcd_draw+0x16>
		return lcd_state;
 80099e2:	4b13      	ldr	r3, [pc, #76]	; (8009a30 <lcd_draw+0x5c>)
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	e01f      	b.n	8009a2a <lcd_draw+0x56>
	}
	if (lcd_state == LCD_READY && lcd_hasData()) {
 80099ea:	4b11      	ldr	r3, [pc, #68]	; (8009a30 <lcd_draw+0x5c>)
 80099ec:	781b      	ldrb	r3, [r3, #0]
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	d117      	bne.n	8009a24 <lcd_draw+0x50>
 80099f4:	f000 f822 	bl	8009a3c <lcd_hasData>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d012      	beq.n	8009a24 <lcd_draw+0x50>
		//start new transfer
		lcd_state = LCD_SENDING_DATA;
 80099fe:	4b0c      	ldr	r3, [pc, #48]	; (8009a30 <lcd_draw+0x5c>)
 8009a00:	2203      	movs	r2, #3
 8009a02:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_SET);
 8009a04:	2201      	movs	r2, #1
 8009a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a0e:	f7fc fc03 	bl	8006218 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) &MLCD_WR, sizeof(MLCD_WR), HAL_MAX_DELAY);
 8009a12:	f04f 33ff 	mov.w	r3, #4294967295
 8009a16:	2201      	movs	r2, #1
 8009a18:	4906      	ldr	r1, [pc, #24]	; (8009a34 <lcd_draw+0x60>)
 8009a1a:	4807      	ldr	r0, [pc, #28]	; (8009a38 <lcd_draw+0x64>)
 8009a1c:	f7fe fa9f 	bl	8007f5e <HAL_SPI_Transmit>
		lcd_DoTX();
 8009a20:	f000 f830 	bl	8009a84 <lcd_DoTX>
	}
	return lcd_state;
 8009a24:	4b02      	ldr	r3, [pc, #8]	; (8009a30 <lcd_draw+0x5c>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	b2db      	uxtb	r3, r3
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	20000d8c 	.word	0x20000d8c
 8009a34:	0800cf02 	.word	0x0800cf02
 8009a38:	200002cc 	.word	0x200002cc

08009a3c <lcd_hasData>:

static bool lcd_hasData() {
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y < LCD_RES_PX_Y; y++) {
 8009a42:	2300      	movs	r3, #0
 8009a44:	71fb      	strb	r3, [r7, #7]
 8009a46:	e00f      	b.n	8009a68 <lcd_hasData+0x2c>
		if (LCD_BUFFER[y][LCD_RES_PX_X_b - 1] == 0x00) {
 8009a48:	79fa      	ldrb	r2, [r7, #7]
 8009a4a:	490d      	ldr	r1, [pc, #52]	; (8009a80 <lcd_hasData+0x44>)
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	00db      	lsls	r3, r3, #3
 8009a50:	4413      	add	r3, r2
 8009a52:	005b      	lsls	r3, r3, #1
 8009a54:	440b      	add	r3, r1
 8009a56:	3311      	adds	r3, #17
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d101      	bne.n	8009a62 <lcd_hasData+0x26>
			//we have some data to send
			return true;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e007      	b.n	8009a72 <lcd_hasData+0x36>
	for (uint8_t y = 0; y < LCD_RES_PX_Y; y++) {
 8009a62:	79fb      	ldrb	r3, [r7, #7]
 8009a64:	3301      	adds	r3, #1
 8009a66:	71fb      	strb	r3, [r7, #7]
 8009a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	daeb      	bge.n	8009a48 <lcd_hasData+0xc>
		}
	}
	return false;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	370c      	adds	r7, #12
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	20000470 	.word	0x20000470

08009a84 <lcd_DoTX>:

static void lcd_DoTX() {
 8009a84:	b580      	push	{r7, lr}
 8009a86:	af00      	add	r7, sp, #0
	static uint8_t linePointer = 0;
	if (lcd_hasData()) {
 8009a88:	f7ff ffd8 	bl	8009a3c <lcd_hasData>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d036      	beq.n	8009b00 <lcd_DoTX+0x7c>
		//start next transfer
		while (1) {
			if (LCD_BUFFER[linePointer][LCD_RES_PX_X_b - 1] == 0x00) {
 8009a92:	4b26      	ldr	r3, [pc, #152]	; (8009b2c <lcd_DoTX+0xa8>)
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	4619      	mov	r1, r3
 8009a98:	4a25      	ldr	r2, [pc, #148]	; (8009b30 <lcd_DoTX+0xac>)
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	00db      	lsls	r3, r3, #3
 8009a9e:	440b      	add	r3, r1
 8009aa0:	005b      	lsls	r3, r3, #1
 8009aa2:	4413      	add	r3, r2
 8009aa4:	3311      	adds	r3, #17
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d11a      	bne.n	8009ae2 <lcd_DoTX+0x5e>
				//Send the line
				HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*) &LCD_BUFFER[linePointer][0], LCD_RES_PX_X_b);
 8009aac:	4b1f      	ldr	r3, [pc, #124]	; (8009b2c <lcd_DoTX+0xa8>)
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	00db      	lsls	r3, r3, #3
 8009ab6:	4413      	add	r3, r2
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	4a1d      	ldr	r2, [pc, #116]	; (8009b30 <lcd_DoTX+0xac>)
 8009abc:	4413      	add	r3, r2
 8009abe:	2212      	movs	r2, #18
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	481c      	ldr	r0, [pc, #112]	; (8009b34 <lcd_DoTX+0xb0>)
 8009ac4:	f7fe fbba 	bl	800823c <HAL_SPI_Transmit_DMA>
				LCD_BUFFER[linePointer][LCD_RES_PX_X_b - 1] = 0x01; //Line Sent
 8009ac8:	4b18      	ldr	r3, [pc, #96]	; (8009b2c <lcd_DoTX+0xa8>)
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	4619      	mov	r1, r3
 8009ace:	4a18      	ldr	r2, [pc, #96]	; (8009b30 <lcd_DoTX+0xac>)
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	00db      	lsls	r3, r3, #3
 8009ad4:	440b      	add	r3, r1
 8009ad6:	005b      	lsls	r3, r3, #1
 8009ad8:	4413      	add	r3, r2
 8009ada:	3311      	adds	r3, #17
 8009adc:	2201      	movs	r2, #1
 8009ade:	701a      	strb	r2, [r3, #0]
				return;
 8009ae0:	e022      	b.n	8009b28 <lcd_DoTX+0xa4>
			}
			if (++linePointer >= LCD_RES_PX_Y) {
 8009ae2:	4b12      	ldr	r3, [pc, #72]	; (8009b2c <lcd_DoTX+0xa8>)
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	4b10      	ldr	r3, [pc, #64]	; (8009b2c <lcd_DoTX+0xa8>)
 8009aec:	701a      	strb	r2, [r3, #0]
 8009aee:	4b0f      	ldr	r3, [pc, #60]	; (8009b2c <lcd_DoTX+0xa8>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	b25b      	sxtb	r3, r3
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	dacc      	bge.n	8009a92 <lcd_DoTX+0xe>
				linePointer = 0;
 8009af8:	4b0c      	ldr	r3, [pc, #48]	; (8009b2c <lcd_DoTX+0xa8>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	701a      	strb	r2, [r3, #0]
			if (LCD_BUFFER[linePointer][LCD_RES_PX_X_b - 1] == 0x00) {
 8009afe:	e7c8      	b.n	8009a92 <lcd_DoTX+0xe>
			}
		}
	} else {
		//Done
		HAL_SPI_Transmit(&hspi1, (uint8_t*) &MLCD_TR, sizeof(MLCD_TR), HAL_MAX_DELAY); //send Trailer command
 8009b00:	f04f 33ff 	mov.w	r3, #4294967295
 8009b04:	2201      	movs	r2, #1
 8009b06:	490c      	ldr	r1, [pc, #48]	; (8009b38 <lcd_DoTX+0xb4>)
 8009b08:	480a      	ldr	r0, [pc, #40]	; (8009b34 <lcd_DoTX+0xb0>)
 8009b0a:	f7fe fa28 	bl	8007f5e <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b18:	f7fc fb7e 	bl	8006218 <HAL_GPIO_WritePin>
		guiTimer = 0; //drawing done
 8009b1c:	4b07      	ldr	r3, [pc, #28]	; (8009b3c <lcd_DoTX+0xb8>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	601a      	str	r2, [r3, #0]
		lcd_state = LCD_TIMER; //Enter timer mode for power() to clear
 8009b22:	4b07      	ldr	r3, [pc, #28]	; (8009b40 <lcd_DoTX+0xbc>)
 8009b24:	2201      	movs	r2, #1
 8009b26:	701a      	strb	r2, [r3, #0]
	}
}
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000d8d 	.word	0x20000d8d
 8009b30:	20000470 	.word	0x20000470
 8009b34:	200002cc 	.word	0x200002cc
 8009b38:	0800cf03 	.word	0x0800cf03
 8009b3c:	20000390 	.word	0x20000390
 8009b40:	20000d8c 	.word	0x20000d8c

08009b44 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
	if (lcd_state == LCD_SENDING_DATA) {
 8009b4c:	4b0d      	ldr	r3, [pc, #52]	; (8009b84 <HAL_SPI_TxCpltCallback+0x40>)
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d102      	bne.n	8009b5c <HAL_SPI_TxCpltCallback+0x18>
		lcd_DoTX();
 8009b56:	f7ff ff95 	bl	8009a84 <lcd_DoTX>
	} else if (lcd_state == LCD_SENDING_CLR) {
		HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
		lcd_state = LCD_READY;
	}
}
 8009b5a:	e00e      	b.n	8009b7a <HAL_SPI_TxCpltCallback+0x36>
	} else if (lcd_state == LCD_SENDING_CLR) {
 8009b5c:	4b09      	ldr	r3, [pc, #36]	; (8009b84 <HAL_SPI_TxCpltCallback+0x40>)
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	2b04      	cmp	r3, #4
 8009b64:	d109      	bne.n	8009b7a <HAL_SPI_TxCpltCallback+0x36>
		HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
 8009b66:	2200      	movs	r2, #0
 8009b68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b70:	f7fc fb52 	bl	8006218 <HAL_GPIO_WritePin>
		lcd_state = LCD_READY;
 8009b74:	4b03      	ldr	r3, [pc, #12]	; (8009b84 <HAL_SPI_TxCpltCallback+0x40>)
 8009b76:	2202      	movs	r2, #2
 8009b78:	701a      	strb	r2, [r3, #0]
}
 8009b7a:	bf00      	nop
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	20000d8c 	.word	0x20000d8c

08009b88 <__errno>:
 8009b88:	4b01      	ldr	r3, [pc, #4]	; (8009b90 <__errno+0x8>)
 8009b8a:	6818      	ldr	r0, [r3, #0]
 8009b8c:	4770      	bx	lr
 8009b8e:	bf00      	nop
 8009b90:	20000010 	.word	0x20000010

08009b94 <__libc_init_array>:
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	4d0d      	ldr	r5, [pc, #52]	; (8009bcc <__libc_init_array+0x38>)
 8009b98:	4c0d      	ldr	r4, [pc, #52]	; (8009bd0 <__libc_init_array+0x3c>)
 8009b9a:	1b64      	subs	r4, r4, r5
 8009b9c:	10a4      	asrs	r4, r4, #2
 8009b9e:	2600      	movs	r6, #0
 8009ba0:	42a6      	cmp	r6, r4
 8009ba2:	d109      	bne.n	8009bb8 <__libc_init_array+0x24>
 8009ba4:	4d0b      	ldr	r5, [pc, #44]	; (8009bd4 <__libc_init_array+0x40>)
 8009ba6:	4c0c      	ldr	r4, [pc, #48]	; (8009bd8 <__libc_init_array+0x44>)
 8009ba8:	f002 fd38 	bl	800c61c <_init>
 8009bac:	1b64      	subs	r4, r4, r5
 8009bae:	10a4      	asrs	r4, r4, #2
 8009bb0:	2600      	movs	r6, #0
 8009bb2:	42a6      	cmp	r6, r4
 8009bb4:	d105      	bne.n	8009bc2 <__libc_init_array+0x2e>
 8009bb6:	bd70      	pop	{r4, r5, r6, pc}
 8009bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bbc:	4798      	blx	r3
 8009bbe:	3601      	adds	r6, #1
 8009bc0:	e7ee      	b.n	8009ba0 <__libc_init_array+0xc>
 8009bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc6:	4798      	blx	r3
 8009bc8:	3601      	adds	r6, #1
 8009bca:	e7f2      	b.n	8009bb2 <__libc_init_array+0x1e>
 8009bcc:	0800d2e4 	.word	0x0800d2e4
 8009bd0:	0800d2e4 	.word	0x0800d2e4
 8009bd4:	0800d2e4 	.word	0x0800d2e4
 8009bd8:	0800d2e8 	.word	0x0800d2e8

08009bdc <memcpy>:
 8009bdc:	440a      	add	r2, r1
 8009bde:	4291      	cmp	r1, r2
 8009be0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009be4:	d100      	bne.n	8009be8 <memcpy+0xc>
 8009be6:	4770      	bx	lr
 8009be8:	b510      	push	{r4, lr}
 8009bea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bf2:	4291      	cmp	r1, r2
 8009bf4:	d1f9      	bne.n	8009bea <memcpy+0xe>
 8009bf6:	bd10      	pop	{r4, pc}

08009bf8 <memset>:
 8009bf8:	4402      	add	r2, r0
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d100      	bne.n	8009c02 <memset+0xa>
 8009c00:	4770      	bx	lr
 8009c02:	f803 1b01 	strb.w	r1, [r3], #1
 8009c06:	e7f9      	b.n	8009bfc <memset+0x4>

08009c08 <__cvt>:
 8009c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c0c:	ec55 4b10 	vmov	r4, r5, d0
 8009c10:	2d00      	cmp	r5, #0
 8009c12:	460e      	mov	r6, r1
 8009c14:	4619      	mov	r1, r3
 8009c16:	462b      	mov	r3, r5
 8009c18:	bfbb      	ittet	lt
 8009c1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009c1e:	461d      	movlt	r5, r3
 8009c20:	2300      	movge	r3, #0
 8009c22:	232d      	movlt	r3, #45	; 0x2d
 8009c24:	700b      	strb	r3, [r1, #0]
 8009c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009c2c:	4691      	mov	r9, r2
 8009c2e:	f023 0820 	bic.w	r8, r3, #32
 8009c32:	bfbc      	itt	lt
 8009c34:	4622      	movlt	r2, r4
 8009c36:	4614      	movlt	r4, r2
 8009c38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c3c:	d005      	beq.n	8009c4a <__cvt+0x42>
 8009c3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009c42:	d100      	bne.n	8009c46 <__cvt+0x3e>
 8009c44:	3601      	adds	r6, #1
 8009c46:	2102      	movs	r1, #2
 8009c48:	e000      	b.n	8009c4c <__cvt+0x44>
 8009c4a:	2103      	movs	r1, #3
 8009c4c:	ab03      	add	r3, sp, #12
 8009c4e:	9301      	str	r3, [sp, #4]
 8009c50:	ab02      	add	r3, sp, #8
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	ec45 4b10 	vmov	d0, r4, r5
 8009c58:	4653      	mov	r3, sl
 8009c5a:	4632      	mov	r2, r6
 8009c5c:	f000 fccc 	bl	800a5f8 <_dtoa_r>
 8009c60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c64:	4607      	mov	r7, r0
 8009c66:	d102      	bne.n	8009c6e <__cvt+0x66>
 8009c68:	f019 0f01 	tst.w	r9, #1
 8009c6c:	d022      	beq.n	8009cb4 <__cvt+0xac>
 8009c6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c72:	eb07 0906 	add.w	r9, r7, r6
 8009c76:	d110      	bne.n	8009c9a <__cvt+0x92>
 8009c78:	783b      	ldrb	r3, [r7, #0]
 8009c7a:	2b30      	cmp	r3, #48	; 0x30
 8009c7c:	d10a      	bne.n	8009c94 <__cvt+0x8c>
 8009c7e:	2200      	movs	r2, #0
 8009c80:	2300      	movs	r3, #0
 8009c82:	4620      	mov	r0, r4
 8009c84:	4629      	mov	r1, r5
 8009c86:	f7f6 ff1f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c8a:	b918      	cbnz	r0, 8009c94 <__cvt+0x8c>
 8009c8c:	f1c6 0601 	rsb	r6, r6, #1
 8009c90:	f8ca 6000 	str.w	r6, [sl]
 8009c94:	f8da 3000 	ldr.w	r3, [sl]
 8009c98:	4499      	add	r9, r3
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	f7f6 ff11 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ca6:	b108      	cbz	r0, 8009cac <__cvt+0xa4>
 8009ca8:	f8cd 900c 	str.w	r9, [sp, #12]
 8009cac:	2230      	movs	r2, #48	; 0x30
 8009cae:	9b03      	ldr	r3, [sp, #12]
 8009cb0:	454b      	cmp	r3, r9
 8009cb2:	d307      	bcc.n	8009cc4 <__cvt+0xbc>
 8009cb4:	9b03      	ldr	r3, [sp, #12]
 8009cb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cb8:	1bdb      	subs	r3, r3, r7
 8009cba:	4638      	mov	r0, r7
 8009cbc:	6013      	str	r3, [r2, #0]
 8009cbe:	b004      	add	sp, #16
 8009cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc4:	1c59      	adds	r1, r3, #1
 8009cc6:	9103      	str	r1, [sp, #12]
 8009cc8:	701a      	strb	r2, [r3, #0]
 8009cca:	e7f0      	b.n	8009cae <__cvt+0xa6>

08009ccc <__exponent>:
 8009ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2900      	cmp	r1, #0
 8009cd2:	bfb8      	it	lt
 8009cd4:	4249      	neglt	r1, r1
 8009cd6:	f803 2b02 	strb.w	r2, [r3], #2
 8009cda:	bfb4      	ite	lt
 8009cdc:	222d      	movlt	r2, #45	; 0x2d
 8009cde:	222b      	movge	r2, #43	; 0x2b
 8009ce0:	2909      	cmp	r1, #9
 8009ce2:	7042      	strb	r2, [r0, #1]
 8009ce4:	dd2a      	ble.n	8009d3c <__exponent+0x70>
 8009ce6:	f10d 0407 	add.w	r4, sp, #7
 8009cea:	46a4      	mov	ip, r4
 8009cec:	270a      	movs	r7, #10
 8009cee:	46a6      	mov	lr, r4
 8009cf0:	460a      	mov	r2, r1
 8009cf2:	fb91 f6f7 	sdiv	r6, r1, r7
 8009cf6:	fb07 1516 	mls	r5, r7, r6, r1
 8009cfa:	3530      	adds	r5, #48	; 0x30
 8009cfc:	2a63      	cmp	r2, #99	; 0x63
 8009cfe:	f104 34ff 	add.w	r4, r4, #4294967295
 8009d02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009d06:	4631      	mov	r1, r6
 8009d08:	dcf1      	bgt.n	8009cee <__exponent+0x22>
 8009d0a:	3130      	adds	r1, #48	; 0x30
 8009d0c:	f1ae 0502 	sub.w	r5, lr, #2
 8009d10:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009d14:	1c44      	adds	r4, r0, #1
 8009d16:	4629      	mov	r1, r5
 8009d18:	4561      	cmp	r1, ip
 8009d1a:	d30a      	bcc.n	8009d32 <__exponent+0x66>
 8009d1c:	f10d 0209 	add.w	r2, sp, #9
 8009d20:	eba2 020e 	sub.w	r2, r2, lr
 8009d24:	4565      	cmp	r5, ip
 8009d26:	bf88      	it	hi
 8009d28:	2200      	movhi	r2, #0
 8009d2a:	4413      	add	r3, r2
 8009d2c:	1a18      	subs	r0, r3, r0
 8009d2e:	b003      	add	sp, #12
 8009d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d36:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009d3a:	e7ed      	b.n	8009d18 <__exponent+0x4c>
 8009d3c:	2330      	movs	r3, #48	; 0x30
 8009d3e:	3130      	adds	r1, #48	; 0x30
 8009d40:	7083      	strb	r3, [r0, #2]
 8009d42:	70c1      	strb	r1, [r0, #3]
 8009d44:	1d03      	adds	r3, r0, #4
 8009d46:	e7f1      	b.n	8009d2c <__exponent+0x60>

08009d48 <_printf_float>:
 8009d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	ed2d 8b02 	vpush	{d8}
 8009d50:	b08d      	sub	sp, #52	; 0x34
 8009d52:	460c      	mov	r4, r1
 8009d54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009d58:	4616      	mov	r6, r2
 8009d5a:	461f      	mov	r7, r3
 8009d5c:	4605      	mov	r5, r0
 8009d5e:	f001 fa39 	bl	800b1d4 <_localeconv_r>
 8009d62:	f8d0 a000 	ldr.w	sl, [r0]
 8009d66:	4650      	mov	r0, sl
 8009d68:	f7f6 fa32 	bl	80001d0 <strlen>
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d70:	6823      	ldr	r3, [r4, #0]
 8009d72:	9305      	str	r3, [sp, #20]
 8009d74:	f8d8 3000 	ldr.w	r3, [r8]
 8009d78:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009d7c:	3307      	adds	r3, #7
 8009d7e:	f023 0307 	bic.w	r3, r3, #7
 8009d82:	f103 0208 	add.w	r2, r3, #8
 8009d86:	f8c8 2000 	str.w	r2, [r8]
 8009d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009d92:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009d96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009d9a:	9307      	str	r3, [sp, #28]
 8009d9c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009da0:	ee08 0a10 	vmov	s16, r0
 8009da4:	4b9f      	ldr	r3, [pc, #636]	; (800a024 <_printf_float+0x2dc>)
 8009da6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009daa:	f04f 32ff 	mov.w	r2, #4294967295
 8009dae:	f7f6 febd 	bl	8000b2c <__aeabi_dcmpun>
 8009db2:	bb88      	cbnz	r0, 8009e18 <_printf_float+0xd0>
 8009db4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009db8:	4b9a      	ldr	r3, [pc, #616]	; (800a024 <_printf_float+0x2dc>)
 8009dba:	f04f 32ff 	mov.w	r2, #4294967295
 8009dbe:	f7f6 fe97 	bl	8000af0 <__aeabi_dcmple>
 8009dc2:	bb48      	cbnz	r0, 8009e18 <_printf_float+0xd0>
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	4640      	mov	r0, r8
 8009dca:	4649      	mov	r1, r9
 8009dcc:	f7f6 fe86 	bl	8000adc <__aeabi_dcmplt>
 8009dd0:	b110      	cbz	r0, 8009dd8 <_printf_float+0x90>
 8009dd2:	232d      	movs	r3, #45	; 0x2d
 8009dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dd8:	4b93      	ldr	r3, [pc, #588]	; (800a028 <_printf_float+0x2e0>)
 8009dda:	4894      	ldr	r0, [pc, #592]	; (800a02c <_printf_float+0x2e4>)
 8009ddc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009de0:	bf94      	ite	ls
 8009de2:	4698      	movls	r8, r3
 8009de4:	4680      	movhi	r8, r0
 8009de6:	2303      	movs	r3, #3
 8009de8:	6123      	str	r3, [r4, #16]
 8009dea:	9b05      	ldr	r3, [sp, #20]
 8009dec:	f023 0204 	bic.w	r2, r3, #4
 8009df0:	6022      	str	r2, [r4, #0]
 8009df2:	f04f 0900 	mov.w	r9, #0
 8009df6:	9700      	str	r7, [sp, #0]
 8009df8:	4633      	mov	r3, r6
 8009dfa:	aa0b      	add	r2, sp, #44	; 0x2c
 8009dfc:	4621      	mov	r1, r4
 8009dfe:	4628      	mov	r0, r5
 8009e00:	f000 f9d8 	bl	800a1b4 <_printf_common>
 8009e04:	3001      	adds	r0, #1
 8009e06:	f040 8090 	bne.w	8009f2a <_printf_float+0x1e2>
 8009e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e0e:	b00d      	add	sp, #52	; 0x34
 8009e10:	ecbd 8b02 	vpop	{d8}
 8009e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e18:	4642      	mov	r2, r8
 8009e1a:	464b      	mov	r3, r9
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	4649      	mov	r1, r9
 8009e20:	f7f6 fe84 	bl	8000b2c <__aeabi_dcmpun>
 8009e24:	b140      	cbz	r0, 8009e38 <_printf_float+0xf0>
 8009e26:	464b      	mov	r3, r9
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	bfbc      	itt	lt
 8009e2c:	232d      	movlt	r3, #45	; 0x2d
 8009e2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009e32:	487f      	ldr	r0, [pc, #508]	; (800a030 <_printf_float+0x2e8>)
 8009e34:	4b7f      	ldr	r3, [pc, #508]	; (800a034 <_printf_float+0x2ec>)
 8009e36:	e7d1      	b.n	8009ddc <_printf_float+0x94>
 8009e38:	6863      	ldr	r3, [r4, #4]
 8009e3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009e3e:	9206      	str	r2, [sp, #24]
 8009e40:	1c5a      	adds	r2, r3, #1
 8009e42:	d13f      	bne.n	8009ec4 <_printf_float+0x17c>
 8009e44:	2306      	movs	r3, #6
 8009e46:	6063      	str	r3, [r4, #4]
 8009e48:	9b05      	ldr	r3, [sp, #20]
 8009e4a:	6861      	ldr	r1, [r4, #4]
 8009e4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009e50:	2300      	movs	r3, #0
 8009e52:	9303      	str	r3, [sp, #12]
 8009e54:	ab0a      	add	r3, sp, #40	; 0x28
 8009e56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009e5a:	ab09      	add	r3, sp, #36	; 0x24
 8009e5c:	ec49 8b10 	vmov	d0, r8, r9
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	6022      	str	r2, [r4, #0]
 8009e64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e68:	4628      	mov	r0, r5
 8009e6a:	f7ff fecd 	bl	8009c08 <__cvt>
 8009e6e:	9b06      	ldr	r3, [sp, #24]
 8009e70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e72:	2b47      	cmp	r3, #71	; 0x47
 8009e74:	4680      	mov	r8, r0
 8009e76:	d108      	bne.n	8009e8a <_printf_float+0x142>
 8009e78:	1cc8      	adds	r0, r1, #3
 8009e7a:	db02      	blt.n	8009e82 <_printf_float+0x13a>
 8009e7c:	6863      	ldr	r3, [r4, #4]
 8009e7e:	4299      	cmp	r1, r3
 8009e80:	dd41      	ble.n	8009f06 <_printf_float+0x1be>
 8009e82:	f1ab 0b02 	sub.w	fp, fp, #2
 8009e86:	fa5f fb8b 	uxtb.w	fp, fp
 8009e8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009e8e:	d820      	bhi.n	8009ed2 <_printf_float+0x18a>
 8009e90:	3901      	subs	r1, #1
 8009e92:	465a      	mov	r2, fp
 8009e94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009e98:	9109      	str	r1, [sp, #36]	; 0x24
 8009e9a:	f7ff ff17 	bl	8009ccc <__exponent>
 8009e9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ea0:	1813      	adds	r3, r2, r0
 8009ea2:	2a01      	cmp	r2, #1
 8009ea4:	4681      	mov	r9, r0
 8009ea6:	6123      	str	r3, [r4, #16]
 8009ea8:	dc02      	bgt.n	8009eb0 <_printf_float+0x168>
 8009eaa:	6822      	ldr	r2, [r4, #0]
 8009eac:	07d2      	lsls	r2, r2, #31
 8009eae:	d501      	bpl.n	8009eb4 <_printf_float+0x16c>
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	6123      	str	r3, [r4, #16]
 8009eb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d09c      	beq.n	8009df6 <_printf_float+0xae>
 8009ebc:	232d      	movs	r3, #45	; 0x2d
 8009ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ec2:	e798      	b.n	8009df6 <_printf_float+0xae>
 8009ec4:	9a06      	ldr	r2, [sp, #24]
 8009ec6:	2a47      	cmp	r2, #71	; 0x47
 8009ec8:	d1be      	bne.n	8009e48 <_printf_float+0x100>
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d1bc      	bne.n	8009e48 <_printf_float+0x100>
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e7b9      	b.n	8009e46 <_printf_float+0xfe>
 8009ed2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009ed6:	d118      	bne.n	8009f0a <_printf_float+0x1c2>
 8009ed8:	2900      	cmp	r1, #0
 8009eda:	6863      	ldr	r3, [r4, #4]
 8009edc:	dd0b      	ble.n	8009ef6 <_printf_float+0x1ae>
 8009ede:	6121      	str	r1, [r4, #16]
 8009ee0:	b913      	cbnz	r3, 8009ee8 <_printf_float+0x1a0>
 8009ee2:	6822      	ldr	r2, [r4, #0]
 8009ee4:	07d0      	lsls	r0, r2, #31
 8009ee6:	d502      	bpl.n	8009eee <_printf_float+0x1a6>
 8009ee8:	3301      	adds	r3, #1
 8009eea:	440b      	add	r3, r1
 8009eec:	6123      	str	r3, [r4, #16]
 8009eee:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ef0:	f04f 0900 	mov.w	r9, #0
 8009ef4:	e7de      	b.n	8009eb4 <_printf_float+0x16c>
 8009ef6:	b913      	cbnz	r3, 8009efe <_printf_float+0x1b6>
 8009ef8:	6822      	ldr	r2, [r4, #0]
 8009efa:	07d2      	lsls	r2, r2, #31
 8009efc:	d501      	bpl.n	8009f02 <_printf_float+0x1ba>
 8009efe:	3302      	adds	r3, #2
 8009f00:	e7f4      	b.n	8009eec <_printf_float+0x1a4>
 8009f02:	2301      	movs	r3, #1
 8009f04:	e7f2      	b.n	8009eec <_printf_float+0x1a4>
 8009f06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009f0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f0c:	4299      	cmp	r1, r3
 8009f0e:	db05      	blt.n	8009f1c <_printf_float+0x1d4>
 8009f10:	6823      	ldr	r3, [r4, #0]
 8009f12:	6121      	str	r1, [r4, #16]
 8009f14:	07d8      	lsls	r0, r3, #31
 8009f16:	d5ea      	bpl.n	8009eee <_printf_float+0x1a6>
 8009f18:	1c4b      	adds	r3, r1, #1
 8009f1a:	e7e7      	b.n	8009eec <_printf_float+0x1a4>
 8009f1c:	2900      	cmp	r1, #0
 8009f1e:	bfd4      	ite	le
 8009f20:	f1c1 0202 	rsble	r2, r1, #2
 8009f24:	2201      	movgt	r2, #1
 8009f26:	4413      	add	r3, r2
 8009f28:	e7e0      	b.n	8009eec <_printf_float+0x1a4>
 8009f2a:	6823      	ldr	r3, [r4, #0]
 8009f2c:	055a      	lsls	r2, r3, #21
 8009f2e:	d407      	bmi.n	8009f40 <_printf_float+0x1f8>
 8009f30:	6923      	ldr	r3, [r4, #16]
 8009f32:	4642      	mov	r2, r8
 8009f34:	4631      	mov	r1, r6
 8009f36:	4628      	mov	r0, r5
 8009f38:	47b8      	blx	r7
 8009f3a:	3001      	adds	r0, #1
 8009f3c:	d12c      	bne.n	8009f98 <_printf_float+0x250>
 8009f3e:	e764      	b.n	8009e0a <_printf_float+0xc2>
 8009f40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f44:	f240 80e0 	bls.w	800a108 <_printf_float+0x3c0>
 8009f48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	2300      	movs	r3, #0
 8009f50:	f7f6 fdba 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d034      	beq.n	8009fc2 <_printf_float+0x27a>
 8009f58:	4a37      	ldr	r2, [pc, #220]	; (800a038 <_printf_float+0x2f0>)
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	4631      	mov	r1, r6
 8009f5e:	4628      	mov	r0, r5
 8009f60:	47b8      	blx	r7
 8009f62:	3001      	adds	r0, #1
 8009f64:	f43f af51 	beq.w	8009e0a <_printf_float+0xc2>
 8009f68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	db02      	blt.n	8009f76 <_printf_float+0x22e>
 8009f70:	6823      	ldr	r3, [r4, #0]
 8009f72:	07d8      	lsls	r0, r3, #31
 8009f74:	d510      	bpl.n	8009f98 <_printf_float+0x250>
 8009f76:	ee18 3a10 	vmov	r3, s16
 8009f7a:	4652      	mov	r2, sl
 8009f7c:	4631      	mov	r1, r6
 8009f7e:	4628      	mov	r0, r5
 8009f80:	47b8      	blx	r7
 8009f82:	3001      	adds	r0, #1
 8009f84:	f43f af41 	beq.w	8009e0a <_printf_float+0xc2>
 8009f88:	f04f 0800 	mov.w	r8, #0
 8009f8c:	f104 091a 	add.w	r9, r4, #26
 8009f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f92:	3b01      	subs	r3, #1
 8009f94:	4543      	cmp	r3, r8
 8009f96:	dc09      	bgt.n	8009fac <_printf_float+0x264>
 8009f98:	6823      	ldr	r3, [r4, #0]
 8009f9a:	079b      	lsls	r3, r3, #30
 8009f9c:	f100 8105 	bmi.w	800a1aa <_printf_float+0x462>
 8009fa0:	68e0      	ldr	r0, [r4, #12]
 8009fa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fa4:	4298      	cmp	r0, r3
 8009fa6:	bfb8      	it	lt
 8009fa8:	4618      	movlt	r0, r3
 8009faa:	e730      	b.n	8009e0e <_printf_float+0xc6>
 8009fac:	2301      	movs	r3, #1
 8009fae:	464a      	mov	r2, r9
 8009fb0:	4631      	mov	r1, r6
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	47b8      	blx	r7
 8009fb6:	3001      	adds	r0, #1
 8009fb8:	f43f af27 	beq.w	8009e0a <_printf_float+0xc2>
 8009fbc:	f108 0801 	add.w	r8, r8, #1
 8009fc0:	e7e6      	b.n	8009f90 <_printf_float+0x248>
 8009fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	dc39      	bgt.n	800a03c <_printf_float+0x2f4>
 8009fc8:	4a1b      	ldr	r2, [pc, #108]	; (800a038 <_printf_float+0x2f0>)
 8009fca:	2301      	movs	r3, #1
 8009fcc:	4631      	mov	r1, r6
 8009fce:	4628      	mov	r0, r5
 8009fd0:	47b8      	blx	r7
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	f43f af19 	beq.w	8009e0a <_printf_float+0xc2>
 8009fd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	d102      	bne.n	8009fe6 <_printf_float+0x29e>
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	07d9      	lsls	r1, r3, #31
 8009fe4:	d5d8      	bpl.n	8009f98 <_printf_float+0x250>
 8009fe6:	ee18 3a10 	vmov	r3, s16
 8009fea:	4652      	mov	r2, sl
 8009fec:	4631      	mov	r1, r6
 8009fee:	4628      	mov	r0, r5
 8009ff0:	47b8      	blx	r7
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	f43f af09 	beq.w	8009e0a <_printf_float+0xc2>
 8009ff8:	f04f 0900 	mov.w	r9, #0
 8009ffc:	f104 0a1a 	add.w	sl, r4, #26
 800a000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a002:	425b      	negs	r3, r3
 800a004:	454b      	cmp	r3, r9
 800a006:	dc01      	bgt.n	800a00c <_printf_float+0x2c4>
 800a008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a00a:	e792      	b.n	8009f32 <_printf_float+0x1ea>
 800a00c:	2301      	movs	r3, #1
 800a00e:	4652      	mov	r2, sl
 800a010:	4631      	mov	r1, r6
 800a012:	4628      	mov	r0, r5
 800a014:	47b8      	blx	r7
 800a016:	3001      	adds	r0, #1
 800a018:	f43f aef7 	beq.w	8009e0a <_printf_float+0xc2>
 800a01c:	f109 0901 	add.w	r9, r9, #1
 800a020:	e7ee      	b.n	800a000 <_printf_float+0x2b8>
 800a022:	bf00      	nop
 800a024:	7fefffff 	.word	0x7fefffff
 800a028:	0800cf08 	.word	0x0800cf08
 800a02c:	0800cf0c 	.word	0x0800cf0c
 800a030:	0800cf14 	.word	0x0800cf14
 800a034:	0800cf10 	.word	0x0800cf10
 800a038:	0800cf18 	.word	0x0800cf18
 800a03c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a03e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a040:	429a      	cmp	r2, r3
 800a042:	bfa8      	it	ge
 800a044:	461a      	movge	r2, r3
 800a046:	2a00      	cmp	r2, #0
 800a048:	4691      	mov	r9, r2
 800a04a:	dc37      	bgt.n	800a0bc <_printf_float+0x374>
 800a04c:	f04f 0b00 	mov.w	fp, #0
 800a050:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a054:	f104 021a 	add.w	r2, r4, #26
 800a058:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a05a:	9305      	str	r3, [sp, #20]
 800a05c:	eba3 0309 	sub.w	r3, r3, r9
 800a060:	455b      	cmp	r3, fp
 800a062:	dc33      	bgt.n	800a0cc <_printf_float+0x384>
 800a064:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a068:	429a      	cmp	r2, r3
 800a06a:	db3b      	blt.n	800a0e4 <_printf_float+0x39c>
 800a06c:	6823      	ldr	r3, [r4, #0]
 800a06e:	07da      	lsls	r2, r3, #31
 800a070:	d438      	bmi.n	800a0e4 <_printf_float+0x39c>
 800a072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a074:	9a05      	ldr	r2, [sp, #20]
 800a076:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a078:	1a9a      	subs	r2, r3, r2
 800a07a:	eba3 0901 	sub.w	r9, r3, r1
 800a07e:	4591      	cmp	r9, r2
 800a080:	bfa8      	it	ge
 800a082:	4691      	movge	r9, r2
 800a084:	f1b9 0f00 	cmp.w	r9, #0
 800a088:	dc35      	bgt.n	800a0f6 <_printf_float+0x3ae>
 800a08a:	f04f 0800 	mov.w	r8, #0
 800a08e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a092:	f104 0a1a 	add.w	sl, r4, #26
 800a096:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a09a:	1a9b      	subs	r3, r3, r2
 800a09c:	eba3 0309 	sub.w	r3, r3, r9
 800a0a0:	4543      	cmp	r3, r8
 800a0a2:	f77f af79 	ble.w	8009f98 <_printf_float+0x250>
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	4652      	mov	r2, sl
 800a0aa:	4631      	mov	r1, r6
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	47b8      	blx	r7
 800a0b0:	3001      	adds	r0, #1
 800a0b2:	f43f aeaa 	beq.w	8009e0a <_printf_float+0xc2>
 800a0b6:	f108 0801 	add.w	r8, r8, #1
 800a0ba:	e7ec      	b.n	800a096 <_printf_float+0x34e>
 800a0bc:	4613      	mov	r3, r2
 800a0be:	4631      	mov	r1, r6
 800a0c0:	4642      	mov	r2, r8
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	47b8      	blx	r7
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	d1c0      	bne.n	800a04c <_printf_float+0x304>
 800a0ca:	e69e      	b.n	8009e0a <_printf_float+0xc2>
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	4631      	mov	r1, r6
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	9205      	str	r2, [sp, #20]
 800a0d4:	47b8      	blx	r7
 800a0d6:	3001      	adds	r0, #1
 800a0d8:	f43f ae97 	beq.w	8009e0a <_printf_float+0xc2>
 800a0dc:	9a05      	ldr	r2, [sp, #20]
 800a0de:	f10b 0b01 	add.w	fp, fp, #1
 800a0e2:	e7b9      	b.n	800a058 <_printf_float+0x310>
 800a0e4:	ee18 3a10 	vmov	r3, s16
 800a0e8:	4652      	mov	r2, sl
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	4628      	mov	r0, r5
 800a0ee:	47b8      	blx	r7
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	d1be      	bne.n	800a072 <_printf_float+0x32a>
 800a0f4:	e689      	b.n	8009e0a <_printf_float+0xc2>
 800a0f6:	9a05      	ldr	r2, [sp, #20]
 800a0f8:	464b      	mov	r3, r9
 800a0fa:	4442      	add	r2, r8
 800a0fc:	4631      	mov	r1, r6
 800a0fe:	4628      	mov	r0, r5
 800a100:	47b8      	blx	r7
 800a102:	3001      	adds	r0, #1
 800a104:	d1c1      	bne.n	800a08a <_printf_float+0x342>
 800a106:	e680      	b.n	8009e0a <_printf_float+0xc2>
 800a108:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a10a:	2a01      	cmp	r2, #1
 800a10c:	dc01      	bgt.n	800a112 <_printf_float+0x3ca>
 800a10e:	07db      	lsls	r3, r3, #31
 800a110:	d538      	bpl.n	800a184 <_printf_float+0x43c>
 800a112:	2301      	movs	r3, #1
 800a114:	4642      	mov	r2, r8
 800a116:	4631      	mov	r1, r6
 800a118:	4628      	mov	r0, r5
 800a11a:	47b8      	blx	r7
 800a11c:	3001      	adds	r0, #1
 800a11e:	f43f ae74 	beq.w	8009e0a <_printf_float+0xc2>
 800a122:	ee18 3a10 	vmov	r3, s16
 800a126:	4652      	mov	r2, sl
 800a128:	4631      	mov	r1, r6
 800a12a:	4628      	mov	r0, r5
 800a12c:	47b8      	blx	r7
 800a12e:	3001      	adds	r0, #1
 800a130:	f43f ae6b 	beq.w	8009e0a <_printf_float+0xc2>
 800a134:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a138:	2200      	movs	r2, #0
 800a13a:	2300      	movs	r3, #0
 800a13c:	f7f6 fcc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a140:	b9d8      	cbnz	r0, 800a17a <_printf_float+0x432>
 800a142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a144:	f108 0201 	add.w	r2, r8, #1
 800a148:	3b01      	subs	r3, #1
 800a14a:	4631      	mov	r1, r6
 800a14c:	4628      	mov	r0, r5
 800a14e:	47b8      	blx	r7
 800a150:	3001      	adds	r0, #1
 800a152:	d10e      	bne.n	800a172 <_printf_float+0x42a>
 800a154:	e659      	b.n	8009e0a <_printf_float+0xc2>
 800a156:	2301      	movs	r3, #1
 800a158:	4652      	mov	r2, sl
 800a15a:	4631      	mov	r1, r6
 800a15c:	4628      	mov	r0, r5
 800a15e:	47b8      	blx	r7
 800a160:	3001      	adds	r0, #1
 800a162:	f43f ae52 	beq.w	8009e0a <_printf_float+0xc2>
 800a166:	f108 0801 	add.w	r8, r8, #1
 800a16a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a16c:	3b01      	subs	r3, #1
 800a16e:	4543      	cmp	r3, r8
 800a170:	dcf1      	bgt.n	800a156 <_printf_float+0x40e>
 800a172:	464b      	mov	r3, r9
 800a174:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a178:	e6dc      	b.n	8009f34 <_printf_float+0x1ec>
 800a17a:	f04f 0800 	mov.w	r8, #0
 800a17e:	f104 0a1a 	add.w	sl, r4, #26
 800a182:	e7f2      	b.n	800a16a <_printf_float+0x422>
 800a184:	2301      	movs	r3, #1
 800a186:	4642      	mov	r2, r8
 800a188:	e7df      	b.n	800a14a <_printf_float+0x402>
 800a18a:	2301      	movs	r3, #1
 800a18c:	464a      	mov	r2, r9
 800a18e:	4631      	mov	r1, r6
 800a190:	4628      	mov	r0, r5
 800a192:	47b8      	blx	r7
 800a194:	3001      	adds	r0, #1
 800a196:	f43f ae38 	beq.w	8009e0a <_printf_float+0xc2>
 800a19a:	f108 0801 	add.w	r8, r8, #1
 800a19e:	68e3      	ldr	r3, [r4, #12]
 800a1a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1a2:	1a5b      	subs	r3, r3, r1
 800a1a4:	4543      	cmp	r3, r8
 800a1a6:	dcf0      	bgt.n	800a18a <_printf_float+0x442>
 800a1a8:	e6fa      	b.n	8009fa0 <_printf_float+0x258>
 800a1aa:	f04f 0800 	mov.w	r8, #0
 800a1ae:	f104 0919 	add.w	r9, r4, #25
 800a1b2:	e7f4      	b.n	800a19e <_printf_float+0x456>

0800a1b4 <_printf_common>:
 800a1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b8:	4616      	mov	r6, r2
 800a1ba:	4699      	mov	r9, r3
 800a1bc:	688a      	ldr	r2, [r1, #8]
 800a1be:	690b      	ldr	r3, [r1, #16]
 800a1c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	bfb8      	it	lt
 800a1c8:	4613      	movlt	r3, r2
 800a1ca:	6033      	str	r3, [r6, #0]
 800a1cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1d0:	4607      	mov	r7, r0
 800a1d2:	460c      	mov	r4, r1
 800a1d4:	b10a      	cbz	r2, 800a1da <_printf_common+0x26>
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	6033      	str	r3, [r6, #0]
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	0699      	lsls	r1, r3, #26
 800a1de:	bf42      	ittt	mi
 800a1e0:	6833      	ldrmi	r3, [r6, #0]
 800a1e2:	3302      	addmi	r3, #2
 800a1e4:	6033      	strmi	r3, [r6, #0]
 800a1e6:	6825      	ldr	r5, [r4, #0]
 800a1e8:	f015 0506 	ands.w	r5, r5, #6
 800a1ec:	d106      	bne.n	800a1fc <_printf_common+0x48>
 800a1ee:	f104 0a19 	add.w	sl, r4, #25
 800a1f2:	68e3      	ldr	r3, [r4, #12]
 800a1f4:	6832      	ldr	r2, [r6, #0]
 800a1f6:	1a9b      	subs	r3, r3, r2
 800a1f8:	42ab      	cmp	r3, r5
 800a1fa:	dc26      	bgt.n	800a24a <_printf_common+0x96>
 800a1fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a200:	1e13      	subs	r3, r2, #0
 800a202:	6822      	ldr	r2, [r4, #0]
 800a204:	bf18      	it	ne
 800a206:	2301      	movne	r3, #1
 800a208:	0692      	lsls	r2, r2, #26
 800a20a:	d42b      	bmi.n	800a264 <_printf_common+0xb0>
 800a20c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a210:	4649      	mov	r1, r9
 800a212:	4638      	mov	r0, r7
 800a214:	47c0      	blx	r8
 800a216:	3001      	adds	r0, #1
 800a218:	d01e      	beq.n	800a258 <_printf_common+0xa4>
 800a21a:	6823      	ldr	r3, [r4, #0]
 800a21c:	68e5      	ldr	r5, [r4, #12]
 800a21e:	6832      	ldr	r2, [r6, #0]
 800a220:	f003 0306 	and.w	r3, r3, #6
 800a224:	2b04      	cmp	r3, #4
 800a226:	bf08      	it	eq
 800a228:	1aad      	subeq	r5, r5, r2
 800a22a:	68a3      	ldr	r3, [r4, #8]
 800a22c:	6922      	ldr	r2, [r4, #16]
 800a22e:	bf0c      	ite	eq
 800a230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a234:	2500      	movne	r5, #0
 800a236:	4293      	cmp	r3, r2
 800a238:	bfc4      	itt	gt
 800a23a:	1a9b      	subgt	r3, r3, r2
 800a23c:	18ed      	addgt	r5, r5, r3
 800a23e:	2600      	movs	r6, #0
 800a240:	341a      	adds	r4, #26
 800a242:	42b5      	cmp	r5, r6
 800a244:	d11a      	bne.n	800a27c <_printf_common+0xc8>
 800a246:	2000      	movs	r0, #0
 800a248:	e008      	b.n	800a25c <_printf_common+0xa8>
 800a24a:	2301      	movs	r3, #1
 800a24c:	4652      	mov	r2, sl
 800a24e:	4649      	mov	r1, r9
 800a250:	4638      	mov	r0, r7
 800a252:	47c0      	blx	r8
 800a254:	3001      	adds	r0, #1
 800a256:	d103      	bne.n	800a260 <_printf_common+0xac>
 800a258:	f04f 30ff 	mov.w	r0, #4294967295
 800a25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a260:	3501      	adds	r5, #1
 800a262:	e7c6      	b.n	800a1f2 <_printf_common+0x3e>
 800a264:	18e1      	adds	r1, r4, r3
 800a266:	1c5a      	adds	r2, r3, #1
 800a268:	2030      	movs	r0, #48	; 0x30
 800a26a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a26e:	4422      	add	r2, r4
 800a270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a274:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a278:	3302      	adds	r3, #2
 800a27a:	e7c7      	b.n	800a20c <_printf_common+0x58>
 800a27c:	2301      	movs	r3, #1
 800a27e:	4622      	mov	r2, r4
 800a280:	4649      	mov	r1, r9
 800a282:	4638      	mov	r0, r7
 800a284:	47c0      	blx	r8
 800a286:	3001      	adds	r0, #1
 800a288:	d0e6      	beq.n	800a258 <_printf_common+0xa4>
 800a28a:	3601      	adds	r6, #1
 800a28c:	e7d9      	b.n	800a242 <_printf_common+0x8e>
	...

0800a290 <_printf_i>:
 800a290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a294:	7e0f      	ldrb	r7, [r1, #24]
 800a296:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a298:	2f78      	cmp	r7, #120	; 0x78
 800a29a:	4691      	mov	r9, r2
 800a29c:	4680      	mov	r8, r0
 800a29e:	460c      	mov	r4, r1
 800a2a0:	469a      	mov	sl, r3
 800a2a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a2a6:	d807      	bhi.n	800a2b8 <_printf_i+0x28>
 800a2a8:	2f62      	cmp	r7, #98	; 0x62
 800a2aa:	d80a      	bhi.n	800a2c2 <_printf_i+0x32>
 800a2ac:	2f00      	cmp	r7, #0
 800a2ae:	f000 80d8 	beq.w	800a462 <_printf_i+0x1d2>
 800a2b2:	2f58      	cmp	r7, #88	; 0x58
 800a2b4:	f000 80a3 	beq.w	800a3fe <_printf_i+0x16e>
 800a2b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a2c0:	e03a      	b.n	800a338 <_printf_i+0xa8>
 800a2c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a2c6:	2b15      	cmp	r3, #21
 800a2c8:	d8f6      	bhi.n	800a2b8 <_printf_i+0x28>
 800a2ca:	a101      	add	r1, pc, #4	; (adr r1, 800a2d0 <_printf_i+0x40>)
 800a2cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2d0:	0800a329 	.word	0x0800a329
 800a2d4:	0800a33d 	.word	0x0800a33d
 800a2d8:	0800a2b9 	.word	0x0800a2b9
 800a2dc:	0800a2b9 	.word	0x0800a2b9
 800a2e0:	0800a2b9 	.word	0x0800a2b9
 800a2e4:	0800a2b9 	.word	0x0800a2b9
 800a2e8:	0800a33d 	.word	0x0800a33d
 800a2ec:	0800a2b9 	.word	0x0800a2b9
 800a2f0:	0800a2b9 	.word	0x0800a2b9
 800a2f4:	0800a2b9 	.word	0x0800a2b9
 800a2f8:	0800a2b9 	.word	0x0800a2b9
 800a2fc:	0800a449 	.word	0x0800a449
 800a300:	0800a36d 	.word	0x0800a36d
 800a304:	0800a42b 	.word	0x0800a42b
 800a308:	0800a2b9 	.word	0x0800a2b9
 800a30c:	0800a2b9 	.word	0x0800a2b9
 800a310:	0800a46b 	.word	0x0800a46b
 800a314:	0800a2b9 	.word	0x0800a2b9
 800a318:	0800a36d 	.word	0x0800a36d
 800a31c:	0800a2b9 	.word	0x0800a2b9
 800a320:	0800a2b9 	.word	0x0800a2b9
 800a324:	0800a433 	.word	0x0800a433
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	1d1a      	adds	r2, r3, #4
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	602a      	str	r2, [r5, #0]
 800a330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a338:	2301      	movs	r3, #1
 800a33a:	e0a3      	b.n	800a484 <_printf_i+0x1f4>
 800a33c:	6820      	ldr	r0, [r4, #0]
 800a33e:	6829      	ldr	r1, [r5, #0]
 800a340:	0606      	lsls	r6, r0, #24
 800a342:	f101 0304 	add.w	r3, r1, #4
 800a346:	d50a      	bpl.n	800a35e <_printf_i+0xce>
 800a348:	680e      	ldr	r6, [r1, #0]
 800a34a:	602b      	str	r3, [r5, #0]
 800a34c:	2e00      	cmp	r6, #0
 800a34e:	da03      	bge.n	800a358 <_printf_i+0xc8>
 800a350:	232d      	movs	r3, #45	; 0x2d
 800a352:	4276      	negs	r6, r6
 800a354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a358:	485e      	ldr	r0, [pc, #376]	; (800a4d4 <_printf_i+0x244>)
 800a35a:	230a      	movs	r3, #10
 800a35c:	e019      	b.n	800a392 <_printf_i+0x102>
 800a35e:	680e      	ldr	r6, [r1, #0]
 800a360:	602b      	str	r3, [r5, #0]
 800a362:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a366:	bf18      	it	ne
 800a368:	b236      	sxthne	r6, r6
 800a36a:	e7ef      	b.n	800a34c <_printf_i+0xbc>
 800a36c:	682b      	ldr	r3, [r5, #0]
 800a36e:	6820      	ldr	r0, [r4, #0]
 800a370:	1d19      	adds	r1, r3, #4
 800a372:	6029      	str	r1, [r5, #0]
 800a374:	0601      	lsls	r1, r0, #24
 800a376:	d501      	bpl.n	800a37c <_printf_i+0xec>
 800a378:	681e      	ldr	r6, [r3, #0]
 800a37a:	e002      	b.n	800a382 <_printf_i+0xf2>
 800a37c:	0646      	lsls	r6, r0, #25
 800a37e:	d5fb      	bpl.n	800a378 <_printf_i+0xe8>
 800a380:	881e      	ldrh	r6, [r3, #0]
 800a382:	4854      	ldr	r0, [pc, #336]	; (800a4d4 <_printf_i+0x244>)
 800a384:	2f6f      	cmp	r7, #111	; 0x6f
 800a386:	bf0c      	ite	eq
 800a388:	2308      	moveq	r3, #8
 800a38a:	230a      	movne	r3, #10
 800a38c:	2100      	movs	r1, #0
 800a38e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a392:	6865      	ldr	r5, [r4, #4]
 800a394:	60a5      	str	r5, [r4, #8]
 800a396:	2d00      	cmp	r5, #0
 800a398:	bfa2      	ittt	ge
 800a39a:	6821      	ldrge	r1, [r4, #0]
 800a39c:	f021 0104 	bicge.w	r1, r1, #4
 800a3a0:	6021      	strge	r1, [r4, #0]
 800a3a2:	b90e      	cbnz	r6, 800a3a8 <_printf_i+0x118>
 800a3a4:	2d00      	cmp	r5, #0
 800a3a6:	d04d      	beq.n	800a444 <_printf_i+0x1b4>
 800a3a8:	4615      	mov	r5, r2
 800a3aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800a3ae:	fb03 6711 	mls	r7, r3, r1, r6
 800a3b2:	5dc7      	ldrb	r7, [r0, r7]
 800a3b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a3b8:	4637      	mov	r7, r6
 800a3ba:	42bb      	cmp	r3, r7
 800a3bc:	460e      	mov	r6, r1
 800a3be:	d9f4      	bls.n	800a3aa <_printf_i+0x11a>
 800a3c0:	2b08      	cmp	r3, #8
 800a3c2:	d10b      	bne.n	800a3dc <_printf_i+0x14c>
 800a3c4:	6823      	ldr	r3, [r4, #0]
 800a3c6:	07de      	lsls	r6, r3, #31
 800a3c8:	d508      	bpl.n	800a3dc <_printf_i+0x14c>
 800a3ca:	6923      	ldr	r3, [r4, #16]
 800a3cc:	6861      	ldr	r1, [r4, #4]
 800a3ce:	4299      	cmp	r1, r3
 800a3d0:	bfde      	ittt	le
 800a3d2:	2330      	movle	r3, #48	; 0x30
 800a3d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a3dc:	1b52      	subs	r2, r2, r5
 800a3de:	6122      	str	r2, [r4, #16]
 800a3e0:	f8cd a000 	str.w	sl, [sp]
 800a3e4:	464b      	mov	r3, r9
 800a3e6:	aa03      	add	r2, sp, #12
 800a3e8:	4621      	mov	r1, r4
 800a3ea:	4640      	mov	r0, r8
 800a3ec:	f7ff fee2 	bl	800a1b4 <_printf_common>
 800a3f0:	3001      	adds	r0, #1
 800a3f2:	d14c      	bne.n	800a48e <_printf_i+0x1fe>
 800a3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f8:	b004      	add	sp, #16
 800a3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3fe:	4835      	ldr	r0, [pc, #212]	; (800a4d4 <_printf_i+0x244>)
 800a400:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a404:	6829      	ldr	r1, [r5, #0]
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	f851 6b04 	ldr.w	r6, [r1], #4
 800a40c:	6029      	str	r1, [r5, #0]
 800a40e:	061d      	lsls	r5, r3, #24
 800a410:	d514      	bpl.n	800a43c <_printf_i+0x1ac>
 800a412:	07df      	lsls	r7, r3, #31
 800a414:	bf44      	itt	mi
 800a416:	f043 0320 	orrmi.w	r3, r3, #32
 800a41a:	6023      	strmi	r3, [r4, #0]
 800a41c:	b91e      	cbnz	r6, 800a426 <_printf_i+0x196>
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	f023 0320 	bic.w	r3, r3, #32
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	2310      	movs	r3, #16
 800a428:	e7b0      	b.n	800a38c <_printf_i+0xfc>
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	f043 0320 	orr.w	r3, r3, #32
 800a430:	6023      	str	r3, [r4, #0]
 800a432:	2378      	movs	r3, #120	; 0x78
 800a434:	4828      	ldr	r0, [pc, #160]	; (800a4d8 <_printf_i+0x248>)
 800a436:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a43a:	e7e3      	b.n	800a404 <_printf_i+0x174>
 800a43c:	0659      	lsls	r1, r3, #25
 800a43e:	bf48      	it	mi
 800a440:	b2b6      	uxthmi	r6, r6
 800a442:	e7e6      	b.n	800a412 <_printf_i+0x182>
 800a444:	4615      	mov	r5, r2
 800a446:	e7bb      	b.n	800a3c0 <_printf_i+0x130>
 800a448:	682b      	ldr	r3, [r5, #0]
 800a44a:	6826      	ldr	r6, [r4, #0]
 800a44c:	6961      	ldr	r1, [r4, #20]
 800a44e:	1d18      	adds	r0, r3, #4
 800a450:	6028      	str	r0, [r5, #0]
 800a452:	0635      	lsls	r5, r6, #24
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	d501      	bpl.n	800a45c <_printf_i+0x1cc>
 800a458:	6019      	str	r1, [r3, #0]
 800a45a:	e002      	b.n	800a462 <_printf_i+0x1d2>
 800a45c:	0670      	lsls	r0, r6, #25
 800a45e:	d5fb      	bpl.n	800a458 <_printf_i+0x1c8>
 800a460:	8019      	strh	r1, [r3, #0]
 800a462:	2300      	movs	r3, #0
 800a464:	6123      	str	r3, [r4, #16]
 800a466:	4615      	mov	r5, r2
 800a468:	e7ba      	b.n	800a3e0 <_printf_i+0x150>
 800a46a:	682b      	ldr	r3, [r5, #0]
 800a46c:	1d1a      	adds	r2, r3, #4
 800a46e:	602a      	str	r2, [r5, #0]
 800a470:	681d      	ldr	r5, [r3, #0]
 800a472:	6862      	ldr	r2, [r4, #4]
 800a474:	2100      	movs	r1, #0
 800a476:	4628      	mov	r0, r5
 800a478:	f7f5 feb2 	bl	80001e0 <memchr>
 800a47c:	b108      	cbz	r0, 800a482 <_printf_i+0x1f2>
 800a47e:	1b40      	subs	r0, r0, r5
 800a480:	6060      	str	r0, [r4, #4]
 800a482:	6863      	ldr	r3, [r4, #4]
 800a484:	6123      	str	r3, [r4, #16]
 800a486:	2300      	movs	r3, #0
 800a488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a48c:	e7a8      	b.n	800a3e0 <_printf_i+0x150>
 800a48e:	6923      	ldr	r3, [r4, #16]
 800a490:	462a      	mov	r2, r5
 800a492:	4649      	mov	r1, r9
 800a494:	4640      	mov	r0, r8
 800a496:	47d0      	blx	sl
 800a498:	3001      	adds	r0, #1
 800a49a:	d0ab      	beq.n	800a3f4 <_printf_i+0x164>
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	079b      	lsls	r3, r3, #30
 800a4a0:	d413      	bmi.n	800a4ca <_printf_i+0x23a>
 800a4a2:	68e0      	ldr	r0, [r4, #12]
 800a4a4:	9b03      	ldr	r3, [sp, #12]
 800a4a6:	4298      	cmp	r0, r3
 800a4a8:	bfb8      	it	lt
 800a4aa:	4618      	movlt	r0, r3
 800a4ac:	e7a4      	b.n	800a3f8 <_printf_i+0x168>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	4632      	mov	r2, r6
 800a4b2:	4649      	mov	r1, r9
 800a4b4:	4640      	mov	r0, r8
 800a4b6:	47d0      	blx	sl
 800a4b8:	3001      	adds	r0, #1
 800a4ba:	d09b      	beq.n	800a3f4 <_printf_i+0x164>
 800a4bc:	3501      	adds	r5, #1
 800a4be:	68e3      	ldr	r3, [r4, #12]
 800a4c0:	9903      	ldr	r1, [sp, #12]
 800a4c2:	1a5b      	subs	r3, r3, r1
 800a4c4:	42ab      	cmp	r3, r5
 800a4c6:	dcf2      	bgt.n	800a4ae <_printf_i+0x21e>
 800a4c8:	e7eb      	b.n	800a4a2 <_printf_i+0x212>
 800a4ca:	2500      	movs	r5, #0
 800a4cc:	f104 0619 	add.w	r6, r4, #25
 800a4d0:	e7f5      	b.n	800a4be <_printf_i+0x22e>
 800a4d2:	bf00      	nop
 800a4d4:	0800cf1a 	.word	0x0800cf1a
 800a4d8:	0800cf2b 	.word	0x0800cf2b

0800a4dc <quorem>:
 800a4dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e0:	6903      	ldr	r3, [r0, #16]
 800a4e2:	690c      	ldr	r4, [r1, #16]
 800a4e4:	42a3      	cmp	r3, r4
 800a4e6:	4607      	mov	r7, r0
 800a4e8:	f2c0 8081 	blt.w	800a5ee <quorem+0x112>
 800a4ec:	3c01      	subs	r4, #1
 800a4ee:	f101 0814 	add.w	r8, r1, #20
 800a4f2:	f100 0514 	add.w	r5, r0, #20
 800a4f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4fa:	9301      	str	r3, [sp, #4]
 800a4fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a500:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a504:	3301      	adds	r3, #1
 800a506:	429a      	cmp	r2, r3
 800a508:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a50c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a510:	fbb2 f6f3 	udiv	r6, r2, r3
 800a514:	d331      	bcc.n	800a57a <quorem+0x9e>
 800a516:	f04f 0e00 	mov.w	lr, #0
 800a51a:	4640      	mov	r0, r8
 800a51c:	46ac      	mov	ip, r5
 800a51e:	46f2      	mov	sl, lr
 800a520:	f850 2b04 	ldr.w	r2, [r0], #4
 800a524:	b293      	uxth	r3, r2
 800a526:	fb06 e303 	mla	r3, r6, r3, lr
 800a52a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a52e:	b29b      	uxth	r3, r3
 800a530:	ebaa 0303 	sub.w	r3, sl, r3
 800a534:	f8dc a000 	ldr.w	sl, [ip]
 800a538:	0c12      	lsrs	r2, r2, #16
 800a53a:	fa13 f38a 	uxtah	r3, r3, sl
 800a53e:	fb06 e202 	mla	r2, r6, r2, lr
 800a542:	9300      	str	r3, [sp, #0]
 800a544:	9b00      	ldr	r3, [sp, #0]
 800a546:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a54a:	b292      	uxth	r2, r2
 800a54c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a550:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a554:	f8bd 3000 	ldrh.w	r3, [sp]
 800a558:	4581      	cmp	r9, r0
 800a55a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a55e:	f84c 3b04 	str.w	r3, [ip], #4
 800a562:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a566:	d2db      	bcs.n	800a520 <quorem+0x44>
 800a568:	f855 300b 	ldr.w	r3, [r5, fp]
 800a56c:	b92b      	cbnz	r3, 800a57a <quorem+0x9e>
 800a56e:	9b01      	ldr	r3, [sp, #4]
 800a570:	3b04      	subs	r3, #4
 800a572:	429d      	cmp	r5, r3
 800a574:	461a      	mov	r2, r3
 800a576:	d32e      	bcc.n	800a5d6 <quorem+0xfa>
 800a578:	613c      	str	r4, [r7, #16]
 800a57a:	4638      	mov	r0, r7
 800a57c:	f001 f8b8 	bl	800b6f0 <__mcmp>
 800a580:	2800      	cmp	r0, #0
 800a582:	db24      	blt.n	800a5ce <quorem+0xf2>
 800a584:	3601      	adds	r6, #1
 800a586:	4628      	mov	r0, r5
 800a588:	f04f 0c00 	mov.w	ip, #0
 800a58c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a590:	f8d0 e000 	ldr.w	lr, [r0]
 800a594:	b293      	uxth	r3, r2
 800a596:	ebac 0303 	sub.w	r3, ip, r3
 800a59a:	0c12      	lsrs	r2, r2, #16
 800a59c:	fa13 f38e 	uxtah	r3, r3, lr
 800a5a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a5a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5ae:	45c1      	cmp	r9, r8
 800a5b0:	f840 3b04 	str.w	r3, [r0], #4
 800a5b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a5b8:	d2e8      	bcs.n	800a58c <quorem+0xb0>
 800a5ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5c2:	b922      	cbnz	r2, 800a5ce <quorem+0xf2>
 800a5c4:	3b04      	subs	r3, #4
 800a5c6:	429d      	cmp	r5, r3
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	d30a      	bcc.n	800a5e2 <quorem+0x106>
 800a5cc:	613c      	str	r4, [r7, #16]
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	b003      	add	sp, #12
 800a5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d6:	6812      	ldr	r2, [r2, #0]
 800a5d8:	3b04      	subs	r3, #4
 800a5da:	2a00      	cmp	r2, #0
 800a5dc:	d1cc      	bne.n	800a578 <quorem+0x9c>
 800a5de:	3c01      	subs	r4, #1
 800a5e0:	e7c7      	b.n	800a572 <quorem+0x96>
 800a5e2:	6812      	ldr	r2, [r2, #0]
 800a5e4:	3b04      	subs	r3, #4
 800a5e6:	2a00      	cmp	r2, #0
 800a5e8:	d1f0      	bne.n	800a5cc <quorem+0xf0>
 800a5ea:	3c01      	subs	r4, #1
 800a5ec:	e7eb      	b.n	800a5c6 <quorem+0xea>
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	e7ee      	b.n	800a5d0 <quorem+0xf4>
 800a5f2:	0000      	movs	r0, r0
 800a5f4:	0000      	movs	r0, r0
	...

0800a5f8 <_dtoa_r>:
 800a5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5fc:	ed2d 8b04 	vpush	{d8-d9}
 800a600:	ec57 6b10 	vmov	r6, r7, d0
 800a604:	b093      	sub	sp, #76	; 0x4c
 800a606:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a608:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a60c:	9106      	str	r1, [sp, #24]
 800a60e:	ee10 aa10 	vmov	sl, s0
 800a612:	4604      	mov	r4, r0
 800a614:	9209      	str	r2, [sp, #36]	; 0x24
 800a616:	930c      	str	r3, [sp, #48]	; 0x30
 800a618:	46bb      	mov	fp, r7
 800a61a:	b975      	cbnz	r5, 800a63a <_dtoa_r+0x42>
 800a61c:	2010      	movs	r0, #16
 800a61e:	f000 fddd 	bl	800b1dc <malloc>
 800a622:	4602      	mov	r2, r0
 800a624:	6260      	str	r0, [r4, #36]	; 0x24
 800a626:	b920      	cbnz	r0, 800a632 <_dtoa_r+0x3a>
 800a628:	4ba7      	ldr	r3, [pc, #668]	; (800a8c8 <_dtoa_r+0x2d0>)
 800a62a:	21ea      	movs	r1, #234	; 0xea
 800a62c:	48a7      	ldr	r0, [pc, #668]	; (800a8cc <_dtoa_r+0x2d4>)
 800a62e:	f001 fa67 	bl	800bb00 <__assert_func>
 800a632:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a636:	6005      	str	r5, [r0, #0]
 800a638:	60c5      	str	r5, [r0, #12]
 800a63a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a63c:	6819      	ldr	r1, [r3, #0]
 800a63e:	b151      	cbz	r1, 800a656 <_dtoa_r+0x5e>
 800a640:	685a      	ldr	r2, [r3, #4]
 800a642:	604a      	str	r2, [r1, #4]
 800a644:	2301      	movs	r3, #1
 800a646:	4093      	lsls	r3, r2
 800a648:	608b      	str	r3, [r1, #8]
 800a64a:	4620      	mov	r0, r4
 800a64c:	f000 fe0e 	bl	800b26c <_Bfree>
 800a650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a652:	2200      	movs	r2, #0
 800a654:	601a      	str	r2, [r3, #0]
 800a656:	1e3b      	subs	r3, r7, #0
 800a658:	bfaa      	itet	ge
 800a65a:	2300      	movge	r3, #0
 800a65c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a660:	f8c8 3000 	strge.w	r3, [r8]
 800a664:	4b9a      	ldr	r3, [pc, #616]	; (800a8d0 <_dtoa_r+0x2d8>)
 800a666:	bfbc      	itt	lt
 800a668:	2201      	movlt	r2, #1
 800a66a:	f8c8 2000 	strlt.w	r2, [r8]
 800a66e:	ea33 030b 	bics.w	r3, r3, fp
 800a672:	d11b      	bne.n	800a6ac <_dtoa_r+0xb4>
 800a674:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a676:	f242 730f 	movw	r3, #9999	; 0x270f
 800a67a:	6013      	str	r3, [r2, #0]
 800a67c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a680:	4333      	orrs	r3, r6
 800a682:	f000 8592 	beq.w	800b1aa <_dtoa_r+0xbb2>
 800a686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a688:	b963      	cbnz	r3, 800a6a4 <_dtoa_r+0xac>
 800a68a:	4b92      	ldr	r3, [pc, #584]	; (800a8d4 <_dtoa_r+0x2dc>)
 800a68c:	e022      	b.n	800a6d4 <_dtoa_r+0xdc>
 800a68e:	4b92      	ldr	r3, [pc, #584]	; (800a8d8 <_dtoa_r+0x2e0>)
 800a690:	9301      	str	r3, [sp, #4]
 800a692:	3308      	adds	r3, #8
 800a694:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a696:	6013      	str	r3, [r2, #0]
 800a698:	9801      	ldr	r0, [sp, #4]
 800a69a:	b013      	add	sp, #76	; 0x4c
 800a69c:	ecbd 8b04 	vpop	{d8-d9}
 800a6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a4:	4b8b      	ldr	r3, [pc, #556]	; (800a8d4 <_dtoa_r+0x2dc>)
 800a6a6:	9301      	str	r3, [sp, #4]
 800a6a8:	3303      	adds	r3, #3
 800a6aa:	e7f3      	b.n	800a694 <_dtoa_r+0x9c>
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	4650      	mov	r0, sl
 800a6b2:	4659      	mov	r1, fp
 800a6b4:	f7f6 fa08 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6b8:	ec4b ab19 	vmov	d9, sl, fp
 800a6bc:	4680      	mov	r8, r0
 800a6be:	b158      	cbz	r0, 800a6d8 <_dtoa_r+0xe0>
 800a6c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	6013      	str	r3, [r2, #0]
 800a6c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	f000 856b 	beq.w	800b1a4 <_dtoa_r+0xbac>
 800a6ce:	4883      	ldr	r0, [pc, #524]	; (800a8dc <_dtoa_r+0x2e4>)
 800a6d0:	6018      	str	r0, [r3, #0]
 800a6d2:	1e43      	subs	r3, r0, #1
 800a6d4:	9301      	str	r3, [sp, #4]
 800a6d6:	e7df      	b.n	800a698 <_dtoa_r+0xa0>
 800a6d8:	ec4b ab10 	vmov	d0, sl, fp
 800a6dc:	aa10      	add	r2, sp, #64	; 0x40
 800a6de:	a911      	add	r1, sp, #68	; 0x44
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	f001 f8ab 	bl	800b83c <__d2b>
 800a6e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a6ea:	ee08 0a10 	vmov	s16, r0
 800a6ee:	2d00      	cmp	r5, #0
 800a6f0:	f000 8084 	beq.w	800a7fc <_dtoa_r+0x204>
 800a6f4:	ee19 3a90 	vmov	r3, s19
 800a6f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a700:	4656      	mov	r6, sl
 800a702:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a706:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a70a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a70e:	4b74      	ldr	r3, [pc, #464]	; (800a8e0 <_dtoa_r+0x2e8>)
 800a710:	2200      	movs	r2, #0
 800a712:	4630      	mov	r0, r6
 800a714:	4639      	mov	r1, r7
 800a716:	f7f5 fdb7 	bl	8000288 <__aeabi_dsub>
 800a71a:	a365      	add	r3, pc, #404	; (adr r3, 800a8b0 <_dtoa_r+0x2b8>)
 800a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a720:	f7f5 ff6a 	bl	80005f8 <__aeabi_dmul>
 800a724:	a364      	add	r3, pc, #400	; (adr r3, 800a8b8 <_dtoa_r+0x2c0>)
 800a726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72a:	f7f5 fdaf 	bl	800028c <__adddf3>
 800a72e:	4606      	mov	r6, r0
 800a730:	4628      	mov	r0, r5
 800a732:	460f      	mov	r7, r1
 800a734:	f7f5 fef6 	bl	8000524 <__aeabi_i2d>
 800a738:	a361      	add	r3, pc, #388	; (adr r3, 800a8c0 <_dtoa_r+0x2c8>)
 800a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73e:	f7f5 ff5b 	bl	80005f8 <__aeabi_dmul>
 800a742:	4602      	mov	r2, r0
 800a744:	460b      	mov	r3, r1
 800a746:	4630      	mov	r0, r6
 800a748:	4639      	mov	r1, r7
 800a74a:	f7f5 fd9f 	bl	800028c <__adddf3>
 800a74e:	4606      	mov	r6, r0
 800a750:	460f      	mov	r7, r1
 800a752:	f7f6 fa01 	bl	8000b58 <__aeabi_d2iz>
 800a756:	2200      	movs	r2, #0
 800a758:	9000      	str	r0, [sp, #0]
 800a75a:	2300      	movs	r3, #0
 800a75c:	4630      	mov	r0, r6
 800a75e:	4639      	mov	r1, r7
 800a760:	f7f6 f9bc 	bl	8000adc <__aeabi_dcmplt>
 800a764:	b150      	cbz	r0, 800a77c <_dtoa_r+0x184>
 800a766:	9800      	ldr	r0, [sp, #0]
 800a768:	f7f5 fedc 	bl	8000524 <__aeabi_i2d>
 800a76c:	4632      	mov	r2, r6
 800a76e:	463b      	mov	r3, r7
 800a770:	f7f6 f9aa 	bl	8000ac8 <__aeabi_dcmpeq>
 800a774:	b910      	cbnz	r0, 800a77c <_dtoa_r+0x184>
 800a776:	9b00      	ldr	r3, [sp, #0]
 800a778:	3b01      	subs	r3, #1
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	9b00      	ldr	r3, [sp, #0]
 800a77e:	2b16      	cmp	r3, #22
 800a780:	d85a      	bhi.n	800a838 <_dtoa_r+0x240>
 800a782:	9a00      	ldr	r2, [sp, #0]
 800a784:	4b57      	ldr	r3, [pc, #348]	; (800a8e4 <_dtoa_r+0x2ec>)
 800a786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78e:	ec51 0b19 	vmov	r0, r1, d9
 800a792:	f7f6 f9a3 	bl	8000adc <__aeabi_dcmplt>
 800a796:	2800      	cmp	r0, #0
 800a798:	d050      	beq.n	800a83c <_dtoa_r+0x244>
 800a79a:	9b00      	ldr	r3, [sp, #0]
 800a79c:	3b01      	subs	r3, #1
 800a79e:	9300      	str	r3, [sp, #0]
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7a6:	1b5d      	subs	r5, r3, r5
 800a7a8:	1e6b      	subs	r3, r5, #1
 800a7aa:	9305      	str	r3, [sp, #20]
 800a7ac:	bf45      	ittet	mi
 800a7ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800a7b2:	9304      	strmi	r3, [sp, #16]
 800a7b4:	2300      	movpl	r3, #0
 800a7b6:	2300      	movmi	r3, #0
 800a7b8:	bf4c      	ite	mi
 800a7ba:	9305      	strmi	r3, [sp, #20]
 800a7bc:	9304      	strpl	r3, [sp, #16]
 800a7be:	9b00      	ldr	r3, [sp, #0]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	db3d      	blt.n	800a840 <_dtoa_r+0x248>
 800a7c4:	9b05      	ldr	r3, [sp, #20]
 800a7c6:	9a00      	ldr	r2, [sp, #0]
 800a7c8:	920a      	str	r2, [sp, #40]	; 0x28
 800a7ca:	4413      	add	r3, r2
 800a7cc:	9305      	str	r3, [sp, #20]
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	9307      	str	r3, [sp, #28]
 800a7d2:	9b06      	ldr	r3, [sp, #24]
 800a7d4:	2b09      	cmp	r3, #9
 800a7d6:	f200 8089 	bhi.w	800a8ec <_dtoa_r+0x2f4>
 800a7da:	2b05      	cmp	r3, #5
 800a7dc:	bfc4      	itt	gt
 800a7de:	3b04      	subgt	r3, #4
 800a7e0:	9306      	strgt	r3, [sp, #24]
 800a7e2:	9b06      	ldr	r3, [sp, #24]
 800a7e4:	f1a3 0302 	sub.w	r3, r3, #2
 800a7e8:	bfcc      	ite	gt
 800a7ea:	2500      	movgt	r5, #0
 800a7ec:	2501      	movle	r5, #1
 800a7ee:	2b03      	cmp	r3, #3
 800a7f0:	f200 8087 	bhi.w	800a902 <_dtoa_r+0x30a>
 800a7f4:	e8df f003 	tbb	[pc, r3]
 800a7f8:	59383a2d 	.word	0x59383a2d
 800a7fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a800:	441d      	add	r5, r3
 800a802:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a806:	2b20      	cmp	r3, #32
 800a808:	bfc1      	itttt	gt
 800a80a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a80e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a812:	fa0b f303 	lslgt.w	r3, fp, r3
 800a816:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a81a:	bfda      	itte	le
 800a81c:	f1c3 0320 	rsble	r3, r3, #32
 800a820:	fa06 f003 	lslle.w	r0, r6, r3
 800a824:	4318      	orrgt	r0, r3
 800a826:	f7f5 fe6d 	bl	8000504 <__aeabi_ui2d>
 800a82a:	2301      	movs	r3, #1
 800a82c:	4606      	mov	r6, r0
 800a82e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a832:	3d01      	subs	r5, #1
 800a834:	930e      	str	r3, [sp, #56]	; 0x38
 800a836:	e76a      	b.n	800a70e <_dtoa_r+0x116>
 800a838:	2301      	movs	r3, #1
 800a83a:	e7b2      	b.n	800a7a2 <_dtoa_r+0x1aa>
 800a83c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a83e:	e7b1      	b.n	800a7a4 <_dtoa_r+0x1ac>
 800a840:	9b04      	ldr	r3, [sp, #16]
 800a842:	9a00      	ldr	r2, [sp, #0]
 800a844:	1a9b      	subs	r3, r3, r2
 800a846:	9304      	str	r3, [sp, #16]
 800a848:	4253      	negs	r3, r2
 800a84a:	9307      	str	r3, [sp, #28]
 800a84c:	2300      	movs	r3, #0
 800a84e:	930a      	str	r3, [sp, #40]	; 0x28
 800a850:	e7bf      	b.n	800a7d2 <_dtoa_r+0x1da>
 800a852:	2300      	movs	r3, #0
 800a854:	9308      	str	r3, [sp, #32]
 800a856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a858:	2b00      	cmp	r3, #0
 800a85a:	dc55      	bgt.n	800a908 <_dtoa_r+0x310>
 800a85c:	2301      	movs	r3, #1
 800a85e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a862:	461a      	mov	r2, r3
 800a864:	9209      	str	r2, [sp, #36]	; 0x24
 800a866:	e00c      	b.n	800a882 <_dtoa_r+0x28a>
 800a868:	2301      	movs	r3, #1
 800a86a:	e7f3      	b.n	800a854 <_dtoa_r+0x25c>
 800a86c:	2300      	movs	r3, #0
 800a86e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a870:	9308      	str	r3, [sp, #32]
 800a872:	9b00      	ldr	r3, [sp, #0]
 800a874:	4413      	add	r3, r2
 800a876:	9302      	str	r3, [sp, #8]
 800a878:	3301      	adds	r3, #1
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	9303      	str	r3, [sp, #12]
 800a87e:	bfb8      	it	lt
 800a880:	2301      	movlt	r3, #1
 800a882:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a884:	2200      	movs	r2, #0
 800a886:	6042      	str	r2, [r0, #4]
 800a888:	2204      	movs	r2, #4
 800a88a:	f102 0614 	add.w	r6, r2, #20
 800a88e:	429e      	cmp	r6, r3
 800a890:	6841      	ldr	r1, [r0, #4]
 800a892:	d93d      	bls.n	800a910 <_dtoa_r+0x318>
 800a894:	4620      	mov	r0, r4
 800a896:	f000 fca9 	bl	800b1ec <_Balloc>
 800a89a:	9001      	str	r0, [sp, #4]
 800a89c:	2800      	cmp	r0, #0
 800a89e:	d13b      	bne.n	800a918 <_dtoa_r+0x320>
 800a8a0:	4b11      	ldr	r3, [pc, #68]	; (800a8e8 <_dtoa_r+0x2f0>)
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a8a8:	e6c0      	b.n	800a62c <_dtoa_r+0x34>
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e7df      	b.n	800a86e <_dtoa_r+0x276>
 800a8ae:	bf00      	nop
 800a8b0:	636f4361 	.word	0x636f4361
 800a8b4:	3fd287a7 	.word	0x3fd287a7
 800a8b8:	8b60c8b3 	.word	0x8b60c8b3
 800a8bc:	3fc68a28 	.word	0x3fc68a28
 800a8c0:	509f79fb 	.word	0x509f79fb
 800a8c4:	3fd34413 	.word	0x3fd34413
 800a8c8:	0800cf49 	.word	0x0800cf49
 800a8cc:	0800cf60 	.word	0x0800cf60
 800a8d0:	7ff00000 	.word	0x7ff00000
 800a8d4:	0800cf45 	.word	0x0800cf45
 800a8d8:	0800cf3c 	.word	0x0800cf3c
 800a8dc:	0800cf19 	.word	0x0800cf19
 800a8e0:	3ff80000 	.word	0x3ff80000
 800a8e4:	0800d050 	.word	0x0800d050
 800a8e8:	0800cfbb 	.word	0x0800cfbb
 800a8ec:	2501      	movs	r5, #1
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	9306      	str	r3, [sp, #24]
 800a8f2:	9508      	str	r5, [sp, #32]
 800a8f4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	2312      	movs	r3, #18
 800a900:	e7b0      	b.n	800a864 <_dtoa_r+0x26c>
 800a902:	2301      	movs	r3, #1
 800a904:	9308      	str	r3, [sp, #32]
 800a906:	e7f5      	b.n	800a8f4 <_dtoa_r+0x2fc>
 800a908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a90a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a90e:	e7b8      	b.n	800a882 <_dtoa_r+0x28a>
 800a910:	3101      	adds	r1, #1
 800a912:	6041      	str	r1, [r0, #4]
 800a914:	0052      	lsls	r2, r2, #1
 800a916:	e7b8      	b.n	800a88a <_dtoa_r+0x292>
 800a918:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a91a:	9a01      	ldr	r2, [sp, #4]
 800a91c:	601a      	str	r2, [r3, #0]
 800a91e:	9b03      	ldr	r3, [sp, #12]
 800a920:	2b0e      	cmp	r3, #14
 800a922:	f200 809d 	bhi.w	800aa60 <_dtoa_r+0x468>
 800a926:	2d00      	cmp	r5, #0
 800a928:	f000 809a 	beq.w	800aa60 <_dtoa_r+0x468>
 800a92c:	9b00      	ldr	r3, [sp, #0]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	dd32      	ble.n	800a998 <_dtoa_r+0x3a0>
 800a932:	4ab7      	ldr	r2, [pc, #732]	; (800ac10 <_dtoa_r+0x618>)
 800a934:	f003 030f 	and.w	r3, r3, #15
 800a938:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a93c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a940:	9b00      	ldr	r3, [sp, #0]
 800a942:	05d8      	lsls	r0, r3, #23
 800a944:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a948:	d516      	bpl.n	800a978 <_dtoa_r+0x380>
 800a94a:	4bb2      	ldr	r3, [pc, #712]	; (800ac14 <_dtoa_r+0x61c>)
 800a94c:	ec51 0b19 	vmov	r0, r1, d9
 800a950:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a954:	f7f5 ff7a 	bl	800084c <__aeabi_ddiv>
 800a958:	f007 070f 	and.w	r7, r7, #15
 800a95c:	4682      	mov	sl, r0
 800a95e:	468b      	mov	fp, r1
 800a960:	2503      	movs	r5, #3
 800a962:	4eac      	ldr	r6, [pc, #688]	; (800ac14 <_dtoa_r+0x61c>)
 800a964:	b957      	cbnz	r7, 800a97c <_dtoa_r+0x384>
 800a966:	4642      	mov	r2, r8
 800a968:	464b      	mov	r3, r9
 800a96a:	4650      	mov	r0, sl
 800a96c:	4659      	mov	r1, fp
 800a96e:	f7f5 ff6d 	bl	800084c <__aeabi_ddiv>
 800a972:	4682      	mov	sl, r0
 800a974:	468b      	mov	fp, r1
 800a976:	e028      	b.n	800a9ca <_dtoa_r+0x3d2>
 800a978:	2502      	movs	r5, #2
 800a97a:	e7f2      	b.n	800a962 <_dtoa_r+0x36a>
 800a97c:	07f9      	lsls	r1, r7, #31
 800a97e:	d508      	bpl.n	800a992 <_dtoa_r+0x39a>
 800a980:	4640      	mov	r0, r8
 800a982:	4649      	mov	r1, r9
 800a984:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a988:	f7f5 fe36 	bl	80005f8 <__aeabi_dmul>
 800a98c:	3501      	adds	r5, #1
 800a98e:	4680      	mov	r8, r0
 800a990:	4689      	mov	r9, r1
 800a992:	107f      	asrs	r7, r7, #1
 800a994:	3608      	adds	r6, #8
 800a996:	e7e5      	b.n	800a964 <_dtoa_r+0x36c>
 800a998:	f000 809b 	beq.w	800aad2 <_dtoa_r+0x4da>
 800a99c:	9b00      	ldr	r3, [sp, #0]
 800a99e:	4f9d      	ldr	r7, [pc, #628]	; (800ac14 <_dtoa_r+0x61c>)
 800a9a0:	425e      	negs	r6, r3
 800a9a2:	4b9b      	ldr	r3, [pc, #620]	; (800ac10 <_dtoa_r+0x618>)
 800a9a4:	f006 020f 	and.w	r2, r6, #15
 800a9a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b0:	ec51 0b19 	vmov	r0, r1, d9
 800a9b4:	f7f5 fe20 	bl	80005f8 <__aeabi_dmul>
 800a9b8:	1136      	asrs	r6, r6, #4
 800a9ba:	4682      	mov	sl, r0
 800a9bc:	468b      	mov	fp, r1
 800a9be:	2300      	movs	r3, #0
 800a9c0:	2502      	movs	r5, #2
 800a9c2:	2e00      	cmp	r6, #0
 800a9c4:	d17a      	bne.n	800aabc <_dtoa_r+0x4c4>
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1d3      	bne.n	800a972 <_dtoa_r+0x37a>
 800a9ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	f000 8082 	beq.w	800aad6 <_dtoa_r+0x4de>
 800a9d2:	4b91      	ldr	r3, [pc, #580]	; (800ac18 <_dtoa_r+0x620>)
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	4650      	mov	r0, sl
 800a9d8:	4659      	mov	r1, fp
 800a9da:	f7f6 f87f 	bl	8000adc <__aeabi_dcmplt>
 800a9de:	2800      	cmp	r0, #0
 800a9e0:	d079      	beq.n	800aad6 <_dtoa_r+0x4de>
 800a9e2:	9b03      	ldr	r3, [sp, #12]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d076      	beq.n	800aad6 <_dtoa_r+0x4de>
 800a9e8:	9b02      	ldr	r3, [sp, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	dd36      	ble.n	800aa5c <_dtoa_r+0x464>
 800a9ee:	9b00      	ldr	r3, [sp, #0]
 800a9f0:	4650      	mov	r0, sl
 800a9f2:	4659      	mov	r1, fp
 800a9f4:	1e5f      	subs	r7, r3, #1
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	4b88      	ldr	r3, [pc, #544]	; (800ac1c <_dtoa_r+0x624>)
 800a9fa:	f7f5 fdfd 	bl	80005f8 <__aeabi_dmul>
 800a9fe:	9e02      	ldr	r6, [sp, #8]
 800aa00:	4682      	mov	sl, r0
 800aa02:	468b      	mov	fp, r1
 800aa04:	3501      	adds	r5, #1
 800aa06:	4628      	mov	r0, r5
 800aa08:	f7f5 fd8c 	bl	8000524 <__aeabi_i2d>
 800aa0c:	4652      	mov	r2, sl
 800aa0e:	465b      	mov	r3, fp
 800aa10:	f7f5 fdf2 	bl	80005f8 <__aeabi_dmul>
 800aa14:	4b82      	ldr	r3, [pc, #520]	; (800ac20 <_dtoa_r+0x628>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	f7f5 fc38 	bl	800028c <__adddf3>
 800aa1c:	46d0      	mov	r8, sl
 800aa1e:	46d9      	mov	r9, fp
 800aa20:	4682      	mov	sl, r0
 800aa22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aa26:	2e00      	cmp	r6, #0
 800aa28:	d158      	bne.n	800aadc <_dtoa_r+0x4e4>
 800aa2a:	4b7e      	ldr	r3, [pc, #504]	; (800ac24 <_dtoa_r+0x62c>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	4640      	mov	r0, r8
 800aa30:	4649      	mov	r1, r9
 800aa32:	f7f5 fc29 	bl	8000288 <__aeabi_dsub>
 800aa36:	4652      	mov	r2, sl
 800aa38:	465b      	mov	r3, fp
 800aa3a:	4680      	mov	r8, r0
 800aa3c:	4689      	mov	r9, r1
 800aa3e:	f7f6 f86b 	bl	8000b18 <__aeabi_dcmpgt>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	f040 8295 	bne.w	800af72 <_dtoa_r+0x97a>
 800aa48:	4652      	mov	r2, sl
 800aa4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aa4e:	4640      	mov	r0, r8
 800aa50:	4649      	mov	r1, r9
 800aa52:	f7f6 f843 	bl	8000adc <__aeabi_dcmplt>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	f040 8289 	bne.w	800af6e <_dtoa_r+0x976>
 800aa5c:	ec5b ab19 	vmov	sl, fp, d9
 800aa60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	f2c0 8148 	blt.w	800acf8 <_dtoa_r+0x700>
 800aa68:	9a00      	ldr	r2, [sp, #0]
 800aa6a:	2a0e      	cmp	r2, #14
 800aa6c:	f300 8144 	bgt.w	800acf8 <_dtoa_r+0x700>
 800aa70:	4b67      	ldr	r3, [pc, #412]	; (800ac10 <_dtoa_r+0x618>)
 800aa72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa76:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f280 80d5 	bge.w	800ac2c <_dtoa_r+0x634>
 800aa82:	9b03      	ldr	r3, [sp, #12]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f300 80d1 	bgt.w	800ac2c <_dtoa_r+0x634>
 800aa8a:	f040 826f 	bne.w	800af6c <_dtoa_r+0x974>
 800aa8e:	4b65      	ldr	r3, [pc, #404]	; (800ac24 <_dtoa_r+0x62c>)
 800aa90:	2200      	movs	r2, #0
 800aa92:	4640      	mov	r0, r8
 800aa94:	4649      	mov	r1, r9
 800aa96:	f7f5 fdaf 	bl	80005f8 <__aeabi_dmul>
 800aa9a:	4652      	mov	r2, sl
 800aa9c:	465b      	mov	r3, fp
 800aa9e:	f7f6 f831 	bl	8000b04 <__aeabi_dcmpge>
 800aaa2:	9e03      	ldr	r6, [sp, #12]
 800aaa4:	4637      	mov	r7, r6
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	f040 8245 	bne.w	800af36 <_dtoa_r+0x93e>
 800aaac:	9d01      	ldr	r5, [sp, #4]
 800aaae:	2331      	movs	r3, #49	; 0x31
 800aab0:	f805 3b01 	strb.w	r3, [r5], #1
 800aab4:	9b00      	ldr	r3, [sp, #0]
 800aab6:	3301      	adds	r3, #1
 800aab8:	9300      	str	r3, [sp, #0]
 800aaba:	e240      	b.n	800af3e <_dtoa_r+0x946>
 800aabc:	07f2      	lsls	r2, r6, #31
 800aabe:	d505      	bpl.n	800aacc <_dtoa_r+0x4d4>
 800aac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aac4:	f7f5 fd98 	bl	80005f8 <__aeabi_dmul>
 800aac8:	3501      	adds	r5, #1
 800aaca:	2301      	movs	r3, #1
 800aacc:	1076      	asrs	r6, r6, #1
 800aace:	3708      	adds	r7, #8
 800aad0:	e777      	b.n	800a9c2 <_dtoa_r+0x3ca>
 800aad2:	2502      	movs	r5, #2
 800aad4:	e779      	b.n	800a9ca <_dtoa_r+0x3d2>
 800aad6:	9f00      	ldr	r7, [sp, #0]
 800aad8:	9e03      	ldr	r6, [sp, #12]
 800aada:	e794      	b.n	800aa06 <_dtoa_r+0x40e>
 800aadc:	9901      	ldr	r1, [sp, #4]
 800aade:	4b4c      	ldr	r3, [pc, #304]	; (800ac10 <_dtoa_r+0x618>)
 800aae0:	4431      	add	r1, r6
 800aae2:	910d      	str	r1, [sp, #52]	; 0x34
 800aae4:	9908      	ldr	r1, [sp, #32]
 800aae6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aaea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aaee:	2900      	cmp	r1, #0
 800aaf0:	d043      	beq.n	800ab7a <_dtoa_r+0x582>
 800aaf2:	494d      	ldr	r1, [pc, #308]	; (800ac28 <_dtoa_r+0x630>)
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	f7f5 fea9 	bl	800084c <__aeabi_ddiv>
 800aafa:	4652      	mov	r2, sl
 800aafc:	465b      	mov	r3, fp
 800aafe:	f7f5 fbc3 	bl	8000288 <__aeabi_dsub>
 800ab02:	9d01      	ldr	r5, [sp, #4]
 800ab04:	4682      	mov	sl, r0
 800ab06:	468b      	mov	fp, r1
 800ab08:	4649      	mov	r1, r9
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	f7f6 f824 	bl	8000b58 <__aeabi_d2iz>
 800ab10:	4606      	mov	r6, r0
 800ab12:	f7f5 fd07 	bl	8000524 <__aeabi_i2d>
 800ab16:	4602      	mov	r2, r0
 800ab18:	460b      	mov	r3, r1
 800ab1a:	4640      	mov	r0, r8
 800ab1c:	4649      	mov	r1, r9
 800ab1e:	f7f5 fbb3 	bl	8000288 <__aeabi_dsub>
 800ab22:	3630      	adds	r6, #48	; 0x30
 800ab24:	f805 6b01 	strb.w	r6, [r5], #1
 800ab28:	4652      	mov	r2, sl
 800ab2a:	465b      	mov	r3, fp
 800ab2c:	4680      	mov	r8, r0
 800ab2e:	4689      	mov	r9, r1
 800ab30:	f7f5 ffd4 	bl	8000adc <__aeabi_dcmplt>
 800ab34:	2800      	cmp	r0, #0
 800ab36:	d163      	bne.n	800ac00 <_dtoa_r+0x608>
 800ab38:	4642      	mov	r2, r8
 800ab3a:	464b      	mov	r3, r9
 800ab3c:	4936      	ldr	r1, [pc, #216]	; (800ac18 <_dtoa_r+0x620>)
 800ab3e:	2000      	movs	r0, #0
 800ab40:	f7f5 fba2 	bl	8000288 <__aeabi_dsub>
 800ab44:	4652      	mov	r2, sl
 800ab46:	465b      	mov	r3, fp
 800ab48:	f7f5 ffc8 	bl	8000adc <__aeabi_dcmplt>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	f040 80b5 	bne.w	800acbc <_dtoa_r+0x6c4>
 800ab52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab54:	429d      	cmp	r5, r3
 800ab56:	d081      	beq.n	800aa5c <_dtoa_r+0x464>
 800ab58:	4b30      	ldr	r3, [pc, #192]	; (800ac1c <_dtoa_r+0x624>)
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	4650      	mov	r0, sl
 800ab5e:	4659      	mov	r1, fp
 800ab60:	f7f5 fd4a 	bl	80005f8 <__aeabi_dmul>
 800ab64:	4b2d      	ldr	r3, [pc, #180]	; (800ac1c <_dtoa_r+0x624>)
 800ab66:	4682      	mov	sl, r0
 800ab68:	468b      	mov	fp, r1
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	4649      	mov	r1, r9
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f7f5 fd42 	bl	80005f8 <__aeabi_dmul>
 800ab74:	4680      	mov	r8, r0
 800ab76:	4689      	mov	r9, r1
 800ab78:	e7c6      	b.n	800ab08 <_dtoa_r+0x510>
 800ab7a:	4650      	mov	r0, sl
 800ab7c:	4659      	mov	r1, fp
 800ab7e:	f7f5 fd3b 	bl	80005f8 <__aeabi_dmul>
 800ab82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab84:	9d01      	ldr	r5, [sp, #4]
 800ab86:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab88:	4682      	mov	sl, r0
 800ab8a:	468b      	mov	fp, r1
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	4640      	mov	r0, r8
 800ab90:	f7f5 ffe2 	bl	8000b58 <__aeabi_d2iz>
 800ab94:	4606      	mov	r6, r0
 800ab96:	f7f5 fcc5 	bl	8000524 <__aeabi_i2d>
 800ab9a:	3630      	adds	r6, #48	; 0x30
 800ab9c:	4602      	mov	r2, r0
 800ab9e:	460b      	mov	r3, r1
 800aba0:	4640      	mov	r0, r8
 800aba2:	4649      	mov	r1, r9
 800aba4:	f7f5 fb70 	bl	8000288 <__aeabi_dsub>
 800aba8:	f805 6b01 	strb.w	r6, [r5], #1
 800abac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abae:	429d      	cmp	r5, r3
 800abb0:	4680      	mov	r8, r0
 800abb2:	4689      	mov	r9, r1
 800abb4:	f04f 0200 	mov.w	r2, #0
 800abb8:	d124      	bne.n	800ac04 <_dtoa_r+0x60c>
 800abba:	4b1b      	ldr	r3, [pc, #108]	; (800ac28 <_dtoa_r+0x630>)
 800abbc:	4650      	mov	r0, sl
 800abbe:	4659      	mov	r1, fp
 800abc0:	f7f5 fb64 	bl	800028c <__adddf3>
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	4640      	mov	r0, r8
 800abca:	4649      	mov	r1, r9
 800abcc:	f7f5 ffa4 	bl	8000b18 <__aeabi_dcmpgt>
 800abd0:	2800      	cmp	r0, #0
 800abd2:	d173      	bne.n	800acbc <_dtoa_r+0x6c4>
 800abd4:	4652      	mov	r2, sl
 800abd6:	465b      	mov	r3, fp
 800abd8:	4913      	ldr	r1, [pc, #76]	; (800ac28 <_dtoa_r+0x630>)
 800abda:	2000      	movs	r0, #0
 800abdc:	f7f5 fb54 	bl	8000288 <__aeabi_dsub>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	4640      	mov	r0, r8
 800abe6:	4649      	mov	r1, r9
 800abe8:	f7f5 ff78 	bl	8000adc <__aeabi_dcmplt>
 800abec:	2800      	cmp	r0, #0
 800abee:	f43f af35 	beq.w	800aa5c <_dtoa_r+0x464>
 800abf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800abf4:	1e6b      	subs	r3, r5, #1
 800abf6:	930f      	str	r3, [sp, #60]	; 0x3c
 800abf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abfc:	2b30      	cmp	r3, #48	; 0x30
 800abfe:	d0f8      	beq.n	800abf2 <_dtoa_r+0x5fa>
 800ac00:	9700      	str	r7, [sp, #0]
 800ac02:	e049      	b.n	800ac98 <_dtoa_r+0x6a0>
 800ac04:	4b05      	ldr	r3, [pc, #20]	; (800ac1c <_dtoa_r+0x624>)
 800ac06:	f7f5 fcf7 	bl	80005f8 <__aeabi_dmul>
 800ac0a:	4680      	mov	r8, r0
 800ac0c:	4689      	mov	r9, r1
 800ac0e:	e7bd      	b.n	800ab8c <_dtoa_r+0x594>
 800ac10:	0800d050 	.word	0x0800d050
 800ac14:	0800d028 	.word	0x0800d028
 800ac18:	3ff00000 	.word	0x3ff00000
 800ac1c:	40240000 	.word	0x40240000
 800ac20:	401c0000 	.word	0x401c0000
 800ac24:	40140000 	.word	0x40140000
 800ac28:	3fe00000 	.word	0x3fe00000
 800ac2c:	9d01      	ldr	r5, [sp, #4]
 800ac2e:	4656      	mov	r6, sl
 800ac30:	465f      	mov	r7, fp
 800ac32:	4642      	mov	r2, r8
 800ac34:	464b      	mov	r3, r9
 800ac36:	4630      	mov	r0, r6
 800ac38:	4639      	mov	r1, r7
 800ac3a:	f7f5 fe07 	bl	800084c <__aeabi_ddiv>
 800ac3e:	f7f5 ff8b 	bl	8000b58 <__aeabi_d2iz>
 800ac42:	4682      	mov	sl, r0
 800ac44:	f7f5 fc6e 	bl	8000524 <__aeabi_i2d>
 800ac48:	4642      	mov	r2, r8
 800ac4a:	464b      	mov	r3, r9
 800ac4c:	f7f5 fcd4 	bl	80005f8 <__aeabi_dmul>
 800ac50:	4602      	mov	r2, r0
 800ac52:	460b      	mov	r3, r1
 800ac54:	4630      	mov	r0, r6
 800ac56:	4639      	mov	r1, r7
 800ac58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ac5c:	f7f5 fb14 	bl	8000288 <__aeabi_dsub>
 800ac60:	f805 6b01 	strb.w	r6, [r5], #1
 800ac64:	9e01      	ldr	r6, [sp, #4]
 800ac66:	9f03      	ldr	r7, [sp, #12]
 800ac68:	1bae      	subs	r6, r5, r6
 800ac6a:	42b7      	cmp	r7, r6
 800ac6c:	4602      	mov	r2, r0
 800ac6e:	460b      	mov	r3, r1
 800ac70:	d135      	bne.n	800acde <_dtoa_r+0x6e6>
 800ac72:	f7f5 fb0b 	bl	800028c <__adddf3>
 800ac76:	4642      	mov	r2, r8
 800ac78:	464b      	mov	r3, r9
 800ac7a:	4606      	mov	r6, r0
 800ac7c:	460f      	mov	r7, r1
 800ac7e:	f7f5 ff4b 	bl	8000b18 <__aeabi_dcmpgt>
 800ac82:	b9d0      	cbnz	r0, 800acba <_dtoa_r+0x6c2>
 800ac84:	4642      	mov	r2, r8
 800ac86:	464b      	mov	r3, r9
 800ac88:	4630      	mov	r0, r6
 800ac8a:	4639      	mov	r1, r7
 800ac8c:	f7f5 ff1c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ac90:	b110      	cbz	r0, 800ac98 <_dtoa_r+0x6a0>
 800ac92:	f01a 0f01 	tst.w	sl, #1
 800ac96:	d110      	bne.n	800acba <_dtoa_r+0x6c2>
 800ac98:	4620      	mov	r0, r4
 800ac9a:	ee18 1a10 	vmov	r1, s16
 800ac9e:	f000 fae5 	bl	800b26c <_Bfree>
 800aca2:	2300      	movs	r3, #0
 800aca4:	9800      	ldr	r0, [sp, #0]
 800aca6:	702b      	strb	r3, [r5, #0]
 800aca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acaa:	3001      	adds	r0, #1
 800acac:	6018      	str	r0, [r3, #0]
 800acae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f43f acf1 	beq.w	800a698 <_dtoa_r+0xa0>
 800acb6:	601d      	str	r5, [r3, #0]
 800acb8:	e4ee      	b.n	800a698 <_dtoa_r+0xa0>
 800acba:	9f00      	ldr	r7, [sp, #0]
 800acbc:	462b      	mov	r3, r5
 800acbe:	461d      	mov	r5, r3
 800acc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acc4:	2a39      	cmp	r2, #57	; 0x39
 800acc6:	d106      	bne.n	800acd6 <_dtoa_r+0x6de>
 800acc8:	9a01      	ldr	r2, [sp, #4]
 800acca:	429a      	cmp	r2, r3
 800accc:	d1f7      	bne.n	800acbe <_dtoa_r+0x6c6>
 800acce:	9901      	ldr	r1, [sp, #4]
 800acd0:	2230      	movs	r2, #48	; 0x30
 800acd2:	3701      	adds	r7, #1
 800acd4:	700a      	strb	r2, [r1, #0]
 800acd6:	781a      	ldrb	r2, [r3, #0]
 800acd8:	3201      	adds	r2, #1
 800acda:	701a      	strb	r2, [r3, #0]
 800acdc:	e790      	b.n	800ac00 <_dtoa_r+0x608>
 800acde:	4ba6      	ldr	r3, [pc, #664]	; (800af78 <_dtoa_r+0x980>)
 800ace0:	2200      	movs	r2, #0
 800ace2:	f7f5 fc89 	bl	80005f8 <__aeabi_dmul>
 800ace6:	2200      	movs	r2, #0
 800ace8:	2300      	movs	r3, #0
 800acea:	4606      	mov	r6, r0
 800acec:	460f      	mov	r7, r1
 800acee:	f7f5 feeb 	bl	8000ac8 <__aeabi_dcmpeq>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d09d      	beq.n	800ac32 <_dtoa_r+0x63a>
 800acf6:	e7cf      	b.n	800ac98 <_dtoa_r+0x6a0>
 800acf8:	9a08      	ldr	r2, [sp, #32]
 800acfa:	2a00      	cmp	r2, #0
 800acfc:	f000 80d7 	beq.w	800aeae <_dtoa_r+0x8b6>
 800ad00:	9a06      	ldr	r2, [sp, #24]
 800ad02:	2a01      	cmp	r2, #1
 800ad04:	f300 80ba 	bgt.w	800ae7c <_dtoa_r+0x884>
 800ad08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad0a:	2a00      	cmp	r2, #0
 800ad0c:	f000 80b2 	beq.w	800ae74 <_dtoa_r+0x87c>
 800ad10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad14:	9e07      	ldr	r6, [sp, #28]
 800ad16:	9d04      	ldr	r5, [sp, #16]
 800ad18:	9a04      	ldr	r2, [sp, #16]
 800ad1a:	441a      	add	r2, r3
 800ad1c:	9204      	str	r2, [sp, #16]
 800ad1e:	9a05      	ldr	r2, [sp, #20]
 800ad20:	2101      	movs	r1, #1
 800ad22:	441a      	add	r2, r3
 800ad24:	4620      	mov	r0, r4
 800ad26:	9205      	str	r2, [sp, #20]
 800ad28:	f000 fb58 	bl	800b3dc <__i2b>
 800ad2c:	4607      	mov	r7, r0
 800ad2e:	2d00      	cmp	r5, #0
 800ad30:	dd0c      	ble.n	800ad4c <_dtoa_r+0x754>
 800ad32:	9b05      	ldr	r3, [sp, #20]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	dd09      	ble.n	800ad4c <_dtoa_r+0x754>
 800ad38:	42ab      	cmp	r3, r5
 800ad3a:	9a04      	ldr	r2, [sp, #16]
 800ad3c:	bfa8      	it	ge
 800ad3e:	462b      	movge	r3, r5
 800ad40:	1ad2      	subs	r2, r2, r3
 800ad42:	9204      	str	r2, [sp, #16]
 800ad44:	9a05      	ldr	r2, [sp, #20]
 800ad46:	1aed      	subs	r5, r5, r3
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	9305      	str	r3, [sp, #20]
 800ad4c:	9b07      	ldr	r3, [sp, #28]
 800ad4e:	b31b      	cbz	r3, 800ad98 <_dtoa_r+0x7a0>
 800ad50:	9b08      	ldr	r3, [sp, #32]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	f000 80af 	beq.w	800aeb6 <_dtoa_r+0x8be>
 800ad58:	2e00      	cmp	r6, #0
 800ad5a:	dd13      	ble.n	800ad84 <_dtoa_r+0x78c>
 800ad5c:	4639      	mov	r1, r7
 800ad5e:	4632      	mov	r2, r6
 800ad60:	4620      	mov	r0, r4
 800ad62:	f000 fbfb 	bl	800b55c <__pow5mult>
 800ad66:	ee18 2a10 	vmov	r2, s16
 800ad6a:	4601      	mov	r1, r0
 800ad6c:	4607      	mov	r7, r0
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f000 fb4a 	bl	800b408 <__multiply>
 800ad74:	ee18 1a10 	vmov	r1, s16
 800ad78:	4680      	mov	r8, r0
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f000 fa76 	bl	800b26c <_Bfree>
 800ad80:	ee08 8a10 	vmov	s16, r8
 800ad84:	9b07      	ldr	r3, [sp, #28]
 800ad86:	1b9a      	subs	r2, r3, r6
 800ad88:	d006      	beq.n	800ad98 <_dtoa_r+0x7a0>
 800ad8a:	ee18 1a10 	vmov	r1, s16
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f000 fbe4 	bl	800b55c <__pow5mult>
 800ad94:	ee08 0a10 	vmov	s16, r0
 800ad98:	2101      	movs	r1, #1
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f000 fb1e 	bl	800b3dc <__i2b>
 800ada0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	4606      	mov	r6, r0
 800ada6:	f340 8088 	ble.w	800aeba <_dtoa_r+0x8c2>
 800adaa:	461a      	mov	r2, r3
 800adac:	4601      	mov	r1, r0
 800adae:	4620      	mov	r0, r4
 800adb0:	f000 fbd4 	bl	800b55c <__pow5mult>
 800adb4:	9b06      	ldr	r3, [sp, #24]
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	4606      	mov	r6, r0
 800adba:	f340 8081 	ble.w	800aec0 <_dtoa_r+0x8c8>
 800adbe:	f04f 0800 	mov.w	r8, #0
 800adc2:	6933      	ldr	r3, [r6, #16]
 800adc4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800adc8:	6918      	ldr	r0, [r3, #16]
 800adca:	f000 fab7 	bl	800b33c <__hi0bits>
 800adce:	f1c0 0020 	rsb	r0, r0, #32
 800add2:	9b05      	ldr	r3, [sp, #20]
 800add4:	4418      	add	r0, r3
 800add6:	f010 001f 	ands.w	r0, r0, #31
 800adda:	f000 8092 	beq.w	800af02 <_dtoa_r+0x90a>
 800adde:	f1c0 0320 	rsb	r3, r0, #32
 800ade2:	2b04      	cmp	r3, #4
 800ade4:	f340 808a 	ble.w	800aefc <_dtoa_r+0x904>
 800ade8:	f1c0 001c 	rsb	r0, r0, #28
 800adec:	9b04      	ldr	r3, [sp, #16]
 800adee:	4403      	add	r3, r0
 800adf0:	9304      	str	r3, [sp, #16]
 800adf2:	9b05      	ldr	r3, [sp, #20]
 800adf4:	4403      	add	r3, r0
 800adf6:	4405      	add	r5, r0
 800adf8:	9305      	str	r3, [sp, #20]
 800adfa:	9b04      	ldr	r3, [sp, #16]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	dd07      	ble.n	800ae10 <_dtoa_r+0x818>
 800ae00:	ee18 1a10 	vmov	r1, s16
 800ae04:	461a      	mov	r2, r3
 800ae06:	4620      	mov	r0, r4
 800ae08:	f000 fc02 	bl	800b610 <__lshift>
 800ae0c:	ee08 0a10 	vmov	s16, r0
 800ae10:	9b05      	ldr	r3, [sp, #20]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	dd05      	ble.n	800ae22 <_dtoa_r+0x82a>
 800ae16:	4631      	mov	r1, r6
 800ae18:	461a      	mov	r2, r3
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f000 fbf8 	bl	800b610 <__lshift>
 800ae20:	4606      	mov	r6, r0
 800ae22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d06e      	beq.n	800af06 <_dtoa_r+0x90e>
 800ae28:	ee18 0a10 	vmov	r0, s16
 800ae2c:	4631      	mov	r1, r6
 800ae2e:	f000 fc5f 	bl	800b6f0 <__mcmp>
 800ae32:	2800      	cmp	r0, #0
 800ae34:	da67      	bge.n	800af06 <_dtoa_r+0x90e>
 800ae36:	9b00      	ldr	r3, [sp, #0]
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	ee18 1a10 	vmov	r1, s16
 800ae3e:	9300      	str	r3, [sp, #0]
 800ae40:	220a      	movs	r2, #10
 800ae42:	2300      	movs	r3, #0
 800ae44:	4620      	mov	r0, r4
 800ae46:	f000 fa33 	bl	800b2b0 <__multadd>
 800ae4a:	9b08      	ldr	r3, [sp, #32]
 800ae4c:	ee08 0a10 	vmov	s16, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 81b1 	beq.w	800b1b8 <_dtoa_r+0xbc0>
 800ae56:	2300      	movs	r3, #0
 800ae58:	4639      	mov	r1, r7
 800ae5a:	220a      	movs	r2, #10
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f000 fa27 	bl	800b2b0 <__multadd>
 800ae62:	9b02      	ldr	r3, [sp, #8]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	4607      	mov	r7, r0
 800ae68:	f300 808e 	bgt.w	800af88 <_dtoa_r+0x990>
 800ae6c:	9b06      	ldr	r3, [sp, #24]
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	dc51      	bgt.n	800af16 <_dtoa_r+0x91e>
 800ae72:	e089      	b.n	800af88 <_dtoa_r+0x990>
 800ae74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae7a:	e74b      	b.n	800ad14 <_dtoa_r+0x71c>
 800ae7c:	9b03      	ldr	r3, [sp, #12]
 800ae7e:	1e5e      	subs	r6, r3, #1
 800ae80:	9b07      	ldr	r3, [sp, #28]
 800ae82:	42b3      	cmp	r3, r6
 800ae84:	bfbf      	itttt	lt
 800ae86:	9b07      	ldrlt	r3, [sp, #28]
 800ae88:	9607      	strlt	r6, [sp, #28]
 800ae8a:	1af2      	sublt	r2, r6, r3
 800ae8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ae8e:	bfb6      	itet	lt
 800ae90:	189b      	addlt	r3, r3, r2
 800ae92:	1b9e      	subge	r6, r3, r6
 800ae94:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ae96:	9b03      	ldr	r3, [sp, #12]
 800ae98:	bfb8      	it	lt
 800ae9a:	2600      	movlt	r6, #0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	bfb7      	itett	lt
 800aea0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aea4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aea8:	1a9d      	sublt	r5, r3, r2
 800aeaa:	2300      	movlt	r3, #0
 800aeac:	e734      	b.n	800ad18 <_dtoa_r+0x720>
 800aeae:	9e07      	ldr	r6, [sp, #28]
 800aeb0:	9d04      	ldr	r5, [sp, #16]
 800aeb2:	9f08      	ldr	r7, [sp, #32]
 800aeb4:	e73b      	b.n	800ad2e <_dtoa_r+0x736>
 800aeb6:	9a07      	ldr	r2, [sp, #28]
 800aeb8:	e767      	b.n	800ad8a <_dtoa_r+0x792>
 800aeba:	9b06      	ldr	r3, [sp, #24]
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	dc18      	bgt.n	800aef2 <_dtoa_r+0x8fa>
 800aec0:	f1ba 0f00 	cmp.w	sl, #0
 800aec4:	d115      	bne.n	800aef2 <_dtoa_r+0x8fa>
 800aec6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aeca:	b993      	cbnz	r3, 800aef2 <_dtoa_r+0x8fa>
 800aecc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aed0:	0d1b      	lsrs	r3, r3, #20
 800aed2:	051b      	lsls	r3, r3, #20
 800aed4:	b183      	cbz	r3, 800aef8 <_dtoa_r+0x900>
 800aed6:	9b04      	ldr	r3, [sp, #16]
 800aed8:	3301      	adds	r3, #1
 800aeda:	9304      	str	r3, [sp, #16]
 800aedc:	9b05      	ldr	r3, [sp, #20]
 800aede:	3301      	adds	r3, #1
 800aee0:	9305      	str	r3, [sp, #20]
 800aee2:	f04f 0801 	mov.w	r8, #1
 800aee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f47f af6a 	bne.w	800adc2 <_dtoa_r+0x7ca>
 800aeee:	2001      	movs	r0, #1
 800aef0:	e76f      	b.n	800add2 <_dtoa_r+0x7da>
 800aef2:	f04f 0800 	mov.w	r8, #0
 800aef6:	e7f6      	b.n	800aee6 <_dtoa_r+0x8ee>
 800aef8:	4698      	mov	r8, r3
 800aefa:	e7f4      	b.n	800aee6 <_dtoa_r+0x8ee>
 800aefc:	f43f af7d 	beq.w	800adfa <_dtoa_r+0x802>
 800af00:	4618      	mov	r0, r3
 800af02:	301c      	adds	r0, #28
 800af04:	e772      	b.n	800adec <_dtoa_r+0x7f4>
 800af06:	9b03      	ldr	r3, [sp, #12]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	dc37      	bgt.n	800af7c <_dtoa_r+0x984>
 800af0c:	9b06      	ldr	r3, [sp, #24]
 800af0e:	2b02      	cmp	r3, #2
 800af10:	dd34      	ble.n	800af7c <_dtoa_r+0x984>
 800af12:	9b03      	ldr	r3, [sp, #12]
 800af14:	9302      	str	r3, [sp, #8]
 800af16:	9b02      	ldr	r3, [sp, #8]
 800af18:	b96b      	cbnz	r3, 800af36 <_dtoa_r+0x93e>
 800af1a:	4631      	mov	r1, r6
 800af1c:	2205      	movs	r2, #5
 800af1e:	4620      	mov	r0, r4
 800af20:	f000 f9c6 	bl	800b2b0 <__multadd>
 800af24:	4601      	mov	r1, r0
 800af26:	4606      	mov	r6, r0
 800af28:	ee18 0a10 	vmov	r0, s16
 800af2c:	f000 fbe0 	bl	800b6f0 <__mcmp>
 800af30:	2800      	cmp	r0, #0
 800af32:	f73f adbb 	bgt.w	800aaac <_dtoa_r+0x4b4>
 800af36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af38:	9d01      	ldr	r5, [sp, #4]
 800af3a:	43db      	mvns	r3, r3
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	f04f 0800 	mov.w	r8, #0
 800af42:	4631      	mov	r1, r6
 800af44:	4620      	mov	r0, r4
 800af46:	f000 f991 	bl	800b26c <_Bfree>
 800af4a:	2f00      	cmp	r7, #0
 800af4c:	f43f aea4 	beq.w	800ac98 <_dtoa_r+0x6a0>
 800af50:	f1b8 0f00 	cmp.w	r8, #0
 800af54:	d005      	beq.n	800af62 <_dtoa_r+0x96a>
 800af56:	45b8      	cmp	r8, r7
 800af58:	d003      	beq.n	800af62 <_dtoa_r+0x96a>
 800af5a:	4641      	mov	r1, r8
 800af5c:	4620      	mov	r0, r4
 800af5e:	f000 f985 	bl	800b26c <_Bfree>
 800af62:	4639      	mov	r1, r7
 800af64:	4620      	mov	r0, r4
 800af66:	f000 f981 	bl	800b26c <_Bfree>
 800af6a:	e695      	b.n	800ac98 <_dtoa_r+0x6a0>
 800af6c:	2600      	movs	r6, #0
 800af6e:	4637      	mov	r7, r6
 800af70:	e7e1      	b.n	800af36 <_dtoa_r+0x93e>
 800af72:	9700      	str	r7, [sp, #0]
 800af74:	4637      	mov	r7, r6
 800af76:	e599      	b.n	800aaac <_dtoa_r+0x4b4>
 800af78:	40240000 	.word	0x40240000
 800af7c:	9b08      	ldr	r3, [sp, #32]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f000 80ca 	beq.w	800b118 <_dtoa_r+0xb20>
 800af84:	9b03      	ldr	r3, [sp, #12]
 800af86:	9302      	str	r3, [sp, #8]
 800af88:	2d00      	cmp	r5, #0
 800af8a:	dd05      	ble.n	800af98 <_dtoa_r+0x9a0>
 800af8c:	4639      	mov	r1, r7
 800af8e:	462a      	mov	r2, r5
 800af90:	4620      	mov	r0, r4
 800af92:	f000 fb3d 	bl	800b610 <__lshift>
 800af96:	4607      	mov	r7, r0
 800af98:	f1b8 0f00 	cmp.w	r8, #0
 800af9c:	d05b      	beq.n	800b056 <_dtoa_r+0xa5e>
 800af9e:	6879      	ldr	r1, [r7, #4]
 800afa0:	4620      	mov	r0, r4
 800afa2:	f000 f923 	bl	800b1ec <_Balloc>
 800afa6:	4605      	mov	r5, r0
 800afa8:	b928      	cbnz	r0, 800afb6 <_dtoa_r+0x9be>
 800afaa:	4b87      	ldr	r3, [pc, #540]	; (800b1c8 <_dtoa_r+0xbd0>)
 800afac:	4602      	mov	r2, r0
 800afae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800afb2:	f7ff bb3b 	b.w	800a62c <_dtoa_r+0x34>
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	3202      	adds	r2, #2
 800afba:	0092      	lsls	r2, r2, #2
 800afbc:	f107 010c 	add.w	r1, r7, #12
 800afc0:	300c      	adds	r0, #12
 800afc2:	f7fe fe0b 	bl	8009bdc <memcpy>
 800afc6:	2201      	movs	r2, #1
 800afc8:	4629      	mov	r1, r5
 800afca:	4620      	mov	r0, r4
 800afcc:	f000 fb20 	bl	800b610 <__lshift>
 800afd0:	9b01      	ldr	r3, [sp, #4]
 800afd2:	f103 0901 	add.w	r9, r3, #1
 800afd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800afda:	4413      	add	r3, r2
 800afdc:	9305      	str	r3, [sp, #20]
 800afde:	f00a 0301 	and.w	r3, sl, #1
 800afe2:	46b8      	mov	r8, r7
 800afe4:	9304      	str	r3, [sp, #16]
 800afe6:	4607      	mov	r7, r0
 800afe8:	4631      	mov	r1, r6
 800afea:	ee18 0a10 	vmov	r0, s16
 800afee:	f7ff fa75 	bl	800a4dc <quorem>
 800aff2:	4641      	mov	r1, r8
 800aff4:	9002      	str	r0, [sp, #8]
 800aff6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800affa:	ee18 0a10 	vmov	r0, s16
 800affe:	f000 fb77 	bl	800b6f0 <__mcmp>
 800b002:	463a      	mov	r2, r7
 800b004:	9003      	str	r0, [sp, #12]
 800b006:	4631      	mov	r1, r6
 800b008:	4620      	mov	r0, r4
 800b00a:	f000 fb8d 	bl	800b728 <__mdiff>
 800b00e:	68c2      	ldr	r2, [r0, #12]
 800b010:	f109 3bff 	add.w	fp, r9, #4294967295
 800b014:	4605      	mov	r5, r0
 800b016:	bb02      	cbnz	r2, 800b05a <_dtoa_r+0xa62>
 800b018:	4601      	mov	r1, r0
 800b01a:	ee18 0a10 	vmov	r0, s16
 800b01e:	f000 fb67 	bl	800b6f0 <__mcmp>
 800b022:	4602      	mov	r2, r0
 800b024:	4629      	mov	r1, r5
 800b026:	4620      	mov	r0, r4
 800b028:	9207      	str	r2, [sp, #28]
 800b02a:	f000 f91f 	bl	800b26c <_Bfree>
 800b02e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b032:	ea43 0102 	orr.w	r1, r3, r2
 800b036:	9b04      	ldr	r3, [sp, #16]
 800b038:	430b      	orrs	r3, r1
 800b03a:	464d      	mov	r5, r9
 800b03c:	d10f      	bne.n	800b05e <_dtoa_r+0xa66>
 800b03e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b042:	d02a      	beq.n	800b09a <_dtoa_r+0xaa2>
 800b044:	9b03      	ldr	r3, [sp, #12]
 800b046:	2b00      	cmp	r3, #0
 800b048:	dd02      	ble.n	800b050 <_dtoa_r+0xa58>
 800b04a:	9b02      	ldr	r3, [sp, #8]
 800b04c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b050:	f88b a000 	strb.w	sl, [fp]
 800b054:	e775      	b.n	800af42 <_dtoa_r+0x94a>
 800b056:	4638      	mov	r0, r7
 800b058:	e7ba      	b.n	800afd0 <_dtoa_r+0x9d8>
 800b05a:	2201      	movs	r2, #1
 800b05c:	e7e2      	b.n	800b024 <_dtoa_r+0xa2c>
 800b05e:	9b03      	ldr	r3, [sp, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	db04      	blt.n	800b06e <_dtoa_r+0xa76>
 800b064:	9906      	ldr	r1, [sp, #24]
 800b066:	430b      	orrs	r3, r1
 800b068:	9904      	ldr	r1, [sp, #16]
 800b06a:	430b      	orrs	r3, r1
 800b06c:	d122      	bne.n	800b0b4 <_dtoa_r+0xabc>
 800b06e:	2a00      	cmp	r2, #0
 800b070:	ddee      	ble.n	800b050 <_dtoa_r+0xa58>
 800b072:	ee18 1a10 	vmov	r1, s16
 800b076:	2201      	movs	r2, #1
 800b078:	4620      	mov	r0, r4
 800b07a:	f000 fac9 	bl	800b610 <__lshift>
 800b07e:	4631      	mov	r1, r6
 800b080:	ee08 0a10 	vmov	s16, r0
 800b084:	f000 fb34 	bl	800b6f0 <__mcmp>
 800b088:	2800      	cmp	r0, #0
 800b08a:	dc03      	bgt.n	800b094 <_dtoa_r+0xa9c>
 800b08c:	d1e0      	bne.n	800b050 <_dtoa_r+0xa58>
 800b08e:	f01a 0f01 	tst.w	sl, #1
 800b092:	d0dd      	beq.n	800b050 <_dtoa_r+0xa58>
 800b094:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b098:	d1d7      	bne.n	800b04a <_dtoa_r+0xa52>
 800b09a:	2339      	movs	r3, #57	; 0x39
 800b09c:	f88b 3000 	strb.w	r3, [fp]
 800b0a0:	462b      	mov	r3, r5
 800b0a2:	461d      	mov	r5, r3
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b0aa:	2a39      	cmp	r2, #57	; 0x39
 800b0ac:	d071      	beq.n	800b192 <_dtoa_r+0xb9a>
 800b0ae:	3201      	adds	r2, #1
 800b0b0:	701a      	strb	r2, [r3, #0]
 800b0b2:	e746      	b.n	800af42 <_dtoa_r+0x94a>
 800b0b4:	2a00      	cmp	r2, #0
 800b0b6:	dd07      	ble.n	800b0c8 <_dtoa_r+0xad0>
 800b0b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b0bc:	d0ed      	beq.n	800b09a <_dtoa_r+0xaa2>
 800b0be:	f10a 0301 	add.w	r3, sl, #1
 800b0c2:	f88b 3000 	strb.w	r3, [fp]
 800b0c6:	e73c      	b.n	800af42 <_dtoa_r+0x94a>
 800b0c8:	9b05      	ldr	r3, [sp, #20]
 800b0ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b0ce:	4599      	cmp	r9, r3
 800b0d0:	d047      	beq.n	800b162 <_dtoa_r+0xb6a>
 800b0d2:	ee18 1a10 	vmov	r1, s16
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	220a      	movs	r2, #10
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f000 f8e8 	bl	800b2b0 <__multadd>
 800b0e0:	45b8      	cmp	r8, r7
 800b0e2:	ee08 0a10 	vmov	s16, r0
 800b0e6:	f04f 0300 	mov.w	r3, #0
 800b0ea:	f04f 020a 	mov.w	r2, #10
 800b0ee:	4641      	mov	r1, r8
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	d106      	bne.n	800b102 <_dtoa_r+0xb0a>
 800b0f4:	f000 f8dc 	bl	800b2b0 <__multadd>
 800b0f8:	4680      	mov	r8, r0
 800b0fa:	4607      	mov	r7, r0
 800b0fc:	f109 0901 	add.w	r9, r9, #1
 800b100:	e772      	b.n	800afe8 <_dtoa_r+0x9f0>
 800b102:	f000 f8d5 	bl	800b2b0 <__multadd>
 800b106:	4639      	mov	r1, r7
 800b108:	4680      	mov	r8, r0
 800b10a:	2300      	movs	r3, #0
 800b10c:	220a      	movs	r2, #10
 800b10e:	4620      	mov	r0, r4
 800b110:	f000 f8ce 	bl	800b2b0 <__multadd>
 800b114:	4607      	mov	r7, r0
 800b116:	e7f1      	b.n	800b0fc <_dtoa_r+0xb04>
 800b118:	9b03      	ldr	r3, [sp, #12]
 800b11a:	9302      	str	r3, [sp, #8]
 800b11c:	9d01      	ldr	r5, [sp, #4]
 800b11e:	ee18 0a10 	vmov	r0, s16
 800b122:	4631      	mov	r1, r6
 800b124:	f7ff f9da 	bl	800a4dc <quorem>
 800b128:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b12c:	9b01      	ldr	r3, [sp, #4]
 800b12e:	f805 ab01 	strb.w	sl, [r5], #1
 800b132:	1aea      	subs	r2, r5, r3
 800b134:	9b02      	ldr	r3, [sp, #8]
 800b136:	4293      	cmp	r3, r2
 800b138:	dd09      	ble.n	800b14e <_dtoa_r+0xb56>
 800b13a:	ee18 1a10 	vmov	r1, s16
 800b13e:	2300      	movs	r3, #0
 800b140:	220a      	movs	r2, #10
 800b142:	4620      	mov	r0, r4
 800b144:	f000 f8b4 	bl	800b2b0 <__multadd>
 800b148:	ee08 0a10 	vmov	s16, r0
 800b14c:	e7e7      	b.n	800b11e <_dtoa_r+0xb26>
 800b14e:	9b02      	ldr	r3, [sp, #8]
 800b150:	2b00      	cmp	r3, #0
 800b152:	bfc8      	it	gt
 800b154:	461d      	movgt	r5, r3
 800b156:	9b01      	ldr	r3, [sp, #4]
 800b158:	bfd8      	it	le
 800b15a:	2501      	movle	r5, #1
 800b15c:	441d      	add	r5, r3
 800b15e:	f04f 0800 	mov.w	r8, #0
 800b162:	ee18 1a10 	vmov	r1, s16
 800b166:	2201      	movs	r2, #1
 800b168:	4620      	mov	r0, r4
 800b16a:	f000 fa51 	bl	800b610 <__lshift>
 800b16e:	4631      	mov	r1, r6
 800b170:	ee08 0a10 	vmov	s16, r0
 800b174:	f000 fabc 	bl	800b6f0 <__mcmp>
 800b178:	2800      	cmp	r0, #0
 800b17a:	dc91      	bgt.n	800b0a0 <_dtoa_r+0xaa8>
 800b17c:	d102      	bne.n	800b184 <_dtoa_r+0xb8c>
 800b17e:	f01a 0f01 	tst.w	sl, #1
 800b182:	d18d      	bne.n	800b0a0 <_dtoa_r+0xaa8>
 800b184:	462b      	mov	r3, r5
 800b186:	461d      	mov	r5, r3
 800b188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b18c:	2a30      	cmp	r2, #48	; 0x30
 800b18e:	d0fa      	beq.n	800b186 <_dtoa_r+0xb8e>
 800b190:	e6d7      	b.n	800af42 <_dtoa_r+0x94a>
 800b192:	9a01      	ldr	r2, [sp, #4]
 800b194:	429a      	cmp	r2, r3
 800b196:	d184      	bne.n	800b0a2 <_dtoa_r+0xaaa>
 800b198:	9b00      	ldr	r3, [sp, #0]
 800b19a:	3301      	adds	r3, #1
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	2331      	movs	r3, #49	; 0x31
 800b1a0:	7013      	strb	r3, [r2, #0]
 800b1a2:	e6ce      	b.n	800af42 <_dtoa_r+0x94a>
 800b1a4:	4b09      	ldr	r3, [pc, #36]	; (800b1cc <_dtoa_r+0xbd4>)
 800b1a6:	f7ff ba95 	b.w	800a6d4 <_dtoa_r+0xdc>
 800b1aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	f47f aa6e 	bne.w	800a68e <_dtoa_r+0x96>
 800b1b2:	4b07      	ldr	r3, [pc, #28]	; (800b1d0 <_dtoa_r+0xbd8>)
 800b1b4:	f7ff ba8e 	b.w	800a6d4 <_dtoa_r+0xdc>
 800b1b8:	9b02      	ldr	r3, [sp, #8]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	dcae      	bgt.n	800b11c <_dtoa_r+0xb24>
 800b1be:	9b06      	ldr	r3, [sp, #24]
 800b1c0:	2b02      	cmp	r3, #2
 800b1c2:	f73f aea8 	bgt.w	800af16 <_dtoa_r+0x91e>
 800b1c6:	e7a9      	b.n	800b11c <_dtoa_r+0xb24>
 800b1c8:	0800cfbb 	.word	0x0800cfbb
 800b1cc:	0800cf18 	.word	0x0800cf18
 800b1d0:	0800cf3c 	.word	0x0800cf3c

0800b1d4 <_localeconv_r>:
 800b1d4:	4800      	ldr	r0, [pc, #0]	; (800b1d8 <_localeconv_r+0x4>)
 800b1d6:	4770      	bx	lr
 800b1d8:	20000164 	.word	0x20000164

0800b1dc <malloc>:
 800b1dc:	4b02      	ldr	r3, [pc, #8]	; (800b1e8 <malloc+0xc>)
 800b1de:	4601      	mov	r1, r0
 800b1e0:	6818      	ldr	r0, [r3, #0]
 800b1e2:	f000 bc09 	b.w	800b9f8 <_malloc_r>
 800b1e6:	bf00      	nop
 800b1e8:	20000010 	.word	0x20000010

0800b1ec <_Balloc>:
 800b1ec:	b570      	push	{r4, r5, r6, lr}
 800b1ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1f0:	4604      	mov	r4, r0
 800b1f2:	460d      	mov	r5, r1
 800b1f4:	b976      	cbnz	r6, 800b214 <_Balloc+0x28>
 800b1f6:	2010      	movs	r0, #16
 800b1f8:	f7ff fff0 	bl	800b1dc <malloc>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	6260      	str	r0, [r4, #36]	; 0x24
 800b200:	b920      	cbnz	r0, 800b20c <_Balloc+0x20>
 800b202:	4b18      	ldr	r3, [pc, #96]	; (800b264 <_Balloc+0x78>)
 800b204:	4818      	ldr	r0, [pc, #96]	; (800b268 <_Balloc+0x7c>)
 800b206:	2166      	movs	r1, #102	; 0x66
 800b208:	f000 fc7a 	bl	800bb00 <__assert_func>
 800b20c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b210:	6006      	str	r6, [r0, #0]
 800b212:	60c6      	str	r6, [r0, #12]
 800b214:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b216:	68f3      	ldr	r3, [r6, #12]
 800b218:	b183      	cbz	r3, 800b23c <_Balloc+0x50>
 800b21a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b222:	b9b8      	cbnz	r0, 800b254 <_Balloc+0x68>
 800b224:	2101      	movs	r1, #1
 800b226:	fa01 f605 	lsl.w	r6, r1, r5
 800b22a:	1d72      	adds	r2, r6, #5
 800b22c:	0092      	lsls	r2, r2, #2
 800b22e:	4620      	mov	r0, r4
 800b230:	f000 fb60 	bl	800b8f4 <_calloc_r>
 800b234:	b160      	cbz	r0, 800b250 <_Balloc+0x64>
 800b236:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b23a:	e00e      	b.n	800b25a <_Balloc+0x6e>
 800b23c:	2221      	movs	r2, #33	; 0x21
 800b23e:	2104      	movs	r1, #4
 800b240:	4620      	mov	r0, r4
 800b242:	f000 fb57 	bl	800b8f4 <_calloc_r>
 800b246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b248:	60f0      	str	r0, [r6, #12]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d1e4      	bne.n	800b21a <_Balloc+0x2e>
 800b250:	2000      	movs	r0, #0
 800b252:	bd70      	pop	{r4, r5, r6, pc}
 800b254:	6802      	ldr	r2, [r0, #0]
 800b256:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b25a:	2300      	movs	r3, #0
 800b25c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b260:	e7f7      	b.n	800b252 <_Balloc+0x66>
 800b262:	bf00      	nop
 800b264:	0800cf49 	.word	0x0800cf49
 800b268:	0800cfcc 	.word	0x0800cfcc

0800b26c <_Bfree>:
 800b26c:	b570      	push	{r4, r5, r6, lr}
 800b26e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b270:	4605      	mov	r5, r0
 800b272:	460c      	mov	r4, r1
 800b274:	b976      	cbnz	r6, 800b294 <_Bfree+0x28>
 800b276:	2010      	movs	r0, #16
 800b278:	f7ff ffb0 	bl	800b1dc <malloc>
 800b27c:	4602      	mov	r2, r0
 800b27e:	6268      	str	r0, [r5, #36]	; 0x24
 800b280:	b920      	cbnz	r0, 800b28c <_Bfree+0x20>
 800b282:	4b09      	ldr	r3, [pc, #36]	; (800b2a8 <_Bfree+0x3c>)
 800b284:	4809      	ldr	r0, [pc, #36]	; (800b2ac <_Bfree+0x40>)
 800b286:	218a      	movs	r1, #138	; 0x8a
 800b288:	f000 fc3a 	bl	800bb00 <__assert_func>
 800b28c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b290:	6006      	str	r6, [r0, #0]
 800b292:	60c6      	str	r6, [r0, #12]
 800b294:	b13c      	cbz	r4, 800b2a6 <_Bfree+0x3a>
 800b296:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b298:	6862      	ldr	r2, [r4, #4]
 800b29a:	68db      	ldr	r3, [r3, #12]
 800b29c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2a0:	6021      	str	r1, [r4, #0]
 800b2a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b2a6:	bd70      	pop	{r4, r5, r6, pc}
 800b2a8:	0800cf49 	.word	0x0800cf49
 800b2ac:	0800cfcc 	.word	0x0800cfcc

0800b2b0 <__multadd>:
 800b2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b4:	690d      	ldr	r5, [r1, #16]
 800b2b6:	4607      	mov	r7, r0
 800b2b8:	460c      	mov	r4, r1
 800b2ba:	461e      	mov	r6, r3
 800b2bc:	f101 0c14 	add.w	ip, r1, #20
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	f8dc 3000 	ldr.w	r3, [ip]
 800b2c6:	b299      	uxth	r1, r3
 800b2c8:	fb02 6101 	mla	r1, r2, r1, r6
 800b2cc:	0c1e      	lsrs	r6, r3, #16
 800b2ce:	0c0b      	lsrs	r3, r1, #16
 800b2d0:	fb02 3306 	mla	r3, r2, r6, r3
 800b2d4:	b289      	uxth	r1, r1
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b2dc:	4285      	cmp	r5, r0
 800b2de:	f84c 1b04 	str.w	r1, [ip], #4
 800b2e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b2e6:	dcec      	bgt.n	800b2c2 <__multadd+0x12>
 800b2e8:	b30e      	cbz	r6, 800b32e <__multadd+0x7e>
 800b2ea:	68a3      	ldr	r3, [r4, #8]
 800b2ec:	42ab      	cmp	r3, r5
 800b2ee:	dc19      	bgt.n	800b324 <__multadd+0x74>
 800b2f0:	6861      	ldr	r1, [r4, #4]
 800b2f2:	4638      	mov	r0, r7
 800b2f4:	3101      	adds	r1, #1
 800b2f6:	f7ff ff79 	bl	800b1ec <_Balloc>
 800b2fa:	4680      	mov	r8, r0
 800b2fc:	b928      	cbnz	r0, 800b30a <__multadd+0x5a>
 800b2fe:	4602      	mov	r2, r0
 800b300:	4b0c      	ldr	r3, [pc, #48]	; (800b334 <__multadd+0x84>)
 800b302:	480d      	ldr	r0, [pc, #52]	; (800b338 <__multadd+0x88>)
 800b304:	21b5      	movs	r1, #181	; 0xb5
 800b306:	f000 fbfb 	bl	800bb00 <__assert_func>
 800b30a:	6922      	ldr	r2, [r4, #16]
 800b30c:	3202      	adds	r2, #2
 800b30e:	f104 010c 	add.w	r1, r4, #12
 800b312:	0092      	lsls	r2, r2, #2
 800b314:	300c      	adds	r0, #12
 800b316:	f7fe fc61 	bl	8009bdc <memcpy>
 800b31a:	4621      	mov	r1, r4
 800b31c:	4638      	mov	r0, r7
 800b31e:	f7ff ffa5 	bl	800b26c <_Bfree>
 800b322:	4644      	mov	r4, r8
 800b324:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b328:	3501      	adds	r5, #1
 800b32a:	615e      	str	r6, [r3, #20]
 800b32c:	6125      	str	r5, [r4, #16]
 800b32e:	4620      	mov	r0, r4
 800b330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b334:	0800cfbb 	.word	0x0800cfbb
 800b338:	0800cfcc 	.word	0x0800cfcc

0800b33c <__hi0bits>:
 800b33c:	0c03      	lsrs	r3, r0, #16
 800b33e:	041b      	lsls	r3, r3, #16
 800b340:	b9d3      	cbnz	r3, 800b378 <__hi0bits+0x3c>
 800b342:	0400      	lsls	r0, r0, #16
 800b344:	2310      	movs	r3, #16
 800b346:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b34a:	bf04      	itt	eq
 800b34c:	0200      	lsleq	r0, r0, #8
 800b34e:	3308      	addeq	r3, #8
 800b350:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b354:	bf04      	itt	eq
 800b356:	0100      	lsleq	r0, r0, #4
 800b358:	3304      	addeq	r3, #4
 800b35a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b35e:	bf04      	itt	eq
 800b360:	0080      	lsleq	r0, r0, #2
 800b362:	3302      	addeq	r3, #2
 800b364:	2800      	cmp	r0, #0
 800b366:	db05      	blt.n	800b374 <__hi0bits+0x38>
 800b368:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b36c:	f103 0301 	add.w	r3, r3, #1
 800b370:	bf08      	it	eq
 800b372:	2320      	moveq	r3, #32
 800b374:	4618      	mov	r0, r3
 800b376:	4770      	bx	lr
 800b378:	2300      	movs	r3, #0
 800b37a:	e7e4      	b.n	800b346 <__hi0bits+0xa>

0800b37c <__lo0bits>:
 800b37c:	6803      	ldr	r3, [r0, #0]
 800b37e:	f013 0207 	ands.w	r2, r3, #7
 800b382:	4601      	mov	r1, r0
 800b384:	d00b      	beq.n	800b39e <__lo0bits+0x22>
 800b386:	07da      	lsls	r2, r3, #31
 800b388:	d423      	bmi.n	800b3d2 <__lo0bits+0x56>
 800b38a:	0798      	lsls	r0, r3, #30
 800b38c:	bf49      	itett	mi
 800b38e:	085b      	lsrmi	r3, r3, #1
 800b390:	089b      	lsrpl	r3, r3, #2
 800b392:	2001      	movmi	r0, #1
 800b394:	600b      	strmi	r3, [r1, #0]
 800b396:	bf5c      	itt	pl
 800b398:	600b      	strpl	r3, [r1, #0]
 800b39a:	2002      	movpl	r0, #2
 800b39c:	4770      	bx	lr
 800b39e:	b298      	uxth	r0, r3
 800b3a0:	b9a8      	cbnz	r0, 800b3ce <__lo0bits+0x52>
 800b3a2:	0c1b      	lsrs	r3, r3, #16
 800b3a4:	2010      	movs	r0, #16
 800b3a6:	b2da      	uxtb	r2, r3
 800b3a8:	b90a      	cbnz	r2, 800b3ae <__lo0bits+0x32>
 800b3aa:	3008      	adds	r0, #8
 800b3ac:	0a1b      	lsrs	r3, r3, #8
 800b3ae:	071a      	lsls	r2, r3, #28
 800b3b0:	bf04      	itt	eq
 800b3b2:	091b      	lsreq	r3, r3, #4
 800b3b4:	3004      	addeq	r0, #4
 800b3b6:	079a      	lsls	r2, r3, #30
 800b3b8:	bf04      	itt	eq
 800b3ba:	089b      	lsreq	r3, r3, #2
 800b3bc:	3002      	addeq	r0, #2
 800b3be:	07da      	lsls	r2, r3, #31
 800b3c0:	d403      	bmi.n	800b3ca <__lo0bits+0x4e>
 800b3c2:	085b      	lsrs	r3, r3, #1
 800b3c4:	f100 0001 	add.w	r0, r0, #1
 800b3c8:	d005      	beq.n	800b3d6 <__lo0bits+0x5a>
 800b3ca:	600b      	str	r3, [r1, #0]
 800b3cc:	4770      	bx	lr
 800b3ce:	4610      	mov	r0, r2
 800b3d0:	e7e9      	b.n	800b3a6 <__lo0bits+0x2a>
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	4770      	bx	lr
 800b3d6:	2020      	movs	r0, #32
 800b3d8:	4770      	bx	lr
	...

0800b3dc <__i2b>:
 800b3dc:	b510      	push	{r4, lr}
 800b3de:	460c      	mov	r4, r1
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	f7ff ff03 	bl	800b1ec <_Balloc>
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	b928      	cbnz	r0, 800b3f6 <__i2b+0x1a>
 800b3ea:	4b05      	ldr	r3, [pc, #20]	; (800b400 <__i2b+0x24>)
 800b3ec:	4805      	ldr	r0, [pc, #20]	; (800b404 <__i2b+0x28>)
 800b3ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b3f2:	f000 fb85 	bl	800bb00 <__assert_func>
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	6144      	str	r4, [r0, #20]
 800b3fa:	6103      	str	r3, [r0, #16]
 800b3fc:	bd10      	pop	{r4, pc}
 800b3fe:	bf00      	nop
 800b400:	0800cfbb 	.word	0x0800cfbb
 800b404:	0800cfcc 	.word	0x0800cfcc

0800b408 <__multiply>:
 800b408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b40c:	4691      	mov	r9, r2
 800b40e:	690a      	ldr	r2, [r1, #16]
 800b410:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b414:	429a      	cmp	r2, r3
 800b416:	bfb8      	it	lt
 800b418:	460b      	movlt	r3, r1
 800b41a:	460c      	mov	r4, r1
 800b41c:	bfbc      	itt	lt
 800b41e:	464c      	movlt	r4, r9
 800b420:	4699      	movlt	r9, r3
 800b422:	6927      	ldr	r7, [r4, #16]
 800b424:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b428:	68a3      	ldr	r3, [r4, #8]
 800b42a:	6861      	ldr	r1, [r4, #4]
 800b42c:	eb07 060a 	add.w	r6, r7, sl
 800b430:	42b3      	cmp	r3, r6
 800b432:	b085      	sub	sp, #20
 800b434:	bfb8      	it	lt
 800b436:	3101      	addlt	r1, #1
 800b438:	f7ff fed8 	bl	800b1ec <_Balloc>
 800b43c:	b930      	cbnz	r0, 800b44c <__multiply+0x44>
 800b43e:	4602      	mov	r2, r0
 800b440:	4b44      	ldr	r3, [pc, #272]	; (800b554 <__multiply+0x14c>)
 800b442:	4845      	ldr	r0, [pc, #276]	; (800b558 <__multiply+0x150>)
 800b444:	f240 115d 	movw	r1, #349	; 0x15d
 800b448:	f000 fb5a 	bl	800bb00 <__assert_func>
 800b44c:	f100 0514 	add.w	r5, r0, #20
 800b450:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b454:	462b      	mov	r3, r5
 800b456:	2200      	movs	r2, #0
 800b458:	4543      	cmp	r3, r8
 800b45a:	d321      	bcc.n	800b4a0 <__multiply+0x98>
 800b45c:	f104 0314 	add.w	r3, r4, #20
 800b460:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b464:	f109 0314 	add.w	r3, r9, #20
 800b468:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b46c:	9202      	str	r2, [sp, #8]
 800b46e:	1b3a      	subs	r2, r7, r4
 800b470:	3a15      	subs	r2, #21
 800b472:	f022 0203 	bic.w	r2, r2, #3
 800b476:	3204      	adds	r2, #4
 800b478:	f104 0115 	add.w	r1, r4, #21
 800b47c:	428f      	cmp	r7, r1
 800b47e:	bf38      	it	cc
 800b480:	2204      	movcc	r2, #4
 800b482:	9201      	str	r2, [sp, #4]
 800b484:	9a02      	ldr	r2, [sp, #8]
 800b486:	9303      	str	r3, [sp, #12]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d80c      	bhi.n	800b4a6 <__multiply+0x9e>
 800b48c:	2e00      	cmp	r6, #0
 800b48e:	dd03      	ble.n	800b498 <__multiply+0x90>
 800b490:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b494:	2b00      	cmp	r3, #0
 800b496:	d05a      	beq.n	800b54e <__multiply+0x146>
 800b498:	6106      	str	r6, [r0, #16]
 800b49a:	b005      	add	sp, #20
 800b49c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a0:	f843 2b04 	str.w	r2, [r3], #4
 800b4a4:	e7d8      	b.n	800b458 <__multiply+0x50>
 800b4a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b4aa:	f1ba 0f00 	cmp.w	sl, #0
 800b4ae:	d024      	beq.n	800b4fa <__multiply+0xf2>
 800b4b0:	f104 0e14 	add.w	lr, r4, #20
 800b4b4:	46a9      	mov	r9, r5
 800b4b6:	f04f 0c00 	mov.w	ip, #0
 800b4ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b4be:	f8d9 1000 	ldr.w	r1, [r9]
 800b4c2:	fa1f fb82 	uxth.w	fp, r2
 800b4c6:	b289      	uxth	r1, r1
 800b4c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b4cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b4d0:	f8d9 2000 	ldr.w	r2, [r9]
 800b4d4:	4461      	add	r1, ip
 800b4d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4da:	fb0a c20b 	mla	r2, sl, fp, ip
 800b4de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4e2:	b289      	uxth	r1, r1
 800b4e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b4e8:	4577      	cmp	r7, lr
 800b4ea:	f849 1b04 	str.w	r1, [r9], #4
 800b4ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b4f2:	d8e2      	bhi.n	800b4ba <__multiply+0xb2>
 800b4f4:	9a01      	ldr	r2, [sp, #4]
 800b4f6:	f845 c002 	str.w	ip, [r5, r2]
 800b4fa:	9a03      	ldr	r2, [sp, #12]
 800b4fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b500:	3304      	adds	r3, #4
 800b502:	f1b9 0f00 	cmp.w	r9, #0
 800b506:	d020      	beq.n	800b54a <__multiply+0x142>
 800b508:	6829      	ldr	r1, [r5, #0]
 800b50a:	f104 0c14 	add.w	ip, r4, #20
 800b50e:	46ae      	mov	lr, r5
 800b510:	f04f 0a00 	mov.w	sl, #0
 800b514:	f8bc b000 	ldrh.w	fp, [ip]
 800b518:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b51c:	fb09 220b 	mla	r2, r9, fp, r2
 800b520:	4492      	add	sl, r2
 800b522:	b289      	uxth	r1, r1
 800b524:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b528:	f84e 1b04 	str.w	r1, [lr], #4
 800b52c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b530:	f8be 1000 	ldrh.w	r1, [lr]
 800b534:	0c12      	lsrs	r2, r2, #16
 800b536:	fb09 1102 	mla	r1, r9, r2, r1
 800b53a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b53e:	4567      	cmp	r7, ip
 800b540:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b544:	d8e6      	bhi.n	800b514 <__multiply+0x10c>
 800b546:	9a01      	ldr	r2, [sp, #4]
 800b548:	50a9      	str	r1, [r5, r2]
 800b54a:	3504      	adds	r5, #4
 800b54c:	e79a      	b.n	800b484 <__multiply+0x7c>
 800b54e:	3e01      	subs	r6, #1
 800b550:	e79c      	b.n	800b48c <__multiply+0x84>
 800b552:	bf00      	nop
 800b554:	0800cfbb 	.word	0x0800cfbb
 800b558:	0800cfcc 	.word	0x0800cfcc

0800b55c <__pow5mult>:
 800b55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b560:	4615      	mov	r5, r2
 800b562:	f012 0203 	ands.w	r2, r2, #3
 800b566:	4606      	mov	r6, r0
 800b568:	460f      	mov	r7, r1
 800b56a:	d007      	beq.n	800b57c <__pow5mult+0x20>
 800b56c:	4c25      	ldr	r4, [pc, #148]	; (800b604 <__pow5mult+0xa8>)
 800b56e:	3a01      	subs	r2, #1
 800b570:	2300      	movs	r3, #0
 800b572:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b576:	f7ff fe9b 	bl	800b2b0 <__multadd>
 800b57a:	4607      	mov	r7, r0
 800b57c:	10ad      	asrs	r5, r5, #2
 800b57e:	d03d      	beq.n	800b5fc <__pow5mult+0xa0>
 800b580:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b582:	b97c      	cbnz	r4, 800b5a4 <__pow5mult+0x48>
 800b584:	2010      	movs	r0, #16
 800b586:	f7ff fe29 	bl	800b1dc <malloc>
 800b58a:	4602      	mov	r2, r0
 800b58c:	6270      	str	r0, [r6, #36]	; 0x24
 800b58e:	b928      	cbnz	r0, 800b59c <__pow5mult+0x40>
 800b590:	4b1d      	ldr	r3, [pc, #116]	; (800b608 <__pow5mult+0xac>)
 800b592:	481e      	ldr	r0, [pc, #120]	; (800b60c <__pow5mult+0xb0>)
 800b594:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b598:	f000 fab2 	bl	800bb00 <__assert_func>
 800b59c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5a0:	6004      	str	r4, [r0, #0]
 800b5a2:	60c4      	str	r4, [r0, #12]
 800b5a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b5a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5ac:	b94c      	cbnz	r4, 800b5c2 <__pow5mult+0x66>
 800b5ae:	f240 2171 	movw	r1, #625	; 0x271
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	f7ff ff12 	bl	800b3dc <__i2b>
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5be:	4604      	mov	r4, r0
 800b5c0:	6003      	str	r3, [r0, #0]
 800b5c2:	f04f 0900 	mov.w	r9, #0
 800b5c6:	07eb      	lsls	r3, r5, #31
 800b5c8:	d50a      	bpl.n	800b5e0 <__pow5mult+0x84>
 800b5ca:	4639      	mov	r1, r7
 800b5cc:	4622      	mov	r2, r4
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	f7ff ff1a 	bl	800b408 <__multiply>
 800b5d4:	4639      	mov	r1, r7
 800b5d6:	4680      	mov	r8, r0
 800b5d8:	4630      	mov	r0, r6
 800b5da:	f7ff fe47 	bl	800b26c <_Bfree>
 800b5de:	4647      	mov	r7, r8
 800b5e0:	106d      	asrs	r5, r5, #1
 800b5e2:	d00b      	beq.n	800b5fc <__pow5mult+0xa0>
 800b5e4:	6820      	ldr	r0, [r4, #0]
 800b5e6:	b938      	cbnz	r0, 800b5f8 <__pow5mult+0x9c>
 800b5e8:	4622      	mov	r2, r4
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	f7ff ff0b 	bl	800b408 <__multiply>
 800b5f2:	6020      	str	r0, [r4, #0]
 800b5f4:	f8c0 9000 	str.w	r9, [r0]
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	e7e4      	b.n	800b5c6 <__pow5mult+0x6a>
 800b5fc:	4638      	mov	r0, r7
 800b5fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b602:	bf00      	nop
 800b604:	0800d118 	.word	0x0800d118
 800b608:	0800cf49 	.word	0x0800cf49
 800b60c:	0800cfcc 	.word	0x0800cfcc

0800b610 <__lshift>:
 800b610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b614:	460c      	mov	r4, r1
 800b616:	6849      	ldr	r1, [r1, #4]
 800b618:	6923      	ldr	r3, [r4, #16]
 800b61a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b61e:	68a3      	ldr	r3, [r4, #8]
 800b620:	4607      	mov	r7, r0
 800b622:	4691      	mov	r9, r2
 800b624:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b628:	f108 0601 	add.w	r6, r8, #1
 800b62c:	42b3      	cmp	r3, r6
 800b62e:	db0b      	blt.n	800b648 <__lshift+0x38>
 800b630:	4638      	mov	r0, r7
 800b632:	f7ff fddb 	bl	800b1ec <_Balloc>
 800b636:	4605      	mov	r5, r0
 800b638:	b948      	cbnz	r0, 800b64e <__lshift+0x3e>
 800b63a:	4602      	mov	r2, r0
 800b63c:	4b2a      	ldr	r3, [pc, #168]	; (800b6e8 <__lshift+0xd8>)
 800b63e:	482b      	ldr	r0, [pc, #172]	; (800b6ec <__lshift+0xdc>)
 800b640:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b644:	f000 fa5c 	bl	800bb00 <__assert_func>
 800b648:	3101      	adds	r1, #1
 800b64a:	005b      	lsls	r3, r3, #1
 800b64c:	e7ee      	b.n	800b62c <__lshift+0x1c>
 800b64e:	2300      	movs	r3, #0
 800b650:	f100 0114 	add.w	r1, r0, #20
 800b654:	f100 0210 	add.w	r2, r0, #16
 800b658:	4618      	mov	r0, r3
 800b65a:	4553      	cmp	r3, sl
 800b65c:	db37      	blt.n	800b6ce <__lshift+0xbe>
 800b65e:	6920      	ldr	r0, [r4, #16]
 800b660:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b664:	f104 0314 	add.w	r3, r4, #20
 800b668:	f019 091f 	ands.w	r9, r9, #31
 800b66c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b670:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b674:	d02f      	beq.n	800b6d6 <__lshift+0xc6>
 800b676:	f1c9 0e20 	rsb	lr, r9, #32
 800b67a:	468a      	mov	sl, r1
 800b67c:	f04f 0c00 	mov.w	ip, #0
 800b680:	681a      	ldr	r2, [r3, #0]
 800b682:	fa02 f209 	lsl.w	r2, r2, r9
 800b686:	ea42 020c 	orr.w	r2, r2, ip
 800b68a:	f84a 2b04 	str.w	r2, [sl], #4
 800b68e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b692:	4298      	cmp	r0, r3
 800b694:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b698:	d8f2      	bhi.n	800b680 <__lshift+0x70>
 800b69a:	1b03      	subs	r3, r0, r4
 800b69c:	3b15      	subs	r3, #21
 800b69e:	f023 0303 	bic.w	r3, r3, #3
 800b6a2:	3304      	adds	r3, #4
 800b6a4:	f104 0215 	add.w	r2, r4, #21
 800b6a8:	4290      	cmp	r0, r2
 800b6aa:	bf38      	it	cc
 800b6ac:	2304      	movcc	r3, #4
 800b6ae:	f841 c003 	str.w	ip, [r1, r3]
 800b6b2:	f1bc 0f00 	cmp.w	ip, #0
 800b6b6:	d001      	beq.n	800b6bc <__lshift+0xac>
 800b6b8:	f108 0602 	add.w	r6, r8, #2
 800b6bc:	3e01      	subs	r6, #1
 800b6be:	4638      	mov	r0, r7
 800b6c0:	612e      	str	r6, [r5, #16]
 800b6c2:	4621      	mov	r1, r4
 800b6c4:	f7ff fdd2 	bl	800b26c <_Bfree>
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	e7c1      	b.n	800b65a <__lshift+0x4a>
 800b6d6:	3904      	subs	r1, #4
 800b6d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800b6e0:	4298      	cmp	r0, r3
 800b6e2:	d8f9      	bhi.n	800b6d8 <__lshift+0xc8>
 800b6e4:	e7ea      	b.n	800b6bc <__lshift+0xac>
 800b6e6:	bf00      	nop
 800b6e8:	0800cfbb 	.word	0x0800cfbb
 800b6ec:	0800cfcc 	.word	0x0800cfcc

0800b6f0 <__mcmp>:
 800b6f0:	b530      	push	{r4, r5, lr}
 800b6f2:	6902      	ldr	r2, [r0, #16]
 800b6f4:	690c      	ldr	r4, [r1, #16]
 800b6f6:	1b12      	subs	r2, r2, r4
 800b6f8:	d10e      	bne.n	800b718 <__mcmp+0x28>
 800b6fa:	f100 0314 	add.w	r3, r0, #20
 800b6fe:	3114      	adds	r1, #20
 800b700:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b704:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b708:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b70c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b710:	42a5      	cmp	r5, r4
 800b712:	d003      	beq.n	800b71c <__mcmp+0x2c>
 800b714:	d305      	bcc.n	800b722 <__mcmp+0x32>
 800b716:	2201      	movs	r2, #1
 800b718:	4610      	mov	r0, r2
 800b71a:	bd30      	pop	{r4, r5, pc}
 800b71c:	4283      	cmp	r3, r0
 800b71e:	d3f3      	bcc.n	800b708 <__mcmp+0x18>
 800b720:	e7fa      	b.n	800b718 <__mcmp+0x28>
 800b722:	f04f 32ff 	mov.w	r2, #4294967295
 800b726:	e7f7      	b.n	800b718 <__mcmp+0x28>

0800b728 <__mdiff>:
 800b728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b72c:	460c      	mov	r4, r1
 800b72e:	4606      	mov	r6, r0
 800b730:	4611      	mov	r1, r2
 800b732:	4620      	mov	r0, r4
 800b734:	4690      	mov	r8, r2
 800b736:	f7ff ffdb 	bl	800b6f0 <__mcmp>
 800b73a:	1e05      	subs	r5, r0, #0
 800b73c:	d110      	bne.n	800b760 <__mdiff+0x38>
 800b73e:	4629      	mov	r1, r5
 800b740:	4630      	mov	r0, r6
 800b742:	f7ff fd53 	bl	800b1ec <_Balloc>
 800b746:	b930      	cbnz	r0, 800b756 <__mdiff+0x2e>
 800b748:	4b3a      	ldr	r3, [pc, #232]	; (800b834 <__mdiff+0x10c>)
 800b74a:	4602      	mov	r2, r0
 800b74c:	f240 2132 	movw	r1, #562	; 0x232
 800b750:	4839      	ldr	r0, [pc, #228]	; (800b838 <__mdiff+0x110>)
 800b752:	f000 f9d5 	bl	800bb00 <__assert_func>
 800b756:	2301      	movs	r3, #1
 800b758:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b75c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b760:	bfa4      	itt	ge
 800b762:	4643      	movge	r3, r8
 800b764:	46a0      	movge	r8, r4
 800b766:	4630      	mov	r0, r6
 800b768:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b76c:	bfa6      	itte	ge
 800b76e:	461c      	movge	r4, r3
 800b770:	2500      	movge	r5, #0
 800b772:	2501      	movlt	r5, #1
 800b774:	f7ff fd3a 	bl	800b1ec <_Balloc>
 800b778:	b920      	cbnz	r0, 800b784 <__mdiff+0x5c>
 800b77a:	4b2e      	ldr	r3, [pc, #184]	; (800b834 <__mdiff+0x10c>)
 800b77c:	4602      	mov	r2, r0
 800b77e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b782:	e7e5      	b.n	800b750 <__mdiff+0x28>
 800b784:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b788:	6926      	ldr	r6, [r4, #16]
 800b78a:	60c5      	str	r5, [r0, #12]
 800b78c:	f104 0914 	add.w	r9, r4, #20
 800b790:	f108 0514 	add.w	r5, r8, #20
 800b794:	f100 0e14 	add.w	lr, r0, #20
 800b798:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b79c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b7a0:	f108 0210 	add.w	r2, r8, #16
 800b7a4:	46f2      	mov	sl, lr
 800b7a6:	2100      	movs	r1, #0
 800b7a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800b7ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b7b0:	fa1f f883 	uxth.w	r8, r3
 800b7b4:	fa11 f18b 	uxtah	r1, r1, fp
 800b7b8:	0c1b      	lsrs	r3, r3, #16
 800b7ba:	eba1 0808 	sub.w	r8, r1, r8
 800b7be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b7c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b7c6:	fa1f f888 	uxth.w	r8, r8
 800b7ca:	1419      	asrs	r1, r3, #16
 800b7cc:	454e      	cmp	r6, r9
 800b7ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b7d2:	f84a 3b04 	str.w	r3, [sl], #4
 800b7d6:	d8e7      	bhi.n	800b7a8 <__mdiff+0x80>
 800b7d8:	1b33      	subs	r3, r6, r4
 800b7da:	3b15      	subs	r3, #21
 800b7dc:	f023 0303 	bic.w	r3, r3, #3
 800b7e0:	3304      	adds	r3, #4
 800b7e2:	3415      	adds	r4, #21
 800b7e4:	42a6      	cmp	r6, r4
 800b7e6:	bf38      	it	cc
 800b7e8:	2304      	movcc	r3, #4
 800b7ea:	441d      	add	r5, r3
 800b7ec:	4473      	add	r3, lr
 800b7ee:	469e      	mov	lr, r3
 800b7f0:	462e      	mov	r6, r5
 800b7f2:	4566      	cmp	r6, ip
 800b7f4:	d30e      	bcc.n	800b814 <__mdiff+0xec>
 800b7f6:	f10c 0203 	add.w	r2, ip, #3
 800b7fa:	1b52      	subs	r2, r2, r5
 800b7fc:	f022 0203 	bic.w	r2, r2, #3
 800b800:	3d03      	subs	r5, #3
 800b802:	45ac      	cmp	ip, r5
 800b804:	bf38      	it	cc
 800b806:	2200      	movcc	r2, #0
 800b808:	441a      	add	r2, r3
 800b80a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b80e:	b17b      	cbz	r3, 800b830 <__mdiff+0x108>
 800b810:	6107      	str	r7, [r0, #16]
 800b812:	e7a3      	b.n	800b75c <__mdiff+0x34>
 800b814:	f856 8b04 	ldr.w	r8, [r6], #4
 800b818:	fa11 f288 	uxtah	r2, r1, r8
 800b81c:	1414      	asrs	r4, r2, #16
 800b81e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b822:	b292      	uxth	r2, r2
 800b824:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b828:	f84e 2b04 	str.w	r2, [lr], #4
 800b82c:	1421      	asrs	r1, r4, #16
 800b82e:	e7e0      	b.n	800b7f2 <__mdiff+0xca>
 800b830:	3f01      	subs	r7, #1
 800b832:	e7ea      	b.n	800b80a <__mdiff+0xe2>
 800b834:	0800cfbb 	.word	0x0800cfbb
 800b838:	0800cfcc 	.word	0x0800cfcc

0800b83c <__d2b>:
 800b83c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b840:	4689      	mov	r9, r1
 800b842:	2101      	movs	r1, #1
 800b844:	ec57 6b10 	vmov	r6, r7, d0
 800b848:	4690      	mov	r8, r2
 800b84a:	f7ff fccf 	bl	800b1ec <_Balloc>
 800b84e:	4604      	mov	r4, r0
 800b850:	b930      	cbnz	r0, 800b860 <__d2b+0x24>
 800b852:	4602      	mov	r2, r0
 800b854:	4b25      	ldr	r3, [pc, #148]	; (800b8ec <__d2b+0xb0>)
 800b856:	4826      	ldr	r0, [pc, #152]	; (800b8f0 <__d2b+0xb4>)
 800b858:	f240 310a 	movw	r1, #778	; 0x30a
 800b85c:	f000 f950 	bl	800bb00 <__assert_func>
 800b860:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b864:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b868:	bb35      	cbnz	r5, 800b8b8 <__d2b+0x7c>
 800b86a:	2e00      	cmp	r6, #0
 800b86c:	9301      	str	r3, [sp, #4]
 800b86e:	d028      	beq.n	800b8c2 <__d2b+0x86>
 800b870:	4668      	mov	r0, sp
 800b872:	9600      	str	r6, [sp, #0]
 800b874:	f7ff fd82 	bl	800b37c <__lo0bits>
 800b878:	9900      	ldr	r1, [sp, #0]
 800b87a:	b300      	cbz	r0, 800b8be <__d2b+0x82>
 800b87c:	9a01      	ldr	r2, [sp, #4]
 800b87e:	f1c0 0320 	rsb	r3, r0, #32
 800b882:	fa02 f303 	lsl.w	r3, r2, r3
 800b886:	430b      	orrs	r3, r1
 800b888:	40c2      	lsrs	r2, r0
 800b88a:	6163      	str	r3, [r4, #20]
 800b88c:	9201      	str	r2, [sp, #4]
 800b88e:	9b01      	ldr	r3, [sp, #4]
 800b890:	61a3      	str	r3, [r4, #24]
 800b892:	2b00      	cmp	r3, #0
 800b894:	bf14      	ite	ne
 800b896:	2202      	movne	r2, #2
 800b898:	2201      	moveq	r2, #1
 800b89a:	6122      	str	r2, [r4, #16]
 800b89c:	b1d5      	cbz	r5, 800b8d4 <__d2b+0x98>
 800b89e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b8a2:	4405      	add	r5, r0
 800b8a4:	f8c9 5000 	str.w	r5, [r9]
 800b8a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b8ac:	f8c8 0000 	str.w	r0, [r8]
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	b003      	add	sp, #12
 800b8b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8bc:	e7d5      	b.n	800b86a <__d2b+0x2e>
 800b8be:	6161      	str	r1, [r4, #20]
 800b8c0:	e7e5      	b.n	800b88e <__d2b+0x52>
 800b8c2:	a801      	add	r0, sp, #4
 800b8c4:	f7ff fd5a 	bl	800b37c <__lo0bits>
 800b8c8:	9b01      	ldr	r3, [sp, #4]
 800b8ca:	6163      	str	r3, [r4, #20]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	6122      	str	r2, [r4, #16]
 800b8d0:	3020      	adds	r0, #32
 800b8d2:	e7e3      	b.n	800b89c <__d2b+0x60>
 800b8d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b8d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b8dc:	f8c9 0000 	str.w	r0, [r9]
 800b8e0:	6918      	ldr	r0, [r3, #16]
 800b8e2:	f7ff fd2b 	bl	800b33c <__hi0bits>
 800b8e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b8ea:	e7df      	b.n	800b8ac <__d2b+0x70>
 800b8ec:	0800cfbb 	.word	0x0800cfbb
 800b8f0:	0800cfcc 	.word	0x0800cfcc

0800b8f4 <_calloc_r>:
 800b8f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8f6:	fba1 2402 	umull	r2, r4, r1, r2
 800b8fa:	b94c      	cbnz	r4, 800b910 <_calloc_r+0x1c>
 800b8fc:	4611      	mov	r1, r2
 800b8fe:	9201      	str	r2, [sp, #4]
 800b900:	f000 f87a 	bl	800b9f8 <_malloc_r>
 800b904:	9a01      	ldr	r2, [sp, #4]
 800b906:	4605      	mov	r5, r0
 800b908:	b930      	cbnz	r0, 800b918 <_calloc_r+0x24>
 800b90a:	4628      	mov	r0, r5
 800b90c:	b003      	add	sp, #12
 800b90e:	bd30      	pop	{r4, r5, pc}
 800b910:	220c      	movs	r2, #12
 800b912:	6002      	str	r2, [r0, #0]
 800b914:	2500      	movs	r5, #0
 800b916:	e7f8      	b.n	800b90a <_calloc_r+0x16>
 800b918:	4621      	mov	r1, r4
 800b91a:	f7fe f96d 	bl	8009bf8 <memset>
 800b91e:	e7f4      	b.n	800b90a <_calloc_r+0x16>

0800b920 <_free_r>:
 800b920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b922:	2900      	cmp	r1, #0
 800b924:	d044      	beq.n	800b9b0 <_free_r+0x90>
 800b926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b92a:	9001      	str	r0, [sp, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f1a1 0404 	sub.w	r4, r1, #4
 800b932:	bfb8      	it	lt
 800b934:	18e4      	addlt	r4, r4, r3
 800b936:	f000 f925 	bl	800bb84 <__malloc_lock>
 800b93a:	4a1e      	ldr	r2, [pc, #120]	; (800b9b4 <_free_r+0x94>)
 800b93c:	9801      	ldr	r0, [sp, #4]
 800b93e:	6813      	ldr	r3, [r2, #0]
 800b940:	b933      	cbnz	r3, 800b950 <_free_r+0x30>
 800b942:	6063      	str	r3, [r4, #4]
 800b944:	6014      	str	r4, [r2, #0]
 800b946:	b003      	add	sp, #12
 800b948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b94c:	f000 b920 	b.w	800bb90 <__malloc_unlock>
 800b950:	42a3      	cmp	r3, r4
 800b952:	d908      	bls.n	800b966 <_free_r+0x46>
 800b954:	6825      	ldr	r5, [r4, #0]
 800b956:	1961      	adds	r1, r4, r5
 800b958:	428b      	cmp	r3, r1
 800b95a:	bf01      	itttt	eq
 800b95c:	6819      	ldreq	r1, [r3, #0]
 800b95e:	685b      	ldreq	r3, [r3, #4]
 800b960:	1949      	addeq	r1, r1, r5
 800b962:	6021      	streq	r1, [r4, #0]
 800b964:	e7ed      	b.n	800b942 <_free_r+0x22>
 800b966:	461a      	mov	r2, r3
 800b968:	685b      	ldr	r3, [r3, #4]
 800b96a:	b10b      	cbz	r3, 800b970 <_free_r+0x50>
 800b96c:	42a3      	cmp	r3, r4
 800b96e:	d9fa      	bls.n	800b966 <_free_r+0x46>
 800b970:	6811      	ldr	r1, [r2, #0]
 800b972:	1855      	adds	r5, r2, r1
 800b974:	42a5      	cmp	r5, r4
 800b976:	d10b      	bne.n	800b990 <_free_r+0x70>
 800b978:	6824      	ldr	r4, [r4, #0]
 800b97a:	4421      	add	r1, r4
 800b97c:	1854      	adds	r4, r2, r1
 800b97e:	42a3      	cmp	r3, r4
 800b980:	6011      	str	r1, [r2, #0]
 800b982:	d1e0      	bne.n	800b946 <_free_r+0x26>
 800b984:	681c      	ldr	r4, [r3, #0]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	6053      	str	r3, [r2, #4]
 800b98a:	4421      	add	r1, r4
 800b98c:	6011      	str	r1, [r2, #0]
 800b98e:	e7da      	b.n	800b946 <_free_r+0x26>
 800b990:	d902      	bls.n	800b998 <_free_r+0x78>
 800b992:	230c      	movs	r3, #12
 800b994:	6003      	str	r3, [r0, #0]
 800b996:	e7d6      	b.n	800b946 <_free_r+0x26>
 800b998:	6825      	ldr	r5, [r4, #0]
 800b99a:	1961      	adds	r1, r4, r5
 800b99c:	428b      	cmp	r3, r1
 800b99e:	bf04      	itt	eq
 800b9a0:	6819      	ldreq	r1, [r3, #0]
 800b9a2:	685b      	ldreq	r3, [r3, #4]
 800b9a4:	6063      	str	r3, [r4, #4]
 800b9a6:	bf04      	itt	eq
 800b9a8:	1949      	addeq	r1, r1, r5
 800b9aa:	6021      	streq	r1, [r4, #0]
 800b9ac:	6054      	str	r4, [r2, #4]
 800b9ae:	e7ca      	b.n	800b946 <_free_r+0x26>
 800b9b0:	b003      	add	sp, #12
 800b9b2:	bd30      	pop	{r4, r5, pc}
 800b9b4:	20000d90 	.word	0x20000d90

0800b9b8 <sbrk_aligned>:
 800b9b8:	b570      	push	{r4, r5, r6, lr}
 800b9ba:	4e0e      	ldr	r6, [pc, #56]	; (800b9f4 <sbrk_aligned+0x3c>)
 800b9bc:	460c      	mov	r4, r1
 800b9be:	6831      	ldr	r1, [r6, #0]
 800b9c0:	4605      	mov	r5, r0
 800b9c2:	b911      	cbnz	r1, 800b9ca <sbrk_aligned+0x12>
 800b9c4:	f000 f88c 	bl	800bae0 <_sbrk_r>
 800b9c8:	6030      	str	r0, [r6, #0]
 800b9ca:	4621      	mov	r1, r4
 800b9cc:	4628      	mov	r0, r5
 800b9ce:	f000 f887 	bl	800bae0 <_sbrk_r>
 800b9d2:	1c43      	adds	r3, r0, #1
 800b9d4:	d00a      	beq.n	800b9ec <sbrk_aligned+0x34>
 800b9d6:	1cc4      	adds	r4, r0, #3
 800b9d8:	f024 0403 	bic.w	r4, r4, #3
 800b9dc:	42a0      	cmp	r0, r4
 800b9de:	d007      	beq.n	800b9f0 <sbrk_aligned+0x38>
 800b9e0:	1a21      	subs	r1, r4, r0
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	f000 f87c 	bl	800bae0 <_sbrk_r>
 800b9e8:	3001      	adds	r0, #1
 800b9ea:	d101      	bne.n	800b9f0 <sbrk_aligned+0x38>
 800b9ec:	f04f 34ff 	mov.w	r4, #4294967295
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	bd70      	pop	{r4, r5, r6, pc}
 800b9f4:	20000d94 	.word	0x20000d94

0800b9f8 <_malloc_r>:
 800b9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9fc:	1ccd      	adds	r5, r1, #3
 800b9fe:	f025 0503 	bic.w	r5, r5, #3
 800ba02:	3508      	adds	r5, #8
 800ba04:	2d0c      	cmp	r5, #12
 800ba06:	bf38      	it	cc
 800ba08:	250c      	movcc	r5, #12
 800ba0a:	2d00      	cmp	r5, #0
 800ba0c:	4607      	mov	r7, r0
 800ba0e:	db01      	blt.n	800ba14 <_malloc_r+0x1c>
 800ba10:	42a9      	cmp	r1, r5
 800ba12:	d905      	bls.n	800ba20 <_malloc_r+0x28>
 800ba14:	230c      	movs	r3, #12
 800ba16:	603b      	str	r3, [r7, #0]
 800ba18:	2600      	movs	r6, #0
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba20:	4e2e      	ldr	r6, [pc, #184]	; (800badc <_malloc_r+0xe4>)
 800ba22:	f000 f8af 	bl	800bb84 <__malloc_lock>
 800ba26:	6833      	ldr	r3, [r6, #0]
 800ba28:	461c      	mov	r4, r3
 800ba2a:	bb34      	cbnz	r4, 800ba7a <_malloc_r+0x82>
 800ba2c:	4629      	mov	r1, r5
 800ba2e:	4638      	mov	r0, r7
 800ba30:	f7ff ffc2 	bl	800b9b8 <sbrk_aligned>
 800ba34:	1c43      	adds	r3, r0, #1
 800ba36:	4604      	mov	r4, r0
 800ba38:	d14d      	bne.n	800bad6 <_malloc_r+0xde>
 800ba3a:	6834      	ldr	r4, [r6, #0]
 800ba3c:	4626      	mov	r6, r4
 800ba3e:	2e00      	cmp	r6, #0
 800ba40:	d140      	bne.n	800bac4 <_malloc_r+0xcc>
 800ba42:	6823      	ldr	r3, [r4, #0]
 800ba44:	4631      	mov	r1, r6
 800ba46:	4638      	mov	r0, r7
 800ba48:	eb04 0803 	add.w	r8, r4, r3
 800ba4c:	f000 f848 	bl	800bae0 <_sbrk_r>
 800ba50:	4580      	cmp	r8, r0
 800ba52:	d13a      	bne.n	800baca <_malloc_r+0xd2>
 800ba54:	6821      	ldr	r1, [r4, #0]
 800ba56:	3503      	adds	r5, #3
 800ba58:	1a6d      	subs	r5, r5, r1
 800ba5a:	f025 0503 	bic.w	r5, r5, #3
 800ba5e:	3508      	adds	r5, #8
 800ba60:	2d0c      	cmp	r5, #12
 800ba62:	bf38      	it	cc
 800ba64:	250c      	movcc	r5, #12
 800ba66:	4629      	mov	r1, r5
 800ba68:	4638      	mov	r0, r7
 800ba6a:	f7ff ffa5 	bl	800b9b8 <sbrk_aligned>
 800ba6e:	3001      	adds	r0, #1
 800ba70:	d02b      	beq.n	800baca <_malloc_r+0xd2>
 800ba72:	6823      	ldr	r3, [r4, #0]
 800ba74:	442b      	add	r3, r5
 800ba76:	6023      	str	r3, [r4, #0]
 800ba78:	e00e      	b.n	800ba98 <_malloc_r+0xa0>
 800ba7a:	6822      	ldr	r2, [r4, #0]
 800ba7c:	1b52      	subs	r2, r2, r5
 800ba7e:	d41e      	bmi.n	800babe <_malloc_r+0xc6>
 800ba80:	2a0b      	cmp	r2, #11
 800ba82:	d916      	bls.n	800bab2 <_malloc_r+0xba>
 800ba84:	1961      	adds	r1, r4, r5
 800ba86:	42a3      	cmp	r3, r4
 800ba88:	6025      	str	r5, [r4, #0]
 800ba8a:	bf18      	it	ne
 800ba8c:	6059      	strne	r1, [r3, #4]
 800ba8e:	6863      	ldr	r3, [r4, #4]
 800ba90:	bf08      	it	eq
 800ba92:	6031      	streq	r1, [r6, #0]
 800ba94:	5162      	str	r2, [r4, r5]
 800ba96:	604b      	str	r3, [r1, #4]
 800ba98:	4638      	mov	r0, r7
 800ba9a:	f104 060b 	add.w	r6, r4, #11
 800ba9e:	f000 f877 	bl	800bb90 <__malloc_unlock>
 800baa2:	f026 0607 	bic.w	r6, r6, #7
 800baa6:	1d23      	adds	r3, r4, #4
 800baa8:	1af2      	subs	r2, r6, r3
 800baaa:	d0b6      	beq.n	800ba1a <_malloc_r+0x22>
 800baac:	1b9b      	subs	r3, r3, r6
 800baae:	50a3      	str	r3, [r4, r2]
 800bab0:	e7b3      	b.n	800ba1a <_malloc_r+0x22>
 800bab2:	6862      	ldr	r2, [r4, #4]
 800bab4:	42a3      	cmp	r3, r4
 800bab6:	bf0c      	ite	eq
 800bab8:	6032      	streq	r2, [r6, #0]
 800baba:	605a      	strne	r2, [r3, #4]
 800babc:	e7ec      	b.n	800ba98 <_malloc_r+0xa0>
 800babe:	4623      	mov	r3, r4
 800bac0:	6864      	ldr	r4, [r4, #4]
 800bac2:	e7b2      	b.n	800ba2a <_malloc_r+0x32>
 800bac4:	4634      	mov	r4, r6
 800bac6:	6876      	ldr	r6, [r6, #4]
 800bac8:	e7b9      	b.n	800ba3e <_malloc_r+0x46>
 800baca:	230c      	movs	r3, #12
 800bacc:	603b      	str	r3, [r7, #0]
 800bace:	4638      	mov	r0, r7
 800bad0:	f000 f85e 	bl	800bb90 <__malloc_unlock>
 800bad4:	e7a1      	b.n	800ba1a <_malloc_r+0x22>
 800bad6:	6025      	str	r5, [r4, #0]
 800bad8:	e7de      	b.n	800ba98 <_malloc_r+0xa0>
 800bada:	bf00      	nop
 800badc:	20000d90 	.word	0x20000d90

0800bae0 <_sbrk_r>:
 800bae0:	b538      	push	{r3, r4, r5, lr}
 800bae2:	4d06      	ldr	r5, [pc, #24]	; (800bafc <_sbrk_r+0x1c>)
 800bae4:	2300      	movs	r3, #0
 800bae6:	4604      	mov	r4, r0
 800bae8:	4608      	mov	r0, r1
 800baea:	602b      	str	r3, [r5, #0]
 800baec:	f7f7 fdea 	bl	80036c4 <_sbrk>
 800baf0:	1c43      	adds	r3, r0, #1
 800baf2:	d102      	bne.n	800bafa <_sbrk_r+0x1a>
 800baf4:	682b      	ldr	r3, [r5, #0]
 800baf6:	b103      	cbz	r3, 800bafa <_sbrk_r+0x1a>
 800baf8:	6023      	str	r3, [r4, #0]
 800bafa:	bd38      	pop	{r3, r4, r5, pc}
 800bafc:	20000d98 	.word	0x20000d98

0800bb00 <__assert_func>:
 800bb00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb02:	4614      	mov	r4, r2
 800bb04:	461a      	mov	r2, r3
 800bb06:	4b09      	ldr	r3, [pc, #36]	; (800bb2c <__assert_func+0x2c>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4605      	mov	r5, r0
 800bb0c:	68d8      	ldr	r0, [r3, #12]
 800bb0e:	b14c      	cbz	r4, 800bb24 <__assert_func+0x24>
 800bb10:	4b07      	ldr	r3, [pc, #28]	; (800bb30 <__assert_func+0x30>)
 800bb12:	9100      	str	r1, [sp, #0]
 800bb14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb18:	4906      	ldr	r1, [pc, #24]	; (800bb34 <__assert_func+0x34>)
 800bb1a:	462b      	mov	r3, r5
 800bb1c:	f000 f80e 	bl	800bb3c <fiprintf>
 800bb20:	f000 fa64 	bl	800bfec <abort>
 800bb24:	4b04      	ldr	r3, [pc, #16]	; (800bb38 <__assert_func+0x38>)
 800bb26:	461c      	mov	r4, r3
 800bb28:	e7f3      	b.n	800bb12 <__assert_func+0x12>
 800bb2a:	bf00      	nop
 800bb2c:	20000010 	.word	0x20000010
 800bb30:	0800d124 	.word	0x0800d124
 800bb34:	0800d131 	.word	0x0800d131
 800bb38:	0800d15f 	.word	0x0800d15f

0800bb3c <fiprintf>:
 800bb3c:	b40e      	push	{r1, r2, r3}
 800bb3e:	b503      	push	{r0, r1, lr}
 800bb40:	4601      	mov	r1, r0
 800bb42:	ab03      	add	r3, sp, #12
 800bb44:	4805      	ldr	r0, [pc, #20]	; (800bb5c <fiprintf+0x20>)
 800bb46:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb4a:	6800      	ldr	r0, [r0, #0]
 800bb4c:	9301      	str	r3, [sp, #4]
 800bb4e:	f000 f84f 	bl	800bbf0 <_vfiprintf_r>
 800bb52:	b002      	add	sp, #8
 800bb54:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb58:	b003      	add	sp, #12
 800bb5a:	4770      	bx	lr
 800bb5c:	20000010 	.word	0x20000010

0800bb60 <__ascii_mbtowc>:
 800bb60:	b082      	sub	sp, #8
 800bb62:	b901      	cbnz	r1, 800bb66 <__ascii_mbtowc+0x6>
 800bb64:	a901      	add	r1, sp, #4
 800bb66:	b142      	cbz	r2, 800bb7a <__ascii_mbtowc+0x1a>
 800bb68:	b14b      	cbz	r3, 800bb7e <__ascii_mbtowc+0x1e>
 800bb6a:	7813      	ldrb	r3, [r2, #0]
 800bb6c:	600b      	str	r3, [r1, #0]
 800bb6e:	7812      	ldrb	r2, [r2, #0]
 800bb70:	1e10      	subs	r0, r2, #0
 800bb72:	bf18      	it	ne
 800bb74:	2001      	movne	r0, #1
 800bb76:	b002      	add	sp, #8
 800bb78:	4770      	bx	lr
 800bb7a:	4610      	mov	r0, r2
 800bb7c:	e7fb      	b.n	800bb76 <__ascii_mbtowc+0x16>
 800bb7e:	f06f 0001 	mvn.w	r0, #1
 800bb82:	e7f8      	b.n	800bb76 <__ascii_mbtowc+0x16>

0800bb84 <__malloc_lock>:
 800bb84:	4801      	ldr	r0, [pc, #4]	; (800bb8c <__malloc_lock+0x8>)
 800bb86:	f000 bbf1 	b.w	800c36c <__retarget_lock_acquire_recursive>
 800bb8a:	bf00      	nop
 800bb8c:	20000d9c 	.word	0x20000d9c

0800bb90 <__malloc_unlock>:
 800bb90:	4801      	ldr	r0, [pc, #4]	; (800bb98 <__malloc_unlock+0x8>)
 800bb92:	f000 bbec 	b.w	800c36e <__retarget_lock_release_recursive>
 800bb96:	bf00      	nop
 800bb98:	20000d9c 	.word	0x20000d9c

0800bb9c <__sfputc_r>:
 800bb9c:	6893      	ldr	r3, [r2, #8]
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	b410      	push	{r4}
 800bba4:	6093      	str	r3, [r2, #8]
 800bba6:	da08      	bge.n	800bbba <__sfputc_r+0x1e>
 800bba8:	6994      	ldr	r4, [r2, #24]
 800bbaa:	42a3      	cmp	r3, r4
 800bbac:	db01      	blt.n	800bbb2 <__sfputc_r+0x16>
 800bbae:	290a      	cmp	r1, #10
 800bbb0:	d103      	bne.n	800bbba <__sfputc_r+0x1e>
 800bbb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbb6:	f000 b94b 	b.w	800be50 <__swbuf_r>
 800bbba:	6813      	ldr	r3, [r2, #0]
 800bbbc:	1c58      	adds	r0, r3, #1
 800bbbe:	6010      	str	r0, [r2, #0]
 800bbc0:	7019      	strb	r1, [r3, #0]
 800bbc2:	4608      	mov	r0, r1
 800bbc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbc8:	4770      	bx	lr

0800bbca <__sfputs_r>:
 800bbca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbcc:	4606      	mov	r6, r0
 800bbce:	460f      	mov	r7, r1
 800bbd0:	4614      	mov	r4, r2
 800bbd2:	18d5      	adds	r5, r2, r3
 800bbd4:	42ac      	cmp	r4, r5
 800bbd6:	d101      	bne.n	800bbdc <__sfputs_r+0x12>
 800bbd8:	2000      	movs	r0, #0
 800bbda:	e007      	b.n	800bbec <__sfputs_r+0x22>
 800bbdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe0:	463a      	mov	r2, r7
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	f7ff ffda 	bl	800bb9c <__sfputc_r>
 800bbe8:	1c43      	adds	r3, r0, #1
 800bbea:	d1f3      	bne.n	800bbd4 <__sfputs_r+0xa>
 800bbec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bbf0 <_vfiprintf_r>:
 800bbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	460d      	mov	r5, r1
 800bbf6:	b09d      	sub	sp, #116	; 0x74
 800bbf8:	4614      	mov	r4, r2
 800bbfa:	4698      	mov	r8, r3
 800bbfc:	4606      	mov	r6, r0
 800bbfe:	b118      	cbz	r0, 800bc08 <_vfiprintf_r+0x18>
 800bc00:	6983      	ldr	r3, [r0, #24]
 800bc02:	b90b      	cbnz	r3, 800bc08 <_vfiprintf_r+0x18>
 800bc04:	f000 fb14 	bl	800c230 <__sinit>
 800bc08:	4b89      	ldr	r3, [pc, #548]	; (800be30 <_vfiprintf_r+0x240>)
 800bc0a:	429d      	cmp	r5, r3
 800bc0c:	d11b      	bne.n	800bc46 <_vfiprintf_r+0x56>
 800bc0e:	6875      	ldr	r5, [r6, #4]
 800bc10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc12:	07d9      	lsls	r1, r3, #31
 800bc14:	d405      	bmi.n	800bc22 <_vfiprintf_r+0x32>
 800bc16:	89ab      	ldrh	r3, [r5, #12]
 800bc18:	059a      	lsls	r2, r3, #22
 800bc1a:	d402      	bmi.n	800bc22 <_vfiprintf_r+0x32>
 800bc1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc1e:	f000 fba5 	bl	800c36c <__retarget_lock_acquire_recursive>
 800bc22:	89ab      	ldrh	r3, [r5, #12]
 800bc24:	071b      	lsls	r3, r3, #28
 800bc26:	d501      	bpl.n	800bc2c <_vfiprintf_r+0x3c>
 800bc28:	692b      	ldr	r3, [r5, #16]
 800bc2a:	b9eb      	cbnz	r3, 800bc68 <_vfiprintf_r+0x78>
 800bc2c:	4629      	mov	r1, r5
 800bc2e:	4630      	mov	r0, r6
 800bc30:	f000 f96e 	bl	800bf10 <__swsetup_r>
 800bc34:	b1c0      	cbz	r0, 800bc68 <_vfiprintf_r+0x78>
 800bc36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc38:	07dc      	lsls	r4, r3, #31
 800bc3a:	d50e      	bpl.n	800bc5a <_vfiprintf_r+0x6a>
 800bc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc40:	b01d      	add	sp, #116	; 0x74
 800bc42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc46:	4b7b      	ldr	r3, [pc, #492]	; (800be34 <_vfiprintf_r+0x244>)
 800bc48:	429d      	cmp	r5, r3
 800bc4a:	d101      	bne.n	800bc50 <_vfiprintf_r+0x60>
 800bc4c:	68b5      	ldr	r5, [r6, #8]
 800bc4e:	e7df      	b.n	800bc10 <_vfiprintf_r+0x20>
 800bc50:	4b79      	ldr	r3, [pc, #484]	; (800be38 <_vfiprintf_r+0x248>)
 800bc52:	429d      	cmp	r5, r3
 800bc54:	bf08      	it	eq
 800bc56:	68f5      	ldreq	r5, [r6, #12]
 800bc58:	e7da      	b.n	800bc10 <_vfiprintf_r+0x20>
 800bc5a:	89ab      	ldrh	r3, [r5, #12]
 800bc5c:	0598      	lsls	r0, r3, #22
 800bc5e:	d4ed      	bmi.n	800bc3c <_vfiprintf_r+0x4c>
 800bc60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc62:	f000 fb84 	bl	800c36e <__retarget_lock_release_recursive>
 800bc66:	e7e9      	b.n	800bc3c <_vfiprintf_r+0x4c>
 800bc68:	2300      	movs	r3, #0
 800bc6a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc6c:	2320      	movs	r3, #32
 800bc6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc72:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc76:	2330      	movs	r3, #48	; 0x30
 800bc78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be3c <_vfiprintf_r+0x24c>
 800bc7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc80:	f04f 0901 	mov.w	r9, #1
 800bc84:	4623      	mov	r3, r4
 800bc86:	469a      	mov	sl, r3
 800bc88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc8c:	b10a      	cbz	r2, 800bc92 <_vfiprintf_r+0xa2>
 800bc8e:	2a25      	cmp	r2, #37	; 0x25
 800bc90:	d1f9      	bne.n	800bc86 <_vfiprintf_r+0x96>
 800bc92:	ebba 0b04 	subs.w	fp, sl, r4
 800bc96:	d00b      	beq.n	800bcb0 <_vfiprintf_r+0xc0>
 800bc98:	465b      	mov	r3, fp
 800bc9a:	4622      	mov	r2, r4
 800bc9c:	4629      	mov	r1, r5
 800bc9e:	4630      	mov	r0, r6
 800bca0:	f7ff ff93 	bl	800bbca <__sfputs_r>
 800bca4:	3001      	adds	r0, #1
 800bca6:	f000 80aa 	beq.w	800bdfe <_vfiprintf_r+0x20e>
 800bcaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcac:	445a      	add	r2, fp
 800bcae:	9209      	str	r2, [sp, #36]	; 0x24
 800bcb0:	f89a 3000 	ldrb.w	r3, [sl]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f000 80a2 	beq.w	800bdfe <_vfiprintf_r+0x20e>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcc4:	f10a 0a01 	add.w	sl, sl, #1
 800bcc8:	9304      	str	r3, [sp, #16]
 800bcca:	9307      	str	r3, [sp, #28]
 800bccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcd0:	931a      	str	r3, [sp, #104]	; 0x68
 800bcd2:	4654      	mov	r4, sl
 800bcd4:	2205      	movs	r2, #5
 800bcd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcda:	4858      	ldr	r0, [pc, #352]	; (800be3c <_vfiprintf_r+0x24c>)
 800bcdc:	f7f4 fa80 	bl	80001e0 <memchr>
 800bce0:	9a04      	ldr	r2, [sp, #16]
 800bce2:	b9d8      	cbnz	r0, 800bd1c <_vfiprintf_r+0x12c>
 800bce4:	06d1      	lsls	r1, r2, #27
 800bce6:	bf44      	itt	mi
 800bce8:	2320      	movmi	r3, #32
 800bcea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcee:	0713      	lsls	r3, r2, #28
 800bcf0:	bf44      	itt	mi
 800bcf2:	232b      	movmi	r3, #43	; 0x2b
 800bcf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcf8:	f89a 3000 	ldrb.w	r3, [sl]
 800bcfc:	2b2a      	cmp	r3, #42	; 0x2a
 800bcfe:	d015      	beq.n	800bd2c <_vfiprintf_r+0x13c>
 800bd00:	9a07      	ldr	r2, [sp, #28]
 800bd02:	4654      	mov	r4, sl
 800bd04:	2000      	movs	r0, #0
 800bd06:	f04f 0c0a 	mov.w	ip, #10
 800bd0a:	4621      	mov	r1, r4
 800bd0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd10:	3b30      	subs	r3, #48	; 0x30
 800bd12:	2b09      	cmp	r3, #9
 800bd14:	d94e      	bls.n	800bdb4 <_vfiprintf_r+0x1c4>
 800bd16:	b1b0      	cbz	r0, 800bd46 <_vfiprintf_r+0x156>
 800bd18:	9207      	str	r2, [sp, #28]
 800bd1a:	e014      	b.n	800bd46 <_vfiprintf_r+0x156>
 800bd1c:	eba0 0308 	sub.w	r3, r0, r8
 800bd20:	fa09 f303 	lsl.w	r3, r9, r3
 800bd24:	4313      	orrs	r3, r2
 800bd26:	9304      	str	r3, [sp, #16]
 800bd28:	46a2      	mov	sl, r4
 800bd2a:	e7d2      	b.n	800bcd2 <_vfiprintf_r+0xe2>
 800bd2c:	9b03      	ldr	r3, [sp, #12]
 800bd2e:	1d19      	adds	r1, r3, #4
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	9103      	str	r1, [sp, #12]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	bfbb      	ittet	lt
 800bd38:	425b      	neglt	r3, r3
 800bd3a:	f042 0202 	orrlt.w	r2, r2, #2
 800bd3e:	9307      	strge	r3, [sp, #28]
 800bd40:	9307      	strlt	r3, [sp, #28]
 800bd42:	bfb8      	it	lt
 800bd44:	9204      	strlt	r2, [sp, #16]
 800bd46:	7823      	ldrb	r3, [r4, #0]
 800bd48:	2b2e      	cmp	r3, #46	; 0x2e
 800bd4a:	d10c      	bne.n	800bd66 <_vfiprintf_r+0x176>
 800bd4c:	7863      	ldrb	r3, [r4, #1]
 800bd4e:	2b2a      	cmp	r3, #42	; 0x2a
 800bd50:	d135      	bne.n	800bdbe <_vfiprintf_r+0x1ce>
 800bd52:	9b03      	ldr	r3, [sp, #12]
 800bd54:	1d1a      	adds	r2, r3, #4
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	9203      	str	r2, [sp, #12]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	bfb8      	it	lt
 800bd5e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd62:	3402      	adds	r4, #2
 800bd64:	9305      	str	r3, [sp, #20]
 800bd66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800be4c <_vfiprintf_r+0x25c>
 800bd6a:	7821      	ldrb	r1, [r4, #0]
 800bd6c:	2203      	movs	r2, #3
 800bd6e:	4650      	mov	r0, sl
 800bd70:	f7f4 fa36 	bl	80001e0 <memchr>
 800bd74:	b140      	cbz	r0, 800bd88 <_vfiprintf_r+0x198>
 800bd76:	2340      	movs	r3, #64	; 0x40
 800bd78:	eba0 000a 	sub.w	r0, r0, sl
 800bd7c:	fa03 f000 	lsl.w	r0, r3, r0
 800bd80:	9b04      	ldr	r3, [sp, #16]
 800bd82:	4303      	orrs	r3, r0
 800bd84:	3401      	adds	r4, #1
 800bd86:	9304      	str	r3, [sp, #16]
 800bd88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd8c:	482c      	ldr	r0, [pc, #176]	; (800be40 <_vfiprintf_r+0x250>)
 800bd8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd92:	2206      	movs	r2, #6
 800bd94:	f7f4 fa24 	bl	80001e0 <memchr>
 800bd98:	2800      	cmp	r0, #0
 800bd9a:	d03f      	beq.n	800be1c <_vfiprintf_r+0x22c>
 800bd9c:	4b29      	ldr	r3, [pc, #164]	; (800be44 <_vfiprintf_r+0x254>)
 800bd9e:	bb1b      	cbnz	r3, 800bde8 <_vfiprintf_r+0x1f8>
 800bda0:	9b03      	ldr	r3, [sp, #12]
 800bda2:	3307      	adds	r3, #7
 800bda4:	f023 0307 	bic.w	r3, r3, #7
 800bda8:	3308      	adds	r3, #8
 800bdaa:	9303      	str	r3, [sp, #12]
 800bdac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdae:	443b      	add	r3, r7
 800bdb0:	9309      	str	r3, [sp, #36]	; 0x24
 800bdb2:	e767      	b.n	800bc84 <_vfiprintf_r+0x94>
 800bdb4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdb8:	460c      	mov	r4, r1
 800bdba:	2001      	movs	r0, #1
 800bdbc:	e7a5      	b.n	800bd0a <_vfiprintf_r+0x11a>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	3401      	adds	r4, #1
 800bdc2:	9305      	str	r3, [sp, #20]
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	f04f 0c0a 	mov.w	ip, #10
 800bdca:	4620      	mov	r0, r4
 800bdcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdd0:	3a30      	subs	r2, #48	; 0x30
 800bdd2:	2a09      	cmp	r2, #9
 800bdd4:	d903      	bls.n	800bdde <_vfiprintf_r+0x1ee>
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d0c5      	beq.n	800bd66 <_vfiprintf_r+0x176>
 800bdda:	9105      	str	r1, [sp, #20]
 800bddc:	e7c3      	b.n	800bd66 <_vfiprintf_r+0x176>
 800bdde:	fb0c 2101 	mla	r1, ip, r1, r2
 800bde2:	4604      	mov	r4, r0
 800bde4:	2301      	movs	r3, #1
 800bde6:	e7f0      	b.n	800bdca <_vfiprintf_r+0x1da>
 800bde8:	ab03      	add	r3, sp, #12
 800bdea:	9300      	str	r3, [sp, #0]
 800bdec:	462a      	mov	r2, r5
 800bdee:	4b16      	ldr	r3, [pc, #88]	; (800be48 <_vfiprintf_r+0x258>)
 800bdf0:	a904      	add	r1, sp, #16
 800bdf2:	4630      	mov	r0, r6
 800bdf4:	f7fd ffa8 	bl	8009d48 <_printf_float>
 800bdf8:	4607      	mov	r7, r0
 800bdfa:	1c78      	adds	r0, r7, #1
 800bdfc:	d1d6      	bne.n	800bdac <_vfiprintf_r+0x1bc>
 800bdfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be00:	07d9      	lsls	r1, r3, #31
 800be02:	d405      	bmi.n	800be10 <_vfiprintf_r+0x220>
 800be04:	89ab      	ldrh	r3, [r5, #12]
 800be06:	059a      	lsls	r2, r3, #22
 800be08:	d402      	bmi.n	800be10 <_vfiprintf_r+0x220>
 800be0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be0c:	f000 faaf 	bl	800c36e <__retarget_lock_release_recursive>
 800be10:	89ab      	ldrh	r3, [r5, #12]
 800be12:	065b      	lsls	r3, r3, #25
 800be14:	f53f af12 	bmi.w	800bc3c <_vfiprintf_r+0x4c>
 800be18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be1a:	e711      	b.n	800bc40 <_vfiprintf_r+0x50>
 800be1c:	ab03      	add	r3, sp, #12
 800be1e:	9300      	str	r3, [sp, #0]
 800be20:	462a      	mov	r2, r5
 800be22:	4b09      	ldr	r3, [pc, #36]	; (800be48 <_vfiprintf_r+0x258>)
 800be24:	a904      	add	r1, sp, #16
 800be26:	4630      	mov	r0, r6
 800be28:	f7fe fa32 	bl	800a290 <_printf_i>
 800be2c:	e7e4      	b.n	800bdf8 <_vfiprintf_r+0x208>
 800be2e:	bf00      	nop
 800be30:	0800d29c 	.word	0x0800d29c
 800be34:	0800d2bc 	.word	0x0800d2bc
 800be38:	0800d27c 	.word	0x0800d27c
 800be3c:	0800d16a 	.word	0x0800d16a
 800be40:	0800d174 	.word	0x0800d174
 800be44:	08009d49 	.word	0x08009d49
 800be48:	0800bbcb 	.word	0x0800bbcb
 800be4c:	0800d170 	.word	0x0800d170

0800be50 <__swbuf_r>:
 800be50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be52:	460e      	mov	r6, r1
 800be54:	4614      	mov	r4, r2
 800be56:	4605      	mov	r5, r0
 800be58:	b118      	cbz	r0, 800be62 <__swbuf_r+0x12>
 800be5a:	6983      	ldr	r3, [r0, #24]
 800be5c:	b90b      	cbnz	r3, 800be62 <__swbuf_r+0x12>
 800be5e:	f000 f9e7 	bl	800c230 <__sinit>
 800be62:	4b21      	ldr	r3, [pc, #132]	; (800bee8 <__swbuf_r+0x98>)
 800be64:	429c      	cmp	r4, r3
 800be66:	d12b      	bne.n	800bec0 <__swbuf_r+0x70>
 800be68:	686c      	ldr	r4, [r5, #4]
 800be6a:	69a3      	ldr	r3, [r4, #24]
 800be6c:	60a3      	str	r3, [r4, #8]
 800be6e:	89a3      	ldrh	r3, [r4, #12]
 800be70:	071a      	lsls	r2, r3, #28
 800be72:	d52f      	bpl.n	800bed4 <__swbuf_r+0x84>
 800be74:	6923      	ldr	r3, [r4, #16]
 800be76:	b36b      	cbz	r3, 800bed4 <__swbuf_r+0x84>
 800be78:	6923      	ldr	r3, [r4, #16]
 800be7a:	6820      	ldr	r0, [r4, #0]
 800be7c:	1ac0      	subs	r0, r0, r3
 800be7e:	6963      	ldr	r3, [r4, #20]
 800be80:	b2f6      	uxtb	r6, r6
 800be82:	4283      	cmp	r3, r0
 800be84:	4637      	mov	r7, r6
 800be86:	dc04      	bgt.n	800be92 <__swbuf_r+0x42>
 800be88:	4621      	mov	r1, r4
 800be8a:	4628      	mov	r0, r5
 800be8c:	f000 f93c 	bl	800c108 <_fflush_r>
 800be90:	bb30      	cbnz	r0, 800bee0 <__swbuf_r+0x90>
 800be92:	68a3      	ldr	r3, [r4, #8]
 800be94:	3b01      	subs	r3, #1
 800be96:	60a3      	str	r3, [r4, #8]
 800be98:	6823      	ldr	r3, [r4, #0]
 800be9a:	1c5a      	adds	r2, r3, #1
 800be9c:	6022      	str	r2, [r4, #0]
 800be9e:	701e      	strb	r6, [r3, #0]
 800bea0:	6963      	ldr	r3, [r4, #20]
 800bea2:	3001      	adds	r0, #1
 800bea4:	4283      	cmp	r3, r0
 800bea6:	d004      	beq.n	800beb2 <__swbuf_r+0x62>
 800bea8:	89a3      	ldrh	r3, [r4, #12]
 800beaa:	07db      	lsls	r3, r3, #31
 800beac:	d506      	bpl.n	800bebc <__swbuf_r+0x6c>
 800beae:	2e0a      	cmp	r6, #10
 800beb0:	d104      	bne.n	800bebc <__swbuf_r+0x6c>
 800beb2:	4621      	mov	r1, r4
 800beb4:	4628      	mov	r0, r5
 800beb6:	f000 f927 	bl	800c108 <_fflush_r>
 800beba:	b988      	cbnz	r0, 800bee0 <__swbuf_r+0x90>
 800bebc:	4638      	mov	r0, r7
 800bebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bec0:	4b0a      	ldr	r3, [pc, #40]	; (800beec <__swbuf_r+0x9c>)
 800bec2:	429c      	cmp	r4, r3
 800bec4:	d101      	bne.n	800beca <__swbuf_r+0x7a>
 800bec6:	68ac      	ldr	r4, [r5, #8]
 800bec8:	e7cf      	b.n	800be6a <__swbuf_r+0x1a>
 800beca:	4b09      	ldr	r3, [pc, #36]	; (800bef0 <__swbuf_r+0xa0>)
 800becc:	429c      	cmp	r4, r3
 800bece:	bf08      	it	eq
 800bed0:	68ec      	ldreq	r4, [r5, #12]
 800bed2:	e7ca      	b.n	800be6a <__swbuf_r+0x1a>
 800bed4:	4621      	mov	r1, r4
 800bed6:	4628      	mov	r0, r5
 800bed8:	f000 f81a 	bl	800bf10 <__swsetup_r>
 800bedc:	2800      	cmp	r0, #0
 800bede:	d0cb      	beq.n	800be78 <__swbuf_r+0x28>
 800bee0:	f04f 37ff 	mov.w	r7, #4294967295
 800bee4:	e7ea      	b.n	800bebc <__swbuf_r+0x6c>
 800bee6:	bf00      	nop
 800bee8:	0800d29c 	.word	0x0800d29c
 800beec:	0800d2bc 	.word	0x0800d2bc
 800bef0:	0800d27c 	.word	0x0800d27c

0800bef4 <__ascii_wctomb>:
 800bef4:	b149      	cbz	r1, 800bf0a <__ascii_wctomb+0x16>
 800bef6:	2aff      	cmp	r2, #255	; 0xff
 800bef8:	bf85      	ittet	hi
 800befa:	238a      	movhi	r3, #138	; 0x8a
 800befc:	6003      	strhi	r3, [r0, #0]
 800befe:	700a      	strbls	r2, [r1, #0]
 800bf00:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf04:	bf98      	it	ls
 800bf06:	2001      	movls	r0, #1
 800bf08:	4770      	bx	lr
 800bf0a:	4608      	mov	r0, r1
 800bf0c:	4770      	bx	lr
	...

0800bf10 <__swsetup_r>:
 800bf10:	4b32      	ldr	r3, [pc, #200]	; (800bfdc <__swsetup_r+0xcc>)
 800bf12:	b570      	push	{r4, r5, r6, lr}
 800bf14:	681d      	ldr	r5, [r3, #0]
 800bf16:	4606      	mov	r6, r0
 800bf18:	460c      	mov	r4, r1
 800bf1a:	b125      	cbz	r5, 800bf26 <__swsetup_r+0x16>
 800bf1c:	69ab      	ldr	r3, [r5, #24]
 800bf1e:	b913      	cbnz	r3, 800bf26 <__swsetup_r+0x16>
 800bf20:	4628      	mov	r0, r5
 800bf22:	f000 f985 	bl	800c230 <__sinit>
 800bf26:	4b2e      	ldr	r3, [pc, #184]	; (800bfe0 <__swsetup_r+0xd0>)
 800bf28:	429c      	cmp	r4, r3
 800bf2a:	d10f      	bne.n	800bf4c <__swsetup_r+0x3c>
 800bf2c:	686c      	ldr	r4, [r5, #4]
 800bf2e:	89a3      	ldrh	r3, [r4, #12]
 800bf30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf34:	0719      	lsls	r1, r3, #28
 800bf36:	d42c      	bmi.n	800bf92 <__swsetup_r+0x82>
 800bf38:	06dd      	lsls	r5, r3, #27
 800bf3a:	d411      	bmi.n	800bf60 <__swsetup_r+0x50>
 800bf3c:	2309      	movs	r3, #9
 800bf3e:	6033      	str	r3, [r6, #0]
 800bf40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf44:	81a3      	strh	r3, [r4, #12]
 800bf46:	f04f 30ff 	mov.w	r0, #4294967295
 800bf4a:	e03e      	b.n	800bfca <__swsetup_r+0xba>
 800bf4c:	4b25      	ldr	r3, [pc, #148]	; (800bfe4 <__swsetup_r+0xd4>)
 800bf4e:	429c      	cmp	r4, r3
 800bf50:	d101      	bne.n	800bf56 <__swsetup_r+0x46>
 800bf52:	68ac      	ldr	r4, [r5, #8]
 800bf54:	e7eb      	b.n	800bf2e <__swsetup_r+0x1e>
 800bf56:	4b24      	ldr	r3, [pc, #144]	; (800bfe8 <__swsetup_r+0xd8>)
 800bf58:	429c      	cmp	r4, r3
 800bf5a:	bf08      	it	eq
 800bf5c:	68ec      	ldreq	r4, [r5, #12]
 800bf5e:	e7e6      	b.n	800bf2e <__swsetup_r+0x1e>
 800bf60:	0758      	lsls	r0, r3, #29
 800bf62:	d512      	bpl.n	800bf8a <__swsetup_r+0x7a>
 800bf64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf66:	b141      	cbz	r1, 800bf7a <__swsetup_r+0x6a>
 800bf68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf6c:	4299      	cmp	r1, r3
 800bf6e:	d002      	beq.n	800bf76 <__swsetup_r+0x66>
 800bf70:	4630      	mov	r0, r6
 800bf72:	f7ff fcd5 	bl	800b920 <_free_r>
 800bf76:	2300      	movs	r3, #0
 800bf78:	6363      	str	r3, [r4, #52]	; 0x34
 800bf7a:	89a3      	ldrh	r3, [r4, #12]
 800bf7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf80:	81a3      	strh	r3, [r4, #12]
 800bf82:	2300      	movs	r3, #0
 800bf84:	6063      	str	r3, [r4, #4]
 800bf86:	6923      	ldr	r3, [r4, #16]
 800bf88:	6023      	str	r3, [r4, #0]
 800bf8a:	89a3      	ldrh	r3, [r4, #12]
 800bf8c:	f043 0308 	orr.w	r3, r3, #8
 800bf90:	81a3      	strh	r3, [r4, #12]
 800bf92:	6923      	ldr	r3, [r4, #16]
 800bf94:	b94b      	cbnz	r3, 800bfaa <__swsetup_r+0x9a>
 800bf96:	89a3      	ldrh	r3, [r4, #12]
 800bf98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bf9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfa0:	d003      	beq.n	800bfaa <__swsetup_r+0x9a>
 800bfa2:	4621      	mov	r1, r4
 800bfa4:	4630      	mov	r0, r6
 800bfa6:	f000 fa09 	bl	800c3bc <__smakebuf_r>
 800bfaa:	89a0      	ldrh	r0, [r4, #12]
 800bfac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfb0:	f010 0301 	ands.w	r3, r0, #1
 800bfb4:	d00a      	beq.n	800bfcc <__swsetup_r+0xbc>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	60a3      	str	r3, [r4, #8]
 800bfba:	6963      	ldr	r3, [r4, #20]
 800bfbc:	425b      	negs	r3, r3
 800bfbe:	61a3      	str	r3, [r4, #24]
 800bfc0:	6923      	ldr	r3, [r4, #16]
 800bfc2:	b943      	cbnz	r3, 800bfd6 <__swsetup_r+0xc6>
 800bfc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bfc8:	d1ba      	bne.n	800bf40 <__swsetup_r+0x30>
 800bfca:	bd70      	pop	{r4, r5, r6, pc}
 800bfcc:	0781      	lsls	r1, r0, #30
 800bfce:	bf58      	it	pl
 800bfd0:	6963      	ldrpl	r3, [r4, #20]
 800bfd2:	60a3      	str	r3, [r4, #8]
 800bfd4:	e7f4      	b.n	800bfc0 <__swsetup_r+0xb0>
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	e7f7      	b.n	800bfca <__swsetup_r+0xba>
 800bfda:	bf00      	nop
 800bfdc:	20000010 	.word	0x20000010
 800bfe0:	0800d29c 	.word	0x0800d29c
 800bfe4:	0800d2bc 	.word	0x0800d2bc
 800bfe8:	0800d27c 	.word	0x0800d27c

0800bfec <abort>:
 800bfec:	b508      	push	{r3, lr}
 800bfee:	2006      	movs	r0, #6
 800bff0:	f000 fa4c 	bl	800c48c <raise>
 800bff4:	2001      	movs	r0, #1
 800bff6:	f7f7 faed 	bl	80035d4 <_exit>
	...

0800bffc <__sflush_r>:
 800bffc:	898a      	ldrh	r2, [r1, #12]
 800bffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c002:	4605      	mov	r5, r0
 800c004:	0710      	lsls	r0, r2, #28
 800c006:	460c      	mov	r4, r1
 800c008:	d458      	bmi.n	800c0bc <__sflush_r+0xc0>
 800c00a:	684b      	ldr	r3, [r1, #4]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	dc05      	bgt.n	800c01c <__sflush_r+0x20>
 800c010:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c012:	2b00      	cmp	r3, #0
 800c014:	dc02      	bgt.n	800c01c <__sflush_r+0x20>
 800c016:	2000      	movs	r0, #0
 800c018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c01c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c01e:	2e00      	cmp	r6, #0
 800c020:	d0f9      	beq.n	800c016 <__sflush_r+0x1a>
 800c022:	2300      	movs	r3, #0
 800c024:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c028:	682f      	ldr	r7, [r5, #0]
 800c02a:	602b      	str	r3, [r5, #0]
 800c02c:	d032      	beq.n	800c094 <__sflush_r+0x98>
 800c02e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c030:	89a3      	ldrh	r3, [r4, #12]
 800c032:	075a      	lsls	r2, r3, #29
 800c034:	d505      	bpl.n	800c042 <__sflush_r+0x46>
 800c036:	6863      	ldr	r3, [r4, #4]
 800c038:	1ac0      	subs	r0, r0, r3
 800c03a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c03c:	b10b      	cbz	r3, 800c042 <__sflush_r+0x46>
 800c03e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c040:	1ac0      	subs	r0, r0, r3
 800c042:	2300      	movs	r3, #0
 800c044:	4602      	mov	r2, r0
 800c046:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c048:	6a21      	ldr	r1, [r4, #32]
 800c04a:	4628      	mov	r0, r5
 800c04c:	47b0      	blx	r6
 800c04e:	1c43      	adds	r3, r0, #1
 800c050:	89a3      	ldrh	r3, [r4, #12]
 800c052:	d106      	bne.n	800c062 <__sflush_r+0x66>
 800c054:	6829      	ldr	r1, [r5, #0]
 800c056:	291d      	cmp	r1, #29
 800c058:	d82c      	bhi.n	800c0b4 <__sflush_r+0xb8>
 800c05a:	4a2a      	ldr	r2, [pc, #168]	; (800c104 <__sflush_r+0x108>)
 800c05c:	40ca      	lsrs	r2, r1
 800c05e:	07d6      	lsls	r6, r2, #31
 800c060:	d528      	bpl.n	800c0b4 <__sflush_r+0xb8>
 800c062:	2200      	movs	r2, #0
 800c064:	6062      	str	r2, [r4, #4]
 800c066:	04d9      	lsls	r1, r3, #19
 800c068:	6922      	ldr	r2, [r4, #16]
 800c06a:	6022      	str	r2, [r4, #0]
 800c06c:	d504      	bpl.n	800c078 <__sflush_r+0x7c>
 800c06e:	1c42      	adds	r2, r0, #1
 800c070:	d101      	bne.n	800c076 <__sflush_r+0x7a>
 800c072:	682b      	ldr	r3, [r5, #0]
 800c074:	b903      	cbnz	r3, 800c078 <__sflush_r+0x7c>
 800c076:	6560      	str	r0, [r4, #84]	; 0x54
 800c078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c07a:	602f      	str	r7, [r5, #0]
 800c07c:	2900      	cmp	r1, #0
 800c07e:	d0ca      	beq.n	800c016 <__sflush_r+0x1a>
 800c080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c084:	4299      	cmp	r1, r3
 800c086:	d002      	beq.n	800c08e <__sflush_r+0x92>
 800c088:	4628      	mov	r0, r5
 800c08a:	f7ff fc49 	bl	800b920 <_free_r>
 800c08e:	2000      	movs	r0, #0
 800c090:	6360      	str	r0, [r4, #52]	; 0x34
 800c092:	e7c1      	b.n	800c018 <__sflush_r+0x1c>
 800c094:	6a21      	ldr	r1, [r4, #32]
 800c096:	2301      	movs	r3, #1
 800c098:	4628      	mov	r0, r5
 800c09a:	47b0      	blx	r6
 800c09c:	1c41      	adds	r1, r0, #1
 800c09e:	d1c7      	bne.n	800c030 <__sflush_r+0x34>
 800c0a0:	682b      	ldr	r3, [r5, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d0c4      	beq.n	800c030 <__sflush_r+0x34>
 800c0a6:	2b1d      	cmp	r3, #29
 800c0a8:	d001      	beq.n	800c0ae <__sflush_r+0xb2>
 800c0aa:	2b16      	cmp	r3, #22
 800c0ac:	d101      	bne.n	800c0b2 <__sflush_r+0xb6>
 800c0ae:	602f      	str	r7, [r5, #0]
 800c0b0:	e7b1      	b.n	800c016 <__sflush_r+0x1a>
 800c0b2:	89a3      	ldrh	r3, [r4, #12]
 800c0b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0b8:	81a3      	strh	r3, [r4, #12]
 800c0ba:	e7ad      	b.n	800c018 <__sflush_r+0x1c>
 800c0bc:	690f      	ldr	r7, [r1, #16]
 800c0be:	2f00      	cmp	r7, #0
 800c0c0:	d0a9      	beq.n	800c016 <__sflush_r+0x1a>
 800c0c2:	0793      	lsls	r3, r2, #30
 800c0c4:	680e      	ldr	r6, [r1, #0]
 800c0c6:	bf08      	it	eq
 800c0c8:	694b      	ldreq	r3, [r1, #20]
 800c0ca:	600f      	str	r7, [r1, #0]
 800c0cc:	bf18      	it	ne
 800c0ce:	2300      	movne	r3, #0
 800c0d0:	eba6 0807 	sub.w	r8, r6, r7
 800c0d4:	608b      	str	r3, [r1, #8]
 800c0d6:	f1b8 0f00 	cmp.w	r8, #0
 800c0da:	dd9c      	ble.n	800c016 <__sflush_r+0x1a>
 800c0dc:	6a21      	ldr	r1, [r4, #32]
 800c0de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c0e0:	4643      	mov	r3, r8
 800c0e2:	463a      	mov	r2, r7
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	47b0      	blx	r6
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	dc06      	bgt.n	800c0fa <__sflush_r+0xfe>
 800c0ec:	89a3      	ldrh	r3, [r4, #12]
 800c0ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0f2:	81a3      	strh	r3, [r4, #12]
 800c0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f8:	e78e      	b.n	800c018 <__sflush_r+0x1c>
 800c0fa:	4407      	add	r7, r0
 800c0fc:	eba8 0800 	sub.w	r8, r8, r0
 800c100:	e7e9      	b.n	800c0d6 <__sflush_r+0xda>
 800c102:	bf00      	nop
 800c104:	20400001 	.word	0x20400001

0800c108 <_fflush_r>:
 800c108:	b538      	push	{r3, r4, r5, lr}
 800c10a:	690b      	ldr	r3, [r1, #16]
 800c10c:	4605      	mov	r5, r0
 800c10e:	460c      	mov	r4, r1
 800c110:	b913      	cbnz	r3, 800c118 <_fflush_r+0x10>
 800c112:	2500      	movs	r5, #0
 800c114:	4628      	mov	r0, r5
 800c116:	bd38      	pop	{r3, r4, r5, pc}
 800c118:	b118      	cbz	r0, 800c122 <_fflush_r+0x1a>
 800c11a:	6983      	ldr	r3, [r0, #24]
 800c11c:	b90b      	cbnz	r3, 800c122 <_fflush_r+0x1a>
 800c11e:	f000 f887 	bl	800c230 <__sinit>
 800c122:	4b14      	ldr	r3, [pc, #80]	; (800c174 <_fflush_r+0x6c>)
 800c124:	429c      	cmp	r4, r3
 800c126:	d11b      	bne.n	800c160 <_fflush_r+0x58>
 800c128:	686c      	ldr	r4, [r5, #4]
 800c12a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d0ef      	beq.n	800c112 <_fflush_r+0xa>
 800c132:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c134:	07d0      	lsls	r0, r2, #31
 800c136:	d404      	bmi.n	800c142 <_fflush_r+0x3a>
 800c138:	0599      	lsls	r1, r3, #22
 800c13a:	d402      	bmi.n	800c142 <_fflush_r+0x3a>
 800c13c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c13e:	f000 f915 	bl	800c36c <__retarget_lock_acquire_recursive>
 800c142:	4628      	mov	r0, r5
 800c144:	4621      	mov	r1, r4
 800c146:	f7ff ff59 	bl	800bffc <__sflush_r>
 800c14a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c14c:	07da      	lsls	r2, r3, #31
 800c14e:	4605      	mov	r5, r0
 800c150:	d4e0      	bmi.n	800c114 <_fflush_r+0xc>
 800c152:	89a3      	ldrh	r3, [r4, #12]
 800c154:	059b      	lsls	r3, r3, #22
 800c156:	d4dd      	bmi.n	800c114 <_fflush_r+0xc>
 800c158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c15a:	f000 f908 	bl	800c36e <__retarget_lock_release_recursive>
 800c15e:	e7d9      	b.n	800c114 <_fflush_r+0xc>
 800c160:	4b05      	ldr	r3, [pc, #20]	; (800c178 <_fflush_r+0x70>)
 800c162:	429c      	cmp	r4, r3
 800c164:	d101      	bne.n	800c16a <_fflush_r+0x62>
 800c166:	68ac      	ldr	r4, [r5, #8]
 800c168:	e7df      	b.n	800c12a <_fflush_r+0x22>
 800c16a:	4b04      	ldr	r3, [pc, #16]	; (800c17c <_fflush_r+0x74>)
 800c16c:	429c      	cmp	r4, r3
 800c16e:	bf08      	it	eq
 800c170:	68ec      	ldreq	r4, [r5, #12]
 800c172:	e7da      	b.n	800c12a <_fflush_r+0x22>
 800c174:	0800d29c 	.word	0x0800d29c
 800c178:	0800d2bc 	.word	0x0800d2bc
 800c17c:	0800d27c 	.word	0x0800d27c

0800c180 <std>:
 800c180:	2300      	movs	r3, #0
 800c182:	b510      	push	{r4, lr}
 800c184:	4604      	mov	r4, r0
 800c186:	e9c0 3300 	strd	r3, r3, [r0]
 800c18a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c18e:	6083      	str	r3, [r0, #8]
 800c190:	8181      	strh	r1, [r0, #12]
 800c192:	6643      	str	r3, [r0, #100]	; 0x64
 800c194:	81c2      	strh	r2, [r0, #14]
 800c196:	6183      	str	r3, [r0, #24]
 800c198:	4619      	mov	r1, r3
 800c19a:	2208      	movs	r2, #8
 800c19c:	305c      	adds	r0, #92	; 0x5c
 800c19e:	f7fd fd2b 	bl	8009bf8 <memset>
 800c1a2:	4b05      	ldr	r3, [pc, #20]	; (800c1b8 <std+0x38>)
 800c1a4:	6263      	str	r3, [r4, #36]	; 0x24
 800c1a6:	4b05      	ldr	r3, [pc, #20]	; (800c1bc <std+0x3c>)
 800c1a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c1aa:	4b05      	ldr	r3, [pc, #20]	; (800c1c0 <std+0x40>)
 800c1ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c1ae:	4b05      	ldr	r3, [pc, #20]	; (800c1c4 <std+0x44>)
 800c1b0:	6224      	str	r4, [r4, #32]
 800c1b2:	6323      	str	r3, [r4, #48]	; 0x30
 800c1b4:	bd10      	pop	{r4, pc}
 800c1b6:	bf00      	nop
 800c1b8:	0800c4c5 	.word	0x0800c4c5
 800c1bc:	0800c4e7 	.word	0x0800c4e7
 800c1c0:	0800c51f 	.word	0x0800c51f
 800c1c4:	0800c543 	.word	0x0800c543

0800c1c8 <_cleanup_r>:
 800c1c8:	4901      	ldr	r1, [pc, #4]	; (800c1d0 <_cleanup_r+0x8>)
 800c1ca:	f000 b8af 	b.w	800c32c <_fwalk_reent>
 800c1ce:	bf00      	nop
 800c1d0:	0800c109 	.word	0x0800c109

0800c1d4 <__sfmoreglue>:
 800c1d4:	b570      	push	{r4, r5, r6, lr}
 800c1d6:	2268      	movs	r2, #104	; 0x68
 800c1d8:	1e4d      	subs	r5, r1, #1
 800c1da:	4355      	muls	r5, r2
 800c1dc:	460e      	mov	r6, r1
 800c1de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c1e2:	f7ff fc09 	bl	800b9f8 <_malloc_r>
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	b140      	cbz	r0, 800c1fc <__sfmoreglue+0x28>
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	e9c0 1600 	strd	r1, r6, [r0]
 800c1f0:	300c      	adds	r0, #12
 800c1f2:	60a0      	str	r0, [r4, #8]
 800c1f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c1f8:	f7fd fcfe 	bl	8009bf8 <memset>
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	bd70      	pop	{r4, r5, r6, pc}

0800c200 <__sfp_lock_acquire>:
 800c200:	4801      	ldr	r0, [pc, #4]	; (800c208 <__sfp_lock_acquire+0x8>)
 800c202:	f000 b8b3 	b.w	800c36c <__retarget_lock_acquire_recursive>
 800c206:	bf00      	nop
 800c208:	20000d9d 	.word	0x20000d9d

0800c20c <__sfp_lock_release>:
 800c20c:	4801      	ldr	r0, [pc, #4]	; (800c214 <__sfp_lock_release+0x8>)
 800c20e:	f000 b8ae 	b.w	800c36e <__retarget_lock_release_recursive>
 800c212:	bf00      	nop
 800c214:	20000d9d 	.word	0x20000d9d

0800c218 <__sinit_lock_acquire>:
 800c218:	4801      	ldr	r0, [pc, #4]	; (800c220 <__sinit_lock_acquire+0x8>)
 800c21a:	f000 b8a7 	b.w	800c36c <__retarget_lock_acquire_recursive>
 800c21e:	bf00      	nop
 800c220:	20000d9e 	.word	0x20000d9e

0800c224 <__sinit_lock_release>:
 800c224:	4801      	ldr	r0, [pc, #4]	; (800c22c <__sinit_lock_release+0x8>)
 800c226:	f000 b8a2 	b.w	800c36e <__retarget_lock_release_recursive>
 800c22a:	bf00      	nop
 800c22c:	20000d9e 	.word	0x20000d9e

0800c230 <__sinit>:
 800c230:	b510      	push	{r4, lr}
 800c232:	4604      	mov	r4, r0
 800c234:	f7ff fff0 	bl	800c218 <__sinit_lock_acquire>
 800c238:	69a3      	ldr	r3, [r4, #24]
 800c23a:	b11b      	cbz	r3, 800c244 <__sinit+0x14>
 800c23c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c240:	f7ff bff0 	b.w	800c224 <__sinit_lock_release>
 800c244:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c248:	6523      	str	r3, [r4, #80]	; 0x50
 800c24a:	4b13      	ldr	r3, [pc, #76]	; (800c298 <__sinit+0x68>)
 800c24c:	4a13      	ldr	r2, [pc, #76]	; (800c29c <__sinit+0x6c>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	62a2      	str	r2, [r4, #40]	; 0x28
 800c252:	42a3      	cmp	r3, r4
 800c254:	bf04      	itt	eq
 800c256:	2301      	moveq	r3, #1
 800c258:	61a3      	streq	r3, [r4, #24]
 800c25a:	4620      	mov	r0, r4
 800c25c:	f000 f820 	bl	800c2a0 <__sfp>
 800c260:	6060      	str	r0, [r4, #4]
 800c262:	4620      	mov	r0, r4
 800c264:	f000 f81c 	bl	800c2a0 <__sfp>
 800c268:	60a0      	str	r0, [r4, #8]
 800c26a:	4620      	mov	r0, r4
 800c26c:	f000 f818 	bl	800c2a0 <__sfp>
 800c270:	2200      	movs	r2, #0
 800c272:	60e0      	str	r0, [r4, #12]
 800c274:	2104      	movs	r1, #4
 800c276:	6860      	ldr	r0, [r4, #4]
 800c278:	f7ff ff82 	bl	800c180 <std>
 800c27c:	68a0      	ldr	r0, [r4, #8]
 800c27e:	2201      	movs	r2, #1
 800c280:	2109      	movs	r1, #9
 800c282:	f7ff ff7d 	bl	800c180 <std>
 800c286:	68e0      	ldr	r0, [r4, #12]
 800c288:	2202      	movs	r2, #2
 800c28a:	2112      	movs	r1, #18
 800c28c:	f7ff ff78 	bl	800c180 <std>
 800c290:	2301      	movs	r3, #1
 800c292:	61a3      	str	r3, [r4, #24]
 800c294:	e7d2      	b.n	800c23c <__sinit+0xc>
 800c296:	bf00      	nop
 800c298:	0800cf04 	.word	0x0800cf04
 800c29c:	0800c1c9 	.word	0x0800c1c9

0800c2a0 <__sfp>:
 800c2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2a2:	4607      	mov	r7, r0
 800c2a4:	f7ff ffac 	bl	800c200 <__sfp_lock_acquire>
 800c2a8:	4b1e      	ldr	r3, [pc, #120]	; (800c324 <__sfp+0x84>)
 800c2aa:	681e      	ldr	r6, [r3, #0]
 800c2ac:	69b3      	ldr	r3, [r6, #24]
 800c2ae:	b913      	cbnz	r3, 800c2b6 <__sfp+0x16>
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	f7ff ffbd 	bl	800c230 <__sinit>
 800c2b6:	3648      	adds	r6, #72	; 0x48
 800c2b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c2bc:	3b01      	subs	r3, #1
 800c2be:	d503      	bpl.n	800c2c8 <__sfp+0x28>
 800c2c0:	6833      	ldr	r3, [r6, #0]
 800c2c2:	b30b      	cbz	r3, 800c308 <__sfp+0x68>
 800c2c4:	6836      	ldr	r6, [r6, #0]
 800c2c6:	e7f7      	b.n	800c2b8 <__sfp+0x18>
 800c2c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c2cc:	b9d5      	cbnz	r5, 800c304 <__sfp+0x64>
 800c2ce:	4b16      	ldr	r3, [pc, #88]	; (800c328 <__sfp+0x88>)
 800c2d0:	60e3      	str	r3, [r4, #12]
 800c2d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c2d6:	6665      	str	r5, [r4, #100]	; 0x64
 800c2d8:	f000 f847 	bl	800c36a <__retarget_lock_init_recursive>
 800c2dc:	f7ff ff96 	bl	800c20c <__sfp_lock_release>
 800c2e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c2e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c2e8:	6025      	str	r5, [r4, #0]
 800c2ea:	61a5      	str	r5, [r4, #24]
 800c2ec:	2208      	movs	r2, #8
 800c2ee:	4629      	mov	r1, r5
 800c2f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c2f4:	f7fd fc80 	bl	8009bf8 <memset>
 800c2f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c2fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c300:	4620      	mov	r0, r4
 800c302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c304:	3468      	adds	r4, #104	; 0x68
 800c306:	e7d9      	b.n	800c2bc <__sfp+0x1c>
 800c308:	2104      	movs	r1, #4
 800c30a:	4638      	mov	r0, r7
 800c30c:	f7ff ff62 	bl	800c1d4 <__sfmoreglue>
 800c310:	4604      	mov	r4, r0
 800c312:	6030      	str	r0, [r6, #0]
 800c314:	2800      	cmp	r0, #0
 800c316:	d1d5      	bne.n	800c2c4 <__sfp+0x24>
 800c318:	f7ff ff78 	bl	800c20c <__sfp_lock_release>
 800c31c:	230c      	movs	r3, #12
 800c31e:	603b      	str	r3, [r7, #0]
 800c320:	e7ee      	b.n	800c300 <__sfp+0x60>
 800c322:	bf00      	nop
 800c324:	0800cf04 	.word	0x0800cf04
 800c328:	ffff0001 	.word	0xffff0001

0800c32c <_fwalk_reent>:
 800c32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c330:	4606      	mov	r6, r0
 800c332:	4688      	mov	r8, r1
 800c334:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c338:	2700      	movs	r7, #0
 800c33a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c33e:	f1b9 0901 	subs.w	r9, r9, #1
 800c342:	d505      	bpl.n	800c350 <_fwalk_reent+0x24>
 800c344:	6824      	ldr	r4, [r4, #0]
 800c346:	2c00      	cmp	r4, #0
 800c348:	d1f7      	bne.n	800c33a <_fwalk_reent+0xe>
 800c34a:	4638      	mov	r0, r7
 800c34c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c350:	89ab      	ldrh	r3, [r5, #12]
 800c352:	2b01      	cmp	r3, #1
 800c354:	d907      	bls.n	800c366 <_fwalk_reent+0x3a>
 800c356:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c35a:	3301      	adds	r3, #1
 800c35c:	d003      	beq.n	800c366 <_fwalk_reent+0x3a>
 800c35e:	4629      	mov	r1, r5
 800c360:	4630      	mov	r0, r6
 800c362:	47c0      	blx	r8
 800c364:	4307      	orrs	r7, r0
 800c366:	3568      	adds	r5, #104	; 0x68
 800c368:	e7e9      	b.n	800c33e <_fwalk_reent+0x12>

0800c36a <__retarget_lock_init_recursive>:
 800c36a:	4770      	bx	lr

0800c36c <__retarget_lock_acquire_recursive>:
 800c36c:	4770      	bx	lr

0800c36e <__retarget_lock_release_recursive>:
 800c36e:	4770      	bx	lr

0800c370 <__swhatbuf_r>:
 800c370:	b570      	push	{r4, r5, r6, lr}
 800c372:	460e      	mov	r6, r1
 800c374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c378:	2900      	cmp	r1, #0
 800c37a:	b096      	sub	sp, #88	; 0x58
 800c37c:	4614      	mov	r4, r2
 800c37e:	461d      	mov	r5, r3
 800c380:	da08      	bge.n	800c394 <__swhatbuf_r+0x24>
 800c382:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c386:	2200      	movs	r2, #0
 800c388:	602a      	str	r2, [r5, #0]
 800c38a:	061a      	lsls	r2, r3, #24
 800c38c:	d410      	bmi.n	800c3b0 <__swhatbuf_r+0x40>
 800c38e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c392:	e00e      	b.n	800c3b2 <__swhatbuf_r+0x42>
 800c394:	466a      	mov	r2, sp
 800c396:	f000 f8fb 	bl	800c590 <_fstat_r>
 800c39a:	2800      	cmp	r0, #0
 800c39c:	dbf1      	blt.n	800c382 <__swhatbuf_r+0x12>
 800c39e:	9a01      	ldr	r2, [sp, #4]
 800c3a0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c3a4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c3a8:	425a      	negs	r2, r3
 800c3aa:	415a      	adcs	r2, r3
 800c3ac:	602a      	str	r2, [r5, #0]
 800c3ae:	e7ee      	b.n	800c38e <__swhatbuf_r+0x1e>
 800c3b0:	2340      	movs	r3, #64	; 0x40
 800c3b2:	2000      	movs	r0, #0
 800c3b4:	6023      	str	r3, [r4, #0]
 800c3b6:	b016      	add	sp, #88	; 0x58
 800c3b8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c3bc <__smakebuf_r>:
 800c3bc:	898b      	ldrh	r3, [r1, #12]
 800c3be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3c0:	079d      	lsls	r5, r3, #30
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	460c      	mov	r4, r1
 800c3c6:	d507      	bpl.n	800c3d8 <__smakebuf_r+0x1c>
 800c3c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c3cc:	6023      	str	r3, [r4, #0]
 800c3ce:	6123      	str	r3, [r4, #16]
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	6163      	str	r3, [r4, #20]
 800c3d4:	b002      	add	sp, #8
 800c3d6:	bd70      	pop	{r4, r5, r6, pc}
 800c3d8:	ab01      	add	r3, sp, #4
 800c3da:	466a      	mov	r2, sp
 800c3dc:	f7ff ffc8 	bl	800c370 <__swhatbuf_r>
 800c3e0:	9900      	ldr	r1, [sp, #0]
 800c3e2:	4605      	mov	r5, r0
 800c3e4:	4630      	mov	r0, r6
 800c3e6:	f7ff fb07 	bl	800b9f8 <_malloc_r>
 800c3ea:	b948      	cbnz	r0, 800c400 <__smakebuf_r+0x44>
 800c3ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3f0:	059a      	lsls	r2, r3, #22
 800c3f2:	d4ef      	bmi.n	800c3d4 <__smakebuf_r+0x18>
 800c3f4:	f023 0303 	bic.w	r3, r3, #3
 800c3f8:	f043 0302 	orr.w	r3, r3, #2
 800c3fc:	81a3      	strh	r3, [r4, #12]
 800c3fe:	e7e3      	b.n	800c3c8 <__smakebuf_r+0xc>
 800c400:	4b0d      	ldr	r3, [pc, #52]	; (800c438 <__smakebuf_r+0x7c>)
 800c402:	62b3      	str	r3, [r6, #40]	; 0x28
 800c404:	89a3      	ldrh	r3, [r4, #12]
 800c406:	6020      	str	r0, [r4, #0]
 800c408:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c40c:	81a3      	strh	r3, [r4, #12]
 800c40e:	9b00      	ldr	r3, [sp, #0]
 800c410:	6163      	str	r3, [r4, #20]
 800c412:	9b01      	ldr	r3, [sp, #4]
 800c414:	6120      	str	r0, [r4, #16]
 800c416:	b15b      	cbz	r3, 800c430 <__smakebuf_r+0x74>
 800c418:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c41c:	4630      	mov	r0, r6
 800c41e:	f000 f8c9 	bl	800c5b4 <_isatty_r>
 800c422:	b128      	cbz	r0, 800c430 <__smakebuf_r+0x74>
 800c424:	89a3      	ldrh	r3, [r4, #12]
 800c426:	f023 0303 	bic.w	r3, r3, #3
 800c42a:	f043 0301 	orr.w	r3, r3, #1
 800c42e:	81a3      	strh	r3, [r4, #12]
 800c430:	89a0      	ldrh	r0, [r4, #12]
 800c432:	4305      	orrs	r5, r0
 800c434:	81a5      	strh	r5, [r4, #12]
 800c436:	e7cd      	b.n	800c3d4 <__smakebuf_r+0x18>
 800c438:	0800c1c9 	.word	0x0800c1c9

0800c43c <_raise_r>:
 800c43c:	291f      	cmp	r1, #31
 800c43e:	b538      	push	{r3, r4, r5, lr}
 800c440:	4604      	mov	r4, r0
 800c442:	460d      	mov	r5, r1
 800c444:	d904      	bls.n	800c450 <_raise_r+0x14>
 800c446:	2316      	movs	r3, #22
 800c448:	6003      	str	r3, [r0, #0]
 800c44a:	f04f 30ff 	mov.w	r0, #4294967295
 800c44e:	bd38      	pop	{r3, r4, r5, pc}
 800c450:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c452:	b112      	cbz	r2, 800c45a <_raise_r+0x1e>
 800c454:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c458:	b94b      	cbnz	r3, 800c46e <_raise_r+0x32>
 800c45a:	4620      	mov	r0, r4
 800c45c:	f000 f830 	bl	800c4c0 <_getpid_r>
 800c460:	462a      	mov	r2, r5
 800c462:	4601      	mov	r1, r0
 800c464:	4620      	mov	r0, r4
 800c466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c46a:	f000 b817 	b.w	800c49c <_kill_r>
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d00a      	beq.n	800c488 <_raise_r+0x4c>
 800c472:	1c59      	adds	r1, r3, #1
 800c474:	d103      	bne.n	800c47e <_raise_r+0x42>
 800c476:	2316      	movs	r3, #22
 800c478:	6003      	str	r3, [r0, #0]
 800c47a:	2001      	movs	r0, #1
 800c47c:	e7e7      	b.n	800c44e <_raise_r+0x12>
 800c47e:	2400      	movs	r4, #0
 800c480:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c484:	4628      	mov	r0, r5
 800c486:	4798      	blx	r3
 800c488:	2000      	movs	r0, #0
 800c48a:	e7e0      	b.n	800c44e <_raise_r+0x12>

0800c48c <raise>:
 800c48c:	4b02      	ldr	r3, [pc, #8]	; (800c498 <raise+0xc>)
 800c48e:	4601      	mov	r1, r0
 800c490:	6818      	ldr	r0, [r3, #0]
 800c492:	f7ff bfd3 	b.w	800c43c <_raise_r>
 800c496:	bf00      	nop
 800c498:	20000010 	.word	0x20000010

0800c49c <_kill_r>:
 800c49c:	b538      	push	{r3, r4, r5, lr}
 800c49e:	4d07      	ldr	r5, [pc, #28]	; (800c4bc <_kill_r+0x20>)
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	4608      	mov	r0, r1
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	602b      	str	r3, [r5, #0]
 800c4aa:	f7f7 f883 	bl	80035b4 <_kill>
 800c4ae:	1c43      	adds	r3, r0, #1
 800c4b0:	d102      	bne.n	800c4b8 <_kill_r+0x1c>
 800c4b2:	682b      	ldr	r3, [r5, #0]
 800c4b4:	b103      	cbz	r3, 800c4b8 <_kill_r+0x1c>
 800c4b6:	6023      	str	r3, [r4, #0]
 800c4b8:	bd38      	pop	{r3, r4, r5, pc}
 800c4ba:	bf00      	nop
 800c4bc:	20000d98 	.word	0x20000d98

0800c4c0 <_getpid_r>:
 800c4c0:	f7f7 b870 	b.w	80035a4 <_getpid>

0800c4c4 <__sread>:
 800c4c4:	b510      	push	{r4, lr}
 800c4c6:	460c      	mov	r4, r1
 800c4c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4cc:	f000 f894 	bl	800c5f8 <_read_r>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	bfab      	itete	ge
 800c4d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c4d6:	89a3      	ldrhlt	r3, [r4, #12]
 800c4d8:	181b      	addge	r3, r3, r0
 800c4da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c4de:	bfac      	ite	ge
 800c4e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c4e2:	81a3      	strhlt	r3, [r4, #12]
 800c4e4:	bd10      	pop	{r4, pc}

0800c4e6 <__swrite>:
 800c4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ea:	461f      	mov	r7, r3
 800c4ec:	898b      	ldrh	r3, [r1, #12]
 800c4ee:	05db      	lsls	r3, r3, #23
 800c4f0:	4605      	mov	r5, r0
 800c4f2:	460c      	mov	r4, r1
 800c4f4:	4616      	mov	r6, r2
 800c4f6:	d505      	bpl.n	800c504 <__swrite+0x1e>
 800c4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4fc:	2302      	movs	r3, #2
 800c4fe:	2200      	movs	r2, #0
 800c500:	f000 f868 	bl	800c5d4 <_lseek_r>
 800c504:	89a3      	ldrh	r3, [r4, #12]
 800c506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c50a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c50e:	81a3      	strh	r3, [r4, #12]
 800c510:	4632      	mov	r2, r6
 800c512:	463b      	mov	r3, r7
 800c514:	4628      	mov	r0, r5
 800c516:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c51a:	f000 b817 	b.w	800c54c <_write_r>

0800c51e <__sseek>:
 800c51e:	b510      	push	{r4, lr}
 800c520:	460c      	mov	r4, r1
 800c522:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c526:	f000 f855 	bl	800c5d4 <_lseek_r>
 800c52a:	1c43      	adds	r3, r0, #1
 800c52c:	89a3      	ldrh	r3, [r4, #12]
 800c52e:	bf15      	itete	ne
 800c530:	6560      	strne	r0, [r4, #84]	; 0x54
 800c532:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c536:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c53a:	81a3      	strheq	r3, [r4, #12]
 800c53c:	bf18      	it	ne
 800c53e:	81a3      	strhne	r3, [r4, #12]
 800c540:	bd10      	pop	{r4, pc}

0800c542 <__sclose>:
 800c542:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c546:	f000 b813 	b.w	800c570 <_close_r>
	...

0800c54c <_write_r>:
 800c54c:	b538      	push	{r3, r4, r5, lr}
 800c54e:	4d07      	ldr	r5, [pc, #28]	; (800c56c <_write_r+0x20>)
 800c550:	4604      	mov	r4, r0
 800c552:	4608      	mov	r0, r1
 800c554:	4611      	mov	r1, r2
 800c556:	2200      	movs	r2, #0
 800c558:	602a      	str	r2, [r5, #0]
 800c55a:	461a      	mov	r2, r3
 800c55c:	f7f7 f861 	bl	8003622 <_write>
 800c560:	1c43      	adds	r3, r0, #1
 800c562:	d102      	bne.n	800c56a <_write_r+0x1e>
 800c564:	682b      	ldr	r3, [r5, #0]
 800c566:	b103      	cbz	r3, 800c56a <_write_r+0x1e>
 800c568:	6023      	str	r3, [r4, #0]
 800c56a:	bd38      	pop	{r3, r4, r5, pc}
 800c56c:	20000d98 	.word	0x20000d98

0800c570 <_close_r>:
 800c570:	b538      	push	{r3, r4, r5, lr}
 800c572:	4d06      	ldr	r5, [pc, #24]	; (800c58c <_close_r+0x1c>)
 800c574:	2300      	movs	r3, #0
 800c576:	4604      	mov	r4, r0
 800c578:	4608      	mov	r0, r1
 800c57a:	602b      	str	r3, [r5, #0]
 800c57c:	f7f7 f86d 	bl	800365a <_close>
 800c580:	1c43      	adds	r3, r0, #1
 800c582:	d102      	bne.n	800c58a <_close_r+0x1a>
 800c584:	682b      	ldr	r3, [r5, #0]
 800c586:	b103      	cbz	r3, 800c58a <_close_r+0x1a>
 800c588:	6023      	str	r3, [r4, #0]
 800c58a:	bd38      	pop	{r3, r4, r5, pc}
 800c58c:	20000d98 	.word	0x20000d98

0800c590 <_fstat_r>:
 800c590:	b538      	push	{r3, r4, r5, lr}
 800c592:	4d07      	ldr	r5, [pc, #28]	; (800c5b0 <_fstat_r+0x20>)
 800c594:	2300      	movs	r3, #0
 800c596:	4604      	mov	r4, r0
 800c598:	4608      	mov	r0, r1
 800c59a:	4611      	mov	r1, r2
 800c59c:	602b      	str	r3, [r5, #0]
 800c59e:	f7f7 f868 	bl	8003672 <_fstat>
 800c5a2:	1c43      	adds	r3, r0, #1
 800c5a4:	d102      	bne.n	800c5ac <_fstat_r+0x1c>
 800c5a6:	682b      	ldr	r3, [r5, #0]
 800c5a8:	b103      	cbz	r3, 800c5ac <_fstat_r+0x1c>
 800c5aa:	6023      	str	r3, [r4, #0]
 800c5ac:	bd38      	pop	{r3, r4, r5, pc}
 800c5ae:	bf00      	nop
 800c5b0:	20000d98 	.word	0x20000d98

0800c5b4 <_isatty_r>:
 800c5b4:	b538      	push	{r3, r4, r5, lr}
 800c5b6:	4d06      	ldr	r5, [pc, #24]	; (800c5d0 <_isatty_r+0x1c>)
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	4608      	mov	r0, r1
 800c5be:	602b      	str	r3, [r5, #0]
 800c5c0:	f7f7 f867 	bl	8003692 <_isatty>
 800c5c4:	1c43      	adds	r3, r0, #1
 800c5c6:	d102      	bne.n	800c5ce <_isatty_r+0x1a>
 800c5c8:	682b      	ldr	r3, [r5, #0]
 800c5ca:	b103      	cbz	r3, 800c5ce <_isatty_r+0x1a>
 800c5cc:	6023      	str	r3, [r4, #0]
 800c5ce:	bd38      	pop	{r3, r4, r5, pc}
 800c5d0:	20000d98 	.word	0x20000d98

0800c5d4 <_lseek_r>:
 800c5d4:	b538      	push	{r3, r4, r5, lr}
 800c5d6:	4d07      	ldr	r5, [pc, #28]	; (800c5f4 <_lseek_r+0x20>)
 800c5d8:	4604      	mov	r4, r0
 800c5da:	4608      	mov	r0, r1
 800c5dc:	4611      	mov	r1, r2
 800c5de:	2200      	movs	r2, #0
 800c5e0:	602a      	str	r2, [r5, #0]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	f7f7 f860 	bl	80036a8 <_lseek>
 800c5e8:	1c43      	adds	r3, r0, #1
 800c5ea:	d102      	bne.n	800c5f2 <_lseek_r+0x1e>
 800c5ec:	682b      	ldr	r3, [r5, #0]
 800c5ee:	b103      	cbz	r3, 800c5f2 <_lseek_r+0x1e>
 800c5f0:	6023      	str	r3, [r4, #0]
 800c5f2:	bd38      	pop	{r3, r4, r5, pc}
 800c5f4:	20000d98 	.word	0x20000d98

0800c5f8 <_read_r>:
 800c5f8:	b538      	push	{r3, r4, r5, lr}
 800c5fa:	4d07      	ldr	r5, [pc, #28]	; (800c618 <_read_r+0x20>)
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	4608      	mov	r0, r1
 800c600:	4611      	mov	r1, r2
 800c602:	2200      	movs	r2, #0
 800c604:	602a      	str	r2, [r5, #0]
 800c606:	461a      	mov	r2, r3
 800c608:	f7f6 ffee 	bl	80035e8 <_read>
 800c60c:	1c43      	adds	r3, r0, #1
 800c60e:	d102      	bne.n	800c616 <_read_r+0x1e>
 800c610:	682b      	ldr	r3, [r5, #0]
 800c612:	b103      	cbz	r3, 800c616 <_read_r+0x1e>
 800c614:	6023      	str	r3, [r4, #0]
 800c616:	bd38      	pop	{r3, r4, r5, pc}
 800c618:	20000d98 	.word	0x20000d98

0800c61c <_init>:
 800c61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c61e:	bf00      	nop
 800c620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c622:	bc08      	pop	{r3}
 800c624:	469e      	mov	lr, r3
 800c626:	4770      	bx	lr

0800c628 <_fini>:
 800c628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62a:	bf00      	nop
 800c62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c62e:	bc08      	pop	{r3}
 800c630:	469e      	mov	lr, r3
 800c632:	4770      	bx	lr
