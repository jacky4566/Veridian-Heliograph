
Heliograph_L432.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c4cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cec  0800c660  0800c660  0001c660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d34c  0800d34c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d34c  0800d34c  0001d34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d354  0800d354  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d354  0800d354  0001d354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d358  0800d358  0001d358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d35c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bc0  200001e0  0800d53c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000da0  0800d53c  00020da0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017b44  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a3e  00000000  00000000  00037d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0003b798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  0003cdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f4d  00000000  00000000  0003e280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001748d  00000000  00000000  000651cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e33d4  00000000  00000000  0007c65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015fa2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ca4  00000000  00000000  0015fa80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c644 	.word	0x0800c644

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c644 	.word	0x0800c644

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f043 0201 	orr.w	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	601a      	str	r2, [r3, #0]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <LL_LPUART_EnableClockInStopMode>:
  * @rmtoll CR3          UCESM         LL_LPUART_EnableClockInStopMode
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableClockInStopMode(USART_TypeDef *LPUARTx)
{
 800107e:	b480      	push	{r7}
 8001080:	b089      	sub	sp, #36	; 0x24
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_UCESM);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3308      	adds	r3, #8
 800108a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	e853 3f00 	ldrex	r3, [r3]
 8001092:	60bb      	str	r3, [r7, #8]
   return(result);
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3308      	adds	r3, #8
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	61ba      	str	r2, [r7, #24]
 80010a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010a6:	6979      	ldr	r1, [r7, #20]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	e841 2300 	strex	r3, r2, [r1]
 80010ae:	613b      	str	r3, [r7, #16]
   return(result);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1e7      	bne.n	8001086 <LL_LPUART_EnableClockInStopMode+0x8>
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	3724      	adds	r7, #36	; 0x24
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_LPUART_DisableOverrunDetect>:
  * @rmtoll CR3          OVRDIS        LL_LPUART_DisableOverrunDetect
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableOverrunDetect(USART_TypeDef *LPUARTx)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR3, USART_CR3_OVRDIS);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	609a      	str	r2, [r3, #8]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_LPUART_SetWKUPType>:
  *         @arg @ref LL_LPUART_WAKEUP_ON_STARTBIT
  *         @arg @ref LL_LPUART_WAKEUP_ON_RXNE
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetWKUPType(USART_TypeDef *LPUARTx, uint32_t Type)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_WUS, Type);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	431a      	orrs	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	609a      	str	r2, [r3, #8]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_LPUART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_LPUART_EnableIT_RXNE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_RXNE(USART_TypeDef *LPUARTx)
{
 800110a:	b480      	push	{r7}
 800110c:	b089      	sub	sp, #36	; 0x24
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	e853 3f00 	ldrex	r3, [r3]
 800111c:	60bb      	str	r3, [r7, #8]
   return(result);
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	f043 0320 	orr.w	r3, r3, #32
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	61ba      	str	r2, [r7, #24]
 800112c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800112e:	6979      	ldr	r1, [r7, #20]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	e841 2300 	strex	r3, r2, [r1]
 8001136:	613b      	str	r3, [r7, #16]
   return(result);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1e9      	bne.n	8001112 <LL_LPUART_EnableIT_RXNE+0x8>
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3724      	adds	r7, #36	; 0x24
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4313      	orrs	r3, r2
 800115e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4013      	ands	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40021000 	.word	0x40021000

0800117c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001186:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001188:	4907      	ldr	r1, [pc, #28]	; (80011a8 <LL_APB1_GRP2_EnableClock+0x2c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4313      	orrs	r3, r2
 800118e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001192:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4013      	ands	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800119a:	68fb      	ldr	r3, [r7, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40021000 	.word	0x40021000

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b0:	f002 ffb0 	bl	8004114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b4:	f000 f810 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b8:	f000 fa3a 	bl	8001630 <MX_GPIO_Init>
  MX_DMA_Init();
 80011bc:	f000 fa12 	bl	80015e4 <MX_DMA_Init>
  MX_SPI1_Init();
 80011c0:	f000 f9d2 	bl	8001568 <MX_SPI1_Init>
  MX_ADC1_Init();
 80011c4:	f000 f860 	bl	8001288 <MX_ADC1_Init>
  MX_RTC_Init();
 80011c8:	f000 f966 	bl	8001498 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  myApp_init();
 80011cc:	f001 fc8c 	bl	8002ae8 <myApp_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  myApp_loop();
 80011d0:	f001 fcb4 	bl	8002b3c <myApp_loop>
 80011d4:	e7fc      	b.n	80011d0 <main+0x24>
	...

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b096      	sub	sp, #88	; 0x58
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	2244      	movs	r2, #68	; 0x44
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f008 fd1c 	bl	8009c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80011fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011fe:	f005 f88b 	bl	8006318 <HAL_PWREx_ControlVoltageScaling>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001208:	f000 faf6 	bl	80017f8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800120c:	f005 f832 	bl	8006274 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <SystemClock_Config+0xac>)
 8001212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001216:	f023 0318 	bic.w	r3, r3, #24
 800121a:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <SystemClock_Config+0xac>)
 800121c:	f043 0310 	orr.w	r3, r3, #16
 8001220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001224:	2314      	movs	r3, #20
 8001226:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001228:	2301      	movs	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800122c:	2301      	movs	r3, #1
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001238:	2300      	movs	r3, #0
 800123a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4618      	mov	r0, r3
 8001242:	f005 f933 	bl	80064ac <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800124c:	f000 fad4 	bl	80017f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	2102      	movs	r1, #2
 8001268:	4618      	mov	r0, r3
 800126a:	f005 fd33 	bl	8006cd4 <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001274:	f000 fac0 	bl	80017f8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001278:	f006 f90e 	bl	8007498 <HAL_RCCEx_EnableMSIPLLMode>
}
 800127c:	bf00      	nop
 800127e:	3758      	adds	r7, #88	; 0x58
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40021000 	.word	0x40021000

08001288 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800129e:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <MX_ADC1_Init+0x100>)
 80012a0:	4a3a      	ldr	r2, [pc, #232]	; (800138c <MX_ADC1_Init+0x104>)
 80012a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80012a4:	4b38      	ldr	r3, [pc, #224]	; (8001388 <MX_ADC1_Init+0x100>)
 80012a6:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80012aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ac:	4b36      	ldr	r3, [pc, #216]	; (8001388 <MX_ADC1_Init+0x100>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b2:	4b35      	ldr	r3, [pc, #212]	; (8001388 <MX_ADC1_Init+0x100>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012b8:	4b33      	ldr	r3, [pc, #204]	; (8001388 <MX_ADC1_Init+0x100>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012be:	4b32      	ldr	r3, [pc, #200]	; (8001388 <MX_ADC1_Init+0x100>)
 80012c0:	2208      	movs	r2, #8
 80012c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012c4:	4b30      	ldr	r3, [pc, #192]	; (8001388 <MX_ADC1_Init+0x100>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ca:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <MX_ADC1_Init+0x100>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80012d0:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <MX_ADC1_Init+0x100>)
 80012d2:	2203      	movs	r2, #3
 80012d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d6:	4b2c      	ldr	r3, [pc, #176]	; (8001388 <MX_ADC1_Init+0x100>)
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012de:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <MX_ADC1_Init+0x100>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012e4:	4b28      	ldr	r3, [pc, #160]	; (8001388 <MX_ADC1_Init+0x100>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012ea:	4b27      	ldr	r3, [pc, #156]	; (8001388 <MX_ADC1_Init+0x100>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012f2:	4b25      	ldr	r3, [pc, #148]	; (8001388 <MX_ADC1_Init+0x100>)
 80012f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <MX_ADC1_Init+0x100>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001302:	4821      	ldr	r0, [pc, #132]	; (8001388 <MX_ADC1_Init+0x100>)
 8001304:	f003 f9b0 	bl	8004668 <HAL_ADC_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800130e:	f000 fa73 	bl	80017f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <MX_ADC1_Init+0x108>)
 8001314:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001316:	2306      	movs	r3, #6
 8001318:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800131a:	2307      	movs	r3, #7
 800131c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800131e:	237f      	movs	r3, #127	; 0x7f
 8001320:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001322:	2304      	movs	r3, #4
 8001324:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132a:	463b      	mov	r3, r7
 800132c:	4619      	mov	r1, r3
 800132e:	4816      	ldr	r0, [pc, #88]	; (8001388 <MX_ADC1_Init+0x100>)
 8001330:	f003 fbdc 	bl	8004aec <HAL_ADC_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800133a:	f000 fa5d 	bl	80017f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_ADC1_Init+0x10c>)
 8001340:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001342:	230c      	movs	r3, #12
 8001344:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001346:	463b      	mov	r3, r7
 8001348:	4619      	mov	r1, r3
 800134a:	480f      	ldr	r0, [pc, #60]	; (8001388 <MX_ADC1_Init+0x100>)
 800134c:	f003 fbce 	bl	8004aec <HAL_ADC_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001356:	f000 fa4f 	bl	80017f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <MX_ADC1_Init+0x110>)
 800135c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800135e:	2312      	movs	r3, #18
 8001360:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4808      	ldr	r0, [pc, #32]	; (8001388 <MX_ADC1_Init+0x100>)
 8001368:	f003 fbc0 	bl	8004aec <HAL_ADC_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001372:	f000 fa41 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001376:	217f      	movs	r1, #127	; 0x7f
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <MX_ADC1_Init+0x100>)
 800137a:	f004 f9f9 	bl	8005770 <HAL_ADCEx_Calibration_Start>
  /* USER CODE END ADC1_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200001fc 	.word	0x200001fc
 800138c:	50040000 	.word	0x50040000
 8001390:	19200040 	.word	0x19200040
 8001394:	c7520000 	.word	0xc7520000
 8001398:	80000001 	.word	0x80000001

0800139c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b0a2      	sub	sp, #136	; 0x88
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 80013a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
 80013b2:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2254      	movs	r2, #84	; 0x54
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f008 fc29 	bl	8009c24 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80013d2:	2320      	movs	r3, #32
 80013d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 80013d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4618      	mov	r0, r3
 80013e0:	f005 fe64 	bl	80070ac <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80013ea:	f000 fa05 	bl	80017f8 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
 80013ee:	2001      	movs	r0, #1
 80013f0:	f7ff fec4 	bl	800117c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80013f4:	2001      	movs	r0, #1
 80013f6:	f7ff fea9 	bl	800114c <LL_AHB2_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  PA3   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80013fa:	230c      	movs	r3, #12
 80013fc:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013fe:	2302      	movs	r3, #2
 8001400:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001402:	2303      	movs	r3, #3
 8001404:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800140a:	2300      	movs	r3, #0
 800140c:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 800140e:	2308      	movs	r3, #8
 8001410:	66fb      	str	r3, [r7, #108]	; 0x6c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001416:	4619      	mov	r1, r3
 8001418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141c:	f007 fc71 	bl	8008d02 <LL_GPIO_Init>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(LPUART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001420:	f7ff fd94 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 8001424:	4603      	mov	r3, r0
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fde4 	bl	8000ff8 <NVIC_EncodePriority>
 8001430:	4603      	mov	r3, r0
 8001432:	4619      	mov	r1, r3
 8001434:	2046      	movs	r0, #70	; 0x46
 8001436:	f7ff fdb5 	bl	8000fa4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPUART1_IRQn);
 800143a:	2046      	movs	r0, #70	; 0x46
 800143c:	f7ff fd94 	bl	8000f68 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */
  LL_LPUART_DisableOverrunDetect(LPUART1);
 8001440:	4814      	ldr	r0, [pc, #80]	; (8001494 <MX_LPUART1_UART_Init+0xf8>)
 8001442:	f7ff fe3f 	bl	80010c4 <LL_LPUART_DisableOverrunDetect>
  LL_LPUART_EnableClockInStopMode(LPUART1);
 8001446:	4813      	ldr	r0, [pc, #76]	; (8001494 <MX_LPUART1_UART_Init+0xf8>)
 8001448:	f7ff fe19 	bl	800107e <LL_LPUART_EnableClockInStopMode>
  LL_LPUART_SetWKUPType(LPUART1, LL_LPUART_WAKEUP_ON_RXNE); //Set the wake-up event type : specify wake-up on RXNE flag
 800144c:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
 8001450:	4810      	ldr	r0, [pc, #64]	; (8001494 <MX_LPUART1_UART_Init+0xf8>)
 8001452:	f7ff fe47 	bl	80010e4 <LL_LPUART_SetWKUPType>

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.BaudRate = 9600;
 8001456:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800145a:	673b      	str	r3, [r7, #112]	; 0x70
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 800145c:	2300      	movs	r3, #0
 800145e:	677b      	str	r3, [r7, #116]	; 0x74
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 8001460:	2300      	movs	r3, #0
 8001462:	67bb      	str	r3, [r7, #120]	; 0x78
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8001464:	2300      	movs	r3, #0
 8001466:	67fb      	str	r3, [r7, #124]	; 0x7c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8001468:	230c      	movs	r3, #12
 800146a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8001474:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001478:	4619      	mov	r1, r3
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <MX_LPUART1_UART_Init+0xf8>)
 800147c:	f007 fd5e 	bl	8008f3c <LL_LPUART_Init>
  LL_LPUART_Enable(LPUART1);
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_LPUART1_UART_Init+0xf8>)
 8001482:	f7ff fdec 	bl	800105e <LL_LPUART_Enable>
  /* USER CODE BEGIN LPUART1_Init 2 */
  LL_LPUART_EnableIT_RXNE(LPUART1);
 8001486:	4803      	ldr	r0, [pc, #12]	; (8001494 <MX_LPUART1_UART_Init+0xf8>)
 8001488:	f7ff fe3f 	bl	800110a <LL_LPUART_EnableIT_RXNE>

  /* USER CODE END LPUART1_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	3788      	adds	r7, #136	; 0x88
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40008000 	.word	0x40008000

08001498 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80014ac:	2300      	movs	r3, #0
 80014ae:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <MX_RTC_Init+0xc8>)
 80014b2:	4a2c      	ldr	r2, [pc, #176]	; (8001564 <MX_RTC_Init+0xcc>)
 80014b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014b6:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <MX_RTC_Init+0xc8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014bc:	4b28      	ldr	r3, [pc, #160]	; (8001560 <MX_RTC_Init+0xc8>)
 80014be:	227f      	movs	r2, #127	; 0x7f
 80014c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014c2:	4b27      	ldr	r3, [pc, #156]	; (8001560 <MX_RTC_Init+0xc8>)
 80014c4:	22ff      	movs	r2, #255	; 0xff
 80014c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014c8:	4b25      	ldr	r3, [pc, #148]	; (8001560 <MX_RTC_Init+0xc8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80014ce:	4b24      	ldr	r3, [pc, #144]	; (8001560 <MX_RTC_Init+0xc8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014d4:	4b22      	ldr	r3, [pc, #136]	; (8001560 <MX_RTC_Init+0xc8>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <MX_RTC_Init+0xc8>)
 80014dc:	2200      	movs	r2, #0
 80014de:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014e0:	481f      	ldr	r0, [pc, #124]	; (8001560 <MX_RTC_Init+0xc8>)
 80014e2:	f006 f8db 	bl	800769c <HAL_RTC_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80014ec:	f000 f984 	bl	80017f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x4;
 80014f0:	2304      	movs	r3, #4
 80014f2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x4;
 80014f4:	2304      	movs	r3, #4
 80014f6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x57;
 80014f8:	2357      	movs	r3, #87	; 0x57
 80014fa:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2201      	movs	r2, #1
 8001508:	4619      	mov	r1, r3
 800150a:	4815      	ldr	r0, [pc, #84]	; (8001560 <MX_RTC_Init+0xc8>)
 800150c:	f006 f941 	bl	8007792 <HAL_RTC_SetTime>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001516:	f000 f96f 	bl	80017f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800151a:	2301      	movs	r3, #1
 800151c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 800151e:	2305      	movs	r3, #5
 8001520:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x10;
 8001522:	2310      	movs	r3, #16
 8001524:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8001526:	2323      	movs	r3, #35	; 0x23
 8001528:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800152a:	463b      	mov	r3, r7
 800152c:	2201      	movs	r2, #1
 800152e:	4619      	mov	r1, r3
 8001530:	480b      	ldr	r0, [pc, #44]	; (8001560 <MX_RTC_Init+0xc8>)
 8001532:	f006 fa27 	bl	8007984 <HAL_RTC_SetDate>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800153c:	f000 f95c 	bl	80017f8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2047, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001540:	2200      	movs	r2, #0
 8001542:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001546:	4806      	ldr	r0, [pc, #24]	; (8001560 <MX_RTC_Init+0xc8>)
 8001548:	f006 fbc2 	bl	8007cd0 <HAL_RTCEx_SetWakeUpTimer_IT>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_RTC_Init+0xbe>
  {
    Error_Handler();
 8001552:	f000 f951 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200002a8 	.word	0x200002a8
 8001564:	40002800 	.word	0x40002800

08001568 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_SPI1_Init+0x74>)
 800156e:	4a1c      	ldr	r2, [pc, #112]	; (80015e0 <MX_SPI1_Init+0x78>)
 8001570:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_SPI1_Init+0x74>)
 8001574:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001578:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <MX_SPI1_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_SPI1_Init+0x74>)
 8001582:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001586:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_SPI1_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <MX_SPI1_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_SPI1_Init+0x74>)
 8001596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_SPI1_Init+0x74>)
 800159e:	2218      	movs	r2, #24
 80015a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_SPI1_Init+0x74>)
 80015a4:	2280      	movs	r2, #128	; 0x80
 80015a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_SPI1_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_SPI1_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_SPI1_Init+0x74>)
 80015b6:	2207      	movs	r2, #7
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_SPI1_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_SPI1_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_SPI1_Init+0x74>)
 80015c8:	f006 fc3c 	bl	8007e44 <HAL_SPI_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015d2:	f000 f911 	bl	80017f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200002cc 	.word	0x200002cc
 80015e0:	40013000 	.word	0x40013000

080015e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <MX_DMA_Init+0x48>)
 80015ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ee:	4a0f      	ldr	r2, [pc, #60]	; (800162c <MX_DMA_Init+0x48>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6493      	str	r3, [r2, #72]	; 0x48
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <MX_DMA_Init+0x48>)
 80015f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	200b      	movs	r0, #11
 8001608:	f004 f9ed 	bl	80059e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800160c:	200b      	movs	r0, #11
 800160e:	f004 fa06 	bl	8005a1e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	200d      	movs	r0, #13
 8001618:	f004 f9e5 	bl	80059e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800161c:	200d      	movs	r0, #13
 800161e:	f004 f9fe 	bl	8005a1e <HAL_NVIC_EnableIRQ>

}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000

08001630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
 8001644:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	4b44      	ldr	r3, [pc, #272]	; (8001758 <MX_GPIO_Init+0x128>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	4a43      	ldr	r2, [pc, #268]	; (8001758 <MX_GPIO_Init+0x128>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001652:	4b41      	ldr	r3, [pc, #260]	; (8001758 <MX_GPIO_Init+0x128>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800165e:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <MX_GPIO_Init+0x128>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	4a3d      	ldr	r2, [pc, #244]	; (8001758 <MX_GPIO_Init+0x128>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <MX_GPIO_Init+0x128>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	4b38      	ldr	r3, [pc, #224]	; (8001758 <MX_GPIO_Init+0x128>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	4a37      	ldr	r2, [pc, #220]	; (8001758 <MX_GPIO_Init+0x128>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001682:	4b35      	ldr	r3, [pc, #212]	; (8001758 <MX_GPIO_Init+0x128>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800168e:	4b32      	ldr	r3, [pc, #200]	; (8001758 <MX_GPIO_Init+0x128>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	4a31      	ldr	r2, [pc, #196]	; (8001758 <MX_GPIO_Init+0x128>)
 8001694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169a:	4b2f      	ldr	r3, [pc, #188]	; (8001758 <MX_GPIO_Init+0x128>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GNSS_EXT_Pin|DISP_CS_Pin|DISP_EN_Pin, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80016ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b0:	f004 fdc8 	bl	8006244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SolarEN_GPIO_Port, SolarEN_Pin, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016be:	f004 fdc1 	bl	8006244 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 80016c2:	f649 0301 	movw	r3, #38913	; 0x9801
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c8:	2303      	movs	r3, #3
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016da:	f004 fc31 	bl	8005f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_EXT_Pin DISP_CS_Pin DISP_EN_Pin */
  GPIO_InitStruct.Pin = GNSS_EXT_Pin|DISP_CS_Pin|DISP_EN_Pin;
 80016de:	f44f 63c2 	mov.w	r3, #1552	; 0x610
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fa:	f004 fc21 	bl	8005f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80016fe:	23fb      	movs	r3, #251	; 0xfb
 8001700:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001702:	2303      	movs	r3, #3
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4812      	ldr	r0, [pc, #72]	; (800175c <MX_GPIO_Init+0x12c>)
 8001712:	f004 fc15 	bl	8005f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SolarEN_Pin */
  GPIO_InitStruct.Pin = SolarEN_Pin;
 8001716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800171c:	2311      	movs	r3, #17
 800171e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SolarEN_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001732:	f004 fc05 	bl	8005f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001736:	2308      	movs	r3, #8
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800173a:	2303      	movs	r3, #3
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	4619      	mov	r1, r3
 8001748:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_GPIO_Init+0x130>)
 800174a:	f004 fbf9 	bl	8005f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	48000400 	.word	0x48000400
 8001760:	48001c00 	.word	0x48001c00

08001764 <HAL_Delay>:

/* USER CODE BEGIN 4 */
void HAL_Delay(uint32_t Delay)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800176c:	f002 fd3a 	bl	80041e4 <HAL_GetTick>
 8001770:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177c:	d007      	beq.n	800178e <HAL_Delay+0x2a>
  {
    wait += (uint32_t)uwTickFreq;
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_Delay+0x44>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4413      	add	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]

  }

  while ((HAL_GetTick() - tickstart) < wait)
 800178a:	e000      	b.n	800178e <HAL_Delay+0x2a>
  {
	  __WFI();
 800178c:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800178e:	f002 fd29 	bl	80041e4 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	68fa      	ldr	r2, [r7, #12]
 800179a:	429a      	cmp	r2, r3
 800179c:	d8f6      	bhi.n	800178c <HAL_Delay+0x28>
  }
}
 800179e:	bf00      	nop
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	2000000c 	.word	0x2000000c

080017ac <USER_LPUART1_UART_Init>:

void USER_LPUART1_UART_Init(){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	MX_LPUART1_UART_Init();
 80017b0:	f7ff fdf4 	bl	800139c <MX_LPUART1_UART_Init>
}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <USER_LPUART1_UART_DeInit>:

void USER_LPUART1_UART_DeInit(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
	LL_LPUART_DeInit(LPUART1);
 80017be:	480d      	ldr	r0, [pc, #52]	; (80017f4 <USER_LPUART1_UART_DeInit+0x3c>)
 80017c0:	f007 fba2 	bl	8008f08 <LL_LPUART_DeInit>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017d2:	230c      	movs	r3, #12
 80017d4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d6:	2303      	movs	r3, #3
 80017d8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e6:	f004 fbab 	bl	8005f40 <HAL_GPIO_Init>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40008000 	.word	0x40008000

080017f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017fc:	b672      	cpsid	i
}
 80017fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001800:	e7fe      	b.n	8001800 <Error_Handler+0x8>

08001802 <LL_LPUART_DisableIT_WKUP>:
  * @rmtoll CR3          WUFIE         LL_LPUART_DisableIT_WKUP
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_WKUP(USART_TypeDef *LPUARTx)
{
 8001802:	b480      	push	{r7}
 8001804:	b089      	sub	sp, #36	; 0x24
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(LPUARTx->CR3, USART_CR3_WUFIE);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3308      	adds	r3, #8
 800180e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	e853 3f00 	ldrex	r3, [r3]
 8001816:	60bb      	str	r3, [r7, #8]
   return(result);
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3308      	adds	r3, #8
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	61ba      	str	r2, [r7, #24]
 8001828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800182a:	6979      	ldr	r1, [r7, #20]
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	e841 2300 	strex	r3, r2, [r1]
 8001832:	613b      	str	r3, [r7, #16]
   return(result);
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1e7      	bne.n	800180a <LL_LPUART_DisableIT_WKUP+0x8>
}
 800183a:	bf00      	nop
 800183c:	bf00      	nop
 800183e:	3724      	adds	r7, #36	; 0x24
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <npf_min>:

#ifdef _MSC_VER
  #include <intrin.h>
#endif

static int npf_min(int x, int y) { return (x < y) ? x : y; }
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4293      	cmp	r3, r2
 8001858:	bfa8      	it	ge
 800185a:	4613      	movge	r3, r2
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <npf_max>:
static int npf_max(int x, int y) { return (x > y) ? x : y; }
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4293      	cmp	r3, r2
 8001878:	bfb8      	it	lt
 800187a:	4613      	movlt	r3, r2
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <npf_parse_format_spec>:

int npf_parse_format_spec(char const *format, npf_format_spec_t *out_spec) {
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  char const *cur = format;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	60fb      	str	r3, [r7, #12]

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
  out_spec->left_justified = 0;
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	2200      	movs	r2, #0
 800189a:	721a      	strb	r2, [r3, #8]
  out_spec->leading_zero_pad = 0;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	2200      	movs	r2, #0
 80018a0:	725a      	strb	r2, [r3, #9]
#endif
  out_spec->case_adjust = 'a'-'A'; // lowercase
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2220      	movs	r2, #32
 80018a6:	749a      	strb	r2, [r3, #18]
  out_spec->prepend = 0;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
  out_spec->alt_form = 0;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	2200      	movs	r2, #0
 80018b2:	705a      	strb	r2, [r3, #1]

  while (*++cur) { // cur points at the leading '%' character
 80018b4:	e04c      	b.n	8001950 <npf_parse_format_spec+0xc8>
    switch (*cur) { // Optional flags
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	3b20      	subs	r3, #32
 80018bc:	2b10      	cmp	r3, #16
 80018be:	d84f      	bhi.n	8001960 <npf_parse_format_spec+0xd8>
 80018c0:	a201      	add	r2, pc, #4	; (adr r2, 80018c8 <npf_parse_format_spec+0x40>)
 80018c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c6:	bf00      	nop
 80018c8:	08001939 	.word	0x08001939
 80018cc:	08001961 	.word	0x08001961
 80018d0:	08001961 	.word	0x08001961
 80018d4:	08001949 	.word	0x08001949
 80018d8:	08001961 	.word	0x08001961
 80018dc:	08001961 	.word	0x08001961
 80018e0:	08001961 	.word	0x08001961
 80018e4:	08001961 	.word	0x08001961
 80018e8:	08001961 	.word	0x08001961
 80018ec:	08001961 	.word	0x08001961
 80018f0:	08001961 	.word	0x08001961
 80018f4:	08001931 	.word	0x08001931
 80018f8:	08001961 	.word	0x08001961
 80018fc:	0800190d 	.word	0x0800190d
 8001900:	08001961 	.word	0x08001961
 8001904:	08001961 	.word	0x08001961
 8001908:	0800191b 	.word	0x0800191b
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
      case '-':
        out_spec->left_justified = '-';
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	222d      	movs	r2, #45	; 0x2d
 8001910:	721a      	strb	r2, [r3, #8]
        out_spec->leading_zero_pad = 0;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	2200      	movs	r2, #0
 8001916:	725a      	strb	r2, [r3, #9]
        continue;
 8001918:	e01a      	b.n	8001950 <npf_parse_format_spec+0xc8>
      case '0':
        out_spec->leading_zero_pad = !out_spec->left_justified;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	7a1b      	ldrb	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	bf0c      	ite	eq
 8001922:	2301      	moveq	r3, #1
 8001924:	2300      	movne	r3, #0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	461a      	mov	r2, r3
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	725a      	strb	r2, [r3, #9]
        continue;
 800192e:	e00f      	b.n	8001950 <npf_parse_format_spec+0xc8>
#endif
      case '+':
        out_spec->prepend = '+';
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	222b      	movs	r2, #43	; 0x2b
 8001934:	701a      	strb	r2, [r3, #0]
        continue;
 8001936:	e00b      	b.n	8001950 <npf_parse_format_spec+0xc8>
      case ' ':
        if (out_spec->prepend == 0) { out_spec->prepend = ' '; }
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d107      	bne.n	8001950 <npf_parse_format_spec+0xc8>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2220      	movs	r2, #32
 8001944:	701a      	strb	r2, [r3, #0]
        continue;
 8001946:	e003      	b.n	8001950 <npf_parse_format_spec+0xc8>
      case '#':
        out_spec->alt_form = '#';
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2223      	movs	r2, #35	; 0x23
 800194c:	705a      	strb	r2, [r3, #1]
        continue;
 800194e:	bf00      	nop
  while (*++cur) { // cur points at the leading '%' character
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3301      	adds	r3, #1
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1ab      	bne.n	80018b6 <npf_parse_format_spec+0x2e>
 800195e:	e000      	b.n	8001962 <npf_parse_format_spec+0xda>
      default: break;
    }
    break;
 8001960:	bf00      	nop
  }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
  out_spec->field_width_opt = NPF_FMT_SPEC_OPT_NONE;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	2200      	movs	r2, #0
 8001966:	709a      	strb	r2, [r3, #2]
  if (*cur == '*') {
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b2a      	cmp	r3, #42	; 0x2a
 800196e:	d106      	bne.n	800197e <npf_parse_format_spec+0xf6>
    out_spec->field_width_opt = NPF_FMT_SPEC_OPT_STAR;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2202      	movs	r2, #2
 8001974:	709a      	strb	r2, [r3, #2]
    ++cur;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3301      	adds	r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	e01d      	b.n	80019ba <npf_parse_format_spec+0x132>
  } else {
    out_spec->field_width = 0;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2200      	movs	r2, #0
 8001982:	605a      	str	r2, [r3, #4]
    while ((*cur >= '0') && (*cur <= '9')) {
 8001984:	e011      	b.n	80019aa <npf_parse_format_spec+0x122>
      out_spec->field_width_opt = NPF_FMT_SPEC_OPT_LITERAL;
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2201      	movs	r2, #1
 800198a:	709a      	strb	r2, [r3, #2]
      out_spec->field_width = (out_spec->field_width * 10) + (*cur++ - '0');
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	4619      	mov	r1, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	60fa      	str	r2, [r7, #12]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	3b30      	subs	r3, #48	; 0x30
 80019a4:	18ca      	adds	r2, r1, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	605a      	str	r2, [r3, #4]
    while ((*cur >= '0') && (*cur <= '9')) {
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b2f      	cmp	r3, #47	; 0x2f
 80019b0:	d903      	bls.n	80019ba <npf_parse_format_spec+0x132>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b39      	cmp	r3, #57	; 0x39
 80019b8:	d9e5      	bls.n	8001986 <npf_parse_format_spec+0xfe>
    }
  }
#endif

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
  out_spec->prec = 0;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
  out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	729a      	strb	r2, [r3, #10]
  if (*cur == '.') {
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b2e      	cmp	r3, #46	; 0x2e
 80019cc:	d133      	bne.n	8001a36 <npf_parse_format_spec+0x1ae>
    ++cur;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3301      	adds	r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
    if (*cur == '*') {
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b2a      	cmp	r3, #42	; 0x2a
 80019da:	d106      	bne.n	80019ea <npf_parse_format_spec+0x162>
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_STAR;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	2202      	movs	r2, #2
 80019e0:	729a      	strb	r2, [r3, #10]
      ++cur;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3301      	adds	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	e025      	b.n	8001a36 <npf_parse_format_spec+0x1ae>
    } else {
      if (*cur == '-') {
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b2d      	cmp	r3, #45	; 0x2d
 80019f0:	d106      	bne.n	8001a00 <npf_parse_format_spec+0x178>
        ++cur;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	3301      	adds	r3, #1
 80019f6:	60fb      	str	r3, [r7, #12]
        out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2200      	movs	r2, #0
 80019fc:	729a      	strb	r2, [r3, #10]
 80019fe:	e012      	b.n	8001a26 <npf_parse_format_spec+0x19e>
      } else {
        out_spec->prec_opt = NPF_FMT_SPEC_OPT_LITERAL;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2201      	movs	r2, #1
 8001a04:	729a      	strb	r2, [r3, #10]
      }
      while ((*cur >= '0') && (*cur <= '9')) {
 8001a06:	e00e      	b.n	8001a26 <npf_parse_format_spec+0x19e>
        out_spec->prec = (out_spec->prec * 10) + (*cur++ - '0');
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4619      	mov	r1, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	60fa      	str	r2, [r7, #12]
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	3b30      	subs	r3, #48	; 0x30
 8001a20:	18ca      	adds	r2, r1, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	60da      	str	r2, [r3, #12]
      while ((*cur >= '0') && (*cur <= '9')) {
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b2f      	cmp	r3, #47	; 0x2f
 8001a2c:	d903      	bls.n	8001a36 <npf_parse_format_spec+0x1ae>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b39      	cmp	r3, #57	; 0x39
 8001a34:	d9e8      	bls.n	8001a08 <npf_parse_format_spec+0x180>
      }
    }
  }
#endif

  out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_NONE;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	741a      	strb	r2, [r3, #16]
  switch (*cur++) { // Length modifier
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	60fa      	str	r2, [r7, #12]
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b6c      	cmp	r3, #108	; 0x6c
 8001a46:	d013      	beq.n	8001a70 <npf_parse_format_spec+0x1e8>
 8001a48:	2b6c      	cmp	r3, #108	; 0x6c
 8001a4a:	dc19      	bgt.n	8001a80 <npf_parse_format_spec+0x1f8>
 8001a4c:	2b4c      	cmp	r3, #76	; 0x4c
 8001a4e:	d013      	beq.n	8001a78 <npf_parse_format_spec+0x1f0>
 8001a50:	2b68      	cmp	r3, #104	; 0x68
 8001a52:	d115      	bne.n	8001a80 <npf_parse_format_spec+0x1f8>
    case 'h':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_SHORT;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2201      	movs	r2, #1
 8001a58:	741a      	strb	r2, [r3, #16]
      if (*cur == 'h') {
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b68      	cmp	r3, #104	; 0x68
 8001a60:	d112      	bne.n	8001a88 <npf_parse_format_spec+0x200>
        out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_CHAR;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2203      	movs	r2, #3
 8001a66:	741a      	strb	r2, [r3, #16]
        ++cur;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001a6e:	e00b      	b.n	8001a88 <npf_parse_format_spec+0x200>
    case 'l':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LONG;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2204      	movs	r2, #4
 8001a74:	741a      	strb	r2, [r3, #16]
      if (*cur == 'l') {
        out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LARGE_LONG_LONG;
        ++cur;
      }
#endif
      break;
 8001a76:	e008      	b.n	8001a8a <npf_parse_format_spec+0x202>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    case 'L':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LONG_DOUBLE;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	741a      	strb	r2, [r3, #16]
      break;
 8001a7e:	e004      	b.n	8001a8a <npf_parse_format_spec+0x202>
      break;
    case 't':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LARGE_PTRDIFFT;
      break;
#endif
    default: --cur; break;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	e000      	b.n	8001a8a <npf_parse_format_spec+0x202>
      break;
 8001a88:	bf00      	nop
  }

  switch (*cur++) { // Conversion specifier
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	60fa      	str	r2, [r7, #12]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	3b25      	subs	r3, #37	; 0x25
 8001a94:	2b53      	cmp	r3, #83	; 0x53
 8001a96:	f200 80e8 	bhi.w	8001c6a <npf_parse_format_spec+0x3e2>
 8001a9a:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <npf_parse_format_spec+0x218>)
 8001a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa0:	08001bf1 	.word	0x08001bf1
 8001aa4:	08001c6b 	.word	0x08001c6b
 8001aa8:	08001c6b 	.word	0x08001c6b
 8001aac:	08001c6b 	.word	0x08001c6b
 8001ab0:	08001c6b 	.word	0x08001c6b
 8001ab4:	08001c6b 	.word	0x08001c6b
 8001ab8:	08001c6b 	.word	0x08001c6b
 8001abc:	08001c6b 	.word	0x08001c6b
 8001ac0:	08001c6b 	.word	0x08001c6b
 8001ac4:	08001c6b 	.word	0x08001c6b
 8001ac8:	08001c6b 	.word	0x08001c6b
 8001acc:	08001c6b 	.word	0x08001c6b
 8001ad0:	08001c6b 	.word	0x08001c6b
 8001ad4:	08001c6b 	.word	0x08001c6b
 8001ad8:	08001c6b 	.word	0x08001c6b
 8001adc:	08001c6b 	.word	0x08001c6b
 8001ae0:	08001c6b 	.word	0x08001c6b
 8001ae4:	08001c6b 	.word	0x08001c6b
 8001ae8:	08001c6b 	.word	0x08001c6b
 8001aec:	08001c6b 	.word	0x08001c6b
 8001af0:	08001c6b 	.word	0x08001c6b
 8001af4:	08001c6b 	.word	0x08001c6b
 8001af8:	08001c6b 	.word	0x08001c6b
 8001afc:	08001c6b 	.word	0x08001c6b
 8001b00:	08001c6b 	.word	0x08001c6b
 8001b04:	08001c6b 	.word	0x08001c6b
 8001b08:	08001c6b 	.word	0x08001c6b
 8001b0c:	08001c6b 	.word	0x08001c6b
 8001b10:	08001c6b 	.word	0x08001c6b
 8001b14:	08001c6b 	.word	0x08001c6b
 8001b18:	08001c6b 	.word	0x08001c6b
 8001b1c:	08001c6b 	.word	0x08001c6b
 8001b20:	08001c6b 	.word	0x08001c6b
 8001b24:	08001c41 	.word	0x08001c41
 8001b28:	08001c6b 	.word	0x08001c6b
 8001b2c:	08001c6b 	.word	0x08001c6b
 8001b30:	08001c6b 	.word	0x08001c6b
 8001b34:	08001c6b 	.word	0x08001c6b
 8001b38:	08001c6b 	.word	0x08001c6b
 8001b3c:	08001c6b 	.word	0x08001c6b
 8001b40:	08001c6b 	.word	0x08001c6b
 8001b44:	08001c6b 	.word	0x08001c6b
 8001b48:	08001c6b 	.word	0x08001c6b
 8001b4c:	08001c6b 	.word	0x08001c6b
 8001b50:	08001c6b 	.word	0x08001c6b
 8001b54:	08001c6b 	.word	0x08001c6b
 8001b58:	08001c6b 	.word	0x08001c6b
 8001b5c:	08001c6b 	.word	0x08001c6b
 8001b60:	08001c6b 	.word	0x08001c6b
 8001b64:	08001c6b 	.word	0x08001c6b
 8001b68:	08001c6b 	.word	0x08001c6b
 8001b6c:	08001c33 	.word	0x08001c33
 8001b70:	08001c6b 	.word	0x08001c6b
 8001b74:	08001c6b 	.word	0x08001c6b
 8001b78:	08001c6b 	.word	0x08001c6b
 8001b7c:	08001c6b 	.word	0x08001c6b
 8001b80:	08001c6b 	.word	0x08001c6b
 8001b84:	08001c6b 	.word	0x08001c6b
 8001b88:	08001c6b 	.word	0x08001c6b
 8001b8c:	08001c6b 	.word	0x08001c6b
 8001b90:	08001c6b 	.word	0x08001c6b
 8001b94:	08001c6b 	.word	0x08001c6b
 8001b98:	08001bff 	.word	0x08001bff
 8001b9c:	08001c1b 	.word	0x08001c1b
 8001ba0:	08001c6b 	.word	0x08001c6b
 8001ba4:	08001c47 	.word	0x08001c47
 8001ba8:	08001c6b 	.word	0x08001c6b
 8001bac:	08001c6b 	.word	0x08001c6b
 8001bb0:	08001c1b 	.word	0x08001c1b
 8001bb4:	08001c6b 	.word	0x08001c6b
 8001bb8:	08001c6b 	.word	0x08001c6b
 8001bbc:	08001c6b 	.word	0x08001c6b
 8001bc0:	08001c6b 	.word	0x08001c6b
 8001bc4:	08001c6b 	.word	0x08001c6b
 8001bc8:	08001c23 	.word	0x08001c23
 8001bcc:	08001c5d 	.word	0x08001c5d
 8001bd0:	08001c6b 	.word	0x08001c6b
 8001bd4:	08001c6b 	.word	0x08001c6b
 8001bd8:	08001c0d 	.word	0x08001c0d
 8001bdc:	08001c6b 	.word	0x08001c6b
 8001be0:	08001c2b 	.word	0x08001c2b
 8001be4:	08001c6b 	.word	0x08001c6b
 8001be8:	08001c6b 	.word	0x08001c6b
 8001bec:	08001c39 	.word	0x08001c39
    case '%':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_PERCENT;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8001bfc:	e038      	b.n	8001c70 <npf_parse_format_spec+0x3e8>
    case 'c':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_CHAR;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2201      	movs	r2, #1
 8001c02:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	2200      	movs	r2, #0
 8001c08:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8001c0a:	e031      	b.n	8001c70 <npf_parse_format_spec+0x3e8>
    case 's':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_STRING;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
      out_spec->leading_zero_pad = 0;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2200      	movs	r2, #0
 8001c16:	725a      	strb	r2, [r3, #9]
#endif
      break;
 8001c18:	e02a      	b.n	8001c70 <npf_parse_format_spec+0x3e8>

    case 'i':
    case 'd':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_SIGNED_INT;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	745a      	strb	r2, [r3, #17]
      break;
 8001c20:	e026      	b.n	8001c70 <npf_parse_format_spec+0x3e8>

    case 'o':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_OCTAL;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2204      	movs	r2, #4
 8001c26:	745a      	strb	r2, [r3, #17]
      break;
 8001c28:	e022      	b.n	8001c70 <npf_parse_format_spec+0x3e8>
    case 'u':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_UNSIGNED_INT;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2206      	movs	r2, #6
 8001c2e:	745a      	strb	r2, [r3, #17]
      break;
 8001c30:	e01e      	b.n	8001c70 <npf_parse_format_spec+0x3e8>

    case 'X':
      out_spec->case_adjust = 0;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2200      	movs	r2, #0
 8001c36:	749a      	strb	r2, [r3, #18]
    case 'x':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_HEX_INT;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2205      	movs	r2, #5
 8001c3c:	745a      	strb	r2, [r3, #17]
      break;
 8001c3e:	e017      	b.n	8001c70 <npf_parse_format_spec+0x3e8>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    case 'F':
      out_spec->case_adjust = 0;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2200      	movs	r2, #0
 8001c44:	749a      	strb	r2, [r3, #18]
    case 'f':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_FLOAT_DECIMAL;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	2208      	movs	r2, #8
 8001c4a:	745a      	strb	r2, [r3, #17]
      if (out_spec->prec_opt == NPF_FMT_SPEC_OPT_NONE) { out_spec->prec = 6; }
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	7a9b      	ldrb	r3, [r3, #10]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10c      	bne.n	8001c6e <npf_parse_format_spec+0x3e6>
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	2206      	movs	r2, #6
 8001c58:	60da      	str	r2, [r3, #12]
      break;
 8001c5a:	e008      	b.n	8001c6e <npf_parse_format_spec+0x3e6>
#endif
      break;
#endif

    case 'p':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_POINTER;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	2207      	movs	r2, #7
 8001c60:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2200      	movs	r2, #0
 8001c66:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8001c68:	e002      	b.n	8001c70 <npf_parse_format_spec+0x3e8>
    case 'b':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_BINARY;
      break;
#endif

    default: return 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e003      	b.n	8001c76 <npf_parse_format_spec+0x3ee>
      break;
 8001c6e:	bf00      	nop
  }

  return (int)(cur - format);
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	1ad3      	subs	r3, r2, r3
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop

08001c84 <npf_itoa_rev>:

int npf_itoa_rev(char *buf, npf_int_t i) {
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  int n = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
  int const sign = (i >= 0) ? 1 : -1;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db01      	blt.n	8001c9c <npf_itoa_rev+0x18>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e001      	b.n	8001ca0 <npf_itoa_rev+0x1c>
 8001c9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca0:	60bb      	str	r3, [r7, #8]
  do { *buf++ = (char)('0' + (sign * (i % 10))); i /= 10; ++n; } while (i);
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	b2d8      	uxtb	r0, r3
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	4b14      	ldr	r3, [pc, #80]	; (8001cfc <npf_itoa_rev+0x78>)
 8001caa:	fb83 1302 	smull	r1, r3, r3, r2
 8001cae:	1099      	asrs	r1, r3, #2
 8001cb0:	17d3      	asrs	r3, r2, #31
 8001cb2:	1ac9      	subs	r1, r1, r3
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	1ad1      	subs	r1, r2, r3
 8001cbe:	b2cb      	uxtb	r3, r1
 8001cc0:	fb10 f303 	smulbb	r3, r0, r3
 8001cc4:	b2da      	uxtb	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	1c59      	adds	r1, r3, #1
 8001cca:	6079      	str	r1, [r7, #4]
 8001ccc:	3230      	adds	r2, #48	; 0x30
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	4a09      	ldr	r2, [pc, #36]	; (8001cfc <npf_itoa_rev+0x78>)
 8001cd6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cda:	1092      	asrs	r2, r2, #2
 8001cdc:	17db      	asrs	r3, r3, #31
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1d9      	bne.n	8001ca2 <npf_itoa_rev+0x1e>
  return n;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	66666667 	.word	0x66666667

08001d00 <npf_utoa_rev>:

int npf_utoa_rev(char *buf, npf_uint_t i, unsigned base, unsigned case_adj) {
 8001d00:	b480      	push	{r7}
 8001d02:	b087      	sub	sp, #28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	603b      	str	r3, [r7, #0]
  int n = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  do {
    unsigned const d = (unsigned)(i % base);
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	fbb3 f2f2 	udiv	r2, r3, r2
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	fb01 f202 	mul.w	r2, r1, r2
 8001d20:	1a9b      	subs	r3, r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
    *buf++ = (char)((d < 10) ? ('0' + d) : ('A' + case_adj + (d - 10)));
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	2b09      	cmp	r3, #9
 8001d28:	d804      	bhi.n	8001d34 <npf_utoa_rev+0x34>
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	3330      	adds	r3, #48	; 0x30
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	e007      	b.n	8001d44 <npf_utoa_rev+0x44>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	3337      	adds	r3, #55	; 0x37
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1c59      	adds	r1, r3, #1
 8001d48:	60f9      	str	r1, [r7, #12]
 8001d4a:	701a      	strb	r2, [r3, #0]
    i /= base;
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d54:	60bb      	str	r3, [r7, #8]
    ++n;
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
  } while (i);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1d7      	bne.n	8001d12 <npf_utoa_rev+0x12>
  return n;
 8001d62:	697b      	ldr	r3, [r7, #20]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	371c      	adds	r7, #28
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <npf_fsplit_abs>:
  NPF_FRACTION_BIN_DIGITS = 64,
  NPF_MAX_FRACTION_DEC_DIGITS = 8
};

int npf_fsplit_abs(float f, uint64_t *out_int_part, uint64_t *out_frac_part,
                   int *out_frac_base10_neg_exp) {
 8001d70:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001d74:	b0af      	sub	sp, #188	; 0xbc
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
 8001d7c:	6738      	str	r0, [r7, #112]	; 0x70
 8001d7e:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001d80:	66ba      	str	r2, [r7, #104]	; 0x68
     http://0x80.pl/notesen/2015-12-29-float-to-string.html
     grisu2 (https://bit.ly/2JgMggX) and ryu (https://bit.ly/2RLXSg0)
     are fast + precise + round, but require large lookup tables. */

  uint32_t f_bits; { // union-cast is UB, let compiler optimize byte-copy loop.
    char const *src = (char const *)&f;
 8001d82:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d86:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    char *dst = (char *)&f_bits;
 8001d8a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (unsigned i = 0; i < sizeof(f_bits); ++i) { dst[i] = src[i]; }
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d98:	e010      	b.n	8001dbc <npf_fsplit_abs+0x4c>
 8001d9a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001d9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001da2:	18d1      	adds	r1, r2, r3
 8001da4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001da8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dac:	441a      	add	r2, r3
 8001dae:	780b      	ldrb	r3, [r1, #0]
 8001db0:	7013      	strb	r3, [r2, #0]
 8001db2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001db6:	3301      	adds	r3, #1
 8001db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001dbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d9ea      	bls.n	8001d9a <npf_fsplit_abs+0x2a>
  }

  int const exponent =
    ((int)((f_bits >> NPF_MANTISSA_BITS) & ((1u << NPF_EXPONENT_BITS) - 1u)) -
 8001dc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dc6:	0ddb      	lsrs	r3, r3, #23
 8001dc8:	b2db      	uxtb	r3, r3
  int const exponent =
 8001dca:	3b96      	subs	r3, #150	; 0x96
 8001dcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      NPF_EXPONENT_BIAS) - NPF_MANTISSA_BITS;

  if (exponent >= (64 - NPF_MANTISSA_BITS)) { return 0; } // value is out of range
 8001dd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dd4:	2b28      	cmp	r3, #40	; 0x28
 8001dd6:	dd01      	ble.n	8001ddc <npf_fsplit_abs+0x6c>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e15b      	b.n	8002094 <npf_fsplit_abs+0x324>

  uint32_t const implicit_one = 1u << NPF_MANTISSA_BITS;
 8001ddc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001de0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t const mantissa = f_bits & (implicit_one - 1);
 8001de4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001de8:	1e5a      	subs	r2, r3, #1
 8001dea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dec:	4013      	ands	r3, r2
 8001dee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t const mantissa_norm = mantissa | implicit_one;
 8001df2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  if (exponent > 0) {
 8001e00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	dd18      	ble.n	8001e3a <npf_fsplit_abs+0xca>
    *out_int_part = (uint64_t)mantissa_norm << exponent;
 8001e08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	469a      	mov	sl, r3
 8001e10:	4693      	mov	fp, r2
 8001e12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001e16:	f1a1 0320 	sub.w	r3, r1, #32
 8001e1a:	f1c1 0220 	rsb	r2, r1, #32
 8001e1e:	fa0b f501 	lsl.w	r5, fp, r1
 8001e22:	fa0a f303 	lsl.w	r3, sl, r3
 8001e26:	431d      	orrs	r5, r3
 8001e28:	fa2a f202 	lsr.w	r2, sl, r2
 8001e2c:	4315      	orrs	r5, r2
 8001e2e:	fa0a f401 	lsl.w	r4, sl, r1
 8001e32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e34:	e9c3 4500 	strd	r4, r5, [r3]
 8001e38:	e029      	b.n	8001e8e <npf_fsplit_abs+0x11e>
  } else if (exponent < 0) {
 8001e3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	da1b      	bge.n	8001e7a <npf_fsplit_abs+0x10a>
    if (-exponent > NPF_MANTISSA_BITS) {
 8001e42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e46:	f113 0f17 	cmn.w	r3, #23
 8001e4a:	da07      	bge.n	8001e5c <npf_fsplit_abs+0xec>
      *out_int_part = 0;
 8001e4c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	e9c1 2300 	strd	r2, r3, [r1]
 8001e5a:	e018      	b.n	8001e8e <npf_fsplit_abs+0x11e>
    } else {
      *out_int_part = mantissa_norm >> -exponent;
 8001e5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e60:	425a      	negs	r2, r3
 8001e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e66:	40d3      	lsrs	r3, r2
 8001e68:	2200      	movs	r2, #0
 8001e6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e6c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001e6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e70:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8001e74:	e9c3 1200 	strd	r1, r2, [r3]
 8001e78:	e009      	b.n	8001e8e <npf_fsplit_abs+0x11e>
    }
  } else {
    *out_int_part = mantissa_norm;
 8001e7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e7e:	2200      	movs	r2, #0
 8001e80:	643b      	str	r3, [r7, #64]	; 0x40
 8001e82:	647a      	str	r2, [r7, #68]	; 0x44
 8001e84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e86:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001e8a:	e9c3 1200 	strd	r1, r2, [r3]
  }

  uint64_t frac; {
    int const shift = NPF_FRACTION_BIN_DIGITS + exponent - 4;
 8001e8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e92:	333c      	adds	r3, #60	; 0x3c
 8001e94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if ((shift >= (NPF_FRACTION_BIN_DIGITS - 4)) || (shift < 0)) {
 8001e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e9c:	2b3b      	cmp	r3, #59	; 0x3b
 8001e9e:	dc03      	bgt.n	8001ea8 <npf_fsplit_abs+0x138>
 8001ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	da06      	bge.n	8001eb6 <npf_fsplit_abs+0x146>
      frac = 0;
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	f04f 0300 	mov.w	r3, #0
 8001eb0:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8001eb4:	e022      	b.n	8001efc <npf_fsplit_abs+0x18c>
    } else {
      frac = ((uint64_t)mantissa_norm) << shift;
 8001eb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eba:	2200      	movs	r2, #0
 8001ebc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ebe:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ec0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001ec4:	f1a1 0320 	sub.w	r3, r1, #32
 8001ec8:	f1c1 0220 	rsb	r2, r1, #32
 8001ecc:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001ed0:	4628      	mov	r0, r5
 8001ed2:	4088      	lsls	r0, r1
 8001ed4:	6678      	str	r0, [r7, #100]	; 0x64
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	fa00 f303 	lsl.w	r3, r0, r3
 8001edc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001ede:	4318      	orrs	r0, r3
 8001ee0:	6678      	str	r0, [r7, #100]	; 0x64
 8001ee2:	4623      	mov	r3, r4
 8001ee4:	fa23 f202 	lsr.w	r2, r3, r2
 8001ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eea:	4313      	orrs	r3, r2
 8001eec:	667b      	str	r3, [r7, #100]	; 0x64
 8001eee:	4623      	mov	r3, r4
 8001ef0:	408b      	lsls	r3, r1
 8001ef2:	663b      	str	r3, [r7, #96]	; 0x60
 8001ef4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001ef8:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    }
    // multiply off the leading one's digit
    frac &= 0x0fffffffffffffffllu;
 8001efc:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001f00:	62ba      	str	r2, [r7, #40]	; 0x28
 8001f02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f08:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001f0c:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    frac *= 10;
 8001f10:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8001f14:	4622      	mov	r2, r4
 8001f16:	462b      	mov	r3, r5
 8001f18:	f04f 0000 	mov.w	r0, #0
 8001f1c:	f04f 0100 	mov.w	r1, #0
 8001f20:	0099      	lsls	r1, r3, #2
 8001f22:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f26:	0090      	lsls	r0, r2, #2
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	eb12 0804 	adds.w	r8, r2, r4
 8001f30:	eb43 0905 	adc.w	r9, r3, r5
 8001f34:	eb18 0308 	adds.w	r3, r8, r8
 8001f38:	623b      	str	r3, [r7, #32]
 8001f3a:	eb49 0309 	adc.w	r3, r9, r9
 8001f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f44:	e9c7 892a 	strd	r8, r9, [r7, #168]	; 0xa8
  }

  { // Count the number of 0s at the beginning of the fractional part.
    int frac_base10_neg_exp = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    while (frac && ((frac >> (NPF_FRACTION_BIN_DIGITS - 4))) == 0) {
 8001f4e:	e02f      	b.n	8001fb0 <npf_fsplit_abs+0x240>
      ++frac_base10_neg_exp;
 8001f50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f54:	3301      	adds	r3, #1
 8001f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      frac &= 0x0fffffffffffffffllu;
 8001f5a:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001f5e:	61ba      	str	r2, [r7, #24]
 8001f60:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001f6a:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
      frac *= 10;
 8001f6e:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8001f72:	4622      	mov	r2, r4
 8001f74:	462b      	mov	r3, r5
 8001f76:	f04f 0000 	mov.w	r0, #0
 8001f7a:	f04f 0100 	mov.w	r1, #0
 8001f7e:	0099      	lsls	r1, r3, #2
 8001f80:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f84:	0090      	lsls	r0, r2, #2
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	1911      	adds	r1, r2, r4
 8001f8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f8e:	416b      	adcs	r3, r5
 8001f90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f92:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8001f96:	460b      	mov	r3, r1
 8001f98:	18db      	adds	r3, r3, r3
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	eb42 0303 	adc.w	r3, r2, r3
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001fa8:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8001fac:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    while (frac && ((frac >> (NPF_FRACTION_BIN_DIGITS - 4))) == 0) {
 8001fb0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	d00a      	beq.n	8001fce <npf_fsplit_abs+0x25e>
 8001fb8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001fbc:	f04f 0000 	mov.w	r0, #0
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	0f18      	lsrs	r0, r3, #28
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	ea50 0301 	orrs.w	r3, r0, r1
 8001fcc:	d0c0      	beq.n	8001f50 <npf_fsplit_abs+0x1e0>
    }
    *out_frac_base10_neg_exp = frac_base10_neg_exp;
 8001fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fd0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001fd4:	601a      	str	r2, [r3, #0]
  }

  { // Convert the fractional part to base 10.
    unsigned frac_part = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    for (int i = 0; frac && (i < NPF_MAX_FRACTION_DEC_DIGITS); ++i) {
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001fe2:	e044      	b.n	800206e <npf_fsplit_abs+0x2fe>
      frac_part *= 10;
 8001fe4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      frac_part += (unsigned)(frac >> (NPF_FRACTION_BIN_DIGITS - 4));
 8001ff4:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	0f0a      	lsrs	r2, r1, #28
 8002002:	2300      	movs	r3, #0
 8002004:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002008:	4413      	add	r3, r2
 800200a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      frac &= 0x0fffffffffffffffllu;
 800200e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002012:	60ba      	str	r2, [r7, #8]
 8002014:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800201e:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
      frac *= 10;
 8002022:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8002026:	4622      	mov	r2, r4
 8002028:	462b      	mov	r3, r5
 800202a:	f04f 0000 	mov.w	r0, #0
 800202e:	f04f 0100 	mov.w	r1, #0
 8002032:	0099      	lsls	r1, r3, #2
 8002034:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002038:	0090      	lsls	r0, r2, #2
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	1911      	adds	r1, r2, r4
 8002040:	6539      	str	r1, [r7, #80]	; 0x50
 8002042:	416b      	adcs	r3, r5
 8002044:	657b      	str	r3, [r7, #84]	; 0x54
 8002046:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800204a:	460b      	mov	r3, r1
 800204c:	18db      	adds	r3, r3, r3
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	4613      	mov	r3, r2
 8002052:	eb42 0303 	adc.w	r3, r2, r3
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	e9d7 3400 	ldrd	r3, r4, [r7]
 800205c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8002060:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    for (int i = 0; frac && (i < NPF_MAX_FRACTION_DEC_DIGITS); ++i) {
 8002064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002068:	3301      	adds	r3, #1
 800206a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800206e:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002072:	4313      	orrs	r3, r2
 8002074:	d003      	beq.n	800207e <npf_fsplit_abs+0x30e>
 8002076:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800207a:	2b07      	cmp	r3, #7
 800207c:	ddb2      	ble.n	8001fe4 <npf_fsplit_abs+0x274>
    }
    *out_frac_part = frac_part;
 800207e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002082:	2200      	movs	r2, #0
 8002084:	633b      	str	r3, [r7, #48]	; 0x30
 8002086:	637a      	str	r2, [r7, #52]	; 0x34
 8002088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800208a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800208e:	e9c3 1200 	strd	r1, r2, [r3]
  }
  return 1;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	37bc      	adds	r7, #188	; 0xbc
 8002098:	46bd      	mov	sp, r7
 800209a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800209e:	4770      	bx	lr

080020a0 <npf_ftoa_rev>:

int npf_ftoa_rev(char *buf, float f, char case_adj, int *out_frac_chars) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b092      	sub	sp, #72	; 0x48
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80020ac:	460b      	mov	r3, r1
 80020ae:	603a      	str	r2, [r7, #0]
 80020b0:	71fb      	strb	r3, [r7, #7]
  uint32_t f_bits; { // union-cast is UB, let compiler optimize byte-copy loop.
    char const *src = (char const *)&f;
 80020b2:	f107 0308 	add.w	r3, r7, #8
 80020b6:	633b      	str	r3, [r7, #48]	; 0x30
    char *dst = (char *)&f_bits;
 80020b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (unsigned i = 0; i < sizeof(f_bits); ++i) { dst[i] = src[i]; }
 80020be:	2300      	movs	r3, #0
 80020c0:	647b      	str	r3, [r7, #68]	; 0x44
 80020c2:	e00a      	b.n	80020da <npf_ftoa_rev+0x3a>
 80020c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c8:	441a      	add	r2, r3
 80020ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ce:	440b      	add	r3, r1
 80020d0:	7812      	ldrb	r2, [r2, #0]
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d6:	3301      	adds	r3, #1
 80020d8:	647b      	str	r3, [r7, #68]	; 0x44
 80020da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d9f1      	bls.n	80020c4 <npf_ftoa_rev+0x24>
  }

  if ((uint8_t)(f_bits >> 23) == 0xFF) {
 80020e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e2:	0ddb      	lsrs	r3, r3, #23
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2bff      	cmp	r3, #255	; 0xff
 80020e8:	d130      	bne.n	800214c <npf_ftoa_rev+0xac>
    if (f_bits & 0x7fffff) {
 80020ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d014      	beq.n	800211e <npf_ftoa_rev+0x7e>
      for (int i = 0; i < 3; ++i) { *buf++ = (char)("NAN"[i] + case_adj); }
 80020f4:	2300      	movs	r3, #0
 80020f6:	643b      	str	r3, [r7, #64]	; 0x40
 80020f8:	e00d      	b.n	8002116 <npf_ftoa_rev+0x76>
 80020fa:	4a56      	ldr	r2, [pc, #344]	; (8002254 <npf_ftoa_rev+0x1b4>)
 80020fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020fe:	4413      	add	r3, r2
 8002100:	7819      	ldrb	r1, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	60fa      	str	r2, [r7, #12]
 8002108:	79fa      	ldrb	r2, [r7, #7]
 800210a:	440a      	add	r2, r1
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	701a      	strb	r2, [r3, #0]
 8002110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002112:	3301      	adds	r3, #1
 8002114:	643b      	str	r3, [r7, #64]	; 0x40
 8002116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002118:	2b02      	cmp	r3, #2
 800211a:	ddee      	ble.n	80020fa <npf_ftoa_rev+0x5a>
 800211c:	e013      	b.n	8002146 <npf_ftoa_rev+0xa6>
    } else {
      for (int i = 0; i < 3; ++i) { *buf++ = (char)("FNI"[i] + case_adj); }
 800211e:	2300      	movs	r3, #0
 8002120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002122:	e00d      	b.n	8002140 <npf_ftoa_rev+0xa0>
 8002124:	4a4c      	ldr	r2, [pc, #304]	; (8002258 <npf_ftoa_rev+0x1b8>)
 8002126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002128:	4413      	add	r3, r2
 800212a:	7819      	ldrb	r1, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	60fa      	str	r2, [r7, #12]
 8002132:	79fa      	ldrb	r2, [r7, #7]
 8002134:	440a      	add	r2, r1
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	701a      	strb	r2, [r3, #0]
 800213a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800213c:	3301      	adds	r3, #1
 800213e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002142:	2b02      	cmp	r3, #2
 8002144:	ddee      	ble.n	8002124 <npf_ftoa_rev+0x84>
    }
    return -3;
 8002146:	f06f 0302 	mvn.w	r3, #2
 800214a:	e07f      	b.n	800224c <npf_ftoa_rev+0x1ac>
  }

  uint64_t int_part, frac_part;
  int frac_base10_neg_exp;
  if (npf_fsplit_abs(f, &int_part, &frac_part, &frac_base10_neg_exp) == 0) {
 800214c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002150:	f107 0214 	add.w	r2, r7, #20
 8002154:	f107 0118 	add.w	r1, r7, #24
 8002158:	f107 0320 	add.w	r3, r7, #32
 800215c:	4618      	mov	r0, r3
 800215e:	eeb0 0a67 	vmov.f32	s0, s15
 8002162:	f7ff fe05 	bl	8001d70 <npf_fsplit_abs>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d116      	bne.n	800219a <npf_ftoa_rev+0xfa>
    for (int i = 0; i < 3; ++i) { *buf++ = (char)("ROO"[i] + case_adj); }
 800216c:	2300      	movs	r3, #0
 800216e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002170:	e00d      	b.n	800218e <npf_ftoa_rev+0xee>
 8002172:	4a3a      	ldr	r2, [pc, #232]	; (800225c <npf_ftoa_rev+0x1bc>)
 8002174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002176:	4413      	add	r3, r2
 8002178:	7819      	ldrb	r1, [r3, #0]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	60fa      	str	r2, [r7, #12]
 8002180:	79fa      	ldrb	r2, [r7, #7]
 8002182:	440a      	add	r2, r1
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800218a:	3301      	adds	r3, #1
 800218c:	63bb      	str	r3, [r7, #56]	; 0x38
 800218e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002190:	2b02      	cmp	r3, #2
 8002192:	ddee      	ble.n	8002172 <npf_ftoa_rev+0xd2>
    return -3;
 8002194:	f06f 0302 	mvn.w	r3, #2
 8002198:	e058      	b.n	800224c <npf_ftoa_rev+0x1ac>
  }

  char *dst = buf;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	637b      	str	r3, [r7, #52]	; 0x34

  while (frac_part) { // write the fractional digits
 800219e:	e01a      	b.n	80021d6 <npf_ftoa_rev+0x136>
    *dst++ = (char)('0' + (frac_part % 10));
 80021a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021a4:	f04f 020a 	mov.w	r2, #10
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	f7fe fd4c 	bl	8000c48 <__aeabi_uldivmod>
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021b4:	1c59      	adds	r1, r3, #1
 80021b6:	6379      	str	r1, [r7, #52]	; 0x34
 80021b8:	3230      	adds	r2, #48	; 0x30
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]
    frac_part /= 10;
 80021be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021c2:	f04f 020a 	mov.w	r2, #10
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	f7fe fd3d 	bl	8000c48 <__aeabi_uldivmod>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	e9c7 2306 	strd	r2, r3, [r7, #24]
  while (frac_part) { // write the fractional digits
 80021d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	d1e0      	bne.n	80021a0 <npf_ftoa_rev+0x100>
  }

  // write the 0 digits between the . and the first fractional digit
  while (frac_base10_neg_exp-- > 0) { *dst++ = '0'; }
 80021de:	e004      	b.n	80021ea <npf_ftoa_rev+0x14a>
 80021e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021e2:	1c5a      	adds	r2, r3, #1
 80021e4:	637a      	str	r2, [r7, #52]	; 0x34
 80021e6:	2230      	movs	r2, #48	; 0x30
 80021e8:	701a      	strb	r2, [r3, #0]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	1e5a      	subs	r2, r3, #1
 80021ee:	617a      	str	r2, [r7, #20]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	dcf5      	bgt.n	80021e0 <npf_ftoa_rev+0x140>
  *out_frac_chars = (int)(dst - buf);
 80021f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	1ad2      	subs	r2, r2, r3
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	601a      	str	r2, [r3, #0]
  *dst++ = '.';
 80021fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	637a      	str	r2, [r7, #52]	; 0x34
 8002204:	222e      	movs	r2, #46	; 0x2e
 8002206:	701a      	strb	r2, [r3, #0]

  // write the integer digits
  do { *dst++ = (char)('0' + (int_part % 10)); int_part /= 10; } while (int_part);
 8002208:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800220c:	f04f 020a 	mov.w	r2, #10
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	f7fe fd18 	bl	8000c48 <__aeabi_uldivmod>
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221c:	1c59      	adds	r1, r3, #1
 800221e:	6379      	str	r1, [r7, #52]	; 0x34
 8002220:	3230      	adds	r2, #48	; 0x30
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800222a:	f04f 020a 	mov.w	r2, #10
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	f7fe fd09 	bl	8000c48 <__aeabi_uldivmod>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800223e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002242:	4313      	orrs	r3, r2
 8002244:	d1e0      	bne.n	8002208 <npf_ftoa_rev+0x168>
  return (int)(dst - buf);
 8002246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	1ad3      	subs	r3, r2, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	3748      	adds	r7, #72	; 0x48
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	0800c660 	.word	0x0800c660
 8002258:	0800c664 	.word	0x0800c664
 800225c:	0800c668 	.word	0x0800c668

08002260 <npf_bufputc>:
  #undef NPF_CLZ
#endif
}
#endif

void npf_bufputc(int c, void *ctx) {
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  npf_bufputc_ctx_t *bpc = (npf_bufputc_ctx_t *)ctx;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	60fb      	str	r3, [r7, #12]
  if (bpc->cur < bpc->len) { bpc->dst[bpc->cur++] = (char)c; }
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	429a      	cmp	r2, r3
 8002278:	d20a      	bcs.n	8002290 <npf_bufputc+0x30>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	1c58      	adds	r0, r3, #1
 8002284:	68f9      	ldr	r1, [r7, #12]
 8002286:	6088      	str	r0, [r1, #8]
 8002288:	4413      	add	r3, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	701a      	strb	r2, [r3, #0]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <npf_bufputc_nop>:

void npf_bufputc_nop(int c, void *ctx) { (void)c; (void)ctx; }
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <npf_putc_cnt>:
  npf_putc pc;
  void *ctx;
  int n;
} npf_cnt_putc_ctx_t;

static void npf_putc_cnt(int c, void *ctx) {
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b084      	sub	sp, #16
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
  npf_cnt_putc_ctx_t *pc_cnt = (npf_cnt_putc_ctx_t *)ctx;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	60fb      	str	r3, [r7, #12]
  ++pc_cnt->n;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	609a      	str	r2, [r3, #8]
  pc_cnt->pc(c, pc_cnt->ctx); // sibling-call optimization
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	6852      	ldr	r2, [r2, #4]
 80022d2:	4611      	mov	r1, r2
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	4798      	blx	r3
}
 80022d8:	bf00      	nop
 80022da:	3710      	adds	r7, #16
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <npf_vpprintf>:
  case NPF_FMT_SPEC_LEN_MOD_##MOD: val = (CAST_TO)va_arg(args, EXTRACT_AS); break

#define NPF_WRITEBACK(MOD, TYPE) \
  case NPF_FMT_SPEC_LEN_MOD_##MOD: *(va_arg(args, TYPE *)) = (TYPE)pc_cnt.n; break

int npf_vpprintf(npf_putc pc, void *pc_ctx, char const *format, va_list args) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b0a8      	sub	sp, #160	; 0xa0
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
 80022ec:	603b      	str	r3, [r7, #0]
  npf_format_spec_t fs;
  char const *cur = format;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  npf_cnt_putc_ctx_t pc_cnt;
  pc_cnt.pc = pc;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	637b      	str	r3, [r7, #52]	; 0x34
  pc_cnt.ctx = pc_ctx;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	63bb      	str	r3, [r7, #56]	; 0x38
  pc_cnt.n = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	63fb      	str	r3, [r7, #60]	; 0x3c

  while (*cur) {
 8002300:	e3a2      	b.n	8002a48 <npf_vpprintf+0x768>
    int const fs_len = (*cur != '%') ? 0 : npf_parse_format_spec(cur, &fs);
 8002302:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b25      	cmp	r3, #37	; 0x25
 800230a:	d108      	bne.n	800231e <npf_vpprintf+0x3e>
 800230c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002310:	4619      	mov	r1, r3
 8002312:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002316:	f7ff fab7 	bl	8001888 <npf_parse_format_spec>
 800231a:	4603      	mov	r3, r0
 800231c:	e000      	b.n	8002320 <npf_vpprintf+0x40>
 800231e:	2300      	movs	r3, #0
 8002320:	663b      	str	r3, [r7, #96]	; 0x60
    if (!fs_len) { NPF_PUTC(*cur++); continue; }
 8002322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10d      	bne.n	8002344 <npf_vpprintf+0x64>
 8002328:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800233a:	4619      	mov	r1, r3
 800233c:	4610      	mov	r0, r2
 800233e:	f7ff ffb8 	bl	80022b2 <npf_putc_cnt>
 8002342:	e381      	b.n	8002a48 <npf_vpprintf+0x768>
    cur += fs_len;
 8002344:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002346:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800234a:	4413      	add	r3, r2
 800234c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    // Extract star-args immediately
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    if (fs.field_width_opt == NPF_FMT_SPEC_OPT_STAR) {
 8002350:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002354:	2b02      	cmp	r3, #2
 8002356:	d110      	bne.n	800237a <npf_vpprintf+0x9a>
      fs.field_width_opt = NPF_FMT_SPEC_OPT_LITERAL;
 8002358:	2301      	movs	r3, #1
 800235a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      fs.field_width = va_arg(args, int);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	1d1a      	adds	r2, r3, #4
 8002362:	603a      	str	r2, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	647b      	str	r3, [r7, #68]	; 0x44
      if (fs.field_width < 0) {
 8002368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800236a:	2b00      	cmp	r3, #0
 800236c:	da05      	bge.n	800237a <npf_vpprintf+0x9a>
        fs.field_width = -fs.field_width;
 800236e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002370:	425b      	negs	r3, r3
 8002372:	647b      	str	r3, [r7, #68]	; 0x44
        fs.left_justified = 1;
 8002374:	2301      	movs	r3, #1
 8002376:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
      }
    }
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    if (fs.prec_opt == NPF_FMT_SPEC_OPT_STAR) {
 800237a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800237e:	2b02      	cmp	r3, #2
 8002380:	d10d      	bne.n	800239e <npf_vpprintf+0xbe>
      fs.prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8002382:	2300      	movs	r3, #0
 8002384:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      fs.prec = va_arg(args, int);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	1d1a      	adds	r2, r3, #4
 800238c:	603a      	str	r2, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (fs.prec >= 0) { fs.prec_opt = NPF_FMT_SPEC_OPT_LITERAL; }
 8002392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002394:	2b00      	cmp	r3, #0
 8002396:	db02      	blt.n	800239e <npf_vpprintf+0xbe>
 8002398:	2301      	movs	r3, #1
 800239a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    }
#endif

    union { char cbuf_mem[32]; npf_uint_t binval; } u;
    char *cbuf = u.cbuf_mem, sign_c = 0;
 800239e:	f107 0310 	add.w	r3, r7, #16
 80023a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023a6:	2300      	movs	r3, #0
 80023a8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    int cbuf_len = 0, need_0x = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    int field_pad = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    char pad_c = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    int prec_pad = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    int zero = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
#endif
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    int frac_chars = 0, inf_or_nan = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	633b      	str	r3, [r7, #48]	; 0x30
 80023d2:	2300      	movs	r3, #0
 80023d4:	67bb      	str	r3, [r7, #120]	; 0x78
#endif

    // Extract and convert the argument to string, point cbuf at the text.
    switch (fs.conv_spec) {
 80023d6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80023da:	2b08      	cmp	r3, #8
 80023dc:	f200 81c5 	bhi.w	800276a <npf_vpprintf+0x48a>
 80023e0:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <npf_vpprintf+0x108>)
 80023e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e6:	bf00      	nop
 80023e8:	0800240d 	.word	0x0800240d
 80023ec:	08002421 	.word	0x08002421
 80023f0:	0800243d 	.word	0x0800243d
 80023f4:	08002485 	.word	0x08002485
 80023f8:	0800253b 	.word	0x0800253b
 80023fc:	0800253b 	.word	0x0800253b
 8002400:	0800253b 	.word	0x0800253b
 8002404:	08002677 	.word	0x08002677
 8002408:	08002699 	.word	0x08002699
      case NPF_FMT_SPEC_CONV_PERCENT:
        *cbuf = '%';
 800240c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002410:	2225      	movs	r2, #37	; 0x25
 8002412:	701a      	strb	r2, [r3, #0]
        ++cbuf_len;
 8002414:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002418:	3301      	adds	r3, #1
 800241a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        break;
 800241e:	e1a9      	b.n	8002774 <npf_vpprintf+0x494>

      case NPF_FMT_SPEC_CONV_CHAR:
        *cbuf = (char)va_arg(args, int);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	1d1a      	adds	r2, r3, #4
 8002424:	603a      	str	r2, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800242e:	701a      	strb	r2, [r3, #0]
        ++cbuf_len;
 8002430:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002434:	3301      	adds	r3, #1
 8002436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        break;
 800243a:	e19b      	b.n	8002774 <npf_vpprintf+0x494>

      case NPF_FMT_SPEC_CONV_STRING: {
        cbuf = va_arg(args, char *);
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	1d1a      	adds	r2, r3, #4
 8002440:	603a      	str	r2, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        for (char const *s = cbuf; *s; ++s, ++cbuf_len); // strlen
 8002448:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800244c:	677b      	str	r3, [r7, #116]	; 0x74
 800244e:	e007      	b.n	8002460 <npf_vpprintf+0x180>
 8002450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002452:	3301      	adds	r3, #1
 8002454:	677b      	str	r3, [r7, #116]	; 0x74
 8002456:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800245a:	3301      	adds	r3, #1
 800245c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f3      	bne.n	8002450 <npf_vpprintf+0x170>
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
        if (fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) {
 8002468:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800246c:	2b01      	cmp	r3, #1
 800246e:	f040 817e 	bne.w	800276e <npf_vpprintf+0x48e>
          cbuf_len = npf_min(fs.prec, cbuf_len); // prec truncates strings
 8002472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002474:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff f9e5 	bl	8001848 <npf_min>
 800247e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        }
#endif
      } break;
 8002482:	e174      	b.n	800276e <npf_vpprintf+0x48e>

      case NPF_FMT_SPEC_CONV_SIGNED_INT: {
        npf_int_t val = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	673b      	str	r3, [r7, #112]	; 0x70
        switch (fs.length_modifier) {
 8002488:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800248c:	2b04      	cmp	r3, #4
 800248e:	d82d      	bhi.n	80024ec <npf_vpprintf+0x20c>
 8002490:	a201      	add	r2, pc, #4	; (adr r2, 8002498 <npf_vpprintf+0x1b8>)
 8002492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002496:	bf00      	nop
 8002498:	080024ad 	.word	0x080024ad
 800249c:	080024b9 	.word	0x080024b9
 80024a0:	080024c7 	.word	0x080024c7
 80024a4:	080024d3 	.word	0x080024d3
 80024a8:	080024e1 	.word	0x080024e1
          NPF_EXTRACT(NONE, int, int);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	1d1a      	adds	r2, r3, #4
 80024b0:	603a      	str	r2, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	673b      	str	r3, [r7, #112]	; 0x70
 80024b6:	e01a      	b.n	80024ee <npf_vpprintf+0x20e>
          NPF_EXTRACT(SHORT, short, int);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	1d1a      	adds	r2, r3, #4
 80024bc:	603a      	str	r2, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	673b      	str	r3, [r7, #112]	; 0x70
 80024c4:	e013      	b.n	80024ee <npf_vpprintf+0x20e>
          NPF_EXTRACT(LONG_DOUBLE, int, int);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	1d1a      	adds	r2, r3, #4
 80024ca:	603a      	str	r2, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	673b      	str	r3, [r7, #112]	; 0x70
 80024d0:	e00d      	b.n	80024ee <npf_vpprintf+0x20e>
          NPF_EXTRACT(CHAR, char, int);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	1d1a      	adds	r2, r3, #4
 80024d6:	603a      	str	r2, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	673b      	str	r3, [r7, #112]	; 0x70
 80024de:	e006      	b.n	80024ee <npf_vpprintf+0x20e>
          NPF_EXTRACT(LONG, long, long);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	1d1a      	adds	r2, r3, #4
 80024e4:	603a      	str	r2, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	673b      	str	r3, [r7, #112]	; 0x70
 80024ea:	e000      	b.n	80024ee <npf_vpprintf+0x20e>
          NPF_EXTRACT(LARGE_LONG_LONG, long long, long long);
          NPF_EXTRACT(LARGE_INTMAX, intmax_t, intmax_t);
          NPF_EXTRACT(LARGE_SIZET, ssize_t, ssize_t);
          NPF_EXTRACT(LARGE_PTRDIFFT, ptrdiff_t, ptrdiff_t);
#endif
          default: break;
 80024ec:	bf00      	nop
        }

        sign_c = (val < 0) ? '-' : fs.prepend;
 80024ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	db02      	blt.n	80024fa <npf_vpprintf+0x21a>
 80024f4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80024f8:	e000      	b.n	80024fc <npf_vpprintf+0x21c>
 80024fa:	232d      	movs	r3, #45	; 0x2d
 80024fc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = !val;
 8002500:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002502:	2b00      	cmp	r3, #0
 8002504:	bf0c      	ite	eq
 8002506:	2301      	moveq	r3, #1
 8002508:	2300      	movne	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        // special case, if prec and value are 0, skip
        if (!val && (fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec) {
 800250e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <npf_vpprintf+0x24a>
 8002514:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002518:	2b01      	cmp	r3, #1
 800251a:	d106      	bne.n	800252a <npf_vpprintf+0x24a>
 800251c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d103      	bne.n	800252a <npf_vpprintf+0x24a>
          cbuf_len = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        } else
#endif
        { cbuf_len = npf_itoa_rev(cbuf, val); }
      } break;
 8002528:	e124      	b.n	8002774 <npf_vpprintf+0x494>
        { cbuf_len = npf_itoa_rev(cbuf, val); }
 800252a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800252c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002530:	f7ff fba8 	bl	8001c84 <npf_itoa_rev>
 8002534:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
      } break;
 8002538:	e11c      	b.n	8002774 <npf_vpprintf+0x494>
      case NPF_FMT_SPEC_CONV_BINARY:
#endif
      case NPF_FMT_SPEC_CONV_OCTAL:
      case NPF_FMT_SPEC_CONV_HEX_INT:
      case NPF_FMT_SPEC_CONV_UNSIGNED_INT: {
        npf_uint_t val = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	66fb      	str	r3, [r7, #108]	; 0x6c

        switch (fs.length_modifier) {
 800253e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002542:	2b04      	cmp	r3, #4
 8002544:	d82c      	bhi.n	80025a0 <npf_vpprintf+0x2c0>
 8002546:	a201      	add	r2, pc, #4	; (adr r2, 800254c <npf_vpprintf+0x26c>)
 8002548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254c:	08002561 	.word	0x08002561
 8002550:	0800256d 	.word	0x0800256d
 8002554:	0800257b 	.word	0x0800257b
 8002558:	08002587 	.word	0x08002587
 800255c:	08002595 	.word	0x08002595
          NPF_EXTRACT(NONE, unsigned, unsigned);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	1d1a      	adds	r2, r3, #4
 8002564:	603a      	str	r2, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	66fb      	str	r3, [r7, #108]	; 0x6c
 800256a:	e01a      	b.n	80025a2 <npf_vpprintf+0x2c2>
          NPF_EXTRACT(SHORT, unsigned short, unsigned);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	1d1a      	adds	r2, r3, #4
 8002570:	603a      	str	r2, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002578:	e013      	b.n	80025a2 <npf_vpprintf+0x2c2>
          NPF_EXTRACT(LONG_DOUBLE, unsigned, unsigned);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	1d1a      	adds	r2, r3, #4
 800257e:	603a      	str	r2, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002584:	e00d      	b.n	80025a2 <npf_vpprintf+0x2c2>
          NPF_EXTRACT(CHAR, unsigned char, unsigned);
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	1d1a      	adds	r2, r3, #4
 800258a:	603a      	str	r2, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002592:	e006      	b.n	80025a2 <npf_vpprintf+0x2c2>
          NPF_EXTRACT(LONG, unsigned long, unsigned long);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	1d1a      	adds	r2, r3, #4
 8002598:	603a      	str	r2, [r7, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800259e:	e000      	b.n	80025a2 <npf_vpprintf+0x2c2>
          NPF_EXTRACT(LARGE_LONG_LONG, unsigned long long, unsigned long long);
          NPF_EXTRACT(LARGE_INTMAX, uintmax_t, uintmax_t);
          NPF_EXTRACT(LARGE_SIZET, size_t, size_t);
          NPF_EXTRACT(LARGE_PTRDIFFT, size_t, size_t);
#endif
          default: break;
 80025a0:	bf00      	nop
        }

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = !val;
 80025a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf0c      	ite	eq
 80025a8:	2301      	moveq	r3, #1
 80025aa:	2300      	movne	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        if (!val && (fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec) {
 80025b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d111      	bne.n	80025da <npf_vpprintf+0x2fa>
 80025b6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d10d      	bne.n	80025da <npf_vpprintf+0x2fa>
 80025be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d10a      	bne.n	80025da <npf_vpprintf+0x2fa>
          // Zero value and explicitly-requested zero precision means "print nothing".
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 80025c4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80025c8:	2b04      	cmp	r3, #4
 80025ca:	d11f      	bne.n	800260c <npf_vpprintf+0x32c>
 80025cc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01b      	beq.n	800260c <npf_vpprintf+0x32c>
            fs.prec = 1; // octal special case, print a single '0'
 80025d4:	2301      	movs	r3, #1
 80025d6:	64fb      	str	r3, [r7, #76]	; 0x4c
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 80025d8:	e018      	b.n	800260c <npf_vpprintf+0x32c>
        if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) {
          cbuf_len = npf_bin_len(val); u.binval = val;
        } else
#endif
        {
          unsigned const base = (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) ?
 80025da:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
            8u : ((fs.conv_spec == NPF_FMT_SPEC_CONV_HEX_INT) ? 16u : 10u);
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d007      	beq.n	80025f2 <npf_vpprintf+0x312>
 80025e2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d101      	bne.n	80025ee <npf_vpprintf+0x30e>
 80025ea:	2310      	movs	r3, #16
 80025ec:	e002      	b.n	80025f4 <npf_vpprintf+0x314>
 80025ee:	230a      	movs	r3, #10
 80025f0:	e000      	b.n	80025f4 <npf_vpprintf+0x314>
 80025f2:	2308      	movs	r3, #8
          unsigned const base = (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) ?
 80025f4:	65bb      	str	r3, [r7, #88]	; 0x58
          cbuf_len = npf_utoa_rev(cbuf, val, base, (unsigned)fs.case_adjust);
 80025f6:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80025fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025fc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80025fe:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002602:	f7ff fb7d 	bl	8001d00 <npf_utoa_rev>
 8002606:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 800260a:	e000      	b.n	800260e <npf_vpprintf+0x32e>
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 800260c:	bf00      	nop
        }

        if (val && fs.alt_form && (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL)) {
 800260e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002610:	2b00      	cmp	r3, #0
 8002612:	d012      	beq.n	800263a <npf_vpprintf+0x35a>
 8002614:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00e      	beq.n	800263a <npf_vpprintf+0x35a>
 800261c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002620:	2b04      	cmp	r3, #4
 8002622:	d10a      	bne.n	800263a <npf_vpprintf+0x35a>
          cbuf[cbuf_len++] = '0'; // OK to add leading octal '0' immediately.
 8002624:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800262e:	461a      	mov	r2, r3
 8002630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002634:	4413      	add	r3, r2
 8002636:	2230      	movs	r2, #48	; 0x30
 8002638:	701a      	strb	r2, [r3, #0]
        }

        if (val && fs.alt_form) { // 0x or 0b but can't write it yet.
 800263a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 8098 	beq.w	8002772 <npf_vpprintf+0x492>
 8002642:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 8093 	beq.w	8002772 <npf_vpprintf+0x492>
          if (fs.conv_spec == NPF_FMT_SPEC_CONV_HEX_INT) { need_0x = 'X'; }
 800264c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002650:	2b05      	cmp	r3, #5
 8002652:	d102      	bne.n	800265a <npf_vpprintf+0x37a>
 8002654:	2358      	movs	r3, #88	; 0x58
 8002656:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#if NANOPRINTF_USE_BINARY_FORMAT_SPECIFIERS == 1
          else if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) { need_0x = 'B'; }
#endif
          if (need_0x) { need_0x += fs.case_adjust; }
 800265a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8087 	beq.w	8002772 <npf_vpprintf+0x492>
 8002664:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002668:	461a      	mov	r2, r3
 800266a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800266e:	4413      	add	r3, r2
 8002670:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
      } break;
 8002674:	e07d      	b.n	8002772 <npf_vpprintf+0x492>

      case NPF_FMT_SPEC_CONV_POINTER: {
        cbuf_len =
          npf_utoa_rev(cbuf, (npf_uint_t)(uintptr_t)va_arg(args, void *), 16, 'a'-'A');
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	1d1a      	adds	r2, r3, #4
 800267a:	603a      	str	r2, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4619      	mov	r1, r3
 8002680:	2320      	movs	r3, #32
 8002682:	2210      	movs	r2, #16
 8002684:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002688:	f7ff fb3a 	bl	8001d00 <npf_utoa_rev>
 800268c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        need_0x = 'x';
 8002690:	2378      	movs	r3, #120	; 0x78
 8002692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      } break;
 8002696:	e06d      	b.n	8002774 <npf_vpprintf+0x494>
#endif

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      case NPF_FMT_SPEC_CONV_FLOAT_DECIMAL: {
        float val;
        if (fs.length_modifier == NPF_FMT_SPEC_LEN_MOD_LONG_DOUBLE) {
 8002698:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800269c:	2b02      	cmp	r3, #2
 800269e:	d10f      	bne.n	80026c0 <npf_vpprintf+0x3e0>
          val = (float)va_arg(args, long double);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	3307      	adds	r3, #7
 80026a4:	f023 0307 	bic.w	r3, r3, #7
 80026a8:	f103 0208 	add.w	r2, r3, #8
 80026ac:	603a      	str	r2, [r7, #0]
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	4610      	mov	r0, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	f7fe fa77 	bl	8000ba8 <__aeabi_d2f>
 80026ba:	4603      	mov	r3, r0
 80026bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80026be:	e00e      	b.n	80026de <npf_vpprintf+0x3fe>
        } else {
          val = (float)va_arg(args, double);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	3307      	adds	r3, #7
 80026c4:	f023 0307 	bic.w	r3, r3, #7
 80026c8:	f103 0208 	add.w	r2, r3, #8
 80026cc:	603a      	str	r2, [r7, #0]
 80026ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f7fe fa67 	bl	8000ba8 <__aeabi_d2f>
 80026da:	4603      	mov	r3, r0
 80026dc:	66bb      	str	r3, [r7, #104]	; 0x68
        }

        sign_c = (val < 0.f) ? '-' : fs.prepend;
 80026de:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80026e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ea:	d501      	bpl.n	80026f0 <npf_vpprintf+0x410>
 80026ec:	232d      	movs	r3, #45	; 0x2d
 80026ee:	e001      	b.n	80026f4 <npf_vpprintf+0x414>
 80026f0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80026f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = (val == 0.f);
 80026f8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80026fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002704:	bf0c      	ite	eq
 8002706:	2301      	moveq	r3, #1
 8002708:	2300      	movne	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        cbuf_len = npf_ftoa_rev(cbuf, val, fs.case_adjust, &frac_chars);
 800270e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002712:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002716:	4619      	mov	r1, r3
 8002718:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 800271c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002720:	f7ff fcbe 	bl	80020a0 <npf_ftoa_rev>
 8002724:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if (cbuf_len < 0) {
 8002728:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800272c:	2b00      	cmp	r3, #0
 800272e:	da07      	bge.n	8002740 <npf_vpprintf+0x460>
          cbuf_len = -cbuf_len;
 8002730:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002734:	425b      	negs	r3, r3
 8002736:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
          inf_or_nan = 1;
 800273a:	2301      	movs	r3, #1
 800273c:	67bb      	str	r3, [r7, #120]	; 0x78
        } else {
          int const prec_adj = npf_max(0, frac_chars - fs.prec);
          cbuf += prec_adj;
          cbuf_len -= prec_adj;
        }
      } break;
 800273e:	e019      	b.n	8002774 <npf_vpprintf+0x494>
          int const prec_adj = npf_max(0, frac_chars - fs.prec);
 8002740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	4619      	mov	r1, r3
 8002748:	2000      	movs	r0, #0
 800274a:	f7ff f88d 	bl	8001868 <npf_max>
 800274e:	65f8      	str	r0, [r7, #92]	; 0x5c
          cbuf += prec_adj;
 8002750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002752:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002756:	4413      	add	r3, r2
 8002758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
          cbuf_len -= prec_adj;
 800275c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      } break;
 8002768:	e004      	b.n	8002774 <npf_vpprintf+0x494>
#endif
      default: break;
 800276a:	bf00      	nop
 800276c:	e002      	b.n	8002774 <npf_vpprintf+0x494>
      } break;
 800276e:	bf00      	nop
 8002770:	e000      	b.n	8002774 <npf_vpprintf+0x494>
      } break;
 8002772:	bf00      	nop
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Compute the field width pad character
    if (fs.field_width_opt == NPF_FMT_SPEC_OPT_LITERAL) {
 8002774:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002778:	2b01      	cmp	r3, #1
 800277a:	d124      	bne.n	80027c6 <npf_vpprintf+0x4e6>
      if (fs.leading_zero_pad) { // '0' flag is only legal with numeric types
 800277c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01d      	beq.n	80027c0 <npf_vpprintf+0x4e0>
        if ((fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) &&
 8002784:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002788:	2b02      	cmp	r3, #2
 800278a:	d01c      	beq.n	80027c6 <npf_vpprintf+0x4e6>
            (fs.conv_spec != NPF_FMT_SPEC_CONV_CHAR) &&
 800278c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
        if ((fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) &&
 8002790:	2b01      	cmp	r3, #1
 8002792:	d018      	beq.n	80027c6 <npf_vpprintf+0x4e6>
            (fs.conv_spec != NPF_FMT_SPEC_CONV_PERCENT)) {
 8002794:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
            (fs.conv_spec != NPF_FMT_SPEC_CONV_CHAR) &&
 8002798:	2b00      	cmp	r3, #0
 800279a:	d014      	beq.n	80027c6 <npf_vpprintf+0x4e6>
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
          if ((fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec && zero) {
 800279c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d109      	bne.n	80027b8 <npf_vpprintf+0x4d8>
 80027a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <npf_vpprintf+0x4d8>
 80027aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <npf_vpprintf+0x4d8>
            pad_c = ' ';
 80027b0:	2320      	movs	r3, #32
 80027b2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80027b6:	e006      	b.n	80027c6 <npf_vpprintf+0x4e6>
          } else
#endif
          { pad_c = '0'; }
 80027b8:	2330      	movs	r3, #48	; 0x30
 80027ba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80027be:	e002      	b.n	80027c6 <npf_vpprintf+0x4e6>
        }
      } else { pad_c = ' '; }
 80027c0:	2320      	movs	r3, #32
 80027c2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }
#endif

    // Compute the number of bytes to truncate or '0'-pad.
    if (fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) {
 80027c6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d014      	beq.n	80027f8 <npf_vpprintf+0x518>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      if (!inf_or_nan) { // float precision is after the decimal point
 80027ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d111      	bne.n	80027f8 <npf_vpprintf+0x518>
        int const prec_start =
          (fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DECIMAL) ? frac_chars : cbuf_len;
 80027d4:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d101      	bne.n	80027e0 <npf_vpprintf+0x500>
 80027dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027de:	e001      	b.n	80027e4 <npf_vpprintf+0x504>
 80027e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        int const prec_start =
 80027e4:	657b      	str	r3, [r7, #84]	; 0x54
        prec_pad = npf_max(0, fs.prec - prec_start);
 80027e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	4619      	mov	r1, r3
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7ff f83a 	bl	8001868 <npf_max>
 80027f4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
#endif
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Given the full converted length, how many pad bytes?
    field_pad = fs.field_width - cbuf_len - !!sign_c;
 80027f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 8002804:	2a00      	cmp	r2, #0
 8002806:	bf14      	ite	ne
 8002808:	2201      	movne	r2, #1
 800280a:	2200      	moveq	r2, #0
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (need_0x) { field_pad -= 2; }
 8002814:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d004      	beq.n	8002826 <npf_vpprintf+0x546>
 800281c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002820:	3b02      	subs	r3, #2
 8002822:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    if ((fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DECIMAL) && !fs.prec && !fs.alt_form) {
 8002826:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 800282a:	2b08      	cmp	r3, #8
 800282c:	d10b      	bne.n	8002846 <npf_vpprintf+0x566>
 800282e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d108      	bne.n	8002846 <npf_vpprintf+0x566>
 8002834:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002838:	2b00      	cmp	r3, #0
 800283a:	d104      	bne.n	8002846 <npf_vpprintf+0x566>
      ++field_pad; // 0-pad, no decimal point.
 800283c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002840:	3301      	adds	r3, #1
 8002842:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    field_pad -= prec_pad;
 8002846:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800284a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#endif
    field_pad = npf_max(0, field_pad);
 8002854:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002858:	2000      	movs	r0, #0
 800285a:	f7ff f805 	bl	8001868 <npf_max>
 800285e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
#endif // NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Apply right-justified field width if requested
    if (!fs.left_justified && pad_c) { // If leading zeros pad, sign goes first.
 8002862:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002866:	2b00      	cmp	r3, #0
 8002868:	d14d      	bne.n	8002906 <npf_vpprintf+0x626>
 800286a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800286e:	2b00      	cmp	r3, #0
 8002870:	d049      	beq.n	8002906 <npf_vpprintf+0x626>
      if (pad_c == '0') {
 8002872:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002876:	2b30      	cmp	r3, #48	; 0x30
 8002878:	d128      	bne.n	80028cc <npf_vpprintf+0x5ec>
        if (sign_c) { NPF_PUTC(sign_c); sign_c = 0; }
 800287a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <npf_vpprintf+0x5b8>
 8002882:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002886:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff fd10 	bl	80022b2 <npf_putc_cnt>
 8002892:	2300      	movs	r3, #0
 8002894:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        // Pad byte is '0', write '0x' before '0' pad chars.
        if (need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 8002898:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800289c:	2b00      	cmp	r3, #0
 800289e:	d015      	beq.n	80028cc <npf_vpprintf+0x5ec>
 80028a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028a4:	4619      	mov	r1, r3
 80028a6:	2030      	movs	r0, #48	; 0x30
 80028a8:	f7ff fd03 	bl	80022b2 <npf_putc_cnt>
 80028ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028b0:	4619      	mov	r1, r3
 80028b2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80028b6:	f7ff fcfc 	bl	80022b2 <npf_putc_cnt>
      }
      while (field_pad-- > 0) { NPF_PUTC(pad_c); }
 80028ba:	e007      	b.n	80028cc <npf_vpprintf+0x5ec>
 80028bc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80028c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fcf3 	bl	80022b2 <npf_putc_cnt>
 80028cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028d0:	1e5a      	subs	r2, r3, #1
 80028d2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	dcf0      	bgt.n	80028bc <npf_vpprintf+0x5dc>
      // Pad byte is ' ', write '0x' after ' ' pad chars but before number.
      if ((pad_c != '0') && need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 80028da:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80028de:	2b30      	cmp	r3, #48	; 0x30
 80028e0:	d023      	beq.n	800292a <npf_vpprintf+0x64a>
 80028e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d01f      	beq.n	800292a <npf_vpprintf+0x64a>
 80028ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028ee:	4619      	mov	r1, r3
 80028f0:	2030      	movs	r0, #48	; 0x30
 80028f2:	f7ff fcde 	bl	80022b2 <npf_putc_cnt>
 80028f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028fa:	4619      	mov	r1, r3
 80028fc:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002900:	f7ff fcd7 	bl	80022b2 <npf_putc_cnt>
 8002904:	e011      	b.n	800292a <npf_vpprintf+0x64a>
    } else
#endif
    { if (need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); } } // no pad, '0x' requested.
 8002906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00e      	beq.n	800292c <npf_vpprintf+0x64c>
 800290e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002912:	4619      	mov	r1, r3
 8002914:	2030      	movs	r0, #48	; 0x30
 8002916:	f7ff fccc 	bl	80022b2 <npf_putc_cnt>
 800291a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800291e:	4619      	mov	r1, r3
 8002920:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002924:	f7ff fcc5 	bl	80022b2 <npf_putc_cnt>
 8002928:	e000      	b.n	800292c <npf_vpprintf+0x64c>
      if ((pad_c != '0') && need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 800292a:	bf00      	nop

    // Write the converted payload
    if (fs.conv_spec == NPF_FMT_SPEC_CONV_STRING) {
 800292c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002930:	2b02      	cmp	r3, #2
 8002932:	d117      	bne.n	8002964 <npf_vpprintf+0x684>
      for (int i = 0; i < cbuf_len; ++i) { NPF_PUTC(cbuf[i]); }
 8002934:	2300      	movs	r3, #0
 8002936:	667b      	str	r3, [r7, #100]	; 0x64
 8002938:	e00e      	b.n	8002958 <npf_vpprintf+0x678>
 800293a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800293c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002940:	4413      	add	r3, r2
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800294a:	4619      	mov	r1, r3
 800294c:	4610      	mov	r0, r2
 800294e:	f7ff fcb0 	bl	80022b2 <npf_putc_cnt>
 8002952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002954:	3301      	adds	r3, #1
 8002956:	667b      	str	r3, [r7, #100]	; 0x64
 8002958:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800295a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800295e:	429a      	cmp	r2, r3
 8002960:	dbeb      	blt.n	800293a <npf_vpprintf+0x65a>
 8002962:	e059      	b.n	8002a18 <npf_vpprintf+0x738>
    } else {
      if (sign_c) { NPF_PUTC(sign_c); }
 8002964:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002968:	2b00      	cmp	r3, #0
 800296a:	d007      	beq.n	800297c <npf_vpprintf+0x69c>
 800296c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002970:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fc9b 	bl	80022b2 <npf_putc_cnt>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      if (fs.conv_spec != NPF_FMT_SPEC_CONV_FLOAT_DECIMAL) {
 800297c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002980:	2b08      	cmp	r3, #8
 8002982:	d00e      	beq.n	80029a2 <npf_vpprintf+0x6c2>
#endif

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
        while (prec_pad-- > 0) { NPF_PUTC('0'); } // int precision leads.
 8002984:	e005      	b.n	8002992 <npf_vpprintf+0x6b2>
 8002986:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800298a:	4619      	mov	r1, r3
 800298c:	2030      	movs	r0, #48	; 0x30
 800298e:	f7ff fc90 	bl	80022b2 <npf_putc_cnt>
 8002992:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002996:	1e5a      	subs	r2, r3, #1
 8002998:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800299c:	2b00      	cmp	r3, #0
 800299e:	dcf2      	bgt.n	8002986 <npf_vpprintf+0x6a6>
 80029a0:	e01e      	b.n	80029e0 <npf_vpprintf+0x700>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      } else {
        // if 0 precision, skip the fractional part and '.'
        // if 0 prec + alternative form, keep the '.'
        if (!fs.prec && !fs.alt_form) { ++cbuf; --cbuf_len; }
 80029a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d11b      	bne.n	80029e0 <npf_vpprintf+0x700>
 80029a8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d117      	bne.n	80029e0 <npf_vpprintf+0x700>
 80029b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029b4:	3301      	adds	r3, #1
 80029b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029be:	3b01      	subs	r3, #1
 80029c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#if NANOPRINTF_USE_BINARY_FORMAT_SPECIFIERS == 1
      if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) {
        while (cbuf_len) { NPF_PUTC('0' + ((u.binval >> --cbuf_len) & 1)); }
      } else
#endif
      { while (cbuf_len-- > 0) { NPF_PUTC(cbuf[cbuf_len]); } } // payload is reversed
 80029c4:	e00c      	b.n	80029e0 <npf_vpprintf+0x700>
 80029c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80029ce:	4413      	add	r3, r2
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029d8:	4619      	mov	r1, r3
 80029da:	4610      	mov	r0, r2
 80029dc:	f7ff fc69 	bl	80022b2 <npf_putc_cnt>
 80029e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029e4:	1e5a      	subs	r2, r3, #1
 80029e6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	dceb      	bgt.n	80029c6 <npf_vpprintf+0x6e6>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      // real precision comes after the number.
      if ((fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DECIMAL) && !inf_or_nan) {
 80029ee:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d110      	bne.n	8002a18 <npf_vpprintf+0x738>
 80029f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10d      	bne.n	8002a18 <npf_vpprintf+0x738>
        while (prec_pad-- > 0) { NPF_PUTC('0'); }
 80029fc:	e005      	b.n	8002a0a <npf_vpprintf+0x72a>
 80029fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a02:	4619      	mov	r1, r3
 8002a04:	2030      	movs	r0, #48	; 0x30
 8002a06:	f7ff fc54 	bl	80022b2 <npf_putc_cnt>
 8002a0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a0e:	1e5a      	subs	r2, r3, #1
 8002a10:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	dcf2      	bgt.n	80029fe <npf_vpprintf+0x71e>
      }
#endif
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    if (fs.left_justified && pad_c) { // Apply left-justified field width
 8002a18:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <npf_vpprintf+0x768>
 8002a20:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00f      	beq.n	8002a48 <npf_vpprintf+0x768>
      while (field_pad-- > 0) { NPF_PUTC(pad_c); }
 8002a28:	e007      	b.n	8002a3a <npf_vpprintf+0x75a>
 8002a2a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002a2e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fc3c 	bl	80022b2 <npf_putc_cnt>
 8002a3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a3e:	1e5a      	subs	r2, r3, #1
 8002a40:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	dcf0      	bgt.n	8002a2a <npf_vpprintf+0x74a>
  while (*cur) {
 8002a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f47f ac57 	bne.w	8002302 <npf_vpprintf+0x22>
    }
#endif
  }

  return pc_cnt.n;
 8002a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	37a0      	adds	r7, #160	; 0xa0
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop

08002a60 <npf_snprintf>:
  int const rv = npf_vpprintf(pc, pc_ctx, format, val);
  va_end(val);
  return rv;
}

int npf_snprintf(char *buffer, size_t bufsz, const char *format, ...) {
 8002a60:	b40c      	push	{r2, r3}
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
  va_list val;
  va_start(val, format);
 8002a6c:	f107 031c 	add.w	r3, r7, #28
 8002a70:	60bb      	str	r3, [r7, #8]
  int const rv = npf_vsnprintf(buffer, bufsz, format, val);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	6839      	ldr	r1, [r7, #0]
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f809 	bl	8002a90 <npf_vsnprintf>
 8002a7e:	60f8      	str	r0, [r7, #12]
  va_end(val);
  return rv;
 8002a80:	68fb      	ldr	r3, [r7, #12]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a8c:	b002      	add	sp, #8
 8002a8e:	4770      	bx	lr

08002a90 <npf_vsnprintf>:

int npf_vsnprintf(char *buffer, size_t bufsz, char const *format, va_list vlist) {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	603b      	str	r3, [r7, #0]
  npf_bufputc_ctx_t bufputc_ctx;
  bufputc_ctx.dst = buffer;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	617b      	str	r3, [r7, #20]
  bufputc_ctx.len = bufsz;
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	61bb      	str	r3, [r7, #24]
  bufputc_ctx.cur = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]

  npf_putc const pc = buffer ? npf_bufputc : npf_bufputc_nop;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <npf_vsnprintf+0x24>
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <npf_vsnprintf+0x50>)
 8002ab2:	e000      	b.n	8002ab6 <npf_vsnprintf+0x26>
 8002ab4:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <npf_vsnprintf+0x54>)
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
  int const n = npf_vpprintf(pc, &bufputc_ctx, format, vlist);
 8002ab8:	f107 0114 	add.w	r1, r7, #20
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ac2:	f7ff fc0d 	bl	80022e0 <npf_vpprintf>
 8002ac6:	6238      	str	r0, [r7, #32]
  pc('\0', &bufputc_ctx);
 8002ac8:	f107 0214 	add.w	r2, r7, #20
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	4611      	mov	r1, r2
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	4798      	blx	r3
  if (bufsz && (n >= (int)bufsz)) { buffer[0] = '\0'; }
#elif defined(NANOPRINTF_SNPRINTF_SAFE_TRIM_STRING_ON_OVERFLOW)
  if (bufsz && (n >= (int)bufsz)) { buffer[bufsz - 1] = '\0'; }
#endif

  return n;
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3728      	adds	r7, #40	; 0x28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	08002261 	.word	0x08002261
 8002ae4:	0800229d 	.word	0x0800229d

08002ae8 <myApp_init>:
volatile static uint16_t ADC_raw[adc_Channels];
volatile uint32_t guiTimer;
wakeUpSource lastWakeUpSource;

//functions
void myApp_init() {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
	startADC();
 8002aee:	f000 fa93 	bl	8003018 <startADC>
	//SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP); //Enable debug in stop
	//HAL_PWREx_EnableUltraLowPower();
	//HAL_PWREx_EnableFastWakeUp();

	/* Enable Power Clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <myApp_init+0x48>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <myApp_init+0x48>)
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6593      	str	r3, [r2, #88]	; 0x58
 8002afe:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <myApp_init+0x48>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	607b      	str	r3, [r7, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
	/* Ensure that MSI is wake-up system clock */
	__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <myApp_init+0x48>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	4a08      	ldr	r2, [pc, #32]	; (8002b30 <myApp_init+0x48>)
 8002b10:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b14:	6093      	str	r3, [r2, #8]

	while (ADCrunning) {
 8002b16:	bf00      	nop
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <myApp_init+0x4c>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1fa      	bne.n	8002b18 <myApp_init+0x30>
		//wait for ADC
	}

	//LCD
	lcd_SetFont((GFXfont*) &FreeSans9pt7bMod);
 8002b22:	4805      	ldr	r0, [pc, #20]	; (8002b38 <myApp_init+0x50>)
 8002b24:	f006 fd30 	bl	8009588 <lcd_SetFont>
}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	20000378 	.word	0x20000378
 8002b38:	0800ce60 	.word	0x0800ce60

08002b3c <myApp_loop>:

void myApp_loop() {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	startADC();
 8002b40:	f000 fa6a 	bl	8003018 <startADC>
	GNSS_Power();
 8002b44:	f001 f85a 	bl	8003bfc <GNSS_Power>
	if (LCD_Power() == LCD_READY) {
 8002b48:	f006 fc94 	bl	8009474 <LCD_Power>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d10e      	bne.n	8002b70 <myApp_loop+0x34>
		drawHeader();
 8002b52:	f000 f859 	bl	8002c08 <drawHeader>
		drawGNSS();
 8002b56:	f000 f90f 	bl	8002d78 <drawGNSS>
		while ((lcd_draw() == LCD_SENDING_DATA)) {
 8002b5a:	e001      	b.n	8002b60 <myApp_loop+0x24>
			goToIdle(); //wait for DMA services to finish
 8002b5c:	f000 f814 	bl	8002b88 <goToIdle>
		while ((lcd_draw() == LCD_SENDING_DATA)) {
 8002b60:	f006 ff4e 	bl	8009a00 <lcd_draw>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d0f8      	beq.n	8002b5c <myApp_loop+0x20>
		}
	}
	while (ADCrunning) {
 8002b6a:	e001      	b.n	8002b70 <myApp_loop+0x34>
		goToIdle(); //wait for ADC services to finish
 8002b6c:	f000 f80c 	bl	8002b88 <goToIdle>
	while (ADCrunning) {
 8002b70:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <myApp_loop+0x48>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f8      	bne.n	8002b6c <myApp_loop+0x30>
	}
	goToSleep();
 8002b7a:	f000 f80d 	bl	8002b98 <goToSleep>
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000378 	.word	0x20000378

08002b88 <goToIdle>:

static void goToIdle() {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f003 fb80 	bl	8006294 <HAL_PWR_EnterSLEEPMode>
}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <goToSleep>:

static void goToSleep() {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
	if (superCapmV < mV_OV) {
 8002b9c:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <goToSleep+0x60>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d81d      	bhi.n	8002be4 <goToSleep+0x4c>
		HAL_GPIO_WritePin(SolarEN_GPIO_Port, SolarEN_Pin, GPIO_PIN_SET); //Allow charging
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bb2:	f003 fb47 	bl	8006244 <HAL_GPIO_WritePin>
		GNSS_Prep_Stop();
 8002bb6:	f000 fff3 	bl	8003ba0 <GNSS_Prep_Stop>
		HAL_SuspendTick();
 8002bba:	f001 fb1f 	bl	80041fc <HAL_SuspendTick>
		do {
			lastWakeUpSource = WKUP_CLEAR;
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <goToSleep+0x64>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	701a      	strb	r2, [r3, #0]
			HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	f003 fc45 	bl	8006454 <HAL_PWREx_EnterSTOP2Mode>
			__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002bca:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <goToSleep+0x68>)
 8002bcc:	221f      	movs	r2, #31
 8002bce:	619a      	str	r2, [r3, #24]
		} while (lastWakeUpSource == WKUP_LPUART);
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <goToSleep+0x64>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d0f2      	beq.n	8002bbe <goToSleep+0x26>
		LL_LPUART_DisableIT_WKUP(LPUART1);
 8002bd8:	480a      	ldr	r0, [pc, #40]	; (8002c04 <goToSleep+0x6c>)
 8002bda:	f7fe fe12 	bl	8001802 <LL_LPUART_DisableIT_WKUP>
		HAL_ResumeTick();
 8002bde:	f001 fb1d 	bl	800421c <HAL_ResumeTick>
	} else {
		//Battery is charged
		HAL_GPIO_WritePin(SolarEN_GPIO_Port, SolarEN_Pin, GPIO_PIN_RESET); //disable charging
	}
}
 8002be2:	e006      	b.n	8002bf2 <goToSleep+0x5a>
		HAL_GPIO_WritePin(SolarEN_GPIO_Port, SolarEN_Pin, GPIO_PIN_RESET); //disable charging
 8002be4:	2200      	movs	r2, #0
 8002be6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bee:	f003 fb29 	bl	8006244 <HAL_GPIO_WritePin>
}
 8002bf2:	bf00      	nop
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	2000037c 	.word	0x2000037c
 8002bfc:	20000394 	.word	0x20000394
 8002c00:	40007000 	.word	0x40007000
 8002c04:	40008000 	.word	0x40008000

08002c08 <drawHeader>:

static void drawHeader() {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af02      	add	r7, sp, #8
	lcd_clearLines(0, LCD_row_Height * 2);
 8002c0e:	2122      	movs	r1, #34	; 0x22
 8002c10:	2000      	movs	r0, #0
 8002c12:	f006 fe5b 	bl	80098cc <lcd_clearLines>
//Date Time
	printDateTime();
 8002c16:	f000 f869 	bl	8002cec <printDateTime>
//Battery
	lcd_SetCursor(80, LCD_row_Height - 2);
 8002c1a:	210f      	movs	r1, #15
 8002c1c:	2050      	movs	r0, #80	; 0x50
 8002c1e:	f006 fc99 	bl	8009554 <lcd_SetCursor>
	lcd_print(npf_snprintf(strbuffer, strbufferSize, "%3.2fV", (float) superCapmV / 1000.0f));
 8002c22:	4b2a      	ldr	r3, [pc, #168]	; (8002ccc <drawHeader+0xc4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	ee07 3a90 	vmov	s15, r3
 8002c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002cd0 <drawHeader+0xc8>
 8002c32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c36:	ee16 0a90 	vmov	r0, s13
 8002c3a:	f7fd fc85 	bl	8000548 <__aeabi_f2d>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	e9cd 2300 	strd	r2, r3, [sp]
 8002c46:	4a23      	ldr	r2, [pc, #140]	; (8002cd4 <drawHeader+0xcc>)
 8002c48:	2114      	movs	r1, #20
 8002c4a:	4823      	ldr	r0, [pc, #140]	; (8002cd8 <drawHeader+0xd0>)
 8002c4c:	f7ff ff08 	bl	8002a60 <npf_snprintf>
 8002c50:	4603      	mov	r3, r0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f006 fd34 	bl	80096c0 <lcd_print>
//Temp
	lcd_SetCursor(94, (LCD_row_Height * 2) - 2);
 8002c58:	2120      	movs	r1, #32
 8002c5a:	205e      	movs	r0, #94	; 0x5e
 8002c5c:	f006 fc7a 	bl	8009554 <lcd_SetCursor>
	lcd_print(npf_snprintf(strbuffer, strbufferSize, "%.2dC", (int) tempC));
 8002c60:	4b1e      	ldr	r3, [pc, #120]	; (8002cdc <drawHeader+0xd4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1e      	ldr	r2, [pc, #120]	; (8002ce0 <drawHeader+0xd8>)
 8002c66:	2114      	movs	r1, #20
 8002c68:	481b      	ldr	r0, [pc, #108]	; (8002cd8 <drawHeader+0xd0>)
 8002c6a:	f7ff fef9 	bl	8002a60 <npf_snprintf>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f006 fd25 	bl	80096c0 <lcd_print>
	//GNSS Status
	if ((GNSSlastRate == GNSS_SLOW) || (GNSSlastRate == GNSS_FAST)) {
 8002c76:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <drawHeader+0xdc>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d004      	beq.n	8002c8a <drawHeader+0x82>
 8002c80:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <drawHeader+0xdc>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d107      	bne.n	8002c9a <drawHeader+0x92>
		lcd_drawLine(0, 0, 0, 15, LCD_BLACK);
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	230f      	movs	r3, #15
 8002c90:	2200      	movs	r2, #0
 8002c92:	2100      	movs	r1, #0
 8002c94:	2000      	movs	r0, #0
 8002c96:	f006 fdd7 	bl	8009848 <lcd_drawLine>
	}
	if (GNSSAlive) {
 8002c9a:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <drawHeader+0xe0>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d007      	beq.n	8002cb4 <drawHeader+0xac>
		lcd_drawLine(0, 16, 0, 32, LCD_BLACK);
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	2320      	movs	r3, #32
 8002caa:	2200      	movs	r2, #0
 8002cac:	2110      	movs	r1, #16
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f006 fdca 	bl	8009848 <lcd_drawLine>
	}
//Div line
	lcd_drawLine(0, LCD_row_Height * 2, 127, LCD_row_Height * 2, LCD_BLACK);
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	2322      	movs	r3, #34	; 0x22
 8002cba:	227f      	movs	r2, #127	; 0x7f
 8002cbc:	2122      	movs	r1, #34	; 0x22
 8002cbe:	2000      	movs	r0, #0
 8002cc0:	f006 fdc2 	bl	8009848 <lcd_drawLine>
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	2000037c 	.word	0x2000037c
 8002cd0:	447a0000 	.word	0x447a0000
 8002cd4:	0800c66c 	.word	0x0800c66c
 8002cd8:	20000d70 	.word	0x20000d70
 8002cdc:	20000380 	.word	0x20000380
 8002ce0:	0800c674 	.word	0x0800c674
 8002ce4:	2000039c 	.word	0x2000039c
 8002ce8:	200003a4 	.word	0x200003a4

08002cec <printDateTime>:

static void printDateTime() {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b088      	sub	sp, #32
 8002cf0:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002cf2:	1d3b      	adds	r3, r7, #4
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	481a      	ldr	r0, [pc, #104]	; (8002d64 <printDateTime+0x78>)
 8002cfa:	f004 fde7 	bl	80078cc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002cfe:	463b      	mov	r3, r7
 8002d00:	2200      	movs	r2, #0
 8002d02:	4619      	mov	r1, r3
 8002d04:	4817      	ldr	r0, [pc, #92]	; (8002d64 <printDateTime+0x78>)
 8002d06:	f004 fec4 	bl	8007a92 <HAL_RTC_GetDate>
	lcd_SetCursor(1, LCD_row_Height - 2);
 8002d0a:	210f      	movs	r1, #15
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	f006 fc21 	bl	8009554 <lcd_SetCursor>
	lcd_print(npf_snprintf(strbuffer, strbufferSize, "%02d:%02d:%02d ", sTime.Hours, sTime.Minutes, sTime.Seconds));
 8002d12:	793b      	ldrb	r3, [r7, #4]
 8002d14:	4619      	mov	r1, r3
 8002d16:	797b      	ldrb	r3, [r7, #5]
 8002d18:	79ba      	ldrb	r2, [r7, #6]
 8002d1a:	9201      	str	r2, [sp, #4]
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4a11      	ldr	r2, [pc, #68]	; (8002d68 <printDateTime+0x7c>)
 8002d22:	2114      	movs	r1, #20
 8002d24:	4811      	ldr	r0, [pc, #68]	; (8002d6c <printDateTime+0x80>)
 8002d26:	f7ff fe9b 	bl	8002a60 <npf_snprintf>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f006 fcc7 	bl	80096c0 <lcd_print>
	lcd_SetCursor(1, (LCD_row_Height * 2) - 2);
 8002d32:	2120      	movs	r1, #32
 8002d34:	2001      	movs	r0, #1
 8002d36:	f006 fc0d 	bl	8009554 <lcd_SetCursor>
	lcd_print(npf_snprintf(strbuffer, strbufferSize, "%02d/%02d/%02d", sDate.Date, sDate.Month, sDate.Year));
 8002d3a:	78bb      	ldrb	r3, [r7, #2]
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	787b      	ldrb	r3, [r7, #1]
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	9201      	str	r2, [sp, #4]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	460b      	mov	r3, r1
 8002d48:	4a09      	ldr	r2, [pc, #36]	; (8002d70 <printDateTime+0x84>)
 8002d4a:	2114      	movs	r1, #20
 8002d4c:	4807      	ldr	r0, [pc, #28]	; (8002d6c <printDateTime+0x80>)
 8002d4e:	f7ff fe87 	bl	8002a60 <npf_snprintf>
 8002d52:	4603      	mov	r3, r0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f006 fcb3 	bl	80096c0 <lcd_print>
}
 8002d5a:	bf00      	nop
 8002d5c:	3718      	adds	r7, #24
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	200002a8 	.word	0x200002a8
 8002d68:	0800c67c 	.word	0x0800c67c
 8002d6c:	20000d70 	.word	0x20000d70
 8002d70:	0800c68c 	.word	0x0800c68c
 8002d74:	00000000 	.word	0x00000000

08002d78 <drawGNSS>:

static void drawGNSS() {
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af02      	add	r7, sp, #8
	if (GNSSNewData) {
 8002d7e:	4b82      	ldr	r3, [pc, #520]	; (8002f88 <drawGNSS+0x210>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	f000 80a2 	beq.w	8002ece <drawGNSS+0x156>
		lcd_clearLines((LCD_row_Height * 2) + 2, LCD_row_Height * 6);
 8002d8a:	2166      	movs	r1, #102	; 0x66
 8002d8c:	2024      	movs	r0, #36	; 0x24
 8002d8e:	f006 fd9d 	bl	80098cc <lcd_clearLines>
		lcd_SetCursor(1, LCD_row_Height * 3);
 8002d92:	2133      	movs	r1, #51	; 0x33
 8002d94:	2001      	movs	r0, #1
 8002d96:	f006 fbdd 	bl	8009554 <lcd_SetCursor>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "%8.4f ", fabsf(getLat())));
 8002d9a:	f000 fe31 	bl	8003a00 <getLat>
 8002d9e:	eef0 7a40 	vmov.f32	s15, s0
 8002da2:	eef0 7ae7 	vabs.f32	s15, s15
 8002da6:	ee17 0a90 	vmov	r0, s15
 8002daa:	f7fd fbcd 	bl	8000548 <__aeabi_f2d>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	e9cd 2300 	strd	r2, r3, [sp]
 8002db6:	4a75      	ldr	r2, [pc, #468]	; (8002f8c <drawGNSS+0x214>)
 8002db8:	2114      	movs	r1, #20
 8002dba:	4875      	ldr	r0, [pc, #468]	; (8002f90 <drawGNSS+0x218>)
 8002dbc:	f7ff fe50 	bl	8002a60 <npf_snprintf>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f006 fc7c 	bl	80096c0 <lcd_print>
		if (getLat() < 0) {
 8002dc8:	f000 fe1a 	bl	8003a00 <getLat>
 8002dcc:	eef0 7a40 	vmov.f32	s15, s0
 8002dd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd8:	d503      	bpl.n	8002de2 <drawGNSS+0x6a>
			lcd_print_char('S');
 8002dda:	2053      	movs	r0, #83	; 0x53
 8002ddc:	f006 fc9e 	bl	800971c <lcd_print_char>
 8002de0:	e002      	b.n	8002de8 <drawGNSS+0x70>
		} else {
			lcd_print_char('N');
 8002de2:	204e      	movs	r0, #78	; 0x4e
 8002de4:	f006 fc9a 	bl	800971c <lcd_print_char>
		}
		lcd_SetCursor(1, LCD_row_Height * 4);
 8002de8:	2144      	movs	r1, #68	; 0x44
 8002dea:	2001      	movs	r0, #1
 8002dec:	f006 fbb2 	bl	8009554 <lcd_SetCursor>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "%8.4f ", fabsf(getLong())));
 8002df0:	f000 fe2e 	bl	8003a50 <getLong>
 8002df4:	eef0 7a40 	vmov.f32	s15, s0
 8002df8:	eef0 7ae7 	vabs.f32	s15, s15
 8002dfc:	ee17 0a90 	vmov	r0, s15
 8002e00:	f7fd fba2 	bl	8000548 <__aeabi_f2d>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	e9cd 2300 	strd	r2, r3, [sp]
 8002e0c:	4a5f      	ldr	r2, [pc, #380]	; (8002f8c <drawGNSS+0x214>)
 8002e0e:	2114      	movs	r1, #20
 8002e10:	485f      	ldr	r0, [pc, #380]	; (8002f90 <drawGNSS+0x218>)
 8002e12:	f7ff fe25 	bl	8002a60 <npf_snprintf>
 8002e16:	4603      	mov	r3, r0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f006 fc51 	bl	80096c0 <lcd_print>
		if (getLong() < 0) {
 8002e1e:	f000 fe17 	bl	8003a50 <getLong>
 8002e22:	eef0 7a40 	vmov.f32	s15, s0
 8002e26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2e:	d503      	bpl.n	8002e38 <drawGNSS+0xc0>
			lcd_print_char('W');
 8002e30:	2057      	movs	r0, #87	; 0x57
 8002e32:	f006 fc73 	bl	800971c <lcd_print_char>
 8002e36:	e002      	b.n	8002e3e <drawGNSS+0xc6>
		} else {
			lcd_print_char('E');
 8002e38:	2045      	movs	r0, #69	; 0x45
 8002e3a:	f006 fc6f 	bl	800971c <lcd_print_char>
		}

		lcd_SetCursor(1, LCD_row_Height * 5);
 8002e3e:	2155      	movs	r1, #85	; 0x55
 8002e40:	2001      	movs	r0, #1
 8002e42:	f006 fb87 	bl	8009554 <lcd_SetCursor>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Sat:%d Acc:%2.0fm", getNumSatellites(), getHAcc() > 99.9 ? 99.9 : getHAcc()));
 8002e46:	f000 fe8d 	bl	8003b64 <getNumSatellites>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	461c      	mov	r4, r3
 8002e4e:	f000 fe27 	bl	8003aa0 <getHAcc>
 8002e52:	ee10 3a10 	vmov	r3, s0
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fb76 	bl	8000548 <__aeabi_f2d>
 8002e5c:	a348      	add	r3, pc, #288	; (adr r3, 8002f80 <drawGNSS+0x208>)
 8002e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e62:	f7fd fe59 	bl	8000b18 <__aeabi_dcmpgt>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <drawGNSS+0xfc>
 8002e6c:	a344      	add	r3, pc, #272	; (adr r3, 8002f80 <drawGNSS+0x208>)
 8002e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e72:	e008      	b.n	8002e86 <drawGNSS+0x10e>
 8002e74:	f000 fe14 	bl	8003aa0 <getHAcc>
 8002e78:	ee10 3a10 	vmov	r3, s0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7fd fb63 	bl	8000548 <__aeabi_f2d>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	e9cd 2300 	strd	r2, r3, [sp]
 8002e8a:	4623      	mov	r3, r4
 8002e8c:	4a41      	ldr	r2, [pc, #260]	; (8002f94 <drawGNSS+0x21c>)
 8002e8e:	2114      	movs	r1, #20
 8002e90:	483f      	ldr	r0, [pc, #252]	; (8002f90 <drawGNSS+0x218>)
 8002e92:	f7ff fde5 	bl	8002a60 <npf_snprintf>
 8002e96:	4603      	mov	r3, r0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f006 fc11 	bl	80096c0 <lcd_print>

		lcd_SetCursor(1, LCD_row_Height * 6);
 8002e9e:	2166      	movs	r1, #102	; 0x66
 8002ea0:	2001      	movs	r0, #1
 8002ea2:	f006 fb57 	bl	8009554 <lcd_SetCursor>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "%dkph HD:%d", getGroundSpeed_kph(), getMotionHeading_deg()));
 8002ea6:	f000 fe21 	bl	8003aec <getGroundSpeed_kph>
 8002eaa:	4604      	mov	r4, r0
 8002eac:	f000 fe3c 	bl	8003b28 <getMotionHeading_deg>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	4623      	mov	r3, r4
 8002eb6:	4a38      	ldr	r2, [pc, #224]	; (8002f98 <drawGNSS+0x220>)
 8002eb8:	2114      	movs	r1, #20
 8002eba:	4835      	ldr	r0, [pc, #212]	; (8002f90 <drawGNSS+0x218>)
 8002ebc:	f7ff fdd0 	bl	8002a60 <npf_snprintf>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f006 fbfc 	bl	80096c0 <lcd_print>
		GNSSNewData = false;
 8002ec8:	4b2f      	ldr	r3, [pc, #188]	; (8002f88 <drawGNSS+0x210>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	701a      	strb	r2, [r3, #0]
	}

	//GNSS Age
	lcd_clearLines((LCD_row_Height * 6) + 2, LCD_row_Height * 7);
 8002ece:	2177      	movs	r1, #119	; 0x77
 8002ed0:	2068      	movs	r0, #104	; 0x68
 8002ed2:	f006 fcfb 	bl	80098cc <lcd_clearLines>
	lcd_SetCursor(2, LCD_row_Height * 7);
 8002ed6:	2177      	movs	r1, #119	; 0x77
 8002ed8:	2002      	movs	r0, #2
 8002eda:	f006 fb3b 	bl	8009554 <lcd_SetCursor>
	if (GNSSlastPacketAge < 90) {
 8002ede:	4b2f      	ldr	r3, [pc, #188]	; (8002f9c <drawGNSS+0x224>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b59      	cmp	r3, #89	; 0x59
 8002ee4:	d80b      	bhi.n	8002efe <drawGNSS+0x186>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%lus", GNSSlastPacketAge));
 8002ee6:	4b2d      	ldr	r3, [pc, #180]	; (8002f9c <drawGNSS+0x224>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a2d      	ldr	r2, [pc, #180]	; (8002fa0 <drawGNSS+0x228>)
 8002eec:	2114      	movs	r1, #20
 8002eee:	4828      	ldr	r0, [pc, #160]	; (8002f90 <drawGNSS+0x218>)
 8002ef0:	f7ff fdb6 	bl	8002a60 <npf_snprintf>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f006 fbe2 	bl	80096c0 <lcd_print>
	} else if (GNSSlastPacketAge < 3600) {
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%.1fm", (float) GNSSlastPacketAge / 60.0f));
	} else {
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%.1fh", (float) GNSSlastPacketAge / 3600.0f));
	}
}
 8002efc:	e03b      	b.n	8002f76 <drawGNSS+0x1fe>
	} else if (GNSSlastPacketAge < 3600) {
 8002efe:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <drawGNSS+0x224>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8002f06:	d21b      	bcs.n	8002f40 <drawGNSS+0x1c8>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%.1fm", (float) GNSSlastPacketAge / 60.0f));
 8002f08:	4b24      	ldr	r3, [pc, #144]	; (8002f9c <drawGNSS+0x224>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	ee07 3a90 	vmov	s15, r3
 8002f10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f14:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002fa4 <drawGNSS+0x22c>
 8002f18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f1c:	ee16 0a90 	vmov	r0, s13
 8002f20:	f7fd fb12 	bl	8000548 <__aeabi_f2d>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	e9cd 2300 	strd	r2, r3, [sp]
 8002f2c:	4a1e      	ldr	r2, [pc, #120]	; (8002fa8 <drawGNSS+0x230>)
 8002f2e:	2114      	movs	r1, #20
 8002f30:	4817      	ldr	r0, [pc, #92]	; (8002f90 <drawGNSS+0x218>)
 8002f32:	f7ff fd95 	bl	8002a60 <npf_snprintf>
 8002f36:	4603      	mov	r3, r0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f006 fbc1 	bl	80096c0 <lcd_print>
}
 8002f3e:	e01a      	b.n	8002f76 <drawGNSS+0x1fe>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%.1fh", (float) GNSSlastPacketAge / 3600.0f));
 8002f40:	4b16      	ldr	r3, [pc, #88]	; (8002f9c <drawGNSS+0x224>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	ee07 3a90 	vmov	s15, r3
 8002f48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002fac <drawGNSS+0x234>
 8002f50:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f54:	ee16 0a90 	vmov	r0, s13
 8002f58:	f7fd faf6 	bl	8000548 <__aeabi_f2d>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	e9cd 2300 	strd	r2, r3, [sp]
 8002f64:	4a12      	ldr	r2, [pc, #72]	; (8002fb0 <drawGNSS+0x238>)
 8002f66:	2114      	movs	r1, #20
 8002f68:	4809      	ldr	r0, [pc, #36]	; (8002f90 <drawGNSS+0x218>)
 8002f6a:	f7ff fd79 	bl	8002a60 <npf_snprintf>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f006 fba5 	bl	80096c0 <lcd_print>
}
 8002f76:	bf00      	nop
 8002f78:	3704      	adds	r7, #4
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd90      	pop	{r4, r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	9999999a 	.word	0x9999999a
 8002f84:	4058f999 	.word	0x4058f999
 8002f88:	20000004 	.word	0x20000004
 8002f8c:	0800c69c 	.word	0x0800c69c
 8002f90:	20000d70 	.word	0x20000d70
 8002f94:	0800c6a4 	.word	0x0800c6a4
 8002f98:	0800c6b8 	.word	0x0800c6b8
 8002f9c:	200003a0 	.word	0x200003a0
 8002fa0:	0800c6c4 	.word	0x0800c6c4
 8002fa4:	42700000 	.word	0x42700000
 8002fa8:	0800c6d0 	.word	0x0800c6d0
 8002fac:	45610000 	.word	0x45610000
 8002fb0:	0800c6dc 	.word	0x0800c6dc

08002fb4 <setTimeGNSS>:

void setTimeGNSS() {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sTime.Hours = GNSS_getHour();
 8002fba:	f000 fcfd 	bl	80039b8 <GNSS_getHour>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = GNSS_getMin();
 8002fc2:	f000 fd05 	bl	80039d0 <GNSS_getMin>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = GNSS_getSec();
 8002fca:	f000 fd0d 	bl	80039e8 <GNSS_getSec>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71bb      	strb	r3, [r7, #6]
	sDate.Year = (uint8_t) (GNSS_getYear() - (uint16_t) 2000);
 8002fd2:	f000 fccd 	bl	8003970 <GNSS_getYear>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	3330      	adds	r3, #48	; 0x30
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	70fb      	strb	r3, [r7, #3]
	sDate.Month = GNSS_getMonth();
 8002fe0:	f000 fcd2 	bl	8003988 <GNSS_getMonth>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	707b      	strb	r3, [r7, #1]
	sDate.Date = GNSS_getDay();
 8002fe8:	f000 fcda 	bl	80039a0 <GNSS_getDay>
 8002fec:	4603      	mov	r3, r0
 8002fee:	70bb      	strb	r3, [r7, #2]
	sDate.WeekDay = 0;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	703b      	strb	r3, [r7, #0]

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4806      	ldr	r0, [pc, #24]	; (8003014 <setTimeGNSS+0x60>)
 8002ffc:	f004 fbc9 	bl	8007792 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003000:	463b      	mov	r3, r7
 8003002:	2200      	movs	r2, #0
 8003004:	4619      	mov	r1, r3
 8003006:	4803      	ldr	r0, [pc, #12]	; (8003014 <setTimeGNSS+0x60>)
 8003008:	f004 fcbc 	bl	8007984 <HAL_RTC_SetDate>
}
 800300c:	bf00      	nop
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	200002a8 	.word	0x200002a8

08003018 <startADC>:

static void startADC() {
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
	if (ADCrunning) {
 800301c:	4b10      	ldr	r3, [pc, #64]	; (8003060 <startADC+0x48>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d11a      	bne.n	800305c <startADC+0x44>
		//ADC already running
		return;
	}

	ADCrunning = true;
 8003026:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <startADC+0x48>)
 8003028:	2201      	movs	r2, #1
 800302a:	701a      	strb	r2, [r3, #0]
	if (abs(tempC - ADCtempCalibrate) >= 10){ //Re-calibrate every 10 degree swing.
 800302c:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <startADC+0x4c>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <startADC+0x50>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	bfb8      	it	lt
 800303a:	425b      	neglt	r3, r3
 800303c:	2b09      	cmp	r3, #9
 800303e:	dd07      	ble.n	8003050 <startADC+0x38>
		HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003040:	217f      	movs	r1, #127	; 0x7f
 8003042:	480a      	ldr	r0, [pc, #40]	; (800306c <startADC+0x54>)
 8003044:	f002 fb94 	bl	8005770 <HAL_ADCEx_Calibration_Start>
		ADCtempCalibrate = tempC;
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <startADC+0x4c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a06      	ldr	r2, [pc, #24]	; (8003068 <startADC+0x50>)
 800304e:	6013      	str	r3, [r2, #0]
	}
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_raw, adc_Channels);
 8003050:	2203      	movs	r2, #3
 8003052:	4907      	ldr	r1, [pc, #28]	; (8003070 <startADC+0x58>)
 8003054:	4805      	ldr	r0, [pc, #20]	; (800306c <startADC+0x54>)
 8003056:	f001 fc4f 	bl	80048f8 <HAL_ADC_Start_DMA>
 800305a:	e000      	b.n	800305e <startADC+0x46>
		return;
 800305c:	bf00      	nop
}
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000378 	.word	0x20000378
 8003064:	20000380 	.word	0x20000380
 8003068:	20000384 	.word	0x20000384
 800306c:	200001fc 	.word	0x200001fc
 8003070:	20000388 	.word	0x20000388

08003074 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 800307c:	4822      	ldr	r0, [pc, #136]	; (8003108 <HAL_ADC_ConvCpltCallback+0x94>)
 800307e:	f001 fcbf 	bl	8004a00 <HAL_ADC_Stop_DMA>

	uint32_t vref = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(ADC_raw[2], ADC_RESOLUTION_12B);
 8003082:	4b22      	ldr	r3, [pc, #136]	; (800310c <HAL_ADC_ConvCpltCallback+0x98>)
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800308c:	fb02 f303 	mul.w	r3, r2, r3
 8003090:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <HAL_ADC_ConvCpltCallback+0x9c>)
 8003092:	8892      	ldrh	r2, [r2, #4]
 8003094:	b292      	uxth	r2, r2
 8003096:	fbb3 f3f2 	udiv	r3, r3, r2
 800309a:	60fb      	str	r3, [r7, #12]

	//solarmV = ADC_raw[0];
	superCapmV = ((uint32_t) ADC_raw[0] * vref * 2) / 4095UL;
 800309c:	4b1c      	ldr	r3, [pc, #112]	; (8003110 <HAL_ADC_ConvCpltCallback+0x9c>)
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	461a      	mov	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	fb02 f303 	mul.w	r3, r2, r3
 80030aa:	005a      	lsls	r2, r3, #1
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_ADC_ConvCpltCallback+0xa0>)
 80030ae:	fba3 1302 	umull	r1, r3, r3, r2
 80030b2:	1ad2      	subs	r2, r2, r3
 80030b4:	0852      	lsrs	r2, r2, #1
 80030b6:	4413      	add	r3, r2
 80030b8:	0adb      	lsrs	r3, r3, #11
 80030ba:	4a17      	ldr	r2, [pc, #92]	; (8003118 <HAL_ADC_ConvCpltCallback+0xa4>)
 80030bc:	6013      	str	r3, [r2, #0]

	//Temperature
	tempC = __HAL_ADC_CALC_TEMPERATURE(vref, ADC_raw[1], ADC_RESOLUTION_12B);
 80030be:	4b14      	ldr	r3, [pc, #80]	; (8003110 <HAL_ADC_ConvCpltCallback+0x9c>)
 80030c0:	885b      	ldrh	r3, [r3, #2]
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	fb02 f303 	mul.w	r3, r2, r3
 80030cc:	4a13      	ldr	r2, [pc, #76]	; (800311c <HAL_ADC_ConvCpltCallback+0xa8>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	099b      	lsrs	r3, r3, #6
 80030d4:	461a      	mov	r2, r3
 80030d6:	4b12      	ldr	r3, [pc, #72]	; (8003120 <HAL_ADC_ConvCpltCallback+0xac>)
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2264      	movs	r2, #100	; 0x64
 80030de:	fb03 f202 	mul.w	r2, r3, r2
 80030e2:	4b10      	ldr	r3, [pc, #64]	; (8003124 <HAL_ADC_ConvCpltCallback+0xb0>)
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	4619      	mov	r1, r3
 80030e8:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <HAL_ADC_ConvCpltCallback+0xac>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	1acb      	subs	r3, r1, r3
 80030ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80030f2:	331e      	adds	r3, #30
 80030f4:	4a0c      	ldr	r2, [pc, #48]	; (8003128 <HAL_ADC_ConvCpltCallback+0xb4>)
 80030f6:	6013      	str	r3, [r2, #0]

	ADCrunning = false;
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <HAL_ADC_ConvCpltCallback+0xb8>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
}
 80030fe:	bf00      	nop
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	200001fc 	.word	0x200001fc
 800310c:	1fff75aa 	.word	0x1fff75aa
 8003110:	20000388 	.word	0x20000388
 8003114:	00100101 	.word	0x00100101
 8003118:	2000037c 	.word	0x2000037c
 800311c:	057619f1 	.word	0x057619f1
 8003120:	1fff75a8 	.word	0x1fff75a8
 8003124:	1fff75ca 	.word	0x1fff75ca
 8003128:	20000380 	.word	0x20000380
 800312c:	20000378 	.word	0x20000378

08003130 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	guiTimer++;
 8003138:	4b07      	ldr	r3, [pc, #28]	; (8003158 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3301      	adds	r3, #1
 800313e:	4a06      	ldr	r2, [pc, #24]	; (8003158 <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 8003140:	6013      	str	r3, [r2, #0]
	GNSSlastPacketAge++;
 8003142:	4b06      	ldr	r3, [pc, #24]	; (800315c <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3301      	adds	r3, #1
 8003148:	4a04      	ldr	r2, [pc, #16]	; (800315c <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 800314a:	6013      	str	r3, [r2, #0]
}
 800314c:	bf00      	nop
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	20000390 	.word	0x20000390
 800315c:	200003a0 	.word	0x200003a0

08003160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <HAL_MspInit+0x44>)
 8003168:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316a:	4a0e      	ldr	r2, [pc, #56]	; (80031a4 <HAL_MspInit+0x44>)
 800316c:	f043 0301 	orr.w	r3, r3, #1
 8003170:	6613      	str	r3, [r2, #96]	; 0x60
 8003172:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <HAL_MspInit+0x44>)
 8003174:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	607b      	str	r3, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800317e:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <HAL_MspInit+0x44>)
 8003180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003182:	4a08      	ldr	r2, [pc, #32]	; (80031a4 <HAL_MspInit+0x44>)
 8003184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003188:	6593      	str	r3, [r2, #88]	; 0x58
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_MspInit+0x44>)
 800318c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003196:	bf00      	nop
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	40021000 	.word	0x40021000

080031a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b09e      	sub	sp, #120	; 0x78
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]
 80031ba:	609a      	str	r2, [r3, #8]
 80031bc:	60da      	str	r2, [r3, #12]
 80031be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031c0:	f107 0310 	add.w	r3, r7, #16
 80031c4:	2254      	movs	r2, #84	; 0x54
 80031c6:	2100      	movs	r1, #0
 80031c8:	4618      	mov	r0, r3
 80031ca:	f006 fd2b 	bl	8009c24 <memset>
  if(hadc->Instance==ADC1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a33      	ldr	r2, [pc, #204]	; (80032a0 <HAL_ADC_MspInit+0xf8>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d15f      	bne.n	8003298 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80031d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031dc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80031de:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80031e2:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031e4:	f107 0310 	add.w	r3, r7, #16
 80031e8:	4618      	mov	r0, r3
 80031ea:	f003 ff5f 	bl	80070ac <HAL_RCCEx_PeriphCLKConfig>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d001      	beq.n	80031f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80031f4:	f7fe fb00 	bl	80017f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80031f8:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <HAL_ADC_MspInit+0xfc>)
 80031fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fc:	4a29      	ldr	r2, [pc, #164]	; (80032a4 <HAL_ADC_MspInit+0xfc>)
 80031fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003202:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003204:	4b27      	ldr	r3, [pc, #156]	; (80032a4 <HAL_ADC_MspInit+0xfc>)
 8003206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003210:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <HAL_ADC_MspInit+0xfc>)
 8003212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003214:	4a23      	ldr	r2, [pc, #140]	; (80032a4 <HAL_ADC_MspInit+0xfc>)
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800321c:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <HAL_ADC_MspInit+0xfc>)
 800321e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003220:	f003 0301 	and.w	r3, r3, #1
 8003224:	60bb      	str	r3, [r7, #8]
 8003226:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003228:	2302      	movs	r3, #2
 800322a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800322c:	230b      	movs	r3, #11
 800322e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003230:	2300      	movs	r3, #0
 8003232:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003234:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003238:	4619      	mov	r1, r3
 800323a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800323e:	f002 fe7f 	bl	8005f40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003242:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <HAL_ADC_MspInit+0x100>)
 8003244:	4a19      	ldr	r2, [pc, #100]	; (80032ac <HAL_ADC_MspInit+0x104>)
 8003246:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003248:	4b17      	ldr	r3, [pc, #92]	; (80032a8 <HAL_ADC_MspInit+0x100>)
 800324a:	2200      	movs	r2, #0
 800324c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800324e:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <HAL_ADC_MspInit+0x100>)
 8003250:	2200      	movs	r2, #0
 8003252:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003254:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <HAL_ADC_MspInit+0x100>)
 8003256:	2200      	movs	r2, #0
 8003258:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800325a:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <HAL_ADC_MspInit+0x100>)
 800325c:	2280      	movs	r2, #128	; 0x80
 800325e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003260:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <HAL_ADC_MspInit+0x100>)
 8003262:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003266:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003268:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <HAL_ADC_MspInit+0x100>)
 800326a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800326e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003270:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <HAL_ADC_MspInit+0x100>)
 8003272:	2200      	movs	r2, #0
 8003274:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003276:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <HAL_ADC_MspInit+0x100>)
 8003278:	2200      	movs	r2, #0
 800327a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800327c:	480a      	ldr	r0, [pc, #40]	; (80032a8 <HAL_ADC_MspInit+0x100>)
 800327e:	f002 fbe9 	bl	8005a54 <HAL_DMA_Init>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8003288:	f7fe fab6 	bl	80017f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a06      	ldr	r2, [pc, #24]	; (80032a8 <HAL_ADC_MspInit+0x100>)
 8003290:	64da      	str	r2, [r3, #76]	; 0x4c
 8003292:	4a05      	ldr	r2, [pc, #20]	; (80032a8 <HAL_ADC_MspInit+0x100>)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003298:	bf00      	nop
 800329a:	3778      	adds	r7, #120	; 0x78
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	50040000 	.word	0x50040000
 80032a4:	40021000 	.word	0x40021000
 80032a8:	20000260 	.word	0x20000260
 80032ac:	40020008 	.word	0x40020008

080032b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b098      	sub	sp, #96	; 0x60
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032b8:	f107 030c 	add.w	r3, r7, #12
 80032bc:	2254      	movs	r2, #84	; 0x54
 80032be:	2100      	movs	r1, #0
 80032c0:	4618      	mov	r0, r3
 80032c2:	f006 fcaf 	bl	8009c24 <memset>
  if(hrtc->Instance==RTC)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a13      	ldr	r2, [pc, #76]	; (8003318 <HAL_RTC_MspInit+0x68>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d11f      	bne.n	8003310 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80032d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032d4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80032d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032da:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032dc:	f107 030c 	add.w	r3, r7, #12
 80032e0:	4618      	mov	r0, r3
 80032e2:	f003 fee3 	bl	80070ac <HAL_RCCEx_PeriphCLKConfig>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80032ec:	f7fe fa84 	bl	80017f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <HAL_RTC_MspInit+0x6c>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f6:	4a09      	ldr	r2, [pc, #36]	; (800331c <HAL_RTC_MspInit+0x6c>)
 80032f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003300:	2200      	movs	r2, #0
 8003302:	2100      	movs	r1, #0
 8003304:	2003      	movs	r0, #3
 8003306:	f002 fb6e 	bl	80059e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800330a:	2003      	movs	r0, #3
 800330c:	f002 fb87 	bl	8005a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003310:	bf00      	nop
 8003312:	3760      	adds	r7, #96	; 0x60
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40002800 	.word	0x40002800
 800331c:	40021000 	.word	0x40021000

08003320 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08a      	sub	sp, #40	; 0x28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003328:	f107 0314 	add.w	r3, r7, #20
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
 8003330:	605a      	str	r2, [r3, #4]
 8003332:	609a      	str	r2, [r3, #8]
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a30      	ldr	r2, [pc, #192]	; (8003400 <HAL_SPI_MspInit+0xe0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d159      	bne.n	80033f6 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003342:	4b30      	ldr	r3, [pc, #192]	; (8003404 <HAL_SPI_MspInit+0xe4>)
 8003344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003346:	4a2f      	ldr	r2, [pc, #188]	; (8003404 <HAL_SPI_MspInit+0xe4>)
 8003348:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800334c:	6613      	str	r3, [r2, #96]	; 0x60
 800334e:	4b2d      	ldr	r3, [pc, #180]	; (8003404 <HAL_SPI_MspInit+0xe4>)
 8003350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335a:	4b2a      	ldr	r3, [pc, #168]	; (8003404 <HAL_SPI_MspInit+0xe4>)
 800335c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335e:	4a29      	ldr	r2, [pc, #164]	; (8003404 <HAL_SPI_MspInit+0xe4>)
 8003360:	f043 0301 	orr.w	r3, r3, #1
 8003364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003366:	4b27      	ldr	r3, [pc, #156]	; (8003404 <HAL_SPI_MspInit+0xe4>)
 8003368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003372:	23e0      	movs	r3, #224	; 0xe0
 8003374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003376:	2302      	movs	r3, #2
 8003378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337e:	2303      	movs	r3, #3
 8003380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003382:	2305      	movs	r3, #5
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003386:	f107 0314 	add.w	r3, r7, #20
 800338a:	4619      	mov	r1, r3
 800338c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003390:	f002 fdd6 	bl	8005f40 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003394:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <HAL_SPI_MspInit+0xe8>)
 8003396:	4a1d      	ldr	r2, [pc, #116]	; (800340c <HAL_SPI_MspInit+0xec>)
 8003398:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800339a:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <HAL_SPI_MspInit+0xe8>)
 800339c:	2201      	movs	r2, #1
 800339e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_SPI_MspInit+0xe8>)
 80033a2:	2210      	movs	r2, #16
 80033a4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033a6:	4b18      	ldr	r3, [pc, #96]	; (8003408 <HAL_SPI_MspInit+0xe8>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033ac:	4b16      	ldr	r3, [pc, #88]	; (8003408 <HAL_SPI_MspInit+0xe8>)
 80033ae:	2280      	movs	r2, #128	; 0x80
 80033b0:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033b2:	4b15      	ldr	r3, [pc, #84]	; (8003408 <HAL_SPI_MspInit+0xe8>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033b8:	4b13      	ldr	r3, [pc, #76]	; (8003408 <HAL_SPI_MspInit+0xe8>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_SPI_MspInit+0xe8>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033c4:	4b10      	ldr	r3, [pc, #64]	; (8003408 <HAL_SPI_MspInit+0xe8>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80033ca:	480f      	ldr	r0, [pc, #60]	; (8003408 <HAL_SPI_MspInit+0xe8>)
 80033cc:	f002 fb42 	bl	8005a54 <HAL_DMA_Init>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d001      	beq.n	80033da <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80033d6:	f7fe fa0f 	bl	80017f8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <HAL_SPI_MspInit+0xe8>)
 80033de:	655a      	str	r2, [r3, #84]	; 0x54
 80033e0:	4a09      	ldr	r2, [pc, #36]	; (8003408 <HAL_SPI_MspInit+0xe8>)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80033e6:	2200      	movs	r2, #0
 80033e8:	2100      	movs	r1, #0
 80033ea:	2023      	movs	r0, #35	; 0x23
 80033ec:	f002 fafb 	bl	80059e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80033f0:	2023      	movs	r0, #35	; 0x23
 80033f2:	f002 fb14 	bl	8005a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033f6:	bf00      	nop
 80033f8:	3728      	adds	r7, #40	; 0x28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40013000 	.word	0x40013000
 8003404:	40021000 	.word	0x40021000
 8003408:	20000330 	.word	0x20000330
 800340c:	40020030 	.word	0x40020030

08003410 <LL_LPUART_IsActiveFlag_ORE>:
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b08      	cmp	r3, #8
 8003422:	d101      	bne.n	8003428 <LL_LPUART_IsActiveFlag_ORE+0x18>
 8003424:	2301      	movs	r3, #1
 8003426:	e000      	b.n	800342a <LL_LPUART_IsActiveFlag_ORE+0x1a>
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <LL_LPUART_IsActiveFlag_WKUP>:
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_WUF) == (USART_ISR_WUF)) ? 1UL : 0UL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800344a:	d101      	bne.n	8003450 <LL_LPUART_IsActiveFlag_WKUP+0x1a>
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <LL_LPUART_IsActiveFlag_WKUP+0x1c>
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <LL_LPUART_ClearFlag_ORE>:
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2208      	movs	r2, #8
 800346a:	621a      	str	r2, [r3, #32]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <LL_LPUART_ClearFlag_WKUP>:
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_WUCF);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003486:	621a      	str	r2, [r3, #32]
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_LPUART_IsEnabledIT_WKUP>:
  * @rmtoll CR3          WUFIE         LL_LPUART_IsEnabledIT_WKUP
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_WKUP(const USART_TypeDef *LPUARTx)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR3, USART_CR3_WUFIE) == (USART_CR3_WUFIE)) ? 1UL : 0UL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034a8:	d101      	bne.n	80034ae <LL_LPUART_IsEnabledIT_WKUP+0x1a>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <LL_LPUART_IsEnabledIT_WKUP+0x1c>
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034c0:	e7fe      	b.n	80034c0 <NMI_Handler+0x4>

080034c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034c2:	b480      	push	{r7}
 80034c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034c6:	e7fe      	b.n	80034c6 <HardFault_Handler+0x4>

080034c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034cc:	e7fe      	b.n	80034cc <MemManage_Handler+0x4>

080034ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034ce:	b480      	push	{r7}
 80034d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034d2:	e7fe      	b.n	80034d2 <BusFault_Handler+0x4>

080034d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034d8:	e7fe      	b.n	80034d8 <UsageFault_Handler+0x4>

080034da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034da:	b480      	push	{r7}
 80034dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034fa:	bf00      	nop
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003508:	f000 fe58 	bl	80041bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800350c:	bf00      	nop
 800350e:	bd80      	pop	{r7, pc}

08003510 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003514:	4803      	ldr	r0, [pc, #12]	; (8003524 <RTC_WKUP_IRQHandler+0x14>)
 8003516:	f004 fc6f 	bl	8007df8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  lastWakeUpSource = WKUP_RTC;
 800351a:	4b03      	ldr	r3, [pc, #12]	; (8003528 <RTC_WKUP_IRQHandler+0x18>)
 800351c:	2202      	movs	r2, #2
 800351e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}
 8003524:	200002a8 	.word	0x200002a8
 8003528:	20000394 	.word	0x20000394

0800352c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003530:	4802      	ldr	r0, [pc, #8]	; (800353c <DMA1_Channel1_IRQHandler+0x10>)
 8003532:	f002 fc26 	bl	8005d82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000260 	.word	0x20000260

08003540 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003544:	4802      	ldr	r0, [pc, #8]	; (8003550 <DMA1_Channel3_IRQHandler+0x10>)
 8003546:	f002 fc1c 	bl	8005d82 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000330 	.word	0x20000330

08003554 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003558:	4802      	ldr	r0, [pc, #8]	; (8003564 <SPI1_IRQHandler+0x10>)
 800355a:	f004 ff79 	bl	8008450 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	200002cc 	.word	0x200002cc

08003568 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  /* USER CODE BEGIN LPUART1_IRQn 1 */
	if (LL_LPUART_IsActiveFlag_WKUP(LPUART1) && LL_LPUART_IsEnabledIT_WKUP(LPUART1)) {
 800356c:	480f      	ldr	r0, [pc, #60]	; (80035ac <LPUART1_IRQHandler+0x44>)
 800356e:	f7ff ff62 	bl	8003436 <LL_LPUART_IsActiveFlag_WKUP>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00b      	beq.n	8003590 <LPUART1_IRQHandler+0x28>
 8003578:	480c      	ldr	r0, [pc, #48]	; (80035ac <LPUART1_IRQHandler+0x44>)
 800357a:	f7ff ff8b 	bl	8003494 <LL_LPUART_IsEnabledIT_WKUP>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <LPUART1_IRQHandler+0x28>
		LL_LPUART_ClearFlag_WKUP(LPUART1);
 8003584:	4809      	ldr	r0, [pc, #36]	; (80035ac <LPUART1_IRQHandler+0x44>)
 8003586:	f7ff ff77 	bl	8003478 <LL_LPUART_ClearFlag_WKUP>
		lastWakeUpSource = WKUP_LPUART;
 800358a:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <LPUART1_IRQHandler+0x48>)
 800358c:	2201      	movs	r2, #1
 800358e:	701a      	strb	r2, [r3, #0]
	}
	if (LL_LPUART_IsActiveFlag_ORE(LPUART1)) { //If overrun has occured
 8003590:	4806      	ldr	r0, [pc, #24]	; (80035ac <LPUART1_IRQHandler+0x44>)
 8003592:	f7ff ff3d 	bl	8003410 <LL_LPUART_IsActiveFlag_ORE>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <LPUART1_IRQHandler+0x3a>
		LL_LPUART_ClearFlag_ORE(LPUART1);
 800359c:	4803      	ldr	r0, [pc, #12]	; (80035ac <LPUART1_IRQHandler+0x44>)
 800359e:	f7ff ff5e 	bl	800345e <LL_LPUART_ClearFlag_ORE>
	}

	LPUART_CharReception_Callback();
 80035a2:	f000 fd6d 	bl	8004080 <LPUART_CharReception_Callback>
  /* USER CODE END LPUART1_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40008000 	.word	0x40008000
 80035b0:	20000394 	.word	0x20000394

080035b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  return 1;
 80035b8:	2301      	movs	r3, #1
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <_kill>:

int _kill(int pid, int sig)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035ce:	f006 faf1 	bl	8009bb4 <__errno>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2216      	movs	r2, #22
 80035d6:	601a      	str	r2, [r3, #0]
  return -1;
 80035d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <_exit>:

void _exit (int status)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035ec:	f04f 31ff 	mov.w	r1, #4294967295
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff ffe7 	bl	80035c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035f6:	e7fe      	b.n	80035f6 <_exit+0x12>

080035f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	e00a      	b.n	8003620 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800360a:	f3af 8000 	nop.w
 800360e:	4601      	mov	r1, r0
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	60ba      	str	r2, [r7, #8]
 8003616:	b2ca      	uxtb	r2, r1
 8003618:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	3301      	adds	r3, #1
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	429a      	cmp	r2, r3
 8003626:	dbf0      	blt.n	800360a <_read+0x12>
  }

  return len;
 8003628:	687b      	ldr	r3, [r7, #4]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b086      	sub	sp, #24
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800363e:	2300      	movs	r3, #0
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	e009      	b.n	8003658 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	60ba      	str	r2, [r7, #8]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	3301      	adds	r3, #1
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	429a      	cmp	r2, r3
 800365e:	dbf1      	blt.n	8003644 <_write+0x12>
  }
  return len;
 8003660:	687b      	ldr	r3, [r7, #4]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <_close>:

int _close(int file)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003672:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003692:	605a      	str	r2, [r3, #4]
  return 0;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <_isatty>:

int _isatty(int file)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036aa:	2301      	movs	r3, #1
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3714      	adds	r7, #20
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
	...

080036d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036dc:	4a14      	ldr	r2, [pc, #80]	; (8003730 <_sbrk+0x5c>)
 80036de:	4b15      	ldr	r3, [pc, #84]	; (8003734 <_sbrk+0x60>)
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036e8:	4b13      	ldr	r3, [pc, #76]	; (8003738 <_sbrk+0x64>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d102      	bne.n	80036f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <_sbrk+0x64>)
 80036f2:	4a12      	ldr	r2, [pc, #72]	; (800373c <_sbrk+0x68>)
 80036f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <_sbrk+0x64>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	429a      	cmp	r2, r3
 8003702:	d207      	bcs.n	8003714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003704:	f006 fa56 	bl	8009bb4 <__errno>
 8003708:	4603      	mov	r3, r0
 800370a:	220c      	movs	r2, #12
 800370c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800370e:	f04f 33ff 	mov.w	r3, #4294967295
 8003712:	e009      	b.n	8003728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003714:	4b08      	ldr	r3, [pc, #32]	; (8003738 <_sbrk+0x64>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800371a:	4b07      	ldr	r3, [pc, #28]	; (8003738 <_sbrk+0x64>)
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4413      	add	r3, r2
 8003722:	4a05      	ldr	r2, [pc, #20]	; (8003738 <_sbrk+0x64>)
 8003724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003726:	68fb      	ldr	r3, [r7, #12]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20010000 	.word	0x20010000
 8003734:	00000400 	.word	0x00000400
 8003738:	20000398 	.word	0x20000398
 800373c:	20000da0 	.word	0x20000da0

08003740 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003744:	4b06      	ldr	r3, [pc, #24]	; (8003760 <SystemInit+0x20>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374a:	4a05      	ldr	r2, [pc, #20]	; (8003760 <SystemInit+0x20>)
 800374c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003754:	bf00      	nop
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	e000ed00 	.word	0xe000ed00

08003764 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800379c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003768:	f7ff ffea 	bl	8003740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 800376c:	480c      	ldr	r0, [pc, #48]	; (80037a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800376e:	490d      	ldr	r1, [pc, #52]	; (80037a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003770:	4a0d      	ldr	r2, [pc, #52]	; (80037a8 <LoopForever+0xe>)
  movs r3, #0
 8003772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003774:	e002      	b.n	800377c <LoopCopyDataInit>

08003776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800377a:	3304      	adds	r3, #4

0800377c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800377c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800377e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003780:	d3f9      	bcc.n	8003776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003782:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8003784:	4c0a      	ldr	r4, [pc, #40]	; (80037b0 <LoopForever+0x16>)
  movs r3, #0
 8003786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003788:	e001      	b.n	800378e <LoopFillZerobss>

0800378a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800378a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800378c:	3204      	adds	r2, #4

0800378e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800378e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003790:	d3fb      	bcc.n	800378a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003792:	f006 fa15 	bl	8009bc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003796:	f7fd fd09 	bl	80011ac <main>

0800379a <LoopForever>:

LoopForever:
    b LoopForever
 800379a:	e7fe      	b.n	800379a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800379c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80037a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037a4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80037a8:	0800d35c 	.word	0x0800d35c
  ldr r2, =_sbss
 80037ac:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80037b0:	20000da0 	.word	0x20000da0

080037b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80037b4:	e7fe      	b.n	80037b4 <ADC1_IRQHandler>

080037b6 <LL_LPUART_IsEnabled>:
{
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d101      	bne.n	80037ce <LL_LPUART_IsEnabled+0x18>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <LL_LPUART_IsEnabled+0x1a>
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <LL_LPUART_EnableInStopMode>:
{
 80037dc:	b480      	push	{r7}
 80037de:	b089      	sub	sp, #36	; 0x24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_UESM);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	e853 3f00 	ldrex	r3, [r3]
 80037ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f043 0302 	orr.w	r3, r3, #2
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	61ba      	str	r2, [r7, #24]
 80037fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003800:	6979      	ldr	r1, [r7, #20]
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	e841 2300 	strex	r3, r2, [r1]
 8003808:	613b      	str	r3, [r7, #16]
   return(result);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1e9      	bne.n	80037e4 <LL_LPUART_EnableInStopMode+0x8>
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	3724      	adds	r7, #36	; 0x24
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <LL_LPUART_IsActiveFlag_RXNE>:
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b20      	cmp	r3, #32
 8003830:	d101      	bne.n	8003836 <LL_LPUART_IsActiveFlag_RXNE+0x18>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <LL_LPUART_IsActiveFlag_RXNE+0x1a>
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <LL_LPUART_IsActiveFlag_TC>:
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d101      	bne.n	800385c <LL_LPUART_IsActiveFlag_TC+0x18>
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <LL_LPUART_IsActiveFlag_TC+0x1a>
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <LL_LPUART_IsActiveFlag_TXE>:
{
 800386a:	b480      	push	{r7}
 800386c:	b083      	sub	sp, #12
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800387a:	2b80      	cmp	r3, #128	; 0x80
 800387c:	d101      	bne.n	8003882 <LL_LPUART_IsActiveFlag_TXE+0x18>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <LL_LPUART_IsActiveFlag_TXE+0x1a>
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <LL_LPUART_IsActiveFlag_REACK>:
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038a4:	d101      	bne.n	80038aa <LL_LPUART_IsActiveFlag_REACK+0x1a>
 80038a6:	2301      	movs	r3, #1
 80038a8:	e000      	b.n	80038ac <LL_LPUART_IsActiveFlag_REACK+0x1c>
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <LL_LPUART_ClearFlag_ORE>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2208      	movs	r2, #8
 80038c4:	621a      	str	r2, [r3, #32]
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <LL_LPUART_ClearFlag_WKUP>:
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_WUCF);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038e0:	621a      	str	r2, [r3, #32]
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <LL_LPUART_EnableIT_WKUP>:
{
 80038ee:	b480      	push	{r7}
 80038f0:	b089      	sub	sp, #36	; 0x24
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_WUFIE);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	3308      	adds	r3, #8
 80038fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	60bb      	str	r3, [r7, #8]
   return(result);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800390a:	61fb      	str	r3, [r7, #28]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3308      	adds	r3, #8
 8003910:	69fa      	ldr	r2, [r7, #28]
 8003912:	61ba      	str	r2, [r7, #24]
 8003914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003916:	6979      	ldr	r1, [r7, #20]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	613b      	str	r3, [r7, #16]
   return(result);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e7      	bne.n	80038f6 <LL_LPUART_EnableIT_WKUP+0x8>
}
 8003926:	bf00      	nop
 8003928:	bf00      	nop
 800392a:	3724      	adds	r7, #36	; 0x24
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <LL_LPUART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_LPUART_ReceiveData8
  * @param  LPUARTx LPUART Instance
  * @retval Time Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_LPUART_ReceiveData8(const USART_TypeDef *LPUARTx)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003940:	b29b      	uxth	r3, r3
 8003942:	b2db      	uxtb	r3, r3
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <LL_LPUART_TransmitData8>:
  * @param  LPUARTx LPUART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	70fb      	strb	r3, [r7, #3]
  LPUARTx->TDR = Value;
 800395c:	78fb      	ldrb	r3, [r7, #3]
 800395e:	b29a      	uxth	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr

08003970 <GNSS_getYear>:
static void GNSS_Set_Power(enum GNSS_rate);
static void LPUART_Transmit(uint8_t *pData, uint16_t Size, uint32_t Timeout);

//Functions
//Time
uint16_t GNSS_getYear() {
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.year;
 8003974:	4b03      	ldr	r3, [pc, #12]	; (8003984 <GNSS_getYear+0x14>)
 8003976:	889b      	ldrh	r3, [r3, #4]
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000410 	.word	0x20000410

08003988 <GNSS_getMonth>:
uint8_t GNSS_getMonth() {
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.month;
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <GNSS_getMonth+0x14>)
 800398e:	799b      	ldrb	r3, [r3, #6]
}
 8003990:	4618      	mov	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	20000410 	.word	0x20000410

080039a0 <GNSS_getDay>:
uint8_t GNSS_getDay() {
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.day;
 80039a4:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <GNSS_getDay+0x14>)
 80039a6:	79db      	ldrb	r3, [r3, #7]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	20000410 	.word	0x20000410

080039b8 <GNSS_getHour>:
uint8_t GNSS_getHour() {
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.hour;
 80039bc:	4b03      	ldr	r3, [pc, #12]	; (80039cc <GNSS_getHour+0x14>)
 80039be:	7a1b      	ldrb	r3, [r3, #8]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000410 	.word	0x20000410

080039d0 <GNSS_getMin>:
uint8_t GNSS_getMin() {
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.min;
 80039d4:	4b03      	ldr	r3, [pc, #12]	; (80039e4 <GNSS_getMin+0x14>)
 80039d6:	7a5b      	ldrb	r3, [r3, #9]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	20000410 	.word	0x20000410

080039e8 <GNSS_getSec>:
uint8_t GNSS_getSec() {
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.sec;
 80039ec:	4b03      	ldr	r3, [pc, #12]	; (80039fc <GNSS_getSec+0x14>)
 80039ee:	7a9b      	ldrb	r3, [r3, #10]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20000410 	.word	0x20000410

08003a00 <getLat>:

//Location
float getLat() {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	af00      	add	r7, sp, #0
	return ((float) ubx_nav_pvt.lat_deg) * 1e-7;
 8003a04:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <getLat+0x48>)
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	ee07 3a90 	vmov	s15, r3
 8003a0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a10:	ee17 0a90 	vmov	r0, s15
 8003a14:	f7fc fd98 	bl	8000548 <__aeabi_f2d>
 8003a18:	a309      	add	r3, pc, #36	; (adr r3, 8003a40 <getLat+0x40>)
 8003a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1e:	f7fc fdeb 	bl	80005f8 <__aeabi_dmul>
 8003a22:	4602      	mov	r2, r0
 8003a24:	460b      	mov	r3, r1
 8003a26:	4610      	mov	r0, r2
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f7fd f8bd 	bl	8000ba8 <__aeabi_d2f>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	ee07 3a90 	vmov	s15, r3
}
 8003a34:	eeb0 0a67 	vmov.f32	s0, s15
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	f3af 8000 	nop.w
 8003a40:	9abcaf48 	.word	0x9abcaf48
 8003a44:	3e7ad7f2 	.word	0x3e7ad7f2
 8003a48:	20000410 	.word	0x20000410
 8003a4c:	00000000 	.word	0x00000000

08003a50 <getLong>:

float getLong() {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
	return ((float) ubx_nav_pvt.lon_deg) * 1e-7;
 8003a54:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <getLong+0x48>)
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	ee07 3a90 	vmov	s15, r3
 8003a5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a60:	ee17 0a90 	vmov	r0, s15
 8003a64:	f7fc fd70 	bl	8000548 <__aeabi_f2d>
 8003a68:	a309      	add	r3, pc, #36	; (adr r3, 8003a90 <getLong+0x40>)
 8003a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6e:	f7fc fdc3 	bl	80005f8 <__aeabi_dmul>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4610      	mov	r0, r2
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f7fd f895 	bl	8000ba8 <__aeabi_d2f>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	ee07 3a90 	vmov	s15, r3
}
 8003a84:	eeb0 0a67 	vmov.f32	s0, s15
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	f3af 8000 	nop.w
 8003a90:	9abcaf48 	.word	0x9abcaf48
 8003a94:	3e7ad7f2 	.word	0x3e7ad7f2
 8003a98:	20000410 	.word	0x20000410
 8003a9c:	00000000 	.word	0x00000000

08003aa0 <getHAcc>:

float getHAcc() {
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
	return (float) ubx_nav_pvt.hacc * 1e-3;
 8003aa4:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <getHAcc+0x48>)
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	ee07 3a90 	vmov	s15, r3
 8003aac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab0:	ee17 0a90 	vmov	r0, s15
 8003ab4:	f7fc fd48 	bl	8000548 <__aeabi_f2d>
 8003ab8:	a309      	add	r3, pc, #36	; (adr r3, 8003ae0 <getHAcc+0x40>)
 8003aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abe:	f7fc fd9b 	bl	80005f8 <__aeabi_dmul>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f7fd f86d 	bl	8000ba8 <__aeabi_d2f>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	ee07 3a90 	vmov	s15, r3
}
 8003ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	f3af 8000 	nop.w
 8003ae0:	d2f1a9fc 	.word	0xd2f1a9fc
 8003ae4:	3f50624d 	.word	0x3f50624d
 8003ae8:	20000410 	.word	0x20000410

08003aec <getGroundSpeed_kph>:

int getGroundSpeed_kph() {
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
	return (int) ((ubx_nav_pvt.gspeed / 1000) * 3600) / 1000; // km/h
 8003af0:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <getGroundSpeed_kph+0x34>)
 8003af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af4:	4a0b      	ldr	r2, [pc, #44]	; (8003b24 <getGroundSpeed_kph+0x38>)
 8003af6:	fb82 1203 	smull	r1, r2, r2, r3
 8003afa:	1192      	asrs	r2, r2, #6
 8003afc:	17db      	asrs	r3, r3, #31
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8003b04:	fb02 f303 	mul.w	r3, r2, r3
 8003b08:	4a06      	ldr	r2, [pc, #24]	; (8003b24 <getGroundSpeed_kph+0x38>)
 8003b0a:	fb82 1203 	smull	r1, r2, r2, r3
 8003b0e:	1192      	asrs	r2, r2, #6
 8003b10:	17db      	asrs	r3, r3, #31
 8003b12:	1ad3      	subs	r3, r2, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000410 	.word	0x20000410
 8003b24:	10624dd3 	.word	0x10624dd3

08003b28 <getMotionHeading_deg>:
int getMotionHeading_deg() {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
	return (int) (ubx_nav_pvt.headmot * 1e-5);
 8003b2c:	4b0c      	ldr	r3, [pc, #48]	; (8003b60 <getMotionHeading_deg+0x38>)
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fc fcf7 	bl	8000524 <__aeabi_i2d>
 8003b36:	a308      	add	r3, pc, #32	; (adr r3, 8003b58 <getMotionHeading_deg+0x30>)
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f7fc fd5c 	bl	80005f8 <__aeabi_dmul>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4610      	mov	r0, r2
 8003b46:	4619      	mov	r1, r3
 8003b48:	f7fd f806 	bl	8000b58 <__aeabi_d2iz>
 8003b4c:	4603      	mov	r3, r0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	f3af 8000 	nop.w
 8003b58:	88e368f1 	.word	0x88e368f1
 8003b5c:	3ee4f8b5 	.word	0x3ee4f8b5
 8003b60:	20000410 	.word	0x20000410

08003b64 <getNumSatellites>:

//Status
uint8_t getNumSatellites() {
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.numsv;
 8003b68:	4b03      	ldr	r3, [pc, #12]	; (8003b78 <getNumSatellites+0x14>)
 8003b6a:	7ddb      	ldrb	r3, [r3, #23]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	20000410 	.word	0x20000410

08003b7c <isTimeFullyResolved>:

bool isGnssFixOk() {
	return ubx_nav_pvt.flags & gnssFixOKmask;
}

bool isTimeFullyResolved() {
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.valid & timeFullyResolved;
 8003b80:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <isTimeFullyResolved+0x20>)
 8003b82:	7adb      	ldrb	r3, [r3, #11]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	bf14      	ite	ne
 8003b8c:	2301      	movne	r3, #1
 8003b8e:	2300      	moveq	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	20000410 	.word	0x20000410

08003ba0 <GNSS_Prep_Stop>:

void GNSS_Prep_Stop() {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
	if (!LL_LPUART_IsEnabled(LPUART1)) {
 8003ba4:	4814      	ldr	r0, [pc, #80]	; (8003bf8 <GNSS_Prep_Stop+0x58>)
 8003ba6:	f7ff fe06 	bl	80037b6 <LL_LPUART_IsEnabled>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d021      	beq.n	8003bf4 <GNSS_Prep_Stop+0x54>
		return;
	}
	while (LL_LPUART_IsActiveFlag_RXNE(LPUART1)) { //Empty RX buffer
 8003bb0:	e006      	b.n	8003bc0 <GNSS_Prep_Stop+0x20>
		parse(LL_LPUART_ReceiveData8(LPUART1));
 8003bb2:	4811      	ldr	r0, [pc, #68]	; (8003bf8 <GNSS_Prep_Stop+0x58>)
 8003bb4:	f7ff febe 	bl	8003934 <LL_LPUART_ReceiveData8>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f924 	bl	8003e08 <parse>
	while (LL_LPUART_IsActiveFlag_RXNE(LPUART1)) { //Empty RX buffer
 8003bc0:	480d      	ldr	r0, [pc, #52]	; (8003bf8 <GNSS_Prep_Stop+0x58>)
 8003bc2:	f7ff fe2c 	bl	800381e <LL_LPUART_IsActiveFlag_RXNE>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1f2      	bne.n	8003bb2 <GNSS_Prep_Stop+0x12>
	}
	LL_LPUART_ClearFlag_ORE(LPUART1);
 8003bcc:	480a      	ldr	r0, [pc, #40]	; (8003bf8 <GNSS_Prep_Stop+0x58>)
 8003bce:	f7ff fe73 	bl	80038b8 <LL_LPUART_ClearFlag_ORE>
	/* Make sure that LPUART is ready to receive */
	while (LL_LPUART_IsActiveFlag_REACK(LPUART1) == 0) {
 8003bd2:	bf00      	nop
 8003bd4:	4808      	ldr	r0, [pc, #32]	; (8003bf8 <GNSS_Prep_Stop+0x58>)
 8003bd6:	f7ff fe5b 	bl	8003890 <LL_LPUART_IsActiveFlag_REACK>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f9      	beq.n	8003bd4 <GNSS_Prep_Stop+0x34>
	}
	LL_LPUART_ClearFlag_WKUP(LPUART1);
 8003be0:	4805      	ldr	r0, [pc, #20]	; (8003bf8 <GNSS_Prep_Stop+0x58>)
 8003be2:	f7ff fe76 	bl	80038d2 <LL_LPUART_ClearFlag_WKUP>
	LL_LPUART_EnableIT_WKUP(LPUART1);
 8003be6:	4804      	ldr	r0, [pc, #16]	; (8003bf8 <GNSS_Prep_Stop+0x58>)
 8003be8:	f7ff fe81 	bl	80038ee <LL_LPUART_EnableIT_WKUP>
	LL_LPUART_EnableInStopMode(LPUART1);
 8003bec:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <GNSS_Prep_Stop+0x58>)
 8003bee:	f7ff fdf5 	bl	80037dc <LL_LPUART_EnableInStopMode>
 8003bf2:	e000      	b.n	8003bf6 <GNSS_Prep_Stop+0x56>
		return;
 8003bf4:	bf00      	nop
}
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	40008000 	.word	0x40008000

08003bfc <GNSS_Power>:

void GNSS_Power() {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
	switch (GNSSlastRate) {
 8003c00:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <GNSS_Power+0x9c>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	d844      	bhi.n	8003c94 <GNSS_Power+0x98>
 8003c0a:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <GNSS_Power+0x14>)
 8003c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c10:	08003c21 	.word	0x08003c21
 8003c14:	08003c29 	.word	0x08003c29
 8003c18:	08003c3d 	.word	0x08003c3d
 8003c1c:	08003c63 	.word	0x08003c63
	case GNSS_UINT:
		GNSS_Set_Power(GNSS_STOP);
 8003c20:	2001      	movs	r0, #1
 8003c22:	f000 f83d 	bl	8003ca0 <GNSS_Set_Power>
		break;
 8003c26:	e035      	b.n	8003c94 <GNSS_Power+0x98>
	case GNSS_STOP:
		if (superCapmV >= mV_GNSS_SLOW) {
 8003c28:	4b1c      	ldr	r3, [pc, #112]	; (8003c9c <GNSS_Power+0xa0>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f640 42e3 	movw	r2, #3299	; 0xce3
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d92a      	bls.n	8003c8a <GNSS_Power+0x8e>
			GNSS_Set_Power(GNSS_SLOW);
 8003c34:	2002      	movs	r0, #2
 8003c36:	f000 f833 	bl	8003ca0 <GNSS_Set_Power>
		}
		break;
 8003c3a:	e026      	b.n	8003c8a <GNSS_Power+0x8e>
	case GNSS_SLOW:
		if (superCapmV >= mV_GNSS_FAST) {
 8003c3c:	4b17      	ldr	r3, [pc, #92]	; (8003c9c <GNSS_Power+0xa0>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8003c44:	d303      	bcc.n	8003c4e <GNSS_Power+0x52>
			GNSS_Set_Power(GNSS_FAST);
 8003c46:	2003      	movs	r0, #3
 8003c48:	f000 f82a 	bl	8003ca0 <GNSS_Set_Power>
		} else if (superCapmV < mV_GNSS_OFF) {
			GNSS_Set_Power(GNSS_STOP);
		}
		break;
 8003c4c:	e01f      	b.n	8003c8e <GNSS_Power+0x92>
		} else if (superCapmV < mV_GNSS_OFF) {
 8003c4e:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <GNSS_Power+0xa0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d819      	bhi.n	8003c8e <GNSS_Power+0x92>
			GNSS_Set_Power(GNSS_STOP);
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	f000 f820 	bl	8003ca0 <GNSS_Set_Power>
		break;
 8003c60:	e015      	b.n	8003c8e <GNSS_Power+0x92>
	case GNSS_FAST:
		if (superCapmV < mV_GNSS_OFF) {
 8003c62:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <GNSS_Power+0xa0>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d803      	bhi.n	8003c76 <GNSS_Power+0x7a>
			GNSS_Set_Power(GNSS_STOP);
 8003c6e:	2001      	movs	r0, #1
 8003c70:	f000 f816 	bl	8003ca0 <GNSS_Set_Power>
		} else if (superCapmV < mV_GNSS_SLOW) {
			GNSS_Set_Power(GNSS_SLOW);
		}
		break;
 8003c74:	e00d      	b.n	8003c92 <GNSS_Power+0x96>
		} else if (superCapmV < mV_GNSS_SLOW) {
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <GNSS_Power+0xa0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f640 42e3 	movw	r2, #3299	; 0xce3
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d807      	bhi.n	8003c92 <GNSS_Power+0x96>
			GNSS_Set_Power(GNSS_SLOW);
 8003c82:	2002      	movs	r0, #2
 8003c84:	f000 f80c 	bl	8003ca0 <GNSS_Set_Power>
		break;
 8003c88:	e003      	b.n	8003c92 <GNSS_Power+0x96>
		break;
 8003c8a:	bf00      	nop
 8003c8c:	e002      	b.n	8003c94 <GNSS_Power+0x98>
		break;
 8003c8e:	bf00      	nop
 8003c90:	e000      	b.n	8003c94 <GNSS_Power+0x98>
		break;
 8003c92:	bf00      	nop
	}
}
 8003c94:	bf00      	nop
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	2000039c 	.word	0x2000039c
 8003c9c:	2000037c 	.word	0x2000037c

08003ca0 <GNSS_Set_Power>:

static void GNSS_Set_Power(enum GNSS_rate newRate) {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	71fb      	strb	r3, [r7, #7]
	if (newRate == GNSSlastRate) {
 8003caa:	4b1c      	ldr	r3, [pc, #112]	; (8003d1c <GNSS_Set_Power+0x7c>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	79fa      	ldrb	r2, [r7, #7]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d02d      	beq.n	8003d12 <GNSS_Set_Power+0x72>
		return;
	}
	switch (GNSSlastRate) {
 8003cb6:	4b19      	ldr	r3, [pc, #100]	; (8003d1c <GNSS_Set_Power+0x7c>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d020      	beq.n	8003d02 <GNSS_Set_Power+0x62>
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	dc27      	bgt.n	8003d14 <GNSS_Set_Power+0x74>
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	dc02      	bgt.n	8003cce <GNSS_Set_Power+0x2e>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	da03      	bge.n	8003cd4 <GNSS_Set_Power+0x34>
 8003ccc:	e022      	b.n	8003d14 <GNSS_Set_Power+0x74>
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d00f      	beq.n	8003cf2 <GNSS_Set_Power+0x52>
 8003cd2:	e01f      	b.n	8003d14 <GNSS_Set_Power+0x74>
	case GNSS_UINT:
	case GNSS_STOP:
		GNSSAlive = false;
 8003cd4:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <GNSS_Set_Power+0x80>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GNSS_EXT_GPIO_Port, GNSS_EXT_Pin, GPIO_PIN_RESET);
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2110      	movs	r1, #16
 8003cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ce2:	f002 faaf 	bl	8006244 <HAL_GPIO_WritePin>
		USER_LPUART1_UART_DeInit();
 8003ce6:	f7fd fd67 	bl	80017b8 <USER_LPUART1_UART_DeInit>
		GNSSlastRate = GNSS_STOP;
 8003cea:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <GNSS_Set_Power+0x7c>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	701a      	strb	r2, [r3, #0]
		break;
 8003cf0:	e010      	b.n	8003d14 <GNSS_Set_Power+0x74>
	case GNSS_SLOW:
		USER_LPUART1_UART_Init();
 8003cf2:	f7fd fd5b 	bl	80017ac <USER_LPUART1_UART_Init>
		GNSS_Config_Slow();
 8003cf6:	f000 f815 	bl	8003d24 <GNSS_Config_Slow>
		GNSSlastRate = GNSS_SLOW;
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <GNSS_Set_Power+0x7c>)
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	701a      	strb	r2, [r3, #0]
		break;
 8003d00:	e008      	b.n	8003d14 <GNSS_Set_Power+0x74>
	case GNSS_FAST:
		USER_LPUART1_UART_Init();
 8003d02:	f7fd fd53 	bl	80017ac <USER_LPUART1_UART_Init>
		GNSS_Config_Fast();
 8003d06:	f000 f839 	bl	8003d7c <GNSS_Config_Fast>
		GNSSlastRate = GNSS_SLOW;
 8003d0a:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <GNSS_Set_Power+0x7c>)
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	701a      	strb	r2, [r3, #0]
		break;
 8003d10:	e000      	b.n	8003d14 <GNSS_Set_Power+0x74>
		return;
 8003d12:	bf00      	nop
	}
}
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	2000039c 	.word	0x2000039c
 8003d20:	200003a4 	.word	0x200003a4

08003d24 <GNSS_Config_Slow>:

void GNSS_Config_Slow() {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(GNSS_EXT_GPIO_Port, GNSS_EXT_Pin)) {
 8003d28:	2110      	movs	r1, #16
 8003d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d2e:	f002 fa71 	bl	8006214 <HAL_GPIO_ReadPin>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d115      	bne.n	8003d64 <GNSS_Config_Slow+0x40>
		//GNSS was asleep
		//Wakeup
		HAL_GPIO_WritePin(GNSS_EXT_GPIO_Port, GNSS_EXT_Pin, GPIO_PIN_SET);
 8003d38:	2201      	movs	r2, #1
 8003d3a:	2110      	movs	r1, #16
 8003d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d40:	f002 fa80 	bl	8006244 <HAL_GPIO_WritePin>
		LPUART_Transmit((uint8_t*) 0xff, 1, HAL_MAX_DELAY);
 8003d44:	f04f 32ff 	mov.w	r2, #4294967295
 8003d48:	2101      	movs	r1, #1
 8003d4a:	20ff      	movs	r0, #255	; 0xff
 8003d4c:	f000 f9ae 	bl	80040ac <LPUART_Transmit>
		HAL_Delay(500);
 8003d50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d54:	f7fd fd06 	bl	8001764 <HAL_Delay>
		//Enable PVT message
		LPUART_Transmit((uint8_t*) &UBX_CFG_MSGOUT_UART1, sizeof(UBX_CFG_MSGOUT_UART1), HAL_MAX_DELAY);
 8003d58:	f04f 32ff 	mov.w	r2, #4294967295
 8003d5c:	215e      	movs	r1, #94	; 0x5e
 8003d5e:	4805      	ldr	r0, [pc, #20]	; (8003d74 <GNSS_Config_Slow+0x50>)
 8003d60:	f000 f9a4 	bl	80040ac <LPUART_Transmit>
	}
	//Enable PMOO
	LPUART_Transmit((uint8_t*) &UBX_CFG_PM_OPERATEMODE_SLOW, sizeof(UBX_CFG_PM_OPERATEMODE_SLOW), HAL_MAX_DELAY);
 8003d64:	f04f 32ff 	mov.w	r2, #4294967295
 8003d68:	2142      	movs	r1, #66	; 0x42
 8003d6a:	4803      	ldr	r0, [pc, #12]	; (8003d78 <GNSS_Config_Slow+0x54>)
 8003d6c:	f000 f99e 	bl	80040ac <LPUART_Transmit>
}
 8003d70:	bf00      	nop
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	0800cf10 	.word	0x0800cf10
 8003d78:	0800cecc 	.word	0x0800cecc

08003d7c <GNSS_Config_Fast>:

void GNSS_Config_Fast() {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
	//Run at full speed
	LPUART_Transmit((uint8_t*) &UBX_CFG_PM_OPERATEMODE_FULL, sizeof(UBX_CFG_PM_OPERATEMODE_FULL), HAL_MAX_DELAY);
 8003d80:	f04f 32ff 	mov.w	r2, #4294967295
 8003d84:	2111      	movs	r1, #17
 8003d86:	4802      	ldr	r0, [pc, #8]	; (8003d90 <GNSS_Config_Fast+0x14>)
 8003d88:	f000 f990 	bl	80040ac <LPUART_Transmit>
}
 8003d8c:	bf00      	nop
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	0800ceb8 	.word	0x0800ceb8

08003d94 <Checksum>:

//Parsing
uint16_t Checksum(volatile uint8_t *data, uint16_t len) {
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	807b      	strh	r3, [r7, #2]
	if (!data) {
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <Checksum+0x16>
		return 0;
 8003da6:	2300      	movs	r3, #0
 8003da8:	e025      	b.n	8003df6 <Checksum+0x62>
	}
	uint8_t checksum_buffer[2] = { 0, 0 };
 8003daa:	2300      	movs	r3, #0
 8003dac:	813b      	strh	r3, [r7, #8]
	for (unsigned int i = 0; i < len; i++) {
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	e010      	b.n	8003dd6 <Checksum+0x42>
		checksum_buffer[0] += data[i];
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	4413      	add	r3, r2
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	7a3b      	ldrb	r3, [r7, #8]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	723b      	strb	r3, [r7, #8]
		checksum_buffer[1] += checksum_buffer[0];
 8003dc6:	7a7a      	ldrb	r2, [r7, #9]
 8003dc8:	7a3b      	ldrb	r3, [r7, #8]
 8003dca:	4413      	add	r3, r2
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	727b      	strb	r3, [r7, #9]
	for (unsigned int i = 0; i < len; i++) {
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	887b      	ldrh	r3, [r7, #2]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d3ea      	bcc.n	8003db4 <Checksum+0x20>
	}
	return ((uint16_t) checksum_buffer_[1]) << 8 | checksum_buffer_[0];
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <Checksum+0x70>)
 8003de0:	785b      	ldrb	r3, [r3, #1]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	021b      	lsls	r3, r3, #8
 8003de6:	b21a      	sxth	r2, r3
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <Checksum+0x70>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	b21b      	sxth	r3, r3
 8003df0:	4313      	orrs	r3, r2
 8003df2:	b21b      	sxth	r3, r3
 8003df4:	b29b      	uxth	r3, r3
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	200003ac 	.word	0x200003ac

08003e08 <parse>:

void parse(uint8_t byte_read) {
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71fb      	strb	r3, [r7, #7]
	/* Identify the packet header */
	if (parser_pos_ < 2) {
 8003e12:	4b91      	ldr	r3, [pc, #580]	; (8004058 <parse+0x250>)
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d814      	bhi.n	8003e46 <parse+0x3e>
		if (byte_read == UBX_HEADER_[parser_pos_]) {
 8003e1c:	4b8e      	ldr	r3, [pc, #568]	; (8004058 <parse+0x250>)
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	4b8d      	ldr	r3, [pc, #564]	; (800405c <parse+0x254>)
 8003e26:	5c9b      	ldrb	r3, [r3, r2]
 8003e28:	79fa      	ldrb	r2, [r7, #7]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d107      	bne.n	8003e3e <parse+0x36>
			parser_pos_++;
 8003e2e:	4b8a      	ldr	r3, [pc, #552]	; (8004058 <parse+0x250>)
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3301      	adds	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	4b87      	ldr	r3, [pc, #540]	; (8004058 <parse+0x250>)
 8003e3a:	801a      	strh	r2, [r3, #0]
 8003e3c:	e108      	b.n	8004050 <parse+0x248>
		} else {
			parser_pos_ = 0;
 8003e3e:	4b86      	ldr	r3, [pc, #536]	; (8004058 <parse+0x250>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	801a      	strh	r2, [r3, #0]
 8003e44:	e104      	b.n	8004050 <parse+0x248>
		}
		/* Message class */
	} else if (parser_pos_ == 2) {
 8003e46:	4b84      	ldr	r3, [pc, #528]	; (8004058 <parse+0x250>)
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d116      	bne.n	8003e7e <parse+0x76>
		if (byte_read == UBX_NAV_CLASS_) {
 8003e50:	2201      	movs	r2, #1
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d10e      	bne.n	8003e76 <parse+0x6e>
			pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003e58:	4b7f      	ldr	r3, [pc, #508]	; (8004058 <parse+0x250>)
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	3b02      	subs	r3, #2
 8003e60:	497f      	ldr	r1, [pc, #508]	; (8004060 <parse+0x258>)
 8003e62:	79fa      	ldrb	r2, [r7, #7]
 8003e64:	54ca      	strb	r2, [r1, r3]
			parser_pos_++;
 8003e66:	4b7c      	ldr	r3, [pc, #496]	; (8004058 <parse+0x250>)
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	4b79      	ldr	r3, [pc, #484]	; (8004058 <parse+0x250>)
 8003e72:	801a      	strh	r2, [r3, #0]
 8003e74:	e0ec      	b.n	8004050 <parse+0x248>
		} else {
			parser_pos_ = 0;
 8003e76:	4b78      	ldr	r3, [pc, #480]	; (8004058 <parse+0x250>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	801a      	strh	r2, [r3, #0]
 8003e7c:	e0e8      	b.n	8004050 <parse+0x248>
		}
		/* Message ID */
	} else if (parser_pos_ == 3) {
 8003e7e:	4b76      	ldr	r3, [pc, #472]	; (8004058 <parse+0x250>)
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d116      	bne.n	8003eb6 <parse+0xae>
		if (byte_read == UBX_NAV_PVT) {
 8003e88:	2207      	movs	r2, #7
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d10e      	bne.n	8003eae <parse+0xa6>
			pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003e90:	4b71      	ldr	r3, [pc, #452]	; (8004058 <parse+0x250>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b02      	subs	r3, #2
 8003e98:	4971      	ldr	r1, [pc, #452]	; (8004060 <parse+0x258>)
 8003e9a:	79fa      	ldrb	r2, [r7, #7]
 8003e9c:	54ca      	strb	r2, [r1, r3]
			parser_pos_++;
 8003e9e:	4b6e      	ldr	r3, [pc, #440]	; (8004058 <parse+0x250>)
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	4b6b      	ldr	r3, [pc, #428]	; (8004058 <parse+0x250>)
 8003eaa:	801a      	strh	r2, [r3, #0]
 8003eac:	e0d0      	b.n	8004050 <parse+0x248>
		} else {
			parser_pos_ = 0;
 8003eae:	4b6a      	ldr	r3, [pc, #424]	; (8004058 <parse+0x250>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	801a      	strh	r2, [r3, #0]
 8003eb4:	e0cc      	b.n	8004050 <parse+0x248>
		}
		/* Messgae length */
	} else if (parser_pos_ == 4) {
 8003eb6:	4b68      	ldr	r3, [pc, #416]	; (8004058 <parse+0x250>)
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d111      	bne.n	8003ee4 <parse+0xdc>
		msg_len_buffer_[0] = byte_read;
 8003ec0:	4a68      	ldr	r2, [pc, #416]	; (8004064 <parse+0x25c>)
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	7013      	strb	r3, [r2, #0]
		pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003ec6:	4b64      	ldr	r3, [pc, #400]	; (8004058 <parse+0x250>)
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3b02      	subs	r3, #2
 8003ece:	4964      	ldr	r1, [pc, #400]	; (8004060 <parse+0x258>)
 8003ed0:	79fa      	ldrb	r2, [r7, #7]
 8003ed2:	54ca      	strb	r2, [r1, r3]
		parser_pos_++;
 8003ed4:	4b60      	ldr	r3, [pc, #384]	; (8004058 <parse+0x250>)
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3301      	adds	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	4b5e      	ldr	r3, [pc, #376]	; (8004058 <parse+0x250>)
 8003ee0:	801a      	strh	r2, [r3, #0]
 8003ee2:	e0b5      	b.n	8004050 <parse+0x248>
		/* Message length */
	} else if (parser_pos_ == 5) {
 8003ee4:	4b5c      	ldr	r3, [pc, #368]	; (8004058 <parse+0x250>)
 8003ee6:	881b      	ldrh	r3, [r3, #0]
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b05      	cmp	r3, #5
 8003eec:	d12a      	bne.n	8003f44 <parse+0x13c>
		msg_len_buffer_[1] = byte_read;
 8003eee:	4a5d      	ldr	r2, [pc, #372]	; (8004064 <parse+0x25c>)
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	7053      	strb	r3, [r2, #1]
		msg_len_ = ((uint16_t) msg_len_buffer_[1]) << 8 | msg_len_buffer_[0];
 8003ef4:	4b5b      	ldr	r3, [pc, #364]	; (8004064 <parse+0x25c>)
 8003ef6:	785b      	ldrb	r3, [r3, #1]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	b21a      	sxth	r2, r3
 8003efe:	4b59      	ldr	r3, [pc, #356]	; (8004064 <parse+0x25c>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	b21b      	sxth	r3, r3
 8003f06:	4313      	orrs	r3, r2
 8003f08:	b21b      	sxth	r3, r3
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	4b56      	ldr	r3, [pc, #344]	; (8004068 <parse+0x260>)
 8003f0e:	801a      	strh	r2, [r3, #0]
		pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003f10:	4b51      	ldr	r3, [pc, #324]	; (8004058 <parse+0x250>)
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b02      	subs	r3, #2
 8003f18:	4951      	ldr	r1, [pc, #324]	; (8004060 <parse+0x258>)
 8003f1a:	79fa      	ldrb	r2, [r7, #7]
 8003f1c:	54ca      	strb	r2, [r1, r3]
		if (msg_len_ == UBX_PVT_LEN_) {
 8003f1e:	235c      	movs	r3, #92	; 0x5c
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	4b51      	ldr	r3, [pc, #324]	; (8004068 <parse+0x260>)
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d107      	bne.n	8003f3c <parse+0x134>
			parser_pos_++;
 8003f2c:	4b4a      	ldr	r3, [pc, #296]	; (8004058 <parse+0x250>)
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3301      	adds	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	4b48      	ldr	r3, [pc, #288]	; (8004058 <parse+0x250>)
 8003f38:	801a      	strh	r2, [r3, #0]
		} else {
			parser_pos_ = 0;
		}
		return;
 8003f3a:	e089      	b.n	8004050 <parse+0x248>
			parser_pos_ = 0;
 8003f3c:	4b46      	ldr	r3, [pc, #280]	; (8004058 <parse+0x250>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	801a      	strh	r2, [r3, #0]
		return;
 8003f42:	e085      	b.n	8004050 <parse+0x248>
		/* Message payload */
	} else if (parser_pos_ < (msg_len_ + UBX_HEADER_LEN_)) {
 8003f44:	4b44      	ldr	r3, [pc, #272]	; (8004058 <parse+0x250>)
 8003f46:	881b      	ldrh	r3, [r3, #0]
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4b46      	ldr	r3, [pc, #280]	; (8004068 <parse+0x260>)
 8003f4e:	881b      	ldrh	r3, [r3, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	4619      	mov	r1, r3
 8003f54:	2306      	movs	r3, #6
 8003f56:	440b      	add	r3, r1
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	da0e      	bge.n	8003f7a <parse+0x172>
		pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003f5c:	4b3e      	ldr	r3, [pc, #248]	; (8004058 <parse+0x250>)
 8003f5e:	881b      	ldrh	r3, [r3, #0]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b02      	subs	r3, #2
 8003f64:	493e      	ldr	r1, [pc, #248]	; (8004060 <parse+0x258>)
 8003f66:	79fa      	ldrb	r2, [r7, #7]
 8003f68:	54ca      	strb	r2, [r1, r3]
		parser_pos_++;
 8003f6a:	4b3b      	ldr	r3, [pc, #236]	; (8004058 <parse+0x250>)
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	3301      	adds	r3, #1
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	4b38      	ldr	r3, [pc, #224]	; (8004058 <parse+0x250>)
 8003f76:	801a      	strh	r2, [r3, #0]
 8003f78:	e06a      	b.n	8004050 <parse+0x248>
		/* Checksum */
	} else if (parser_pos_ == (msg_len_ + UBX_HEADER_LEN_)) {
 8003f7a:	4b37      	ldr	r3, [pc, #220]	; (8004058 <parse+0x250>)
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	4b39      	ldr	r3, [pc, #228]	; (8004068 <parse+0x260>)
 8003f84:	881b      	ldrh	r3, [r3, #0]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	4619      	mov	r1, r3
 8003f8a:	2306      	movs	r3, #6
 8003f8c:	440b      	add	r3, r1
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d10a      	bne.n	8003fa8 <parse+0x1a0>
		checksum_buffer_[0] = byte_read;
 8003f92:	4a36      	ldr	r2, [pc, #216]	; (800406c <parse+0x264>)
 8003f94:	79fb      	ldrb	r3, [r7, #7]
 8003f96:	7013      	strb	r3, [r2, #0]
		parser_pos_++;
 8003f98:	4b2f      	ldr	r3, [pc, #188]	; (8004058 <parse+0x250>)
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	4b2d      	ldr	r3, [pc, #180]	; (8004058 <parse+0x250>)
 8003fa4:	801a      	strh	r2, [r3, #0]
 8003fa6:	e053      	b.n	8004050 <parse+0x248>
	} else {
		checksum_buffer_[1] = byte_read;
 8003fa8:	4a30      	ldr	r2, [pc, #192]	; (800406c <parse+0x264>)
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	7053      	strb	r3, [r2, #1]
		uint16_t received_checksum = ((uint16_t) checksum_buffer_[1]) << 8 | checksum_buffer_[0];
 8003fae:	4b2f      	ldr	r3, [pc, #188]	; (800406c <parse+0x264>)
 8003fb0:	785b      	ldrb	r3, [r3, #1]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	b21a      	sxth	r2, r3
 8003fb8:	4b2c      	ldr	r3, [pc, #176]	; (800406c <parse+0x264>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	b21b      	sxth	r3, r3
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	b21b      	sxth	r3, r3
 8003fc4:	81fb      	strh	r3, [r7, #14]
		uint16_t computed_checksum = Checksum(pvt_buffer_, msg_len_ + UBX_HEADER_LEN_);
 8003fc6:	2306      	movs	r3, #6
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	4b27      	ldr	r3, [pc, #156]	; (8004068 <parse+0x260>)
 8003fcc:	881b      	ldrh	r3, [r3, #0]
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4822      	ldr	r0, [pc, #136]	; (8004060 <parse+0x258>)
 8003fd8:	f7ff fedc 	bl	8003d94 <Checksum>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	81bb      	strh	r3, [r7, #12]
		if (computed_checksum == received_checksum) {
 8003fe0:	89ba      	ldrh	r2, [r7, #12]
 8003fe2:	89fb      	ldrh	r3, [r7, #14]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d130      	bne.n	800404a <parse+0x242>
			if (pvt_buffer_[20 + UBX_PAYLOAD_OFFSET_] >= FIX_2D) {
 8003fe8:	2304      	movs	r3, #4
 8003fea:	3314      	adds	r3, #20
 8003fec:	4a1c      	ldr	r2, [pc, #112]	; (8004060 <parse+0x258>)
 8003fee:	5cd3      	ldrb	r3, [r2, r3]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d915      	bls.n	8004022 <parse+0x21a>
				memcpy(&ubx_nav_pvt, (void*) pvt_buffer_ + UBX_PAYLOAD_OFFSET_, UBX_PVT_LEN_);
 8003ff6:	2304      	movs	r3, #4
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4b19      	ldr	r3, [pc, #100]	; (8004060 <parse+0x258>)
 8003ffc:	4413      	add	r3, r2
 8003ffe:	225c      	movs	r2, #92	; 0x5c
 8004000:	4619      	mov	r1, r3
 8004002:	481b      	ldr	r0, [pc, #108]	; (8004070 <parse+0x268>)
 8004004:	f005 fe00 	bl	8009c08 <memcpy>
				GNSSlastPacketAge = 0;
 8004008:	4b1a      	ldr	r3, [pc, #104]	; (8004074 <parse+0x26c>)
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
				if (isTimeFullyResolved()) {
 800400e:	f7ff fdb5 	bl	8003b7c <isTimeFullyResolved>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <parse+0x214>
					setTimeGNSS();
 8004018:	f7fe ffcc 	bl	8002fb4 <setTimeGNSS>
				}
				GNSSNewData = true;
 800401c:	4b16      	ldr	r3, [pc, #88]	; (8004078 <parse+0x270>)
 800401e:	2201      	movs	r2, #1
 8004020:	701a      	strb	r2, [r3, #0]
			}
			GNSSAlive = !GNSSAlive;
 8004022:	4b16      	ldr	r3, [pc, #88]	; (800407c <parse+0x274>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf14      	ite	ne
 800402c:	2301      	movne	r3, #1
 800402e:	2300      	moveq	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f083 0301 	eor.w	r3, r3, #1
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	b2da      	uxtb	r2, r3
 800403e:	4b0f      	ldr	r3, [pc, #60]	; (800407c <parse+0x274>)
 8004040:	701a      	strb	r2, [r3, #0]
			parser_pos_ = 0;
 8004042:	4b05      	ldr	r3, [pc, #20]	; (8004058 <parse+0x250>)
 8004044:	2200      	movs	r2, #0
 8004046:	801a      	strh	r2, [r3, #0]
 8004048:	e002      	b.n	8004050 <parse+0x248>
		} else {
			parser_pos_ = 0;
 800404a:	4b03      	ldr	r3, [pc, #12]	; (8004058 <parse+0x250>)
 800404c:	2200      	movs	r2, #0
 800404e:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	200003a6 	.word	0x200003a6
 800405c:	0800cf70 	.word	0x0800cf70
 8004060:	200003b0 	.word	0x200003b0
 8004064:	200003a8 	.word	0x200003a8
 8004068:	200003aa 	.word	0x200003aa
 800406c:	200003ac 	.word	0x200003ac
 8004070:	20000410 	.word	0x20000410
 8004074:	200003a0 	.word	0x200003a0
 8004078:	20000004 	.word	0x20000004
 800407c:	200003a4 	.word	0x200003a4

08004080 <LPUART_CharReception_Callback>:

void LPUART_CharReception_Callback(void) {
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
	while (LL_LPUART_IsActiveFlag_RXNE(LPUART1)) {
 8004084:	e006      	b.n	8004094 <LPUART_CharReception_Callback+0x14>
		parse(LL_LPUART_ReceiveData8(LPUART1));
 8004086:	4808      	ldr	r0, [pc, #32]	; (80040a8 <LPUART_CharReception_Callback+0x28>)
 8004088:	f7ff fc54 	bl	8003934 <LL_LPUART_ReceiveData8>
 800408c:	4603      	mov	r3, r0
 800408e:	4618      	mov	r0, r3
 8004090:	f7ff feba 	bl	8003e08 <parse>
	while (LL_LPUART_IsActiveFlag_RXNE(LPUART1)) {
 8004094:	4804      	ldr	r0, [pc, #16]	; (80040a8 <LPUART_CharReception_Callback+0x28>)
 8004096:	f7ff fbc2 	bl	800381e <LL_LPUART_IsActiveFlag_RXNE>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f2      	bne.n	8004086 <LPUART_CharReception_Callback+0x6>
	}
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40008000 	.word	0x40008000

080040ac <LPUART_Transmit>:

static void LPUART_Transmit(uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	460b      	mov	r3, r1
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	817b      	strh	r3, [r7, #10]
	if ((pData == NULL) || (Size == 0U)) {
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d022      	beq.n	8004106 <LPUART_Transmit+0x5a>
 80040c0:	897b      	ldrh	r3, [r7, #10]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d01f      	beq.n	8004106 <LPUART_Transmit+0x5a>
		return;
	}

	while (Size--) {
 80040c6:	e011      	b.n	80040ec <LPUART_Transmit+0x40>
		/* Wait for TXE flag to be raised */
		while (!LL_LPUART_IsActiveFlag_TXE(LPUART1)) {
 80040c8:	bf00      	nop
 80040ca:	4811      	ldr	r0, [pc, #68]	; (8004110 <LPUART_Transmit+0x64>)
 80040cc:	f7ff fbcd 	bl	800386a <LL_LPUART_IsActiveFlag_TXE>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f9      	beq.n	80040ca <LPUART_Transmit+0x1e>
		}
		uint8_t sendThis = (uint8_t) (*pData);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	75fb      	strb	r3, [r7, #23]
		LL_LPUART_TransmitData8(LPUART1, sendThis);
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
 80040de:	4619      	mov	r1, r3
 80040e0:	480b      	ldr	r0, [pc, #44]	; (8004110 <LPUART_Transmit+0x64>)
 80040e2:	f7ff fc35 	bl	8003950 <LL_LPUART_TransmitData8>
		pData++;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	3301      	adds	r3, #1
 80040ea:	60fb      	str	r3, [r7, #12]
	while (Size--) {
 80040ec:	897b      	ldrh	r3, [r7, #10]
 80040ee:	1e5a      	subs	r2, r3, #1
 80040f0:	817a      	strh	r2, [r7, #10]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e8      	bne.n	80040c8 <LPUART_Transmit+0x1c>
	}

	/* Wait for TC flag to be raised for last char */
	while (!LL_LPUART_IsActiveFlag_TC(LPUART1)) {
 80040f6:	bf00      	nop
 80040f8:	4805      	ldr	r0, [pc, #20]	; (8004110 <LPUART_Transmit+0x64>)
 80040fa:	f7ff fba3 	bl	8003844 <LL_LPUART_IsActiveFlag_TC>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f9      	beq.n	80040f8 <LPUART_Transmit+0x4c>
 8004104:	e000      	b.n	8004108 <LPUART_Transmit+0x5c>
		return;
 8004106:	bf00      	nop
	}
}
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40008000 	.word	0x40008000

08004114 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800411e:	2003      	movs	r0, #3
 8004120:	f001 fc56 	bl	80059d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004124:	200f      	movs	r0, #15
 8004126:	f000 f80d 	bl	8004144 <HAL_InitTick>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	71fb      	strb	r3, [r7, #7]
 8004134:	e001      	b.n	800413a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004136:	f7ff f813 	bl	8003160 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800413a:	79fb      	ldrb	r3, [r7, #7]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004150:	4b17      	ldr	r3, [pc, #92]	; (80041b0 <HAL_InitTick+0x6c>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d023      	beq.n	80041a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004158:	4b16      	ldr	r3, [pc, #88]	; (80041b4 <HAL_InitTick+0x70>)
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <HAL_InitTick+0x6c>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	4619      	mov	r1, r3
 8004162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004166:	fbb3 f3f1 	udiv	r3, r3, r1
 800416a:	fbb2 f3f3 	udiv	r3, r2, r3
 800416e:	4618      	mov	r0, r3
 8004170:	f001 fc63 	bl	8005a3a <HAL_SYSTICK_Config>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b0f      	cmp	r3, #15
 800417e:	d809      	bhi.n	8004194 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004180:	2200      	movs	r2, #0
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	f001 fc2d 	bl	80059e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800418c:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <HAL_InitTick+0x74>)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	e007      	b.n	80041a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	73fb      	strb	r3, [r7, #15]
 8004198:	e004      	b.n	80041a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	73fb      	strb	r3, [r7, #15]
 800419e:	e001      	b.n	80041a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	2000000c 	.word	0x2000000c
 80041b4:	20000000 	.word	0x20000000
 80041b8:	20000008 	.word	0x20000008

080041bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041c0:	4b06      	ldr	r3, [pc, #24]	; (80041dc <HAL_IncTick+0x20>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <HAL_IncTick+0x24>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4413      	add	r3, r2
 80041cc:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <HAL_IncTick+0x24>)
 80041ce:	6013      	str	r3, [r2, #0]
}
 80041d0:	bf00      	nop
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	2000000c 	.word	0x2000000c
 80041e0:	2000046c 	.word	0x2000046c

080041e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  return uwTick;
 80041e8:	4b03      	ldr	r3, [pc, #12]	; (80041f8 <HAL_GetTick+0x14>)
 80041ea:	681b      	ldr	r3, [r3, #0]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	2000046c 	.word	0x2000046c

080041fc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004200:	4b05      	ldr	r3, [pc, #20]	; (8004218 <HAL_SuspendTick+0x1c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a04      	ldr	r2, [pc, #16]	; (8004218 <HAL_SuspendTick+0x1c>)
 8004206:	f023 0302 	bic.w	r3, r3, #2
 800420a:	6013      	str	r3, [r2, #0]
}
 800420c:	bf00      	nop
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	e000e010 	.word	0xe000e010

0800421c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_ResumeTick+0x1c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a04      	ldr	r2, [pc, #16]	; (8004238 <HAL_ResumeTick+0x1c>)
 8004226:	f043 0302 	orr.w	r3, r3, #2
 800422a:	6013      	str	r3, [r2, #0]
}
 800422c:	bf00      	nop
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	e000e010 	.word	0xe000e010

0800423c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	609a      	str	r2, [r3, #8]
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	609a      	str	r2, [r3, #8]
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3360      	adds	r3, #96	; 0x60
 80042b6:	461a      	mov	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	4b08      	ldr	r3, [pc, #32]	; (80042e8 <LL_ADC_SetOffset+0x44>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80042dc:	bf00      	nop
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	03fff000 	.word	0x03fff000

080042ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3360      	adds	r3, #96	; 0x60
 80042fa:	461a      	mov	r2, r3
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3360      	adds	r3, #96	; 0x60
 8004328:	461a      	mov	r2, r3
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	4413      	add	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	431a      	orrs	r2, r3
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004342:	bf00      	nop
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr

0800434e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800434e:	b480      	push	{r7}
 8004350:	b083      	sub	sp, #12
 8004352:	af00      	add	r7, sp, #0
 8004354:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3330      	adds	r3, #48	; 0x30
 8004384:	461a      	mov	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	0a1b      	lsrs	r3, r3, #8
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	f003 030c 	and.w	r3, r3, #12
 8004390:	4413      	add	r3, r2
 8004392:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 031f 	and.w	r3, r3, #31
 800439e:	211f      	movs	r1, #31
 80043a0:	fa01 f303 	lsl.w	r3, r1, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	401a      	ands	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	0e9b      	lsrs	r3, r3, #26
 80043ac:	f003 011f 	and.w	r1, r3, #31
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 031f 	and.w	r3, r3, #31
 80043b6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ba:	431a      	orrs	r2, r3
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80043c0:	bf00      	nop
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3314      	adds	r3, #20
 80043dc:	461a      	mov	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	0e5b      	lsrs	r3, r3, #25
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	4413      	add	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	0d1b      	lsrs	r3, r3, #20
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	2107      	movs	r1, #7
 80043fa:	fa01 f303 	lsl.w	r3, r1, r3
 80043fe:	43db      	mvns	r3, r3
 8004400:	401a      	ands	r2, r3
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	0d1b      	lsrs	r3, r3, #20
 8004406:	f003 031f 	and.w	r3, r3, #31
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	fa01 f303 	lsl.w	r3, r1, r3
 8004410:	431a      	orrs	r2, r3
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004416:	bf00      	nop
 8004418:	371c      	adds	r7, #28
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800443c:	43db      	mvns	r3, r3
 800443e:	401a      	ands	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f003 0318 	and.w	r3, r3, #24
 8004446:	4908      	ldr	r1, [pc, #32]	; (8004468 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004448:	40d9      	lsrs	r1, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	400b      	ands	r3, r1
 800444e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004452:	431a      	orrs	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800445a:	bf00      	nop
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	0007ffff 	.word	0x0007ffff

0800446c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800447c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6093      	str	r3, [r2, #8]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044a4:	d101      	bne.n	80044aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80044a6:	2301      	movs	r3, #1
 80044a8:	e000      	b.n	80044ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80044c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044f4:	d101      	bne.n	80044fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004518:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800451c:	f043 0201 	orr.w	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004540:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004544:	f043 0202 	orr.w	r2, r3, #2
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <LL_ADC_IsEnabled+0x18>
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <LL_ADC_IsEnabled+0x1a>
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b02      	cmp	r3, #2
 8004590:	d101      	bne.n	8004596 <LL_ADC_IsDisableOngoing+0x18>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <LL_ADC_IsDisableOngoing+0x1a>
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045b8:	f043 0204 	orr.w	r2, r3, #4
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045e0:	f043 0210 	orr.w	r2, r3, #16
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	2b04      	cmp	r3, #4
 8004606:	d101      	bne.n	800460c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800462a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800462e:	f043 0220 	orr.w	r2, r3, #32
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b08      	cmp	r3, #8
 8004654:	d101      	bne.n	800465a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b088      	sub	sp, #32
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004670:	2300      	movs	r3, #0
 8004672:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004674:	2300      	movs	r3, #0
 8004676:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e12c      	b.n	80048dc <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800468c:	2b00      	cmp	r3, #0
 800468e:	d109      	bne.n	80046a4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f7fe fd89 	bl	80031a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff fef1 	bl	8004490 <LL_ADC_IsDeepPowerDownEnabled>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d004      	beq.n	80046be <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff fed7 	bl	800446c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff ff0c 	bl	80044e0 <LL_ADC_IsInternalRegulatorEnabled>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d115      	bne.n	80046fa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fef0 	bl	80044b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046d8:	4b82      	ldr	r3, [pc, #520]	; (80048e4 <HAL_ADC_Init+0x27c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	099b      	lsrs	r3, r3, #6
 80046de:	4a82      	ldr	r2, [pc, #520]	; (80048e8 <HAL_ADC_Init+0x280>)
 80046e0:	fba2 2303 	umull	r2, r3, r2, r3
 80046e4:	099b      	lsrs	r3, r3, #6
 80046e6:	3301      	adds	r3, #1
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046ec:	e002      	b.n	80046f4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1f9      	bne.n	80046ee <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff feee 	bl	80044e0 <LL_ADC_IsInternalRegulatorEnabled>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10d      	bne.n	8004726 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470e:	f043 0210 	orr.w	r2, r3, #16
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471a:	f043 0201 	orr.w	r2, r3, #1
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff ff62 	bl	80045f4 <LL_ADC_REG_IsConversionOngoing>
 8004730:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004736:	f003 0310 	and.w	r3, r3, #16
 800473a:	2b00      	cmp	r3, #0
 800473c:	f040 80c5 	bne.w	80048ca <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	2b00      	cmp	r3, #0
 8004744:	f040 80c1 	bne.w	80048ca <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004750:	f043 0202 	orr.w	r2, r3, #2
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff fefb 	bl	8004558 <LL_ADC_IsEnabled>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10b      	bne.n	8004780 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004768:	4860      	ldr	r0, [pc, #384]	; (80048ec <HAL_ADC_Init+0x284>)
 800476a:	f7ff fef5 	bl	8004558 <LL_ADC_IsEnabled>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d105      	bne.n	8004780 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4619      	mov	r1, r3
 800477a:	485d      	ldr	r0, [pc, #372]	; (80048f0 <HAL_ADC_Init+0x288>)
 800477c:	f7ff fd5e 	bl	800423c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	7e5b      	ldrb	r3, [r3, #25]
 8004784:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800478a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004790:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8004796:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800479e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d106      	bne.n	80047bc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	3b01      	subs	r3, #1
 80047b4:	045b      	lsls	r3, r3, #17
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d009      	beq.n	80047d8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	4b45      	ldr	r3, [pc, #276]	; (80048f4 <HAL_ADC_Init+0x28c>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6812      	ldr	r2, [r2, #0]
 80047e6:	69b9      	ldr	r1, [r7, #24]
 80047e8:	430b      	orrs	r3, r1
 80047ea:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7ff feff 	bl	80045f4 <LL_ADC_REG_IsConversionOngoing>
 80047f6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff ff20 	bl	8004642 <LL_ADC_INJ_IsConversionOngoing>
 8004802:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d13d      	bne.n	8004886 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d13a      	bne.n	8004886 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004814:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800481c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800481e:	4313      	orrs	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800482c:	f023 0302 	bic.w	r3, r3, #2
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	6812      	ldr	r2, [r2, #0]
 8004834:	69b9      	ldr	r1, [r7, #24]
 8004836:	430b      	orrs	r3, r1
 8004838:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004840:	2b01      	cmp	r3, #1
 8004842:	d118      	bne.n	8004876 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800484e:	f023 0304 	bic.w	r3, r3, #4
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800485a:	4311      	orrs	r1, r2
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004860:	4311      	orrs	r1, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004866:	430a      	orrs	r2, r1
 8004868:	431a      	orrs	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	611a      	str	r2, [r3, #16]
 8004874:	e007      	b.n	8004886 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d10c      	bne.n	80048a8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	f023 010f 	bic.w	r1, r3, #15
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	69db      	ldr	r3, [r3, #28]
 800489c:	1e5a      	subs	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	631a      	str	r2, [r3, #48]	; 0x30
 80048a6:	e007      	b.n	80048b8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 020f 	bic.w	r2, r2, #15
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048bc:	f023 0303 	bic.w	r3, r3, #3
 80048c0:	f043 0201 	orr.w	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54
 80048c8:	e007      	b.n	80048da <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ce:	f043 0210 	orr.w	r2, r3, #16
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80048da:	7ffb      	ldrb	r3, [r7, #31]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	20000000 	.word	0x20000000
 80048e8:	053e2d63 	.word	0x053e2d63
 80048ec:	50040000 	.word	0x50040000
 80048f0:	50040300 	.word	0x50040300
 80048f4:	fff0c007 	.word	0xfff0c007

080048f8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	60b9      	str	r1, [r7, #8]
 8004902:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f7ff fe73 	bl	80045f4 <LL_ADC_REG_IsConversionOngoing>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d167      	bne.n	80049e4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800491a:	2b01      	cmp	r3, #1
 800491c:	d101      	bne.n	8004922 <HAL_ADC_Start_DMA+0x2a>
 800491e:	2302      	movs	r3, #2
 8004920:	e063      	b.n	80049ea <HAL_ADC_Start_DMA+0xf2>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 fd7a 	bl	8005424 <ADC_Enable>
 8004930:	4603      	mov	r3, r0
 8004932:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004934:	7dfb      	ldrb	r3, [r7, #23]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d14f      	bne.n	80049da <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d006      	beq.n	8004968 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495e:	f023 0206 	bic.w	r2, r3, #6
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	659a      	str	r2, [r3, #88]	; 0x58
 8004966:	e002      	b.n	800496e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004972:	4a20      	ldr	r2, [pc, #128]	; (80049f4 <HAL_ADC_Start_DMA+0xfc>)
 8004974:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497a:	4a1f      	ldr	r2, [pc, #124]	; (80049f8 <HAL_ADC_Start_DMA+0x100>)
 800497c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004982:	4a1e      	ldr	r2, [pc, #120]	; (80049fc <HAL_ADC_Start_DMA+0x104>)
 8004984:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	221c      	movs	r2, #28
 800498c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f042 0210 	orr.w	r2, r2, #16
 80049a4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f042 0201 	orr.w	r2, r2, #1
 80049b4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3340      	adds	r3, #64	; 0x40
 80049c0:	4619      	mov	r1, r3
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f001 f8fd 	bl	8005bc4 <HAL_DMA_Start_IT>
 80049ca:	4603      	mov	r3, r0
 80049cc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff fde6 	bl	80045a4 <LL_ADC_REG_StartConversion>
 80049d8:	e006      	b.n	80049e8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80049e2:	e001      	b.n	80049e8 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80049e4:	2302      	movs	r3, #2
 80049e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80049e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	080055ef 	.word	0x080055ef
 80049f8:	080056c7 	.word	0x080056c7
 80049fc:	080056e3 	.word	0x080056e3

08004a00 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_ADC_Stop_DMA+0x16>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e051      	b.n	8004aba <HAL_ADC_Stop_DMA+0xba>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004a1e:	2103      	movs	r1, #3
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fc43 	bl	80052ac <ADC_ConversionStop>
 8004a26:	4603      	mov	r3, r0
 8004a28:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004a2a:	7bfb      	ldrb	r3, [r7, #15]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d13f      	bne.n	8004ab0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0201 	bic.w	r2, r2, #1
 8004a3e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d10f      	bne.n	8004a6e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a52:	4618      	mov	r0, r3
 8004a54:	f001 f916 	bl	8005c84 <HAL_DMA_Abort>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d005      	beq.n	8004a6e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685a      	ldr	r2, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0210 	bic.w	r2, r2, #16
 8004a7c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d105      	bne.n	8004a90 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 fd53 	bl	8005530 <ADC_Disable>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	73fb      	strb	r3, [r7, #15]
 8004a8e:	e002      	b.n	8004a96 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fd4d 	bl	8005530 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d109      	bne.n	8004ab0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004aa4:	f023 0301 	bic.w	r3, r3, #1
 8004aa8:	f043 0201 	orr.w	r2, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b083      	sub	sp, #12
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b0b6      	sub	sp, #216	; 0xd8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d101      	bne.n	8004b0e <HAL_ADC_ConfigChannel+0x22>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	e3b9      	b.n	8005282 <HAL_ADC_ConfigChannel+0x796>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff fd6a 	bl	80045f4 <LL_ADC_REG_IsConversionOngoing>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f040 839e 	bne.w	8005264 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b05      	cmp	r3, #5
 8004b2e:	d824      	bhi.n	8004b7a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	3b02      	subs	r3, #2
 8004b36:	2b03      	cmp	r3, #3
 8004b38:	d81b      	bhi.n	8004b72 <HAL_ADC_ConfigChannel+0x86>
 8004b3a:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <HAL_ADC_ConfigChannel+0x54>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004b51 	.word	0x08004b51
 8004b44:	08004b59 	.word	0x08004b59
 8004b48:	08004b61 	.word	0x08004b61
 8004b4c:	08004b69 	.word	0x08004b69
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	220c      	movs	r2, #12
 8004b54:	605a      	str	r2, [r3, #4]
          break;
 8004b56:	e011      	b.n	8004b7c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2212      	movs	r2, #18
 8004b5c:	605a      	str	r2, [r3, #4]
          break;
 8004b5e:	e00d      	b.n	8004b7c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2218      	movs	r2, #24
 8004b64:	605a      	str	r2, [r3, #4]
          break;
 8004b66:	e009      	b.n	8004b7c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b6e:	605a      	str	r2, [r3, #4]
          break;
 8004b70:	e004      	b.n	8004b7c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2206      	movs	r2, #6
 8004b76:	605a      	str	r2, [r3, #4]
          break;
 8004b78:	e000      	b.n	8004b7c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004b7a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	6859      	ldr	r1, [r3, #4]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f7ff fbf3 	bl	8004374 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff fd2e 	bl	80045f4 <LL_ADC_REG_IsConversionOngoing>
 8004b98:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fd4e 	bl	8004642 <LL_ADC_INJ_IsConversionOngoing>
 8004ba6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004baa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	f040 81a6 	bne.w	8004f00 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004bb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f040 81a1 	bne.w	8004f00 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6818      	ldr	r0, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	6819      	ldr	r1, [r3, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	f7ff fbfe 	bl	80043cc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	695a      	ldr	r2, [r3, #20]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	08db      	lsrs	r3, r3, #3
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d00a      	beq.n	8004c08 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	6919      	ldr	r1, [r3, #16]
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c02:	f7ff fb4f 	bl	80042a4 <LL_ADC_SetOffset>
 8004c06:	e17b      	b.n	8004f00 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7ff fb6c 	bl	80042ec <LL_ADC_GetOffsetChannel>
 8004c14:	4603      	mov	r3, r0
 8004c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10a      	bne.n	8004c34 <HAL_ADC_ConfigChannel+0x148>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2100      	movs	r1, #0
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff fb61 	bl	80042ec <LL_ADC_GetOffsetChannel>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	0e9b      	lsrs	r3, r3, #26
 8004c2e:	f003 021f 	and.w	r2, r3, #31
 8004c32:	e01e      	b.n	8004c72 <HAL_ADC_ConfigChannel+0x186>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2100      	movs	r1, #0
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7ff fb56 	bl	80042ec <LL_ADC_GetOffsetChannel>
 8004c40:	4603      	mov	r3, r0
 8004c42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c4a:	fa93 f3a3 	rbit	r3, r3
 8004c4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8004c52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8004c5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d101      	bne.n	8004c66 <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 8004c62:	2320      	movs	r3, #32
 8004c64:	e004      	b.n	8004c70 <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 8004c66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c6a:	fab3 f383 	clz	r3, r3
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d105      	bne.n	8004c8a <HAL_ADC_ConfigChannel+0x19e>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	0e9b      	lsrs	r3, r3, #26
 8004c84:	f003 031f 	and.w	r3, r3, #31
 8004c88:	e018      	b.n	8004cbc <HAL_ADC_ConfigChannel+0x1d0>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c96:	fa93 f3a3 	rbit	r3, r3
 8004c9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004ca2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004ca6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004cae:	2320      	movs	r3, #32
 8004cb0:	e004      	b.n	8004cbc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004cb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004cb6:	fab3 f383 	clz	r3, r3
 8004cba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d106      	bne.n	8004cce <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7ff fb25 	bl	8004318 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7ff fb09 	bl	80042ec <LL_ADC_GetOffsetChannel>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10a      	bne.n	8004cfa <HAL_ADC_ConfigChannel+0x20e>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2101      	movs	r1, #1
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff fafe 	bl	80042ec <LL_ADC_GetOffsetChannel>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	0e9b      	lsrs	r3, r3, #26
 8004cf4:	f003 021f 	and.w	r2, r3, #31
 8004cf8:	e01e      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x24c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2101      	movs	r1, #1
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7ff faf3 	bl	80042ec <LL_ADC_GetOffsetChannel>
 8004d06:	4603      	mov	r3, r0
 8004d08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004d10:	fa93 f3a3 	rbit	r3, r3
 8004d14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004d18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004d20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004d28:	2320      	movs	r3, #32
 8004d2a:	e004      	b.n	8004d36 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004d2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d30:	fab3 f383 	clz	r3, r3
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d105      	bne.n	8004d50 <HAL_ADC_ConfigChannel+0x264>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	0e9b      	lsrs	r3, r3, #26
 8004d4a:	f003 031f 	and.w	r3, r3, #31
 8004d4e:	e018      	b.n	8004d82 <HAL_ADC_ConfigChannel+0x296>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d5c:	fa93 f3a3 	rbit	r3, r3
 8004d60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004d64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004d6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004d74:	2320      	movs	r3, #32
 8004d76:	e004      	b.n	8004d82 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004d78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d7c:	fab3 f383 	clz	r3, r3
 8004d80:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d106      	bne.n	8004d94 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7ff fac2 	bl	8004318 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2102      	movs	r1, #2
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff faa6 	bl	80042ec <LL_ADC_GetOffsetChannel>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10a      	bne.n	8004dc0 <HAL_ADC_ConfigChannel+0x2d4>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2102      	movs	r1, #2
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7ff fa9b 	bl	80042ec <LL_ADC_GetOffsetChannel>
 8004db6:	4603      	mov	r3, r0
 8004db8:	0e9b      	lsrs	r3, r3, #26
 8004dba:	f003 021f 	and.w	r2, r3, #31
 8004dbe:	e01e      	b.n	8004dfe <HAL_ADC_ConfigChannel+0x312>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2102      	movs	r1, #2
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff fa90 	bl	80042ec <LL_ADC_GetOffsetChannel>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dd6:	fa93 f3a3 	rbit	r3, r3
 8004dda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004dde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004dee:	2320      	movs	r3, #32
 8004df0:	e004      	b.n	8004dfc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004df2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004df6:	fab3 f383 	clz	r3, r3
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d105      	bne.n	8004e16 <HAL_ADC_ConfigChannel+0x32a>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	0e9b      	lsrs	r3, r3, #26
 8004e10:	f003 031f 	and.w	r3, r3, #31
 8004e14:	e016      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x358>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e22:	fa93 f3a3 	rbit	r3, r3
 8004e26:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004e28:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004e2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004e36:	2320      	movs	r3, #32
 8004e38:	e004      	b.n	8004e44 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004e3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e3e:	fab3 f383 	clz	r3, r3
 8004e42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d106      	bne.n	8004e56 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2102      	movs	r1, #2
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7ff fa61 	bl	8004318 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2103      	movs	r1, #3
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff fa45 	bl	80042ec <LL_ADC_GetOffsetChannel>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10a      	bne.n	8004e82 <HAL_ADC_ConfigChannel+0x396>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2103      	movs	r1, #3
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fa3a 	bl	80042ec <LL_ADC_GetOffsetChannel>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	0e9b      	lsrs	r3, r3, #26
 8004e7c:	f003 021f 	and.w	r2, r3, #31
 8004e80:	e017      	b.n	8004eb2 <HAL_ADC_ConfigChannel+0x3c6>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2103      	movs	r1, #3
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f7ff fa2f 	bl	80042ec <LL_ADC_GetOffsetChannel>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e94:	fa93 f3a3 	rbit	r3, r3
 8004e98:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004e9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e9c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004e9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d101      	bne.n	8004ea8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004ea4:	2320      	movs	r3, #32
 8004ea6:	e003      	b.n	8004eb0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eaa:	fab3 f383 	clz	r3, r3
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d105      	bne.n	8004eca <HAL_ADC_ConfigChannel+0x3de>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	0e9b      	lsrs	r3, r3, #26
 8004ec4:	f003 031f 	and.w	r3, r3, #31
 8004ec8:	e011      	b.n	8004eee <HAL_ADC_ConfigChannel+0x402>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ed2:	fa93 f3a3 	rbit	r3, r3
 8004ed6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eda:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004ee2:	2320      	movs	r3, #32
 8004ee4:	e003      	b.n	8004eee <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee8:	fab3 f383 	clz	r3, r3
 8004eec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d106      	bne.n	8004f00 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2103      	movs	r1, #3
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff fa0c 	bl	8004318 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff fb27 	bl	8004558 <LL_ADC_IsEnabled>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f040 813f 	bne.w	8005190 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6819      	ldr	r1, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	f7ff fa80 	bl	8004424 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	4a8e      	ldr	r2, [pc, #568]	; (8005164 <HAL_ADC_ConfigChannel+0x678>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	f040 8130 	bne.w	8005190 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10b      	bne.n	8004f58 <HAL_ADC_ConfigChannel+0x46c>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	0e9b      	lsrs	r3, r3, #26
 8004f46:	3301      	adds	r3, #1
 8004f48:	f003 031f 	and.w	r3, r3, #31
 8004f4c:	2b09      	cmp	r3, #9
 8004f4e:	bf94      	ite	ls
 8004f50:	2301      	movls	r3, #1
 8004f52:	2300      	movhi	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	e019      	b.n	8004f8c <HAL_ADC_ConfigChannel+0x4a0>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f60:	fa93 f3a3 	rbit	r3, r3
 8004f64:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004f66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f68:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004f70:	2320      	movs	r3, #32
 8004f72:	e003      	b.n	8004f7c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004f74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f76:	fab3 f383 	clz	r3, r3
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	f003 031f 	and.w	r3, r3, #31
 8004f82:	2b09      	cmp	r3, #9
 8004f84:	bf94      	ite	ls
 8004f86:	2301      	movls	r3, #1
 8004f88:	2300      	movhi	r3, #0
 8004f8a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d079      	beq.n	8005084 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d107      	bne.n	8004fac <HAL_ADC_ConfigChannel+0x4c0>
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	0e9b      	lsrs	r3, r3, #26
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	069b      	lsls	r3, r3, #26
 8004fa6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004faa:	e015      	b.n	8004fd8 <HAL_ADC_ConfigChannel+0x4ec>
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fb4:	fa93 f3a3 	rbit	r3, r3
 8004fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004fbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004fc4:	2320      	movs	r3, #32
 8004fc6:	e003      	b.n	8004fd0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fca:	fab3 f383 	clz	r3, r3
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	069b      	lsls	r3, r3, #26
 8004fd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d109      	bne.n	8004ff8 <HAL_ADC_ConfigChannel+0x50c>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	0e9b      	lsrs	r3, r3, #26
 8004fea:	3301      	adds	r3, #1
 8004fec:	f003 031f 	and.w	r3, r3, #31
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff6:	e017      	b.n	8005028 <HAL_ADC_ConfigChannel+0x53c>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005000:	fa93 f3a3 	rbit	r3, r3
 8005004:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8005006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005008:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800500a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8005010:	2320      	movs	r3, #32
 8005012:	e003      	b.n	800501c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8005014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005016:	fab3 f383 	clz	r3, r3
 800501a:	b2db      	uxtb	r3, r3
 800501c:	3301      	adds	r3, #1
 800501e:	f003 031f 	and.w	r3, r3, #31
 8005022:	2101      	movs	r1, #1
 8005024:	fa01 f303 	lsl.w	r3, r1, r3
 8005028:	ea42 0103 	orr.w	r1, r2, r3
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <HAL_ADC_ConfigChannel+0x562>
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	0e9b      	lsrs	r3, r3, #26
 800503e:	3301      	adds	r3, #1
 8005040:	f003 021f 	and.w	r2, r3, #31
 8005044:	4613      	mov	r3, r2
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	4413      	add	r3, r2
 800504a:	051b      	lsls	r3, r3, #20
 800504c:	e018      	b.n	8005080 <HAL_ADC_ConfigChannel+0x594>
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	fa93 f3a3 	rbit	r3, r3
 800505a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800505c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8005066:	2320      	movs	r3, #32
 8005068:	e003      	b.n	8005072 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800506a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800506c:	fab3 f383 	clz	r3, r3
 8005070:	b2db      	uxtb	r3, r3
 8005072:	3301      	adds	r3, #1
 8005074:	f003 021f 	and.w	r2, r3, #31
 8005078:	4613      	mov	r3, r2
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	4413      	add	r3, r2
 800507e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005080:	430b      	orrs	r3, r1
 8005082:	e080      	b.n	8005186 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800508c:	2b00      	cmp	r3, #0
 800508e:	d107      	bne.n	80050a0 <HAL_ADC_ConfigChannel+0x5b4>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	0e9b      	lsrs	r3, r3, #26
 8005096:	3301      	adds	r3, #1
 8005098:	069b      	lsls	r3, r3, #26
 800509a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800509e:	e015      	b.n	80050cc <HAL_ADC_ConfigChannel+0x5e0>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a8:	fa93 f3a3 	rbit	r3, r3
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80050b8:	2320      	movs	r3, #32
 80050ba:	e003      	b.n	80050c4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	fab3 f383 	clz	r3, r3
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	3301      	adds	r3, #1
 80050c6:	069b      	lsls	r3, r3, #26
 80050c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d109      	bne.n	80050ec <HAL_ADC_ConfigChannel+0x600>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	0e9b      	lsrs	r3, r3, #26
 80050de:	3301      	adds	r3, #1
 80050e0:	f003 031f 	and.w	r3, r3, #31
 80050e4:	2101      	movs	r1, #1
 80050e6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ea:	e017      	b.n	800511c <HAL_ADC_ConfigChannel+0x630>
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	fa93 f3a3 	rbit	r3, r3
 80050f8:	61fb      	str	r3, [r7, #28]
  return result;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8005104:	2320      	movs	r3, #32
 8005106:	e003      	b.n	8005110 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8005108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510a:	fab3 f383 	clz	r3, r3
 800510e:	b2db      	uxtb	r3, r3
 8005110:	3301      	adds	r3, #1
 8005112:	f003 031f 	and.w	r3, r3, #31
 8005116:	2101      	movs	r1, #1
 8005118:	fa01 f303 	lsl.w	r3, r1, r3
 800511c:	ea42 0103 	orr.w	r1, r2, r3
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10d      	bne.n	8005148 <HAL_ADC_ConfigChannel+0x65c>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	0e9b      	lsrs	r3, r3, #26
 8005132:	3301      	adds	r3, #1
 8005134:	f003 021f 	and.w	r2, r3, #31
 8005138:	4613      	mov	r3, r2
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	4413      	add	r3, r2
 800513e:	3b1e      	subs	r3, #30
 8005140:	051b      	lsls	r3, r3, #20
 8005142:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005146:	e01d      	b.n	8005184 <HAL_ADC_ConfigChannel+0x698>
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	fa93 f3a3 	rbit	r3, r3
 8005154:	613b      	str	r3, [r7, #16]
  return result;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d103      	bne.n	8005168 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005160:	2320      	movs	r3, #32
 8005162:	e005      	b.n	8005170 <HAL_ADC_ConfigChannel+0x684>
 8005164:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	fab3 f383 	clz	r3, r3
 800516e:	b2db      	uxtb	r3, r3
 8005170:	3301      	adds	r3, #1
 8005172:	f003 021f 	and.w	r2, r3, #31
 8005176:	4613      	mov	r3, r2
 8005178:	005b      	lsls	r3, r3, #1
 800517a:	4413      	add	r3, r2
 800517c:	3b1e      	subs	r3, #30
 800517e:	051b      	lsls	r3, r3, #20
 8005180:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005184:	430b      	orrs	r3, r1
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	6892      	ldr	r2, [r2, #8]
 800518a:	4619      	mov	r1, r3
 800518c:	f7ff f91e 	bl	80043cc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	4b3d      	ldr	r3, [pc, #244]	; (800528c <HAL_ADC_ConfigChannel+0x7a0>)
 8005196:	4013      	ands	r3, r2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d06c      	beq.n	8005276 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800519c:	483c      	ldr	r0, [pc, #240]	; (8005290 <HAL_ADC_ConfigChannel+0x7a4>)
 800519e:	f7ff f873 	bl	8004288 <LL_ADC_GetCommonPathInternalCh>
 80051a2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a3a      	ldr	r2, [pc, #232]	; (8005294 <HAL_ADC_ConfigChannel+0x7a8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d127      	bne.n	8005200 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d121      	bne.n	8005200 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a35      	ldr	r2, [pc, #212]	; (8005298 <HAL_ADC_ConfigChannel+0x7ac>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d157      	bne.n	8005276 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051ce:	4619      	mov	r1, r3
 80051d0:	482f      	ldr	r0, [pc, #188]	; (8005290 <HAL_ADC_ConfigChannel+0x7a4>)
 80051d2:	f7ff f846 	bl	8004262 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051d6:	4b31      	ldr	r3, [pc, #196]	; (800529c <HAL_ADC_ConfigChannel+0x7b0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	099b      	lsrs	r3, r3, #6
 80051dc:	4a30      	ldr	r2, [pc, #192]	; (80052a0 <HAL_ADC_ConfigChannel+0x7b4>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	099b      	lsrs	r3, r3, #6
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	4613      	mov	r3, r2
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4413      	add	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051f0:	e002      	b.n	80051f8 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3b01      	subs	r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1f9      	bne.n	80051f2 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051fe:	e03a      	b.n	8005276 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a27      	ldr	r2, [pc, #156]	; (80052a4 <HAL_ADC_ConfigChannel+0x7b8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d113      	bne.n	8005232 <HAL_ADC_ConfigChannel+0x746>
 800520a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800520e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10d      	bne.n	8005232 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a1f      	ldr	r2, [pc, #124]	; (8005298 <HAL_ADC_ConfigChannel+0x7ac>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d12a      	bne.n	8005276 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005220:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005224:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005228:	4619      	mov	r1, r3
 800522a:	4819      	ldr	r0, [pc, #100]	; (8005290 <HAL_ADC_ConfigChannel+0x7a4>)
 800522c:	f7ff f819 	bl	8004262 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005230:	e021      	b.n	8005276 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a1c      	ldr	r2, [pc, #112]	; (80052a8 <HAL_ADC_ConfigChannel+0x7bc>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d11c      	bne.n	8005276 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800523c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005240:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d116      	bne.n	8005276 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a12      	ldr	r2, [pc, #72]	; (8005298 <HAL_ADC_ConfigChannel+0x7ac>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d111      	bne.n	8005276 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005252:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005256:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800525a:	4619      	mov	r1, r3
 800525c:	480c      	ldr	r0, [pc, #48]	; (8005290 <HAL_ADC_ConfigChannel+0x7a4>)
 800525e:	f7ff f800 	bl	8004262 <LL_ADC_SetCommonPathInternalCh>
 8005262:	e008      	b.n	8005276 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005268:	f043 0220 	orr.w	r2, r3, #32
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800527e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005282:	4618      	mov	r0, r3
 8005284:	37d8      	adds	r7, #216	; 0xd8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	80080000 	.word	0x80080000
 8005290:	50040300 	.word	0x50040300
 8005294:	c7520000 	.word	0xc7520000
 8005298:	50040000 	.word	0x50040000
 800529c:	20000000 	.word	0x20000000
 80052a0:	053e2d63 	.word	0x053e2d63
 80052a4:	cb840000 	.word	0xcb840000
 80052a8:	80000001 	.word	0x80000001

080052ac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff f996 	bl	80045f4 <LL_ADC_REG_IsConversionOngoing>
 80052c8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff f9b7 	bl	8004642 <LL_ADC_INJ_IsConversionOngoing>
 80052d4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d103      	bne.n	80052e4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 8098 	beq.w	8005414 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d02a      	beq.n	8005348 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	7e5b      	ldrb	r3, [r3, #25]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d126      	bne.n	8005348 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7e1b      	ldrb	r3, [r3, #24]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d122      	bne.n	8005348 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005302:	2301      	movs	r3, #1
 8005304:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005306:	e014      	b.n	8005332 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	4a45      	ldr	r2, [pc, #276]	; (8005420 <ADC_ConversionStop+0x174>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d90d      	bls.n	800532c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005314:	f043 0210 	orr.w	r2, r3, #16
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005320:	f043 0201 	orr.w	r2, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e074      	b.n	8005416 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	3301      	adds	r3, #1
 8005330:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b40      	cmp	r3, #64	; 0x40
 800533e:	d1e3      	bne.n	8005308 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2240      	movs	r2, #64	; 0x40
 8005346:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	2b02      	cmp	r3, #2
 800534c:	d014      	beq.n	8005378 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff f94e 	bl	80045f4 <LL_ADC_REG_IsConversionOngoing>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00c      	beq.n	8005378 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff f90b 	bl	800457e <LL_ADC_IsDisableOngoing>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d104      	bne.n	8005378 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff f92a 	bl	80045cc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d014      	beq.n	80053a8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff f95d 	bl	8004642 <LL_ADC_INJ_IsConversionOngoing>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00c      	beq.n	80053a8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff f8f3 	bl	800457e <LL_ADC_IsDisableOngoing>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d104      	bne.n	80053a8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff f939 	bl	800461a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2b02      	cmp	r3, #2
 80053ac:	d005      	beq.n	80053ba <ADC_ConversionStop+0x10e>
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	2b03      	cmp	r3, #3
 80053b2:	d105      	bne.n	80053c0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80053b4:	230c      	movs	r3, #12
 80053b6:	617b      	str	r3, [r7, #20]
        break;
 80053b8:	e005      	b.n	80053c6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80053ba:	2308      	movs	r3, #8
 80053bc:	617b      	str	r3, [r7, #20]
        break;
 80053be:	e002      	b.n	80053c6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80053c0:	2304      	movs	r3, #4
 80053c2:	617b      	str	r3, [r7, #20]
        break;
 80053c4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80053c6:	f7fe ff0d 	bl	80041e4 <HAL_GetTick>
 80053ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80053cc:	e01b      	b.n	8005406 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80053ce:	f7fe ff09 	bl	80041e4 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b05      	cmp	r3, #5
 80053da:	d914      	bls.n	8005406 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	4013      	ands	r3, r2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00d      	beq.n	8005406 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ee:	f043 0210 	orr.w	r2, r3, #16
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fa:	f043 0201 	orr.w	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e007      	b.n	8005416 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	4013      	ands	r3, r2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1dc      	bne.n	80053ce <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	a33fffff 	.word	0xa33fffff

08005424 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800542c:	2300      	movs	r3, #0
 800542e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff f88f 	bl	8004558 <LL_ADC_IsEnabled>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d169      	bne.n	8005514 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	4b36      	ldr	r3, [pc, #216]	; (8005520 <ADC_Enable+0xfc>)
 8005448:	4013      	ands	r3, r2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00d      	beq.n	800546a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005452:	f043 0210 	orr.w	r2, r3, #16
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800545e:	f043 0201 	orr.w	r2, r3, #1
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e055      	b.n	8005516 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff f84a 	bl	8004508 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005474:	482b      	ldr	r0, [pc, #172]	; (8005524 <ADC_Enable+0x100>)
 8005476:	f7fe ff07 	bl	8004288 <LL_ADC_GetCommonPathInternalCh>
 800547a:	4603      	mov	r3, r0
 800547c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005480:	2b00      	cmp	r3, #0
 8005482:	d013      	beq.n	80054ac <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005484:	4b28      	ldr	r3, [pc, #160]	; (8005528 <ADC_Enable+0x104>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	099b      	lsrs	r3, r3, #6
 800548a:	4a28      	ldr	r2, [pc, #160]	; (800552c <ADC_Enable+0x108>)
 800548c:	fba2 2303 	umull	r2, r3, r2, r3
 8005490:	099b      	lsrs	r3, r3, #6
 8005492:	1c5a      	adds	r2, r3, #1
 8005494:	4613      	mov	r3, r2
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800549e:	e002      	b.n	80054a6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1f9      	bne.n	80054a0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80054ac:	f7fe fe9a 	bl	80041e4 <HAL_GetTick>
 80054b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054b2:	e028      	b.n	8005506 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff f84d 	bl	8004558 <LL_ADC_IsEnabled>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d104      	bne.n	80054ce <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff f81d 	bl	8004508 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80054ce:	f7fe fe89 	bl	80041e4 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d914      	bls.n	8005506 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d00d      	beq.n	8005506 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	f043 0210 	orr.w	r2, r3, #16
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fa:	f043 0201 	orr.w	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e007      	b.n	8005516 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b01      	cmp	r3, #1
 8005512:	d1cf      	bne.n	80054b4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	8000003f 	.word	0x8000003f
 8005524:	50040300 	.word	0x50040300
 8005528:	20000000 	.word	0x20000000
 800552c:	053e2d63 	.word	0x053e2d63

08005530 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4618      	mov	r0, r3
 800553e:	f7ff f81e 	bl	800457e <LL_ADC_IsDisableOngoing>
 8005542:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff f805 	bl	8004558 <LL_ADC_IsEnabled>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d047      	beq.n	80055e4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d144      	bne.n	80055e4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f003 030d 	and.w	r3, r3, #13
 8005564:	2b01      	cmp	r3, #1
 8005566:	d10c      	bne.n	8005582 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4618      	mov	r0, r3
 800556e:	f7fe ffdf 	bl	8004530 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2203      	movs	r2, #3
 8005578:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800557a:	f7fe fe33 	bl	80041e4 <HAL_GetTick>
 800557e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005580:	e029      	b.n	80055d6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005586:	f043 0210 	orr.w	r2, r3, #16
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005592:	f043 0201 	orr.w	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e023      	b.n	80055e6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800559e:	f7fe fe21 	bl	80041e4 <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d914      	bls.n	80055d6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00d      	beq.n	80055d6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055be:	f043 0210 	orr.w	r2, r3, #16
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ca:	f043 0201 	orr.w	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e007      	b.n	80055e6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1dc      	bne.n	800559e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b084      	sub	sp, #16
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005600:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005604:	2b00      	cmp	r3, #0
 8005606:	d14b      	bne.n	80056a0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800560c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b00      	cmp	r3, #0
 8005620:	d021      	beq.n	8005666 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4618      	mov	r0, r3
 8005628:	f7fe fe91 	bl	800434e <LL_ADC_REG_IsTriggerSourceSWStart>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d032      	beq.n	8005698 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d12b      	bne.n	8005698 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005644:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d11f      	bne.n	8005698 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565c:	f043 0201 	orr.w	r2, r3, #1
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	655a      	str	r2, [r3, #84]	; 0x54
 8005664:	e018      	b.n	8005698 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d111      	bne.n	8005698 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005678:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005684:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d105      	bne.n	8005698 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005690:	f043 0201 	orr.w	r2, r3, #1
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f7fd fceb 	bl	8003074 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800569e:	e00e      	b.n	80056be <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f7ff fa12 	bl	8004ad6 <HAL_ADC_ErrorCallback>
}
 80056b2:	e004      	b.n	80056be <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	4798      	blx	r3
}
 80056be:	bf00      	nop
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f7ff f9f4 	bl	8004ac2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80056da:	bf00      	nop
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b084      	sub	sp, #16
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005700:	f043 0204 	orr.w	r2, r3, #4
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7ff f9e4 	bl	8004ad6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <LL_ADC_StartCalibration>:
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
 800571e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005728:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005732:	4313      	orrs	r3, r2
 8005734:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	609a      	str	r2, [r3, #8]
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <LL_ADC_IsCalibrationOnGoing>:
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800575c:	d101      	bne.n	8005762 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800577a:	2300      	movs	r3, #0
 800577c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005784:	2b01      	cmp	r3, #1
 8005786:	d101      	bne.n	800578c <HAL_ADCEx_Calibration_Start+0x1c>
 8005788:	2302      	movs	r3, #2
 800578a:	e04d      	b.n	8005828 <HAL_ADCEx_Calibration_Start+0xb8>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff fecb 	bl	8005530 <ADC_Disable>
 800579a:	4603      	mov	r3, r0
 800579c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d136      	bne.n	8005812 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80057ac:	f023 0302 	bic.w	r3, r3, #2
 80057b0:	f043 0202 	orr.w	r2, r3, #2
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6839      	ldr	r1, [r7, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff ffa9 	bl	8005716 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80057c4:	e014      	b.n	80057f0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	3301      	adds	r3, #1
 80057ca:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80057d2:	d30d      	bcc.n	80057f0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d8:	f023 0312 	bic.w	r3, r3, #18
 80057dc:	f043 0210 	orr.w	r2, r3, #16
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e01b      	b.n	8005828 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff ffa7 	bl	8005748 <LL_ADC_IsCalibrationOnGoing>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e2      	bne.n	80057c6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005804:	f023 0303 	bic.w	r3, r3, #3
 8005808:	f043 0201 	orr.w	r2, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	655a      	str	r2, [r3, #84]	; 0x54
 8005810:	e005      	b.n	800581e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005816:	f043 0210 	orr.w	r2, r3, #16
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005826:	7bfb      	ldrb	r3, [r7, #15]
}
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <__NVIC_SetPriorityGrouping>:
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f003 0307 	and.w	r3, r3, #7
 800583e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005840:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <__NVIC_SetPriorityGrouping+0x44>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800584c:	4013      	ands	r3, r2
 800584e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800585c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005862:	4a04      	ldr	r2, [pc, #16]	; (8005874 <__NVIC_SetPriorityGrouping+0x44>)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	60d3      	str	r3, [r2, #12]
}
 8005868:	bf00      	nop
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	e000ed00 	.word	0xe000ed00

08005878 <__NVIC_GetPriorityGrouping>:
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800587c:	4b04      	ldr	r3, [pc, #16]	; (8005890 <__NVIC_GetPriorityGrouping+0x18>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	0a1b      	lsrs	r3, r3, #8
 8005882:	f003 0307 	and.w	r3, r3, #7
}
 8005886:	4618      	mov	r0, r3
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	e000ed00 	.word	0xe000ed00

08005894 <__NVIC_EnableIRQ>:
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	4603      	mov	r3, r0
 800589c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800589e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	db0b      	blt.n	80058be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	f003 021f 	and.w	r2, r3, #31
 80058ac:	4907      	ldr	r1, [pc, #28]	; (80058cc <__NVIC_EnableIRQ+0x38>)
 80058ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b2:	095b      	lsrs	r3, r3, #5
 80058b4:	2001      	movs	r0, #1
 80058b6:	fa00 f202 	lsl.w	r2, r0, r2
 80058ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
 80058ca:	bf00      	nop
 80058cc:	e000e100 	.word	0xe000e100

080058d0 <__NVIC_SetPriority>:
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	6039      	str	r1, [r7, #0]
 80058da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	db0a      	blt.n	80058fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	490c      	ldr	r1, [pc, #48]	; (800591c <__NVIC_SetPriority+0x4c>)
 80058ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058ee:	0112      	lsls	r2, r2, #4
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	440b      	add	r3, r1
 80058f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80058f8:	e00a      	b.n	8005910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	4908      	ldr	r1, [pc, #32]	; (8005920 <__NVIC_SetPriority+0x50>)
 8005900:	79fb      	ldrb	r3, [r7, #7]
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	3b04      	subs	r3, #4
 8005908:	0112      	lsls	r2, r2, #4
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	440b      	add	r3, r1
 800590e:	761a      	strb	r2, [r3, #24]
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	e000e100 	.word	0xe000e100
 8005920:	e000ed00 	.word	0xe000ed00

08005924 <NVIC_EncodePriority>:
{
 8005924:	b480      	push	{r7}
 8005926:	b089      	sub	sp, #36	; 0x24
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 0307 	and.w	r3, r3, #7
 8005936:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005938:	69fb      	ldr	r3, [r7, #28]
 800593a:	f1c3 0307 	rsb	r3, r3, #7
 800593e:	2b04      	cmp	r3, #4
 8005940:	bf28      	it	cs
 8005942:	2304      	movcs	r3, #4
 8005944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	3304      	adds	r3, #4
 800594a:	2b06      	cmp	r3, #6
 800594c:	d902      	bls.n	8005954 <NVIC_EncodePriority+0x30>
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	3b03      	subs	r3, #3
 8005952:	e000      	b.n	8005956 <NVIC_EncodePriority+0x32>
 8005954:	2300      	movs	r3, #0
 8005956:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005958:	f04f 32ff 	mov.w	r2, #4294967295
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	fa02 f303 	lsl.w	r3, r2, r3
 8005962:	43da      	mvns	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	401a      	ands	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800596c:	f04f 31ff 	mov.w	r1, #4294967295
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	fa01 f303 	lsl.w	r3, r1, r3
 8005976:	43d9      	mvns	r1, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800597c:	4313      	orrs	r3, r2
}
 800597e:	4618      	mov	r0, r3
 8005980:	3724      	adds	r7, #36	; 0x24
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
	...

0800598c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3b01      	subs	r3, #1
 8005998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800599c:	d301      	bcc.n	80059a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800599e:	2301      	movs	r3, #1
 80059a0:	e00f      	b.n	80059c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80059a2:	4a0a      	ldr	r2, [pc, #40]	; (80059cc <SysTick_Config+0x40>)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80059aa:	210f      	movs	r1, #15
 80059ac:	f04f 30ff 	mov.w	r0, #4294967295
 80059b0:	f7ff ff8e 	bl	80058d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80059b4:	4b05      	ldr	r3, [pc, #20]	; (80059cc <SysTick_Config+0x40>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80059ba:	4b04      	ldr	r3, [pc, #16]	; (80059cc <SysTick_Config+0x40>)
 80059bc:	2207      	movs	r2, #7
 80059be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	e000e010 	.word	0xe000e010

080059d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f7ff ff29 	bl	8005830 <__NVIC_SetPriorityGrouping>
}
 80059de:	bf00      	nop
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b086      	sub	sp, #24
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	4603      	mov	r3, r0
 80059ee:	60b9      	str	r1, [r7, #8]
 80059f0:	607a      	str	r2, [r7, #4]
 80059f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80059f4:	2300      	movs	r3, #0
 80059f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80059f8:	f7ff ff3e 	bl	8005878 <__NVIC_GetPriorityGrouping>
 80059fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	68b9      	ldr	r1, [r7, #8]
 8005a02:	6978      	ldr	r0, [r7, #20]
 8005a04:	f7ff ff8e 	bl	8005924 <NVIC_EncodePriority>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a0e:	4611      	mov	r1, r2
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff ff5d 	bl	80058d0 <__NVIC_SetPriority>
}
 8005a16:	bf00      	nop
 8005a18:	3718      	adds	r7, #24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	4603      	mov	r3, r0
 8005a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff ff31 	bl	8005894 <__NVIC_EnableIRQ>
}
 8005a32:	bf00      	nop
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b082      	sub	sp, #8
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7ff ffa2 	bl	800598c <SysTick_Config>
 8005a48:	4603      	mov	r3, r0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e098      	b.n	8005b98 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	4b4d      	ldr	r3, [pc, #308]	; (8005ba4 <HAL_DMA_Init+0x150>)
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d80f      	bhi.n	8005a92 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	4b4b      	ldr	r3, [pc, #300]	; (8005ba8 <HAL_DMA_Init+0x154>)
 8005a7a:	4413      	add	r3, r2
 8005a7c:	4a4b      	ldr	r2, [pc, #300]	; (8005bac <HAL_DMA_Init+0x158>)
 8005a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a82:	091b      	lsrs	r3, r3, #4
 8005a84:	009a      	lsls	r2, r3, #2
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a48      	ldr	r2, [pc, #288]	; (8005bb0 <HAL_DMA_Init+0x15c>)
 8005a8e:	641a      	str	r2, [r3, #64]	; 0x40
 8005a90:	e00e      	b.n	8005ab0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	461a      	mov	r2, r3
 8005a98:	4b46      	ldr	r3, [pc, #280]	; (8005bb4 <HAL_DMA_Init+0x160>)
 8005a9a:	4413      	add	r3, r2
 8005a9c:	4a43      	ldr	r2, [pc, #268]	; (8005bac <HAL_DMA_Init+0x158>)
 8005a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa2:	091b      	lsrs	r3, r3, #4
 8005aa4:	009a      	lsls	r2, r3, #2
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a42      	ldr	r2, [pc, #264]	; (8005bb8 <HAL_DMA_Init+0x164>)
 8005aae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005ad4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005aec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b0a:	d039      	beq.n	8005b80 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b10:	4a27      	ldr	r2, [pc, #156]	; (8005bb0 <HAL_DMA_Init+0x15c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d11a      	bne.n	8005b4c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005b16:	4b29      	ldr	r3, [pc, #164]	; (8005bbc <HAL_DMA_Init+0x168>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1e:	f003 031c 	and.w	r3, r3, #28
 8005b22:	210f      	movs	r1, #15
 8005b24:	fa01 f303 	lsl.w	r3, r1, r3
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	4924      	ldr	r1, [pc, #144]	; (8005bbc <HAL_DMA_Init+0x168>)
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005b30:	4b22      	ldr	r3, [pc, #136]	; (8005bbc <HAL_DMA_Init+0x168>)
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6859      	ldr	r1, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3c:	f003 031c 	and.w	r3, r3, #28
 8005b40:	fa01 f303 	lsl.w	r3, r1, r3
 8005b44:	491d      	ldr	r1, [pc, #116]	; (8005bbc <HAL_DMA_Init+0x168>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	600b      	str	r3, [r1, #0]
 8005b4a:	e019      	b.n	8005b80 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005b4c:	4b1c      	ldr	r3, [pc, #112]	; (8005bc0 <HAL_DMA_Init+0x16c>)
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b54:	f003 031c 	and.w	r3, r3, #28
 8005b58:	210f      	movs	r1, #15
 8005b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b5e:	43db      	mvns	r3, r3
 8005b60:	4917      	ldr	r1, [pc, #92]	; (8005bc0 <HAL_DMA_Init+0x16c>)
 8005b62:	4013      	ands	r3, r2
 8005b64:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005b66:	4b16      	ldr	r3, [pc, #88]	; (8005bc0 <HAL_DMA_Init+0x16c>)
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6859      	ldr	r1, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b72:	f003 031c 	and.w	r3, r3, #28
 8005b76:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7a:	4911      	ldr	r1, [pc, #68]	; (8005bc0 <HAL_DMA_Init+0x16c>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3714      	adds	r7, #20
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	40020407 	.word	0x40020407
 8005ba8:	bffdfff8 	.word	0xbffdfff8
 8005bac:	cccccccd 	.word	0xcccccccd
 8005bb0:	40020000 	.word	0x40020000
 8005bb4:	bffdfbf8 	.word	0xbffdfbf8
 8005bb8:	40020400 	.word	0x40020400
 8005bbc:	400200a8 	.word	0x400200a8
 8005bc0:	400204a8 	.word	0x400204a8

08005bc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_DMA_Start_IT+0x20>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e04b      	b.n	8005c7c <HAL_DMA_Start_IT+0xb8>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d13a      	bne.n	8005c6e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f022 0201 	bic.w	r2, r2, #1
 8005c14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 f95f 	bl	8005ee0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d008      	beq.n	8005c3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f042 020e 	orr.w	r2, r2, #14
 8005c38:	601a      	str	r2, [r3, #0]
 8005c3a:	e00f      	b.n	8005c5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0204 	bic.w	r2, r2, #4
 8005c4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 020a 	orr.w	r2, r2, #10
 8005c5a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0201 	orr.w	r2, r2, #1
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	e005      	b.n	8005c7a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c76:	2302      	movs	r3, #2
 8005c78:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d008      	beq.n	8005cae <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2204      	movs	r2, #4
 8005ca0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e022      	b.n	8005cf4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 020e 	bic.w	r2, r2, #14
 8005cbc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0201 	bic.w	r2, r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd2:	f003 021c 	and.w	r2, r3, #28
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	2101      	movs	r1, #1
 8005cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8005ce0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005cf2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d005      	beq.n	8005d24 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	73fb      	strb	r3, [r7, #15]
 8005d22:	e029      	b.n	8005d78 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 020e 	bic.w	r2, r2, #14
 8005d32:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0201 	bic.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d48:	f003 021c 	and.w	r2, r3, #28
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d50:	2101      	movs	r1, #1
 8005d52:	fa01 f202 	lsl.w	r2, r1, r2
 8005d56:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	4798      	blx	r3
    }
  }
  return status;
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	f003 031c 	and.w	r3, r3, #28
 8005da2:	2204      	movs	r2, #4
 8005da4:	409a      	lsls	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4013      	ands	r3, r2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d026      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x7a>
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d021      	beq.n	8005dfc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0320 	and.w	r3, r3, #32
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d107      	bne.n	8005dd6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0204 	bic.w	r2, r2, #4
 8005dd4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dda:	f003 021c 	and.w	r2, r3, #28
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	2104      	movs	r1, #4
 8005de4:	fa01 f202 	lsl.w	r2, r1, r2
 8005de8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d071      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005dfa:	e06c      	b.n	8005ed6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e00:	f003 031c 	and.w	r3, r3, #28
 8005e04:	2202      	movs	r2, #2
 8005e06:	409a      	lsls	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d02e      	beq.n	8005e6e <HAL_DMA_IRQHandler+0xec>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d029      	beq.n	8005e6e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0320 	and.w	r3, r3, #32
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10b      	bne.n	8005e40 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 020a 	bic.w	r2, r2, #10
 8005e36:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e44:	f003 021c 	and.w	r2, r3, #28
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	2102      	movs	r1, #2
 8005e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e52:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d038      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005e6c:	e033      	b.n	8005ed6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e72:	f003 031c 	and.w	r3, r3, #28
 8005e76:	2208      	movs	r2, #8
 8005e78:	409a      	lsls	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d02a      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0x156>
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d025      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 020e 	bic.w	r2, r2, #14
 8005e9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ea0:	f003 021c 	and.w	r2, r3, #28
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8005eae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d004      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
}
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b085      	sub	sp, #20
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
 8005eec:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef2:	f003 021c 	and.w	r2, r3, #28
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	2101      	movs	r1, #1
 8005efc:	fa01 f202 	lsl.w	r2, r1, r2
 8005f00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	683a      	ldr	r2, [r7, #0]
 8005f08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b10      	cmp	r3, #16
 8005f10:	d108      	bne.n	8005f24 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005f22:	e007      	b.n	8005f34 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	60da      	str	r2, [r3, #12]
}
 8005f34:	bf00      	nop
 8005f36:	3714      	adds	r7, #20
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f4e:	e148      	b.n	80061e2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	2101      	movs	r1, #1
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	fa01 f303 	lsl.w	r3, r1, r3
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	f000 813a 	beq.w	80061dc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f003 0303 	and.w	r3, r3, #3
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d005      	beq.n	8005f80 <HAL_GPIO_Init+0x40>
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f003 0303 	and.w	r3, r3, #3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d130      	bne.n	8005fe2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	2203      	movs	r2, #3
 8005f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f90:	43db      	mvns	r3, r3
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	4013      	ands	r3, r2
 8005f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbe:	43db      	mvns	r3, r3
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	091b      	lsrs	r3, r3, #4
 8005fcc:	f003 0201 	and.w	r2, r3, #1
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	693a      	ldr	r2, [r7, #16]
 8005fe0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	d017      	beq.n	800601e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffe:	43db      	mvns	r3, r3
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	4013      	ands	r3, r2
 8006004:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	fa02 f303 	lsl.w	r3, r2, r3
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	4313      	orrs	r3, r2
 8006016:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	2b02      	cmp	r3, #2
 8006028:	d123      	bne.n	8006072 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	08da      	lsrs	r2, r3, #3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3208      	adds	r2, #8
 8006032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006036:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	220f      	movs	r2, #15
 8006042:	fa02 f303 	lsl.w	r3, r2, r3
 8006046:	43db      	mvns	r3, r3
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	4013      	ands	r3, r2
 800604c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	691a      	ldr	r2, [r3, #16]
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	fa02 f303 	lsl.w	r3, r2, r3
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	08da      	lsrs	r2, r3, #3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3208      	adds	r2, #8
 800606c:	6939      	ldr	r1, [r7, #16]
 800606e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	2203      	movs	r2, #3
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	43db      	mvns	r3, r3
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	4013      	ands	r3, r2
 8006088:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f003 0203 	and.w	r2, r3, #3
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 8094 	beq.w	80061dc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060b4:	4b52      	ldr	r3, [pc, #328]	; (8006200 <HAL_GPIO_Init+0x2c0>)
 80060b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b8:	4a51      	ldr	r2, [pc, #324]	; (8006200 <HAL_GPIO_Init+0x2c0>)
 80060ba:	f043 0301 	orr.w	r3, r3, #1
 80060be:	6613      	str	r3, [r2, #96]	; 0x60
 80060c0:	4b4f      	ldr	r3, [pc, #316]	; (8006200 <HAL_GPIO_Init+0x2c0>)
 80060c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	60bb      	str	r3, [r7, #8]
 80060ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80060cc:	4a4d      	ldr	r2, [pc, #308]	; (8006204 <HAL_GPIO_Init+0x2c4>)
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	089b      	lsrs	r3, r3, #2
 80060d2:	3302      	adds	r3, #2
 80060d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f003 0303 	and.w	r3, r3, #3
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	220f      	movs	r2, #15
 80060e4:	fa02 f303 	lsl.w	r3, r2, r3
 80060e8:	43db      	mvns	r3, r3
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	4013      	ands	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80060f6:	d00d      	beq.n	8006114 <HAL_GPIO_Init+0x1d4>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a43      	ldr	r2, [pc, #268]	; (8006208 <HAL_GPIO_Init+0x2c8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d007      	beq.n	8006110 <HAL_GPIO_Init+0x1d0>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a42      	ldr	r2, [pc, #264]	; (800620c <HAL_GPIO_Init+0x2cc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d101      	bne.n	800610c <HAL_GPIO_Init+0x1cc>
 8006108:	2302      	movs	r3, #2
 800610a:	e004      	b.n	8006116 <HAL_GPIO_Init+0x1d6>
 800610c:	2307      	movs	r3, #7
 800610e:	e002      	b.n	8006116 <HAL_GPIO_Init+0x1d6>
 8006110:	2301      	movs	r3, #1
 8006112:	e000      	b.n	8006116 <HAL_GPIO_Init+0x1d6>
 8006114:	2300      	movs	r3, #0
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	f002 0203 	and.w	r2, r2, #3
 800611c:	0092      	lsls	r2, r2, #2
 800611e:	4093      	lsls	r3, r2
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006126:	4937      	ldr	r1, [pc, #220]	; (8006204 <HAL_GPIO_Init+0x2c4>)
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	089b      	lsrs	r3, r3, #2
 800612c:	3302      	adds	r3, #2
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006134:	4b36      	ldr	r3, [pc, #216]	; (8006210 <HAL_GPIO_Init+0x2d0>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	43db      	mvns	r3, r3
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4013      	ands	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006150:	693a      	ldr	r2, [r7, #16]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006158:	4a2d      	ldr	r2, [pc, #180]	; (8006210 <HAL_GPIO_Init+0x2d0>)
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800615e:	4b2c      	ldr	r3, [pc, #176]	; (8006210 <HAL_GPIO_Init+0x2d0>)
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	43db      	mvns	r3, r3
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4013      	ands	r3, r2
 800616c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006182:	4a23      	ldr	r2, [pc, #140]	; (8006210 <HAL_GPIO_Init+0x2d0>)
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006188:	4b21      	ldr	r3, [pc, #132]	; (8006210 <HAL_GPIO_Init+0x2d0>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	43db      	mvns	r3, r3
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4013      	ands	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80061ac:	4a18      	ldr	r2, [pc, #96]	; (8006210 <HAL_GPIO_Init+0x2d0>)
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80061b2:	4b17      	ldr	r3, [pc, #92]	; (8006210 <HAL_GPIO_Init+0x2d0>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	43db      	mvns	r3, r3
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	4013      	ands	r3, r2
 80061c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d003      	beq.n	80061d6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80061d6:	4a0e      	ldr	r2, [pc, #56]	; (8006210 <HAL_GPIO_Init+0x2d0>)
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	3301      	adds	r3, #1
 80061e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	fa22 f303 	lsr.w	r3, r2, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f47f aeaf 	bne.w	8005f50 <HAL_GPIO_Init+0x10>
  }
}
 80061f2:	bf00      	nop
 80061f4:	bf00      	nop
 80061f6:	371c      	adds	r7, #28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	40021000 	.word	0x40021000
 8006204:	40010000 	.word	0x40010000
 8006208:	48000400 	.word	0x48000400
 800620c:	48000800 	.word	0x48000800
 8006210:	40010400 	.word	0x40010400

08006214 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691a      	ldr	r2, [r3, #16]
 8006224:	887b      	ldrh	r3, [r7, #2]
 8006226:	4013      	ands	r3, r2
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800622c:	2301      	movs	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
 8006230:	e001      	b.n	8006236 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006232:	2300      	movs	r3, #0
 8006234:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006236:	7bfb      	ldrb	r3, [r7, #15]
}
 8006238:	4618      	mov	r0, r3
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	807b      	strh	r3, [r7, #2]
 8006250:	4613      	mov	r3, r2
 8006252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006254:	787b      	ldrb	r3, [r7, #1]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800625a:	887a      	ldrh	r2, [r7, #2]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006260:	e002      	b.n	8006268 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006262:	887a      	ldrh	r2, [r7, #2]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006278:	4b05      	ldr	r3, [pc, #20]	; (8006290 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a04      	ldr	r2, [pc, #16]	; (8006290 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800627e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006282:	6013      	str	r3, [r2, #0]
}
 8006284:	bf00      	nop
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40007000 	.word	0x40007000

08006294 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	460b      	mov	r3, r1
 800629e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10c      	bne.n	80062c0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80062a6:	4b13      	ldr	r3, [pc, #76]	; (80062f4 <HAL_PWR_EnterSLEEPMode+0x60>)
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b2:	d10e      	bne.n	80062d2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80062b4:	f000 f896 	bl	80063e4 <HAL_PWREx_DisableLowPowerRunMode>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d009      	beq.n	80062d2 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 80062be:	e016      	b.n	80062ee <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 80062c0:	4b0c      	ldr	r3, [pc, #48]	; (80062f4 <HAL_PWR_EnterSLEEPMode+0x60>)
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062cc:	d001      	beq.n	80062d2 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80062ce:	f000 f879 	bl	80063c4 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80062d2:	4b09      	ldr	r3, [pc, #36]	; (80062f8 <HAL_PWR_EnterSLEEPMode+0x64>)
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	4a08      	ldr	r2, [pc, #32]	; (80062f8 <HAL_PWR_EnterSLEEPMode+0x64>)
 80062d8:	f023 0304 	bic.w	r3, r3, #4
 80062dc:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80062de:	78fb      	ldrb	r3, [r7, #3]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80062e4:	bf30      	wfi
 80062e6:	e002      	b.n	80062ee <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80062e8:	bf40      	sev
    __WFE();
 80062ea:	bf20      	wfe
    __WFE();
 80062ec:	bf20      	wfe
  }

}
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	40007000 	.word	0x40007000
 80062f8:	e000ed00 	.word	0xe000ed00

080062fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006300:	4b04      	ldr	r3, [pc, #16]	; (8006314 <HAL_PWREx_GetVoltageRange+0x18>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006308:	4618      	mov	r0, r3
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	40007000 	.word	0x40007000

08006318 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006326:	d130      	bne.n	800638a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006328:	4b23      	ldr	r3, [pc, #140]	; (80063b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006334:	d038      	beq.n	80063a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006336:	4b20      	ldr	r3, [pc, #128]	; (80063b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800633e:	4a1e      	ldr	r2, [pc, #120]	; (80063b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006340:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006344:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006346:	4b1d      	ldr	r3, [pc, #116]	; (80063bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2232      	movs	r2, #50	; 0x32
 800634c:	fb02 f303 	mul.w	r3, r2, r3
 8006350:	4a1b      	ldr	r2, [pc, #108]	; (80063c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	0c9b      	lsrs	r3, r3, #18
 8006358:	3301      	adds	r3, #1
 800635a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800635c:	e002      	b.n	8006364 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3b01      	subs	r3, #1
 8006362:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006364:	4b14      	ldr	r3, [pc, #80]	; (80063b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006366:	695b      	ldr	r3, [r3, #20]
 8006368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800636c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006370:	d102      	bne.n	8006378 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1f2      	bne.n	800635e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006378:	4b0f      	ldr	r3, [pc, #60]	; (80063b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006384:	d110      	bne.n	80063a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006386:	2303      	movs	r3, #3
 8006388:	e00f      	b.n	80063aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800638a:	4b0b      	ldr	r3, [pc, #44]	; (80063b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006396:	d007      	beq.n	80063a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006398:	4b07      	ldr	r3, [pc, #28]	; (80063b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80063a0:	4a05      	ldr	r2, [pc, #20]	; (80063b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80063a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40007000 	.word	0x40007000
 80063bc:	20000000 	.word	0x20000000
 80063c0:	431bde83 	.word	0x431bde83

080063c4 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80063c4:	b480      	push	{r7}
 80063c6:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80063c8:	4b05      	ldr	r3, [pc, #20]	; (80063e0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a04      	ldr	r2, [pc, #16]	; (80063e0 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 80063ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063d2:	6013      	str	r3, [r2, #0]
}
 80063d4:	bf00      	nop
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	40007000 	.word	0x40007000

080063e4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80063ea:	4b17      	ldr	r3, [pc, #92]	; (8006448 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a16      	ldr	r2, [pc, #88]	; (8006448 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80063f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063f4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063f6:	4b15      	ldr	r3, [pc, #84]	; (800644c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2232      	movs	r2, #50	; 0x32
 80063fc:	fb02 f303 	mul.w	r3, r2, r3
 8006400:	4a13      	ldr	r2, [pc, #76]	; (8006450 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8006402:	fba2 2303 	umull	r2, r3, r2, r3
 8006406:	0c9b      	lsrs	r3, r3, #18
 8006408:	3301      	adds	r3, #1
 800640a:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800640c:	e002      	b.n	8006414 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	3b01      	subs	r3, #1
 8006412:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006414:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800641c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006420:	d102      	bne.n	8006428 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1f2      	bne.n	800640e <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8006428:	4b07      	ldr	r3, [pc, #28]	; (8006448 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006434:	d101      	bne.n	800643a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e000      	b.n	800643c <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	40007000 	.word	0x40007000
 800644c:	20000000 	.word	0x20000000
 8006450:	431bde83 	.word	0x431bde83

08006454 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 800645e:	4b11      	ldr	r3, [pc, #68]	; (80064a4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f023 0307 	bic.w	r3, r3, #7
 8006466:	4a0f      	ldr	r2, [pc, #60]	; (80064a4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006468:	f043 0302 	orr.w	r3, r3, #2
 800646c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800646e:	4b0e      	ldr	r3, [pc, #56]	; (80064a8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	4a0d      	ldr	r2, [pc, #52]	; (80064a8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006474:	f043 0304 	orr.w	r3, r3, #4
 8006478:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800647a:	79fb      	ldrb	r3, [r7, #7]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006480:	bf30      	wfi
 8006482:	e002      	b.n	800648a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006484:	bf40      	sev
    __WFE();
 8006486:	bf20      	wfe
    __WFE();
 8006488:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800648a:	4b07      	ldr	r3, [pc, #28]	; (80064a8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	4a06      	ldr	r2, [pc, #24]	; (80064a8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006490:	f023 0304 	bic.w	r3, r3, #4
 8006494:	6113      	str	r3, [r2, #16]
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	40007000 	.word	0x40007000
 80064a8:	e000ed00 	.word	0xe000ed00

080064ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d102      	bne.n	80064c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f000 bc02 	b.w	8006cc4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064c0:	4b96      	ldr	r3, [pc, #600]	; (800671c <HAL_RCC_OscConfig+0x270>)
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f003 030c 	and.w	r3, r3, #12
 80064c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064ca:	4b94      	ldr	r3, [pc, #592]	; (800671c <HAL_RCC_OscConfig+0x270>)
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 80e4 	beq.w	80066aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d007      	beq.n	80064f8 <HAL_RCC_OscConfig+0x4c>
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	2b0c      	cmp	r3, #12
 80064ec:	f040 808b 	bne.w	8006606 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	f040 8087 	bne.w	8006606 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064f8:	4b88      	ldr	r3, [pc, #544]	; (800671c <HAL_RCC_OscConfig+0x270>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <HAL_RCC_OscConfig+0x64>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e3d9      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6a1a      	ldr	r2, [r3, #32]
 8006514:	4b81      	ldr	r3, [pc, #516]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b00      	cmp	r3, #0
 800651e:	d004      	beq.n	800652a <HAL_RCC_OscConfig+0x7e>
 8006520:	4b7e      	ldr	r3, [pc, #504]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006528:	e005      	b.n	8006536 <HAL_RCC_OscConfig+0x8a>
 800652a:	4b7c      	ldr	r3, [pc, #496]	; (800671c <HAL_RCC_OscConfig+0x270>)
 800652c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006530:	091b      	lsrs	r3, r3, #4
 8006532:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006536:	4293      	cmp	r3, r2
 8006538:	d223      	bcs.n	8006582 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fd54 	bl	8006fec <RCC_SetFlashLatencyFromMSIRange>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e3ba      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800654e:	4b73      	ldr	r3, [pc, #460]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a72      	ldr	r2, [pc, #456]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006554:	f043 0308 	orr.w	r3, r3, #8
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	4b70      	ldr	r3, [pc, #448]	; (800671c <HAL_RCC_OscConfig+0x270>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	496d      	ldr	r1, [pc, #436]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006568:	4313      	orrs	r3, r2
 800656a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800656c:	4b6b      	ldr	r3, [pc, #428]	; (800671c <HAL_RCC_OscConfig+0x270>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	69db      	ldr	r3, [r3, #28]
 8006578:	021b      	lsls	r3, r3, #8
 800657a:	4968      	ldr	r1, [pc, #416]	; (800671c <HAL_RCC_OscConfig+0x270>)
 800657c:	4313      	orrs	r3, r2
 800657e:	604b      	str	r3, [r1, #4]
 8006580:	e025      	b.n	80065ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006582:	4b66      	ldr	r3, [pc, #408]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a65      	ldr	r2, [pc, #404]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006588:	f043 0308 	orr.w	r3, r3, #8
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	4b63      	ldr	r3, [pc, #396]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	4960      	ldr	r1, [pc, #384]	; (800671c <HAL_RCC_OscConfig+0x270>)
 800659c:	4313      	orrs	r3, r2
 800659e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80065a0:	4b5e      	ldr	r3, [pc, #376]	; (800671c <HAL_RCC_OscConfig+0x270>)
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	021b      	lsls	r3, r3, #8
 80065ae:	495b      	ldr	r1, [pc, #364]	; (800671c <HAL_RCC_OscConfig+0x270>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d109      	bne.n	80065ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fd14 	bl	8006fec <RCC_SetFlashLatencyFromMSIRange>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e37a      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80065ce:	f000 fc81 	bl	8006ed4 <HAL_RCC_GetSysClockFreq>
 80065d2:	4602      	mov	r2, r0
 80065d4:	4b51      	ldr	r3, [pc, #324]	; (800671c <HAL_RCC_OscConfig+0x270>)
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	091b      	lsrs	r3, r3, #4
 80065da:	f003 030f 	and.w	r3, r3, #15
 80065de:	4950      	ldr	r1, [pc, #320]	; (8006720 <HAL_RCC_OscConfig+0x274>)
 80065e0:	5ccb      	ldrb	r3, [r1, r3]
 80065e2:	f003 031f 	and.w	r3, r3, #31
 80065e6:	fa22 f303 	lsr.w	r3, r2, r3
 80065ea:	4a4e      	ldr	r2, [pc, #312]	; (8006724 <HAL_RCC_OscConfig+0x278>)
 80065ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80065ee:	4b4e      	ldr	r3, [pc, #312]	; (8006728 <HAL_RCC_OscConfig+0x27c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fd fda6 	bl	8004144 <HAL_InitTick>
 80065f8:	4603      	mov	r3, r0
 80065fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d052      	beq.n	80066a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006602:	7bfb      	ldrb	r3, [r7, #15]
 8006604:	e35e      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d032      	beq.n	8006674 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800660e:	4b43      	ldr	r3, [pc, #268]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a42      	ldr	r2, [pc, #264]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006614:	f043 0301 	orr.w	r3, r3, #1
 8006618:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800661a:	f7fd fde3 	bl	80041e4 <HAL_GetTick>
 800661e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006620:	e008      	b.n	8006634 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006622:	f7fd fddf 	bl	80041e4 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	2b02      	cmp	r3, #2
 800662e:	d901      	bls.n	8006634 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e347      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006634:	4b39      	ldr	r3, [pc, #228]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d0f0      	beq.n	8006622 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006640:	4b36      	ldr	r3, [pc, #216]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a35      	ldr	r2, [pc, #212]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006646:	f043 0308 	orr.w	r3, r3, #8
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	4b33      	ldr	r3, [pc, #204]	; (800671c <HAL_RCC_OscConfig+0x270>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
 8006658:	4930      	ldr	r1, [pc, #192]	; (800671c <HAL_RCC_OscConfig+0x270>)
 800665a:	4313      	orrs	r3, r2
 800665c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800665e:	4b2f      	ldr	r3, [pc, #188]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	021b      	lsls	r3, r3, #8
 800666c:	492b      	ldr	r1, [pc, #172]	; (800671c <HAL_RCC_OscConfig+0x270>)
 800666e:	4313      	orrs	r3, r2
 8006670:	604b      	str	r3, [r1, #4]
 8006672:	e01a      	b.n	80066aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006674:	4b29      	ldr	r3, [pc, #164]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a28      	ldr	r2, [pc, #160]	; (800671c <HAL_RCC_OscConfig+0x270>)
 800667a:	f023 0301 	bic.w	r3, r3, #1
 800667e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006680:	f7fd fdb0 	bl	80041e4 <HAL_GetTick>
 8006684:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006686:	e008      	b.n	800669a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006688:	f7fd fdac 	bl	80041e4 <HAL_GetTick>
 800668c:	4602      	mov	r2, r0
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	2b02      	cmp	r3, #2
 8006694:	d901      	bls.n	800669a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e314      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800669a:	4b20      	ldr	r3, [pc, #128]	; (800671c <HAL_RCC_OscConfig+0x270>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1f0      	bne.n	8006688 <HAL_RCC_OscConfig+0x1dc>
 80066a6:	e000      	b.n	80066aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80066a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d073      	beq.n	800679e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b08      	cmp	r3, #8
 80066ba:	d005      	beq.n	80066c8 <HAL_RCC_OscConfig+0x21c>
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	2b0c      	cmp	r3, #12
 80066c0:	d10e      	bne.n	80066e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d10b      	bne.n	80066e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066c8:	4b14      	ldr	r3, [pc, #80]	; (800671c <HAL_RCC_OscConfig+0x270>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d063      	beq.n	800679c <HAL_RCC_OscConfig+0x2f0>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d15f      	bne.n	800679c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e2f1      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e8:	d106      	bne.n	80066f8 <HAL_RCC_OscConfig+0x24c>
 80066ea:	4b0c      	ldr	r3, [pc, #48]	; (800671c <HAL_RCC_OscConfig+0x270>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a0b      	ldr	r2, [pc, #44]	; (800671c <HAL_RCC_OscConfig+0x270>)
 80066f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	e025      	b.n	8006744 <HAL_RCC_OscConfig+0x298>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006700:	d114      	bne.n	800672c <HAL_RCC_OscConfig+0x280>
 8006702:	4b06      	ldr	r3, [pc, #24]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a05      	ldr	r2, [pc, #20]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	4b03      	ldr	r3, [pc, #12]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a02      	ldr	r2, [pc, #8]	; (800671c <HAL_RCC_OscConfig+0x270>)
 8006714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	e013      	b.n	8006744 <HAL_RCC_OscConfig+0x298>
 800671c:	40021000 	.word	0x40021000
 8006720:	0800ce70 	.word	0x0800ce70
 8006724:	20000000 	.word	0x20000000
 8006728:	20000008 	.word	0x20000008
 800672c:	4ba0      	ldr	r3, [pc, #640]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a9f      	ldr	r2, [pc, #636]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 8006732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	4b9d      	ldr	r3, [pc, #628]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a9c      	ldr	r2, [pc, #624]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 800673e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d013      	beq.n	8006774 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800674c:	f7fd fd4a 	bl	80041e4 <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006754:	f7fd fd46 	bl	80041e4 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b64      	cmp	r3, #100	; 0x64
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e2ae      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006766:	4b92      	ldr	r3, [pc, #584]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d0f0      	beq.n	8006754 <HAL_RCC_OscConfig+0x2a8>
 8006772:	e014      	b.n	800679e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006774:	f7fd fd36 	bl	80041e4 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800677c:	f7fd fd32 	bl	80041e4 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b64      	cmp	r3, #100	; 0x64
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e29a      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800678e:	4b88      	ldr	r3, [pc, #544]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f0      	bne.n	800677c <HAL_RCC_OscConfig+0x2d0>
 800679a:	e000      	b.n	800679e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800679c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d060      	beq.n	800686c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d005      	beq.n	80067bc <HAL_RCC_OscConfig+0x310>
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	2b0c      	cmp	r3, #12
 80067b4:	d119      	bne.n	80067ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d116      	bne.n	80067ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067bc:	4b7c      	ldr	r3, [pc, #496]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <HAL_RCC_OscConfig+0x328>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e277      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067d4:	4b76      	ldr	r3, [pc, #472]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	061b      	lsls	r3, r3, #24
 80067e2:	4973      	ldr	r1, [pc, #460]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067e8:	e040      	b.n	800686c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d023      	beq.n	800683a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067f2:	4b6f      	ldr	r3, [pc, #444]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a6e      	ldr	r2, [pc, #440]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 80067f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fe:	f7fd fcf1 	bl	80041e4 <HAL_GetTick>
 8006802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006804:	e008      	b.n	8006818 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006806:	f7fd fced 	bl	80041e4 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	2b02      	cmp	r3, #2
 8006812:	d901      	bls.n	8006818 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e255      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006818:	4b65      	ldr	r3, [pc, #404]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006820:	2b00      	cmp	r3, #0
 8006822:	d0f0      	beq.n	8006806 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006824:	4b62      	ldr	r3, [pc, #392]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	061b      	lsls	r3, r3, #24
 8006832:	495f      	ldr	r1, [pc, #380]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 8006834:	4313      	orrs	r3, r2
 8006836:	604b      	str	r3, [r1, #4]
 8006838:	e018      	b.n	800686c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800683a:	4b5d      	ldr	r3, [pc, #372]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a5c      	ldr	r2, [pc, #368]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 8006840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006846:	f7fd fccd 	bl	80041e4 <HAL_GetTick>
 800684a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800684c:	e008      	b.n	8006860 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800684e:	f7fd fcc9 	bl	80041e4 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d901      	bls.n	8006860 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e231      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006860:	4b53      	ldr	r3, [pc, #332]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1f0      	bne.n	800684e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0308 	and.w	r3, r3, #8
 8006874:	2b00      	cmp	r3, #0
 8006876:	d03c      	beq.n	80068f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	695b      	ldr	r3, [r3, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01c      	beq.n	80068ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006880:	4b4b      	ldr	r3, [pc, #300]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 8006882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006886:	4a4a      	ldr	r2, [pc, #296]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 8006888:	f043 0301 	orr.w	r3, r3, #1
 800688c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006890:	f7fd fca8 	bl	80041e4 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006898:	f7fd fca4 	bl	80041e4 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b02      	cmp	r3, #2
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e20c      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80068aa:	4b41      	ldr	r3, [pc, #260]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 80068ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068b0:	f003 0302 	and.w	r3, r3, #2
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0ef      	beq.n	8006898 <HAL_RCC_OscConfig+0x3ec>
 80068b8:	e01b      	b.n	80068f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068ba:	4b3d      	ldr	r3, [pc, #244]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 80068bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068c0:	4a3b      	ldr	r2, [pc, #236]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 80068c2:	f023 0301 	bic.w	r3, r3, #1
 80068c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ca:	f7fd fc8b 	bl	80041e4 <HAL_GetTick>
 80068ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068d0:	e008      	b.n	80068e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068d2:	f7fd fc87 	bl	80041e4 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d901      	bls.n	80068e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e1ef      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80068e4:	4b32      	ldr	r3, [pc, #200]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 80068e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1ef      	bne.n	80068d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0304 	and.w	r3, r3, #4
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 80a6 	beq.w	8006a4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006900:	2300      	movs	r3, #0
 8006902:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006904:	4b2a      	ldr	r3, [pc, #168]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 8006906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10d      	bne.n	800692c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006910:	4b27      	ldr	r3, [pc, #156]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 8006912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006914:	4a26      	ldr	r2, [pc, #152]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 8006916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800691a:	6593      	str	r3, [r2, #88]	; 0x58
 800691c:	4b24      	ldr	r3, [pc, #144]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 800691e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006924:	60bb      	str	r3, [r7, #8]
 8006926:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006928:	2301      	movs	r3, #1
 800692a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800692c:	4b21      	ldr	r3, [pc, #132]	; (80069b4 <HAL_RCC_OscConfig+0x508>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d118      	bne.n	800696a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006938:	4b1e      	ldr	r3, [pc, #120]	; (80069b4 <HAL_RCC_OscConfig+0x508>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a1d      	ldr	r2, [pc, #116]	; (80069b4 <HAL_RCC_OscConfig+0x508>)
 800693e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006942:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006944:	f7fd fc4e 	bl	80041e4 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800694c:	f7fd fc4a 	bl	80041e4 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e1b2      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800695e:	4b15      	ldr	r3, [pc, #84]	; (80069b4 <HAL_RCC_OscConfig+0x508>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0f0      	beq.n	800694c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d108      	bne.n	8006984 <HAL_RCC_OscConfig+0x4d8>
 8006972:	4b0f      	ldr	r3, [pc, #60]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 8006974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006978:	4a0d      	ldr	r2, [pc, #52]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 800697a:	f043 0301 	orr.w	r3, r3, #1
 800697e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006982:	e029      	b.n	80069d8 <HAL_RCC_OscConfig+0x52c>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	2b05      	cmp	r3, #5
 800698a:	d115      	bne.n	80069b8 <HAL_RCC_OscConfig+0x50c>
 800698c:	4b08      	ldr	r3, [pc, #32]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 800698e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006992:	4a07      	ldr	r2, [pc, #28]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 8006994:	f043 0304 	orr.w	r3, r3, #4
 8006998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800699c:	4b04      	ldr	r3, [pc, #16]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 800699e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a2:	4a03      	ldr	r2, [pc, #12]	; (80069b0 <HAL_RCC_OscConfig+0x504>)
 80069a4:	f043 0301 	orr.w	r3, r3, #1
 80069a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80069ac:	e014      	b.n	80069d8 <HAL_RCC_OscConfig+0x52c>
 80069ae:	bf00      	nop
 80069b0:	40021000 	.word	0x40021000
 80069b4:	40007000 	.word	0x40007000
 80069b8:	4b9a      	ldr	r3, [pc, #616]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 80069ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069be:	4a99      	ldr	r2, [pc, #612]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 80069c0:	f023 0301 	bic.w	r3, r3, #1
 80069c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80069c8:	4b96      	ldr	r3, [pc, #600]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 80069ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ce:	4a95      	ldr	r2, [pc, #596]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 80069d0:	f023 0304 	bic.w	r3, r3, #4
 80069d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d016      	beq.n	8006a0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e0:	f7fd fc00 	bl	80041e4 <HAL_GetTick>
 80069e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069e6:	e00a      	b.n	80069fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069e8:	f7fd fbfc 	bl	80041e4 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e162      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069fe:	4b89      	ldr	r3, [pc, #548]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0ed      	beq.n	80069e8 <HAL_RCC_OscConfig+0x53c>
 8006a0c:	e015      	b.n	8006a3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a0e:	f7fd fbe9 	bl	80041e4 <HAL_GetTick>
 8006a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a14:	e00a      	b.n	8006a2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a16:	f7fd fbe5 	bl	80041e4 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d901      	bls.n	8006a2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e14b      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006a2c:	4b7d      	ldr	r3, [pc, #500]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1ed      	bne.n	8006a16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a3a:	7ffb      	ldrb	r3, [r7, #31]
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d105      	bne.n	8006a4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a40:	4b78      	ldr	r3, [pc, #480]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a44:	4a77      	ldr	r2, [pc, #476]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006a46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 0320 	and.w	r3, r3, #32
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d03c      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d01c      	beq.n	8006a9a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a60:	4b70      	ldr	r3, [pc, #448]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006a62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a66:	4a6f      	ldr	r2, [pc, #444]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006a68:	f043 0301 	orr.w	r3, r3, #1
 8006a6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a70:	f7fd fbb8 	bl	80041e4 <HAL_GetTick>
 8006a74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a76:	e008      	b.n	8006a8a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a78:	f7fd fbb4 	bl	80041e4 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e11c      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a8a:	4b66      	ldr	r3, [pc, #408]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006a8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a90:	f003 0302 	and.w	r3, r3, #2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d0ef      	beq.n	8006a78 <HAL_RCC_OscConfig+0x5cc>
 8006a98:	e01b      	b.n	8006ad2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a9a:	4b62      	ldr	r3, [pc, #392]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006a9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006aa0:	4a60      	ldr	r2, [pc, #384]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006aa2:	f023 0301 	bic.w	r3, r3, #1
 8006aa6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aaa:	f7fd fb9b 	bl	80041e4 <HAL_GetTick>
 8006aae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ab0:	e008      	b.n	8006ac4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ab2:	f7fd fb97 	bl	80041e4 <HAL_GetTick>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d901      	bls.n	8006ac4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e0ff      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ac4:	4b57      	ldr	r3, [pc, #348]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006ac6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d1ef      	bne.n	8006ab2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 80f3 	beq.w	8006cc2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	f040 80c9 	bne.w	8006c78 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006ae6:	4b4f      	ldr	r3, [pc, #316]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	f003 0203 	and.w	r2, r3, #3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d12c      	bne.n	8006b54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b04:	3b01      	subs	r3, #1
 8006b06:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d123      	bne.n	8006b54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b16:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d11b      	bne.n	8006b54 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b26:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d113      	bne.n	8006b54 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b36:	085b      	lsrs	r3, r3, #1
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d109      	bne.n	8006b54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4a:	085b      	lsrs	r3, r3, #1
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d06b      	beq.n	8006c2c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	2b0c      	cmp	r3, #12
 8006b58:	d062      	beq.n	8006c20 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006b5a:	4b32      	ldr	r3, [pc, #200]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d001      	beq.n	8006b6a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e0ac      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006b6a:	4b2e      	ldr	r3, [pc, #184]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a2d      	ldr	r2, [pc, #180]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006b70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b74:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b76:	f7fd fb35 	bl	80041e4 <HAL_GetTick>
 8006b7a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b7c:	e008      	b.n	8006b90 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b7e:	f7fd fb31 	bl	80041e4 <HAL_GetTick>
 8006b82:	4602      	mov	r2, r0
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	1ad3      	subs	r3, r2, r3
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d901      	bls.n	8006b90 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e099      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b90:	4b24      	ldr	r3, [pc, #144]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f0      	bne.n	8006b7e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b9c:	4b21      	ldr	r3, [pc, #132]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	4b21      	ldr	r3, [pc, #132]	; (8006c28 <HAL_RCC_OscConfig+0x77c>)
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006bac:	3a01      	subs	r2, #1
 8006bae:	0112      	lsls	r2, r2, #4
 8006bb0:	4311      	orrs	r1, r2
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006bb6:	0212      	lsls	r2, r2, #8
 8006bb8:	4311      	orrs	r1, r2
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006bbe:	0852      	lsrs	r2, r2, #1
 8006bc0:	3a01      	subs	r2, #1
 8006bc2:	0552      	lsls	r2, r2, #21
 8006bc4:	4311      	orrs	r1, r2
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006bca:	0852      	lsrs	r2, r2, #1
 8006bcc:	3a01      	subs	r2, #1
 8006bce:	0652      	lsls	r2, r2, #25
 8006bd0:	4311      	orrs	r1, r2
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006bd6:	06d2      	lsls	r2, r2, #27
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	4912      	ldr	r1, [pc, #72]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006be0:	4b10      	ldr	r3, [pc, #64]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a0f      	ldr	r2, [pc, #60]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bec:	4b0d      	ldr	r3, [pc, #52]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	4a0c      	ldr	r2, [pc, #48]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bf6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006bf8:	f7fd faf4 	bl	80041e4 <HAL_GetTick>
 8006bfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bfe:	e008      	b.n	8006c12 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c00:	f7fd faf0 	bl	80041e4 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d901      	bls.n	8006c12 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e058      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c12:	4b04      	ldr	r3, [pc, #16]	; (8006c24 <HAL_RCC_OscConfig+0x778>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0f0      	beq.n	8006c00 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c1e:	e050      	b.n	8006cc2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e04f      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
 8006c24:	40021000 	.word	0x40021000
 8006c28:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c2c:	4b27      	ldr	r3, [pc, #156]	; (8006ccc <HAL_RCC_OscConfig+0x820>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d144      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006c38:	4b24      	ldr	r3, [pc, #144]	; (8006ccc <HAL_RCC_OscConfig+0x820>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a23      	ldr	r2, [pc, #140]	; (8006ccc <HAL_RCC_OscConfig+0x820>)
 8006c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c42:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c44:	4b21      	ldr	r3, [pc, #132]	; (8006ccc <HAL_RCC_OscConfig+0x820>)
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	4a20      	ldr	r2, [pc, #128]	; (8006ccc <HAL_RCC_OscConfig+0x820>)
 8006c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c4e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c50:	f7fd fac8 	bl	80041e4 <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c58:	f7fd fac4 	bl	80041e4 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e02c      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c6a:	4b18      	ldr	r3, [pc, #96]	; (8006ccc <HAL_RCC_OscConfig+0x820>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0f0      	beq.n	8006c58 <HAL_RCC_OscConfig+0x7ac>
 8006c76:	e024      	b.n	8006cc2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	2b0c      	cmp	r3, #12
 8006c7c:	d01f      	beq.n	8006cbe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c7e:	4b13      	ldr	r3, [pc, #76]	; (8006ccc <HAL_RCC_OscConfig+0x820>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a12      	ldr	r2, [pc, #72]	; (8006ccc <HAL_RCC_OscConfig+0x820>)
 8006c84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c8a:	f7fd faab 	bl	80041e4 <HAL_GetTick>
 8006c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c90:	e008      	b.n	8006ca4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c92:	f7fd faa7 	bl	80041e4 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e00f      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ca4:	4b09      	ldr	r3, [pc, #36]	; (8006ccc <HAL_RCC_OscConfig+0x820>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1f0      	bne.n	8006c92 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006cb0:	4b06      	ldr	r3, [pc, #24]	; (8006ccc <HAL_RCC_OscConfig+0x820>)
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	4905      	ldr	r1, [pc, #20]	; (8006ccc <HAL_RCC_OscConfig+0x820>)
 8006cb6:	4b06      	ldr	r3, [pc, #24]	; (8006cd0 <HAL_RCC_OscConfig+0x824>)
 8006cb8:	4013      	ands	r3, r2
 8006cba:	60cb      	str	r3, [r1, #12]
 8006cbc:	e001      	b.n	8006cc2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e000      	b.n	8006cc4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3720      	adds	r7, #32
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	40021000 	.word	0x40021000
 8006cd0:	feeefffc 	.word	0xfeeefffc

08006cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e0e7      	b.n	8006eb8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ce8:	4b75      	ldr	r3, [pc, #468]	; (8006ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0307 	and.w	r3, r3, #7
 8006cf0:	683a      	ldr	r2, [r7, #0]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d910      	bls.n	8006d18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cf6:	4b72      	ldr	r3, [pc, #456]	; (8006ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f023 0207 	bic.w	r2, r3, #7
 8006cfe:	4970      	ldr	r1, [pc, #448]	; (8006ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d06:	4b6e      	ldr	r3, [pc, #440]	; (8006ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d001      	beq.n	8006d18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	e0cf      	b.n	8006eb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d010      	beq.n	8006d46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	4b66      	ldr	r3, [pc, #408]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d908      	bls.n	8006d46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d34:	4b63      	ldr	r3, [pc, #396]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	4960      	ldr	r1, [pc, #384]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d04c      	beq.n	8006dec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	2b03      	cmp	r3, #3
 8006d58:	d107      	bne.n	8006d6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d5a:	4b5a      	ldr	r3, [pc, #360]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d121      	bne.n	8006daa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e0a6      	b.n	8006eb8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d107      	bne.n	8006d82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d72:	4b54      	ldr	r3, [pc, #336]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d115      	bne.n	8006daa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e09a      	b.n	8006eb8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d107      	bne.n	8006d9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d8a:	4b4e      	ldr	r3, [pc, #312]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d109      	bne.n	8006daa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e08e      	b.n	8006eb8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d9a:	4b4a      	ldr	r3, [pc, #296]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e086      	b.n	8006eb8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006daa:	4b46      	ldr	r3, [pc, #280]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f023 0203 	bic.w	r2, r3, #3
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	4943      	ldr	r1, [pc, #268]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dbc:	f7fd fa12 	bl	80041e4 <HAL_GetTick>
 8006dc0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc2:	e00a      	b.n	8006dda <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dc4:	f7fd fa0e 	bl	80041e4 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d901      	bls.n	8006dda <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006dd6:	2303      	movs	r3, #3
 8006dd8:	e06e      	b.n	8006eb8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dda:	4b3a      	ldr	r3, [pc, #232]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f003 020c 	and.w	r2, r3, #12
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d1eb      	bne.n	8006dc4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d010      	beq.n	8006e1a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689a      	ldr	r2, [r3, #8]
 8006dfc:	4b31      	ldr	r3, [pc, #196]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d208      	bcs.n	8006e1a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e08:	4b2e      	ldr	r3, [pc, #184]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	492b      	ldr	r1, [pc, #172]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e1a:	4b29      	ldr	r3, [pc, #164]	; (8006ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0307 	and.w	r3, r3, #7
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d210      	bcs.n	8006e4a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e28:	4b25      	ldr	r3, [pc, #148]	; (8006ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f023 0207 	bic.w	r2, r3, #7
 8006e30:	4923      	ldr	r1, [pc, #140]	; (8006ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e38:	4b21      	ldr	r3, [pc, #132]	; (8006ec0 <HAL_RCC_ClockConfig+0x1ec>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 0307 	and.w	r3, r3, #7
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d001      	beq.n	8006e4a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e036      	b.n	8006eb8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0304 	and.w	r3, r3, #4
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d008      	beq.n	8006e68 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e56:	4b1b      	ldr	r3, [pc, #108]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	4918      	ldr	r1, [pc, #96]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0308 	and.w	r3, r3, #8
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d009      	beq.n	8006e88 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e74:	4b13      	ldr	r3, [pc, #76]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	00db      	lsls	r3, r3, #3
 8006e82:	4910      	ldr	r1, [pc, #64]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e88:	f000 f824 	bl	8006ed4 <HAL_RCC_GetSysClockFreq>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	4b0d      	ldr	r3, [pc, #52]	; (8006ec4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	091b      	lsrs	r3, r3, #4
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	490b      	ldr	r1, [pc, #44]	; (8006ec8 <HAL_RCC_ClockConfig+0x1f4>)
 8006e9a:	5ccb      	ldrb	r3, [r1, r3]
 8006e9c:	f003 031f 	and.w	r3, r3, #31
 8006ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea4:	4a09      	ldr	r2, [pc, #36]	; (8006ecc <HAL_RCC_ClockConfig+0x1f8>)
 8006ea6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006ea8:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <HAL_RCC_ClockConfig+0x1fc>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f7fd f949 	bl	8004144 <HAL_InitTick>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	72fb      	strb	r3, [r7, #11]

  return status;
 8006eb6:	7afb      	ldrb	r3, [r7, #11]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	40022000 	.word	0x40022000
 8006ec4:	40021000 	.word	0x40021000
 8006ec8:	0800ce70 	.word	0x0800ce70
 8006ecc:	20000000 	.word	0x20000000
 8006ed0:	20000008 	.word	0x20000008

08006ed4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b089      	sub	sp, #36	; 0x24
 8006ed8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61fb      	str	r3, [r7, #28]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ee2:	4b3e      	ldr	r3, [pc, #248]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f003 030c 	and.w	r3, r3, #12
 8006eea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006eec:	4b3b      	ldr	r3, [pc, #236]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8006eee:	68db      	ldr	r3, [r3, #12]
 8006ef0:	f003 0303 	and.w	r3, r3, #3
 8006ef4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <HAL_RCC_GetSysClockFreq+0x34>
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	2b0c      	cmp	r3, #12
 8006f00:	d121      	bne.n	8006f46 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d11e      	bne.n	8006f46 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006f08:	4b34      	ldr	r3, [pc, #208]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0308 	and.w	r3, r3, #8
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d107      	bne.n	8006f24 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006f14:	4b31      	ldr	r3, [pc, #196]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8006f16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f1a:	0a1b      	lsrs	r3, r3, #8
 8006f1c:	f003 030f 	and.w	r3, r3, #15
 8006f20:	61fb      	str	r3, [r7, #28]
 8006f22:	e005      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006f24:	4b2d      	ldr	r3, [pc, #180]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	091b      	lsrs	r3, r3, #4
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006f30:	4a2b      	ldr	r2, [pc, #172]	; (8006fe0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f38:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10d      	bne.n	8006f5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006f44:	e00a      	b.n	8006f5c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d102      	bne.n	8006f52 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f4c:	4b25      	ldr	r3, [pc, #148]	; (8006fe4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f4e:	61bb      	str	r3, [r7, #24]
 8006f50:	e004      	b.n	8006f5c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	2b08      	cmp	r3, #8
 8006f56:	d101      	bne.n	8006f5c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f58:	4b23      	ldr	r3, [pc, #140]	; (8006fe8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f5a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2b0c      	cmp	r3, #12
 8006f60:	d134      	bne.n	8006fcc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f62:	4b1e      	ldr	r3, [pc, #120]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	f003 0303 	and.w	r3, r3, #3
 8006f6a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d003      	beq.n	8006f7a <HAL_RCC_GetSysClockFreq+0xa6>
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2b03      	cmp	r3, #3
 8006f76:	d003      	beq.n	8006f80 <HAL_RCC_GetSysClockFreq+0xac>
 8006f78:	e005      	b.n	8006f86 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006f7a:	4b1a      	ldr	r3, [pc, #104]	; (8006fe4 <HAL_RCC_GetSysClockFreq+0x110>)
 8006f7c:	617b      	str	r3, [r7, #20]
      break;
 8006f7e:	e005      	b.n	8006f8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006f80:	4b19      	ldr	r3, [pc, #100]	; (8006fe8 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f82:	617b      	str	r3, [r7, #20]
      break;
 8006f84:	e002      	b.n	8006f8c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	617b      	str	r3, [r7, #20]
      break;
 8006f8a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f8c:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	091b      	lsrs	r3, r3, #4
 8006f92:	f003 0307 	and.w	r3, r3, #7
 8006f96:	3301      	adds	r3, #1
 8006f98:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006f9a:	4b10      	ldr	r3, [pc, #64]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	0a1b      	lsrs	r3, r3, #8
 8006fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	fb03 f202 	mul.w	r2, r3, r2
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006fb2:	4b0a      	ldr	r3, [pc, #40]	; (8006fdc <HAL_RCC_GetSysClockFreq+0x108>)
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	0e5b      	lsrs	r3, r3, #25
 8006fb8:	f003 0303 	and.w	r3, r3, #3
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	005b      	lsls	r3, r3, #1
 8006fc0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006fc2:	697a      	ldr	r2, [r7, #20]
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006fcc:	69bb      	ldr	r3, [r7, #24]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3724      	adds	r7, #36	; 0x24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	40021000 	.word	0x40021000
 8006fe0:	0800ce88 	.word	0x0800ce88
 8006fe4:	00f42400 	.word	0x00f42400
 8006fe8:	007a1200 	.word	0x007a1200

08006fec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b086      	sub	sp, #24
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006ff8:	4b2a      	ldr	r3, [pc, #168]	; (80070a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007000:	2b00      	cmp	r3, #0
 8007002:	d003      	beq.n	800700c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007004:	f7ff f97a 	bl	80062fc <HAL_PWREx_GetVoltageRange>
 8007008:	6178      	str	r0, [r7, #20]
 800700a:	e014      	b.n	8007036 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800700c:	4b25      	ldr	r3, [pc, #148]	; (80070a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800700e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007010:	4a24      	ldr	r2, [pc, #144]	; (80070a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007016:	6593      	str	r3, [r2, #88]	; 0x58
 8007018:	4b22      	ldr	r3, [pc, #136]	; (80070a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800701a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007024:	f7ff f96a 	bl	80062fc <HAL_PWREx_GetVoltageRange>
 8007028:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800702a:	4b1e      	ldr	r3, [pc, #120]	; (80070a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800702c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800702e:	4a1d      	ldr	r2, [pc, #116]	; (80070a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007034:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800703c:	d10b      	bne.n	8007056 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b80      	cmp	r3, #128	; 0x80
 8007042:	d919      	bls.n	8007078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2ba0      	cmp	r3, #160	; 0xa0
 8007048:	d902      	bls.n	8007050 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800704a:	2302      	movs	r3, #2
 800704c:	613b      	str	r3, [r7, #16]
 800704e:	e013      	b.n	8007078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007050:	2301      	movs	r3, #1
 8007052:	613b      	str	r3, [r7, #16]
 8007054:	e010      	b.n	8007078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b80      	cmp	r3, #128	; 0x80
 800705a:	d902      	bls.n	8007062 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800705c:	2303      	movs	r3, #3
 800705e:	613b      	str	r3, [r7, #16]
 8007060:	e00a      	b.n	8007078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2b80      	cmp	r3, #128	; 0x80
 8007066:	d102      	bne.n	800706e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007068:	2302      	movs	r3, #2
 800706a:	613b      	str	r3, [r7, #16]
 800706c:	e004      	b.n	8007078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2b70      	cmp	r3, #112	; 0x70
 8007072:	d101      	bne.n	8007078 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007074:	2301      	movs	r3, #1
 8007076:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007078:	4b0b      	ldr	r3, [pc, #44]	; (80070a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f023 0207 	bic.w	r2, r3, #7
 8007080:	4909      	ldr	r1, [pc, #36]	; (80070a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	4313      	orrs	r3, r2
 8007086:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007088:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0307 	and.w	r3, r3, #7
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	429a      	cmp	r2, r3
 8007094:	d001      	beq.n	800709a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e000      	b.n	800709c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3718      	adds	r7, #24
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	40021000 	.word	0x40021000
 80070a8:	40022000 	.word	0x40022000

080070ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80070b4:	2300      	movs	r3, #0
 80070b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070b8:	2300      	movs	r3, #0
 80070ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d031      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80070d0:	d01a      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80070d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80070d6:	d814      	bhi.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d009      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80070dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070e0:	d10f      	bne.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80070e2:	4b5d      	ldr	r3, [pc, #372]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	4a5c      	ldr	r2, [pc, #368]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070ec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070ee:	e00c      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	3304      	adds	r3, #4
 80070f4:	2100      	movs	r1, #0
 80070f6:	4618      	mov	r0, r3
 80070f8:	f000 f9de 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 80070fc:	4603      	mov	r3, r0
 80070fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007100:	e003      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	74fb      	strb	r3, [r7, #19]
      break;
 8007106:	e000      	b.n	800710a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007108:	bf00      	nop
    }

    if(ret == HAL_OK)
 800710a:	7cfb      	ldrb	r3, [r7, #19]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10b      	bne.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007110:	4b51      	ldr	r3, [pc, #324]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007116:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800711e:	494e      	ldr	r1, [pc, #312]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007120:	4313      	orrs	r3, r2
 8007122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007126:	e001      	b.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007128:	7cfb      	ldrb	r3, [r7, #19]
 800712a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 809e 	beq.w	8007276 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800713a:	2300      	movs	r3, #0
 800713c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800713e:	4b46      	ldr	r3, [pc, #280]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800714a:	2301      	movs	r3, #1
 800714c:	e000      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800714e:	2300      	movs	r3, #0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00d      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007154:	4b40      	ldr	r3, [pc, #256]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007158:	4a3f      	ldr	r2, [pc, #252]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800715a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800715e:	6593      	str	r3, [r2, #88]	; 0x58
 8007160:	4b3d      	ldr	r3, [pc, #244]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007168:	60bb      	str	r3, [r7, #8]
 800716a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800716c:	2301      	movs	r3, #1
 800716e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007170:	4b3a      	ldr	r3, [pc, #232]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a39      	ldr	r2, [pc, #228]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800717a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800717c:	f7fd f832 	bl	80041e4 <HAL_GetTick>
 8007180:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007182:	e009      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007184:	f7fd f82e 	bl	80041e4 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b02      	cmp	r3, #2
 8007190:	d902      	bls.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	74fb      	strb	r3, [r7, #19]
        break;
 8007196:	e005      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007198:	4b30      	ldr	r3, [pc, #192]	; (800725c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d0ef      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80071a4:	7cfb      	ldrb	r3, [r7, #19]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d15a      	bne.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80071aa:	4b2b      	ldr	r3, [pc, #172]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d01e      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c0:	697a      	ldr	r2, [r7, #20]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d019      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80071c6:	4b24      	ldr	r3, [pc, #144]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80071d2:	4b21      	ldr	r3, [pc, #132]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d8:	4a1f      	ldr	r2, [pc, #124]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80071e2:	4b1d      	ldr	r3, [pc, #116]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e8:	4a1b      	ldr	r2, [pc, #108]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80071f2:	4a19      	ldr	r2, [pc, #100]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f003 0301 	and.w	r3, r3, #1
 8007200:	2b00      	cmp	r3, #0
 8007202:	d016      	beq.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007204:	f7fc ffee 	bl	80041e4 <HAL_GetTick>
 8007208:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800720a:	e00b      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800720c:	f7fc ffea 	bl	80041e4 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	f241 3288 	movw	r2, #5000	; 0x1388
 800721a:	4293      	cmp	r3, r2
 800721c:	d902      	bls.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	74fb      	strb	r3, [r7, #19]
            break;
 8007222:	e006      	b.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007224:	4b0c      	ldr	r3, [pc, #48]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800722a:	f003 0302 	and.w	r3, r3, #2
 800722e:	2b00      	cmp	r3, #0
 8007230:	d0ec      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007232:	7cfb      	ldrb	r3, [r7, #19]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10b      	bne.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007238:	4b07      	ldr	r3, [pc, #28]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800723a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007246:	4904      	ldr	r1, [pc, #16]	; (8007258 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007248:	4313      	orrs	r3, r2
 800724a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800724e:	e009      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007250:	7cfb      	ldrb	r3, [r7, #19]
 8007252:	74bb      	strb	r3, [r7, #18]
 8007254:	e006      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007256:	bf00      	nop
 8007258:	40021000 	.word	0x40021000
 800725c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007260:	7cfb      	ldrb	r3, [r7, #19]
 8007262:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007264:	7c7b      	ldrb	r3, [r7, #17]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d105      	bne.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800726a:	4b8a      	ldr	r3, [pc, #552]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800726c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800726e:	4a89      	ldr	r2, [pc, #548]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007274:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0301 	and.w	r3, r3, #1
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007282:	4b84      	ldr	r3, [pc, #528]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007288:	f023 0203 	bic.w	r2, r3, #3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	4980      	ldr	r1, [pc, #512]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007292:	4313      	orrs	r3, r2
 8007294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0302 	and.w	r3, r3, #2
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00a      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80072a4:	4b7b      	ldr	r3, [pc, #492]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072aa:	f023 020c 	bic.w	r2, r3, #12
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	4978      	ldr	r1, [pc, #480]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0320 	and.w	r3, r3, #32
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80072c6:	4b73      	ldr	r3, [pc, #460]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d4:	496f      	ldr	r1, [pc, #444]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00a      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072e8:	4b6a      	ldr	r3, [pc, #424]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f6:	4967      	ldr	r1, [pc, #412]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072f8:	4313      	orrs	r3, r2
 80072fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00a      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800730a:	4b62      	ldr	r3, [pc, #392]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800730c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007310:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007318:	495e      	ldr	r1, [pc, #376]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800731a:	4313      	orrs	r3, r2
 800731c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00a      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800732c:	4b59      	ldr	r3, [pc, #356]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800732e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007332:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733a:	4956      	ldr	r1, [pc, #344]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800733c:	4313      	orrs	r3, r2
 800733e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800734e:	4b51      	ldr	r3, [pc, #324]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007354:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735c:	494d      	ldr	r1, [pc, #308]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800735e:	4313      	orrs	r3, r2
 8007360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d028      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007370:	4b48      	ldr	r3, [pc, #288]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007376:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	4945      	ldr	r1, [pc, #276]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007380:	4313      	orrs	r3, r2
 8007382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800738e:	d106      	bne.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007390:	4b40      	ldr	r3, [pc, #256]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	4a3f      	ldr	r2, [pc, #252]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800739a:	60d3      	str	r3, [r2, #12]
 800739c:	e011      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073a6:	d10c      	bne.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3304      	adds	r3, #4
 80073ac:	2101      	movs	r1, #1
 80073ae:	4618      	mov	r0, r3
 80073b0:	f000 f882 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80073b8:	7cfb      	ldrb	r3, [r7, #19]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80073be:	7cfb      	ldrb	r3, [r7, #19]
 80073c0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d028      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80073ce:	4b31      	ldr	r3, [pc, #196]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073dc:	492d      	ldr	r1, [pc, #180]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073ec:	d106      	bne.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073ee:	4b29      	ldr	r3, [pc, #164]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	4a28      	ldr	r2, [pc, #160]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073f8:	60d3      	str	r3, [r2, #12]
 80073fa:	e011      	b.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007404:	d10c      	bne.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3304      	adds	r3, #4
 800740a:	2101      	movs	r1, #1
 800740c:	4618      	mov	r0, r3
 800740e:	f000 f853 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 8007412:	4603      	mov	r3, r0
 8007414:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007416:	7cfb      	ldrb	r3, [r7, #19]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d001      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800741c:	7cfb      	ldrb	r3, [r7, #19]
 800741e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01c      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800742c:	4b19      	ldr	r3, [pc, #100]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800742e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007432:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800743a:	4916      	ldr	r1, [pc, #88]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800743c:	4313      	orrs	r3, r2
 800743e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007446:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800744a:	d10c      	bne.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3304      	adds	r3, #4
 8007450:	2102      	movs	r1, #2
 8007452:	4618      	mov	r0, r3
 8007454:	f000 f830 	bl	80074b8 <RCCEx_PLLSAI1_Config>
 8007458:	4603      	mov	r3, r0
 800745a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800745c:	7cfb      	ldrb	r3, [r7, #19]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8007462:	7cfb      	ldrb	r3, [r7, #19]
 8007464:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00a      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007472:	4b08      	ldr	r3, [pc, #32]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007478:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007480:	4904      	ldr	r1, [pc, #16]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007482:	4313      	orrs	r3, r2
 8007484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007488:	7cbb      	ldrb	r3, [r7, #18]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	40021000 	.word	0x40021000

08007498 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800749c:	4b05      	ldr	r3, [pc, #20]	; (80074b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a04      	ldr	r2, [pc, #16]	; (80074b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80074a2:	f043 0304 	orr.w	r3, r3, #4
 80074a6:	6013      	str	r3, [r2, #0]
}
 80074a8:	bf00      	nop
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	40021000 	.word	0x40021000

080074b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80074c6:	4b74      	ldr	r3, [pc, #464]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	f003 0303 	and.w	r3, r3, #3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d018      	beq.n	8007504 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80074d2:	4b71      	ldr	r3, [pc, #452]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	f003 0203 	and.w	r2, r3, #3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	429a      	cmp	r2, r3
 80074e0:	d10d      	bne.n	80074fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
       ||
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d009      	beq.n	80074fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80074ea:	4b6b      	ldr	r3, [pc, #428]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	091b      	lsrs	r3, r3, #4
 80074f0:	f003 0307 	and.w	r3, r3, #7
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
       ||
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d047      	beq.n	800758e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	73fb      	strb	r3, [r7, #15]
 8007502:	e044      	b.n	800758e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b03      	cmp	r3, #3
 800750a:	d018      	beq.n	800753e <RCCEx_PLLSAI1_Config+0x86>
 800750c:	2b03      	cmp	r3, #3
 800750e:	d825      	bhi.n	800755c <RCCEx_PLLSAI1_Config+0xa4>
 8007510:	2b01      	cmp	r3, #1
 8007512:	d002      	beq.n	800751a <RCCEx_PLLSAI1_Config+0x62>
 8007514:	2b02      	cmp	r3, #2
 8007516:	d009      	beq.n	800752c <RCCEx_PLLSAI1_Config+0x74>
 8007518:	e020      	b.n	800755c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800751a:	4b5f      	ldr	r3, [pc, #380]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d11d      	bne.n	8007562 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800752a:	e01a      	b.n	8007562 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800752c:	4b5a      	ldr	r3, [pc, #360]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007534:	2b00      	cmp	r3, #0
 8007536:	d116      	bne.n	8007566 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800753c:	e013      	b.n	8007566 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800753e:	4b56      	ldr	r3, [pc, #344]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10f      	bne.n	800756a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800754a:	4b53      	ldr	r3, [pc, #332]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d109      	bne.n	800756a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800755a:	e006      	b.n	800756a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	73fb      	strb	r3, [r7, #15]
      break;
 8007560:	e004      	b.n	800756c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007562:	bf00      	nop
 8007564:	e002      	b.n	800756c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007566:	bf00      	nop
 8007568:	e000      	b.n	800756c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800756a:	bf00      	nop
    }

    if(status == HAL_OK)
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10d      	bne.n	800758e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007572:	4b49      	ldr	r3, [pc, #292]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6819      	ldr	r1, [r3, #0]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	3b01      	subs	r3, #1
 8007584:	011b      	lsls	r3, r3, #4
 8007586:	430b      	orrs	r3, r1
 8007588:	4943      	ldr	r1, [pc, #268]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800758a:	4313      	orrs	r3, r2
 800758c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d17c      	bne.n	800768e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007594:	4b40      	ldr	r3, [pc, #256]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a3f      	ldr	r2, [pc, #252]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800759a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800759e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075a0:	f7fc fe20 	bl	80041e4 <HAL_GetTick>
 80075a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80075a6:	e009      	b.n	80075bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075a8:	f7fc fe1c 	bl	80041e4 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d902      	bls.n	80075bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	73fb      	strb	r3, [r7, #15]
        break;
 80075ba:	e005      	b.n	80075c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80075bc:	4b36      	ldr	r3, [pc, #216]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d1ef      	bne.n	80075a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d15f      	bne.n	800768e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d110      	bne.n	80075f6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075d4:	4b30      	ldr	r3, [pc, #192]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80075dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	6892      	ldr	r2, [r2, #8]
 80075e4:	0211      	lsls	r1, r2, #8
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	68d2      	ldr	r2, [r2, #12]
 80075ea:	06d2      	lsls	r2, r2, #27
 80075ec:	430a      	orrs	r2, r1
 80075ee:	492a      	ldr	r1, [pc, #168]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	610b      	str	r3, [r1, #16]
 80075f4:	e027      	b.n	8007646 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d112      	bne.n	8007622 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075fc:	4b26      	ldr	r3, [pc, #152]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007604:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6892      	ldr	r2, [r2, #8]
 800760c:	0211      	lsls	r1, r2, #8
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	6912      	ldr	r2, [r2, #16]
 8007612:	0852      	lsrs	r2, r2, #1
 8007614:	3a01      	subs	r2, #1
 8007616:	0552      	lsls	r2, r2, #21
 8007618:	430a      	orrs	r2, r1
 800761a:	491f      	ldr	r1, [pc, #124]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800761c:	4313      	orrs	r3, r2
 800761e:	610b      	str	r3, [r1, #16]
 8007620:	e011      	b.n	8007646 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007622:	4b1d      	ldr	r3, [pc, #116]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800762a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	6892      	ldr	r2, [r2, #8]
 8007632:	0211      	lsls	r1, r2, #8
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6952      	ldr	r2, [r2, #20]
 8007638:	0852      	lsrs	r2, r2, #1
 800763a:	3a01      	subs	r2, #1
 800763c:	0652      	lsls	r2, r2, #25
 800763e:	430a      	orrs	r2, r1
 8007640:	4915      	ldr	r1, [pc, #84]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007642:	4313      	orrs	r3, r2
 8007644:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007646:	4b14      	ldr	r3, [pc, #80]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a13      	ldr	r2, [pc, #76]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800764c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007650:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007652:	f7fc fdc7 	bl	80041e4 <HAL_GetTick>
 8007656:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007658:	e009      	b.n	800766e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800765a:	f7fc fdc3 	bl	80041e4 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	2b02      	cmp	r3, #2
 8007666:	d902      	bls.n	800766e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	73fb      	strb	r3, [r7, #15]
          break;
 800766c:	e005      	b.n	800767a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800766e:	4b0a      	ldr	r3, [pc, #40]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0ef      	beq.n	800765a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800767a:	7bfb      	ldrb	r3, [r7, #15]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d106      	bne.n	800768e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007680:	4b05      	ldr	r3, [pc, #20]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007682:	691a      	ldr	r2, [r3, #16]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	4903      	ldr	r1, [pc, #12]	; (8007698 <RCCEx_PLLSAI1_Config+0x1e0>)
 800768a:	4313      	orrs	r3, r2
 800768c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800768e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}
 8007698:	40021000 	.word	0x40021000

0800769c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80076a4:	2301      	movs	r3, #1
 80076a6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d06c      	beq.n	8007788 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d106      	bne.n	80076c8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7fb fdf4 	bl	80032b0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2202      	movs	r2, #2
 80076cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	22ca      	movs	r2, #202	; 0xca
 80076d6:	625a      	str	r2, [r3, #36]	; 0x24
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2253      	movs	r2, #83	; 0x53
 80076de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fa49 	bl	8007b78 <RTC_EnterInitMode>
 80076e6:	4603      	mov	r3, r0
 80076e8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d14b      	bne.n	8007788 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	6812      	ldr	r2, [r2, #0]
 80076fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007702:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6899      	ldr	r1, [r3, #8]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	685a      	ldr	r2, [r3, #4]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	431a      	orrs	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	431a      	orrs	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	68d2      	ldr	r2, [r2, #12]
 800772a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6919      	ldr	r1, [r3, #16]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	041a      	lsls	r2, r3, #16
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	430a      	orrs	r2, r1
 800773e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fa4d 	bl	8007be0 <RTC_ExitInitMode>
 8007746:	4603      	mov	r3, r0
 8007748:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800774a:	7bfb      	ldrb	r3, [r7, #15]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d11b      	bne.n	8007788 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 0203 	bic.w	r2, r2, #3
 800775e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	69da      	ldr	r2, [r3, #28]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	431a      	orrs	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	22ff      	movs	r2, #255	; 0xff
 800777e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007788:	7bfb      	ldrb	r3, [r7, #15]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007792:	b590      	push	{r4, r7, lr}
 8007794:	b087      	sub	sp, #28
 8007796:	af00      	add	r7, sp, #0
 8007798:	60f8      	str	r0, [r7, #12]
 800779a:	60b9      	str	r1, [r7, #8]
 800779c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d101      	bne.n	80077ac <HAL_RTC_SetTime+0x1a>
 80077a8:	2302      	movs	r3, #2
 80077aa:	e08b      	b.n	80078c4 <HAL_RTC_SetTime+0x132>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	22ca      	movs	r2, #202	; 0xca
 80077c2:	625a      	str	r2, [r3, #36]	; 0x24
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	2253      	movs	r2, #83	; 0x53
 80077ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 f9d3 	bl	8007b78 <RTC_EnterInitMode>
 80077d2:	4603      	mov	r3, r0
 80077d4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80077d6:	7cfb      	ldrb	r3, [r7, #19]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d163      	bne.n	80078a4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d126      	bne.n	8007830 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d102      	bne.n	80077f6 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2200      	movs	r2, #0
 80077f4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f000 fa2e 	bl	8007c5c <RTC_ByteToBcd2>
 8007800:	4603      	mov	r3, r0
 8007802:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	785b      	ldrb	r3, [r3, #1]
 8007808:	4618      	mov	r0, r3
 800780a:	f000 fa27 	bl	8007c5c <RTC_ByteToBcd2>
 800780e:	4603      	mov	r3, r0
 8007810:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007812:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	789b      	ldrb	r3, [r3, #2]
 8007818:	4618      	mov	r0, r3
 800781a:	f000 fa1f 	bl	8007c5c <RTC_ByteToBcd2>
 800781e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007820:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	78db      	ldrb	r3, [r3, #3]
 8007828:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800782a:	4313      	orrs	r3, r2
 800782c:	617b      	str	r3, [r7, #20]
 800782e:	e018      	b.n	8007862 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800783a:	2b00      	cmp	r3, #0
 800783c:	d102      	bne.n	8007844 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2200      	movs	r2, #0
 8007842:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	785b      	ldrb	r3, [r3, #1]
 800784e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007850:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007856:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	78db      	ldrb	r3, [r3, #3]
 800785c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800785e:	4313      	orrs	r3, r2
 8007860:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681a      	ldr	r2, [r3, #0]
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800786c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007870:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007880:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6899      	ldr	r1, [r3, #8]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	431a      	orrs	r2, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	430a      	orrs	r2, r1
 8007898:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f000 f9a0 	bl	8007be0 <RTC_ExitInitMode>
 80078a0:	4603      	mov	r3, r0
 80078a2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	22ff      	movs	r2, #255	; 0xff
 80078aa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80078ac:	7cfb      	ldrb	r3, [r7, #19]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d103      	bne.n	80078ba <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80078c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	371c      	adds	r7, #28
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd90      	pop	{r4, r7, pc}

080078cc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	60f8      	str	r0, [r7, #12]
 80078d4:	60b9      	str	r1, [r7, #8]
 80078d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	691b      	ldr	r3, [r3, #16]
 80078e8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80078fa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80078fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	0c1b      	lsrs	r3, r3, #16
 8007904:	b2db      	uxtb	r3, r3
 8007906:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800790a:	b2da      	uxtb	r2, r3
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	0a1b      	lsrs	r3, r3, #8
 8007914:	b2db      	uxtb	r3, r3
 8007916:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800791a:	b2da      	uxtb	r2, r3
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007928:	b2da      	uxtb	r2, r3
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	0d9b      	lsrs	r3, r3, #22
 8007932:	b2db      	uxtb	r3, r3
 8007934:	f003 0301 	and.w	r3, r3, #1
 8007938:	b2da      	uxtb	r2, r3
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d11a      	bne.n	800797a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	4618      	mov	r0, r3
 800794a:	f000 f9a7 	bl	8007c9c <RTC_Bcd2ToByte>
 800794e:	4603      	mov	r3, r0
 8007950:	461a      	mov	r2, r3
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	785b      	ldrb	r3, [r3, #1]
 800795a:	4618      	mov	r0, r3
 800795c:	f000 f99e 	bl	8007c9c <RTC_Bcd2ToByte>
 8007960:	4603      	mov	r3, r0
 8007962:	461a      	mov	r2, r3
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	789b      	ldrb	r3, [r3, #2]
 800796c:	4618      	mov	r0, r3
 800796e:	f000 f995 	bl	8007c9c <RTC_Bcd2ToByte>
 8007972:	4603      	mov	r3, r0
 8007974:	461a      	mov	r2, r3
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007984:	b590      	push	{r4, r7, lr}
 8007986:	b087      	sub	sp, #28
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d101      	bne.n	800799e <HAL_RTC_SetDate+0x1a>
 800799a:	2302      	movs	r3, #2
 800799c:	e075      	b.n	8007a8a <HAL_RTC_SetDate+0x106>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2202      	movs	r2, #2
 80079aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10e      	bne.n	80079d2 <HAL_RTC_SetDate+0x4e>
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	785b      	ldrb	r3, [r3, #1]
 80079b8:	f003 0310 	and.w	r3, r3, #16
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d008      	beq.n	80079d2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	785b      	ldrb	r3, [r3, #1]
 80079c4:	f023 0310 	bic.w	r3, r3, #16
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	330a      	adds	r3, #10
 80079cc:	b2da      	uxtb	r2, r3
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d11c      	bne.n	8007a12 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	78db      	ldrb	r3, [r3, #3]
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 f93d 	bl	8007c5c <RTC_ByteToBcd2>
 80079e2:	4603      	mov	r3, r0
 80079e4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	785b      	ldrb	r3, [r3, #1]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 f936 	bl	8007c5c <RTC_ByteToBcd2>
 80079f0:	4603      	mov	r3, r0
 80079f2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80079f4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	789b      	ldrb	r3, [r3, #2]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 f92e 	bl	8007c5c <RTC_ByteToBcd2>
 8007a00:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007a02:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	617b      	str	r3, [r7, #20]
 8007a10:	e00e      	b.n	8007a30 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	78db      	ldrb	r3, [r3, #3]
 8007a16:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	785b      	ldrb	r3, [r3, #1]
 8007a1c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007a1e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007a24:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	22ca      	movs	r2, #202	; 0xca
 8007a36:	625a      	str	r2, [r3, #36]	; 0x24
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2253      	movs	r2, #83	; 0x53
 8007a3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	f000 f899 	bl	8007b78 <RTC_EnterInitMode>
 8007a46:	4603      	mov	r3, r0
 8007a48:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007a4a:	7cfb      	ldrb	r3, [r7, #19]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10c      	bne.n	8007a6a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a5a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a5e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 f8bd 	bl	8007be0 <RTC_ExitInitMode>
 8007a66:	4603      	mov	r3, r0
 8007a68:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	22ff      	movs	r2, #255	; 0xff
 8007a70:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007a72:	7cfb      	ldrb	r3, [r7, #19]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d103      	bne.n	8007a80 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007a88:	7cfb      	ldrb	r3, [r7, #19]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	371c      	adds	r7, #28
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd90      	pop	{r4, r7, pc}

08007a92 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b086      	sub	sp, #24
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	60f8      	str	r0, [r7, #12]
 8007a9a:	60b9      	str	r1, [r7, #8]
 8007a9c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007aa8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007aac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	0c1b      	lsrs	r3, r3, #16
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	0a1b      	lsrs	r3, r3, #8
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	f003 031f 	and.w	r3, r3, #31
 8007ac2:	b2da      	uxtb	r2, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	0b5b      	lsrs	r3, r3, #13
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	f003 0307 	and.w	r3, r3, #7
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d11a      	bne.n	8007b22 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	78db      	ldrb	r3, [r3, #3]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 f8d3 	bl	8007c9c <RTC_Bcd2ToByte>
 8007af6:	4603      	mov	r3, r0
 8007af8:	461a      	mov	r2, r3
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	785b      	ldrb	r3, [r3, #1]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 f8ca 	bl	8007c9c <RTC_Bcd2ToByte>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	789b      	ldrb	r3, [r3, #2]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 f8c1 	bl	8007c9c <RTC_Bcd2ToByte>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68da      	ldr	r2, [r3, #12]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007b42:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007b44:	f7fc fb4e 	bl	80041e4 <HAL_GetTick>
 8007b48:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b4a:	e009      	b.n	8007b60 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007b4c:	f7fc fb4a 	bl	80041e4 <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b5a:	d901      	bls.n	8007b60 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e007      	b.n	8007b70 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	f003 0320 	and.w	r3, r3, #32
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d0ee      	beq.n	8007b4c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007b6e:	2300      	movs	r3, #0
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3710      	adds	r7, #16
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d120      	bne.n	8007bd4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f04f 32ff 	mov.w	r2, #4294967295
 8007b9a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007b9c:	f7fc fb22 	bl	80041e4 <HAL_GetTick>
 8007ba0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007ba2:	e00d      	b.n	8007bc0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007ba4:	f7fc fb1e 	bl	80041e4 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bb2:	d905      	bls.n	8007bc0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2203      	movs	r2, #3
 8007bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d102      	bne.n	8007bd4 <RTC_EnterInitMode+0x5c>
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
 8007bd0:	2b03      	cmp	r3, #3
 8007bd2:	d1e7      	bne.n	8007ba4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
	...

08007be0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007bec:	4b1a      	ldr	r3, [pc, #104]	; (8007c58 <RTC_ExitInitMode+0x78>)
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	4a19      	ldr	r2, [pc, #100]	; (8007c58 <RTC_ExitInitMode+0x78>)
 8007bf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bf6:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007bf8:	4b17      	ldr	r3, [pc, #92]	; (8007c58 <RTC_ExitInitMode+0x78>)
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f003 0320 	and.w	r3, r3, #32
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10c      	bne.n	8007c1e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7ff ff91 	bl	8007b2c <HAL_RTC_WaitForSynchro>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d01e      	beq.n	8007c4e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2203      	movs	r2, #3
 8007c14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	73fb      	strb	r3, [r7, #15]
 8007c1c:	e017      	b.n	8007c4e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007c1e:	4b0e      	ldr	r3, [pc, #56]	; (8007c58 <RTC_ExitInitMode+0x78>)
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	4a0d      	ldr	r2, [pc, #52]	; (8007c58 <RTC_ExitInitMode+0x78>)
 8007c24:	f023 0320 	bic.w	r3, r3, #32
 8007c28:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7ff ff7e 	bl	8007b2c <HAL_RTC_WaitForSynchro>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d005      	beq.n	8007c42 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2203      	movs	r2, #3
 8007c3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007c42:	4b05      	ldr	r3, [pc, #20]	; (8007c58 <RTC_ExitInitMode+0x78>)
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	4a04      	ldr	r2, [pc, #16]	; (8007c58 <RTC_ExitInitMode+0x78>)
 8007c48:	f043 0320 	orr.w	r3, r3, #32
 8007c4c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	40002800 	.word	0x40002800

08007c5c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	4603      	mov	r3, r0
 8007c64:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007c6a:	79fb      	ldrb	r3, [r7, #7]
 8007c6c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007c6e:	e005      	b.n	8007c7c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	3301      	adds	r3, #1
 8007c74:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007c76:	7afb      	ldrb	r3, [r7, #11]
 8007c78:	3b0a      	subs	r3, #10
 8007c7a:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007c7c:	7afb      	ldrb	r3, [r7, #11]
 8007c7e:	2b09      	cmp	r3, #9
 8007c80:	d8f6      	bhi.n	8007c70 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	011b      	lsls	r3, r3, #4
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	7afb      	ldrb	r3, [r7, #11]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	b2db      	uxtb	r3, r3
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3714      	adds	r7, #20
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007ca6:	79fb      	ldrb	r3, [r7, #7]
 8007ca8:	091b      	lsrs	r3, r3, #4
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	461a      	mov	r2, r3
 8007cae:	0092      	lsls	r2, r2, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	005b      	lsls	r3, r3, #1
 8007cb4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007cb6:	79fb      	ldrb	r3, [r7, #7]
 8007cb8:	f003 030f 	and.w	r3, r3, #15
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	b2db      	uxtb	r3, r3
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	60f8      	str	r0, [r7, #12]
 8007cd8:	60b9      	str	r1, [r7, #8]
 8007cda:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ce2:	2b01      	cmp	r3, #1
 8007ce4:	d101      	bne.n	8007cea <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007ce6:	2302      	movs	r3, #2
 8007ce8:	e07f      	b.n	8007dea <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	22ca      	movs	r2, #202	; 0xca
 8007d00:	625a      	str	r2, [r3, #36]	; 0x24
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2253      	movs	r2, #83	; 0x53
 8007d08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689a      	ldr	r2, [r3, #8]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d18:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007d2a:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d120      	bne.n	8007d7c <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8007d3a:	f7fc fa53 	bl	80041e4 <HAL_GetTick>
 8007d3e:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8007d40:	e015      	b.n	8007d6e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007d42:	f7fc fa4f 	bl	80041e4 <HAL_GetTick>
 8007d46:	4602      	mov	r2, r0
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	1ad3      	subs	r3, r2, r3
 8007d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d50:	d90d      	bls.n	8007d6e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	22ff      	movs	r2, #255	; 0xff
 8007d58:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2203      	movs	r2, #3
 8007d5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e03d      	b.n	8007dea <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d0e2      	beq.n	8007d42 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f023 0107 	bic.w	r1, r3, #7
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	430a      	orrs	r2, r1
 8007d96:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007d98:	4b16      	ldr	r3, [pc, #88]	; (8007df4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a15      	ldr	r2, [pc, #84]	; (8007df4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007d9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007da2:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007da4:	4b13      	ldr	r3, [pc, #76]	; (8007df4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	4a12      	ldr	r2, [pc, #72]	; (8007df4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dae:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689a      	ldr	r2, [r3, #8]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007dbe:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	689a      	ldr	r2, [r3, #8]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dce:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	22ff      	movs	r2, #255	; 0xff
 8007dd6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3718      	adds	r7, #24
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	40010400 	.word	0x40010400

08007df8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8007e00:	4b0f      	ldr	r3, [pc, #60]	; (8007e40 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8007e02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e06:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00b      	beq.n	8007e2e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	b2da      	uxtb	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007e26:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7fb f981 	bl	8003130 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8007e36:	bf00      	nop
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	40010400 	.word	0x40010400

08007e44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e095      	b.n	8007f82 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d108      	bne.n	8007e70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e66:	d009      	beq.n	8007e7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	61da      	str	r2, [r3, #28]
 8007e6e:	e005      	b.n	8007e7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d106      	bne.n	8007e9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7fb fa42 	bl	8003320 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eb2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68db      	ldr	r3, [r3, #12]
 8007eb8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ebc:	d902      	bls.n	8007ec4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	e002      	b.n	8007eca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ec8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007ed2:	d007      	beq.n	8007ee4 <HAL_SPI_Init+0xa0>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007edc:	d002      	beq.n	8007ee4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007ef4:	431a      	orrs	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	431a      	orrs	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	f003 0301 	and.w	r3, r3, #1
 8007f08:	431a      	orrs	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f12:	431a      	orrs	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f1c:	431a      	orrs	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f26:	ea42 0103 	orr.w	r1, r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f2e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	0c1b      	lsrs	r3, r3, #16
 8007f40:	f003 0204 	and.w	r2, r3, #4
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f48:	f003 0310 	and.w	r3, r3, #16
 8007f4c:	431a      	orrs	r2, r3
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f52:	f003 0308 	and.w	r3, r3, #8
 8007f56:	431a      	orrs	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007f60:	ea42 0103 	orr.w	r1, r2, r3
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b088      	sub	sp, #32
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	60f8      	str	r0, [r7, #12]
 8007f92:	60b9      	str	r1, [r7, #8]
 8007f94:	603b      	str	r3, [r7, #0]
 8007f96:	4613      	mov	r3, r2
 8007f98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d101      	bne.n	8007fac <HAL_SPI_Transmit+0x22>
 8007fa8:	2302      	movs	r3, #2
 8007faa:	e158      	b.n	800825e <HAL_SPI_Transmit+0x2d4>
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fb4:	f7fc f916 	bl	80041e4 <HAL_GetTick>
 8007fb8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007fba:	88fb      	ldrh	r3, [r7, #6]
 8007fbc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d002      	beq.n	8007fd0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007fca:	2302      	movs	r3, #2
 8007fcc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fce:	e13d      	b.n	800824c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d002      	beq.n	8007fdc <HAL_SPI_Transmit+0x52>
 8007fd6:	88fb      	ldrh	r3, [r7, #6]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d102      	bne.n	8007fe2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fe0:	e134      	b.n	800824c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2203      	movs	r2, #3
 8007fe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	88fa      	ldrh	r2, [r7, #6]
 8007ffa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	88fa      	ldrh	r2, [r7, #6]
 8008000:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2200      	movs	r2, #0
 800800c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2200      	movs	r2, #0
 800801c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800802c:	d10f      	bne.n	800804e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800803c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800804c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008058:	2b40      	cmp	r3, #64	; 0x40
 800805a:	d007      	beq.n	800806c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800806a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008074:	d94b      	bls.n	800810e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <HAL_SPI_Transmit+0xfa>
 800807e:	8afb      	ldrh	r3, [r7, #22]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d13e      	bne.n	8008102 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008088:	881a      	ldrh	r2, [r3, #0]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008094:	1c9a      	adds	r2, r3, #2
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800809e:	b29b      	uxth	r3, r3
 80080a0:	3b01      	subs	r3, #1
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80080a8:	e02b      	b.n	8008102 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d112      	bne.n	80080de <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080bc:	881a      	ldrh	r2, [r3, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c8:	1c9a      	adds	r2, r3, #2
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	3b01      	subs	r3, #1
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080dc:	e011      	b.n	8008102 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080de:	f7fc f881 	bl	80041e4 <HAL_GetTick>
 80080e2:	4602      	mov	r2, r0
 80080e4:	69bb      	ldr	r3, [r7, #24]
 80080e6:	1ad3      	subs	r3, r2, r3
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d803      	bhi.n	80080f6 <HAL_SPI_Transmit+0x16c>
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f4:	d102      	bne.n	80080fc <HAL_SPI_Transmit+0x172>
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d102      	bne.n	8008102 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80080fc:	2303      	movs	r3, #3
 80080fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008100:	e0a4      	b.n	800824c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008106:	b29b      	uxth	r3, r3
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1ce      	bne.n	80080aa <HAL_SPI_Transmit+0x120>
 800810c:	e07c      	b.n	8008208 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <HAL_SPI_Transmit+0x192>
 8008116:	8afb      	ldrh	r3, [r7, #22]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d170      	bne.n	80081fe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008120:	b29b      	uxth	r3, r3
 8008122:	2b01      	cmp	r3, #1
 8008124:	d912      	bls.n	800814c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812a:	881a      	ldrh	r2, [r3, #0]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008136:	1c9a      	adds	r2, r3, #2
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008140:	b29b      	uxth	r3, r3
 8008142:	3b02      	subs	r3, #2
 8008144:	b29a      	uxth	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	87da      	strh	r2, [r3, #62]	; 0x3e
 800814a:	e058      	b.n	80081fe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	330c      	adds	r3, #12
 8008156:	7812      	ldrb	r2, [r2, #0]
 8008158:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815e:	1c5a      	adds	r2, r3, #1
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008168:	b29b      	uxth	r3, r3
 800816a:	3b01      	subs	r3, #1
 800816c:	b29a      	uxth	r2, r3
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008172:	e044      	b.n	80081fe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	f003 0302 	and.w	r3, r3, #2
 800817e:	2b02      	cmp	r3, #2
 8008180:	d12b      	bne.n	80081da <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008186:	b29b      	uxth	r3, r3
 8008188:	2b01      	cmp	r3, #1
 800818a:	d912      	bls.n	80081b2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008190:	881a      	ldrh	r2, [r3, #0]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819c:	1c9a      	adds	r2, r3, #2
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	3b02      	subs	r3, #2
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081b0:	e025      	b.n	80081fe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	330c      	adds	r3, #12
 80081bc:	7812      	ldrb	r2, [r2, #0]
 80081be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c4:	1c5a      	adds	r2, r3, #1
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	3b01      	subs	r3, #1
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081d8:	e011      	b.n	80081fe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081da:	f7fc f803 	bl	80041e4 <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d803      	bhi.n	80081f2 <HAL_SPI_Transmit+0x268>
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f0:	d102      	bne.n	80081f8 <HAL_SPI_Transmit+0x26e>
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d102      	bne.n	80081fe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80081fc:	e026      	b.n	800824c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008202:	b29b      	uxth	r3, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1b5      	bne.n	8008174 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008208:	69ba      	ldr	r2, [r7, #24]
 800820a:	6839      	ldr	r1, [r7, #0]
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 fbe7 	bl	80089e0 <SPI_EndRxTxTransaction>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d002      	beq.n	800821e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2220      	movs	r2, #32
 800821c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10a      	bne.n	800823c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008226:	2300      	movs	r3, #0
 8008228:	613b      	str	r3, [r7, #16]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	613b      	str	r3, [r7, #16]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	613b      	str	r3, [r7, #16]
 800823a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008240:	2b00      	cmp	r3, #0
 8008242:	d002      	beq.n	800824a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	77fb      	strb	r3, [r7, #31]
 8008248:	e000      	b.n	800824c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800824a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800825c:	7ffb      	ldrb	r3, [r7, #31]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3720      	adds	r7, #32
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
	...

08008268 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	4613      	mov	r3, r2
 8008274:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008276:	2300      	movs	r3, #0
 8008278:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008280:	2b01      	cmp	r3, #1
 8008282:	d101      	bne.n	8008288 <HAL_SPI_Transmit_DMA+0x20>
 8008284:	2302      	movs	r3, #2
 8008286:	e0d8      	b.n	800843a <HAL_SPI_Transmit_DMA+0x1d2>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b01      	cmp	r3, #1
 800829a:	d002      	beq.n	80082a2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800829c:	2302      	movs	r3, #2
 800829e:	75fb      	strb	r3, [r7, #23]
    goto error;
 80082a0:	e0c6      	b.n	8008430 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d002      	beq.n	80082ae <HAL_SPI_Transmit_DMA+0x46>
 80082a8:	88fb      	ldrh	r3, [r7, #6]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d102      	bne.n	80082b4 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80082b2:	e0bd      	b.n	8008430 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2203      	movs	r2, #3
 80082b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	2200      	movs	r2, #0
 80082c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	88fa      	ldrh	r2, [r7, #6]
 80082cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	88fa      	ldrh	r2, [r7, #6]
 80082d2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082fe:	d10f      	bne.n	8008320 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800830e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800831e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008324:	4a47      	ldr	r2, [pc, #284]	; (8008444 <HAL_SPI_Transmit_DMA+0x1dc>)
 8008326:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832c:	4a46      	ldr	r2, [pc, #280]	; (8008448 <HAL_SPI_Transmit_DMA+0x1e0>)
 800832e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008334:	4a45      	ldr	r2, [pc, #276]	; (800844c <HAL_SPI_Transmit_DMA+0x1e4>)
 8008336:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800833c:	2200      	movs	r2, #0
 800833e:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800834e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008358:	d82d      	bhi.n	80083b6 <HAL_SPI_Transmit_DMA+0x14e>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008364:	d127      	bne.n	80083b6 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800836a:	b29b      	uxth	r3, r3
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10f      	bne.n	8008394 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008382:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008388:	b29b      	uxth	r3, r3
 800838a:	085b      	lsrs	r3, r3, #1
 800838c:	b29a      	uxth	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008392:	e010      	b.n	80083b6 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083a2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	085b      	lsrs	r3, r3, #1
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	3301      	adds	r3, #1
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083be:	4619      	mov	r1, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	330c      	adds	r3, #12
 80083c6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083cc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80083ce:	f7fd fbf9 	bl	8005bc4 <HAL_DMA_Start_IT>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d00c      	beq.n	80083f2 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083dc:	f043 0210 	orr.w	r2, r3, #16
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80083f0:	e01e      	b.n	8008430 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fc:	2b40      	cmp	r3, #64	; 0x40
 80083fe:	d007      	beq.n	8008410 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800840e:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	685a      	ldr	r2, [r3, #4]
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f042 0220 	orr.w	r2, r2, #32
 800841e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f042 0202 	orr.w	r2, r2, #2
 800842e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008438:	7dfb      	ldrb	r3, [r7, #23]
}
 800843a:	4618      	mov	r0, r3
 800843c:	3718      	adds	r7, #24
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	0800871f 	.word	0x0800871f
 8008448:	08008679 	.word	0x08008679
 800844c:	0800873b 	.word	0x0800873b

08008450 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b088      	sub	sp, #32
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	099b      	lsrs	r3, r3, #6
 800846c:	f003 0301 	and.w	r3, r3, #1
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10f      	bne.n	8008494 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00a      	beq.n	8008494 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	099b      	lsrs	r3, r3, #6
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d004      	beq.n	8008494 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	4798      	blx	r3
    return;
 8008492:	e0d7      	b.n	8008644 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	085b      	lsrs	r3, r3, #1
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	2b00      	cmp	r3, #0
 800849e:	d00a      	beq.n	80084b6 <HAL_SPI_IRQHandler+0x66>
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	09db      	lsrs	r3, r3, #7
 80084a4:	f003 0301 	and.w	r3, r3, #1
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d004      	beq.n	80084b6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	4798      	blx	r3
    return;
 80084b4:	e0c6      	b.n	8008644 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	095b      	lsrs	r3, r3, #5
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10c      	bne.n	80084dc <HAL_SPI_IRQHandler+0x8c>
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	099b      	lsrs	r3, r3, #6
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d106      	bne.n	80084dc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	0a1b      	lsrs	r3, r3, #8
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f000 80b4 	beq.w	8008644 <HAL_SPI_IRQHandler+0x1f4>
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	095b      	lsrs	r3, r3, #5
 80084e0:	f003 0301 	and.w	r3, r3, #1
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 80ad 	beq.w	8008644 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	099b      	lsrs	r3, r3, #6
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d023      	beq.n	800853e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b03      	cmp	r3, #3
 8008500:	d011      	beq.n	8008526 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008506:	f043 0204 	orr.w	r2, r3, #4
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800850e:	2300      	movs	r3, #0
 8008510:	617b      	str	r3, [r7, #20]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	617b      	str	r3, [r7, #20]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	617b      	str	r3, [r7, #20]
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	e00b      	b.n	800853e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008526:	2300      	movs	r3, #0
 8008528:	613b      	str	r3, [r7, #16]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	613b      	str	r3, [r7, #16]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	613b      	str	r3, [r7, #16]
 800853a:	693b      	ldr	r3, [r7, #16]
        return;
 800853c:	e082      	b.n	8008644 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	095b      	lsrs	r3, r3, #5
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d014      	beq.n	8008574 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800854e:	f043 0201 	orr.w	r2, r3, #1
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008556:	2300      	movs	r3, #0
 8008558:	60fb      	str	r3, [r7, #12]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	60fb      	str	r3, [r7, #12]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008570:	601a      	str	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	0a1b      	lsrs	r3, r3, #8
 8008578:	f003 0301 	and.w	r3, r3, #1
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00c      	beq.n	800859a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008584:	f043 0208 	orr.w	r2, r3, #8
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800858c:	2300      	movs	r3, #0
 800858e:	60bb      	str	r3, [r7, #8]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	60bb      	str	r3, [r7, #8]
 8008598:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d04f      	beq.n	8008642 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	685a      	ldr	r2, [r3, #4]
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80085b0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	f003 0302 	and.w	r3, r3, #2
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d104      	bne.n	80085ce <HAL_SPI_IRQHandler+0x17e>
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	f003 0301 	and.w	r3, r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d034      	beq.n	8008638 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f022 0203 	bic.w	r2, r2, #3
 80085dc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d011      	beq.n	800860a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085ea:	4a18      	ldr	r2, [pc, #96]	; (800864c <HAL_SPI_IRQHandler+0x1fc>)
 80085ec:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085f2:	4618      	mov	r0, r3
 80085f4:	f7fd fb84 	bl	8005d00 <HAL_DMA_Abort_IT>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d005      	beq.n	800860a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008602:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860e:	2b00      	cmp	r3, #0
 8008610:	d016      	beq.n	8008640 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008616:	4a0d      	ldr	r2, [pc, #52]	; (800864c <HAL_SPI_IRQHandler+0x1fc>)
 8008618:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800861e:	4618      	mov	r0, r3
 8008620:	f7fd fb6e 	bl	8005d00 <HAL_DMA_Abort_IT>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800862e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008636:	e003      	b.n	8008640 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f813 	bl	8008664 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800863e:	e000      	b.n	8008642 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008640:	bf00      	nop
    return;
 8008642:	bf00      	nop
  }
}
 8008644:	3720      	adds	r7, #32
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	0800877b 	.word	0x0800877b

08008650 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b086      	sub	sp, #24
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008684:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008686:	f7fb fdad 	bl	80041e4 <HAL_GetTick>
 800868a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0320 	and.w	r3, r3, #32
 8008696:	2b20      	cmp	r3, #32
 8008698:	d03b      	beq.n	8008712 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	685a      	ldr	r2, [r3, #4]
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f022 0220 	bic.w	r2, r2, #32
 80086a8:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	685a      	ldr	r2, [r3, #4]
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f022 0202 	bic.w	r2, r2, #2
 80086b8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	2164      	movs	r1, #100	; 0x64
 80086be:	6978      	ldr	r0, [r7, #20]
 80086c0:	f000 f98e 	bl	80089e0 <SPI_EndRxTxTransaction>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d005      	beq.n	80086d6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086ce:	f043 0220 	orr.w	r2, r3, #32
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d10a      	bne.n	80086f4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	60fb      	str	r3, [r7, #12]
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2200      	movs	r2, #0
 80086f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800870a:	6978      	ldr	r0, [r7, #20]
 800870c:	f7ff ffaa 	bl	8008664 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008710:	e002      	b.n	8008718 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008712:	6978      	ldr	r0, [r7, #20]
 8008714:	f001 fa2c 	bl	8009b70 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b084      	sub	sp, #16
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f7ff ff8f 	bl	8008650 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008732:	bf00      	nop
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}

0800873a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800873a:	b580      	push	{r7, lr}
 800873c:	b084      	sub	sp, #16
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008746:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	685a      	ldr	r2, [r3, #4]
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f022 0203 	bic.w	r2, r2, #3
 8008756:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800875c:	f043 0210 	orr.w	r2, r3, #16
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f7ff ff79 	bl	8008664 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008772:	bf00      	nop
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008786:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f7ff ff64 	bl	8008664 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800879c:	bf00      	nop
 800879e:	3710      	adds	r7, #16
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b088      	sub	sp, #32
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	603b      	str	r3, [r7, #0]
 80087b0:	4613      	mov	r3, r2
 80087b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087b4:	f7fb fd16 	bl	80041e4 <HAL_GetTick>
 80087b8:	4602      	mov	r2, r0
 80087ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087bc:	1a9b      	subs	r3, r3, r2
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	4413      	add	r3, r2
 80087c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80087c4:	f7fb fd0e 	bl	80041e4 <HAL_GetTick>
 80087c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80087ca:	4b39      	ldr	r3, [pc, #228]	; (80088b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	015b      	lsls	r3, r3, #5
 80087d0:	0d1b      	lsrs	r3, r3, #20
 80087d2:	69fa      	ldr	r2, [r7, #28]
 80087d4:	fb02 f303 	mul.w	r3, r2, r3
 80087d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80087da:	e054      	b.n	8008886 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e2:	d050      	beq.n	8008886 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80087e4:	f7fb fcfe 	bl	80041e4 <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	69fa      	ldr	r2, [r7, #28]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d902      	bls.n	80087fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d13d      	bne.n	8008876 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008808:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008812:	d111      	bne.n	8008838 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800881c:	d004      	beq.n	8008828 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008826:	d107      	bne.n	8008838 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008836:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008840:	d10f      	bne.n	8008862 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008860:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e017      	b.n	80088a6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d101      	bne.n	8008880 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800887c:	2300      	movs	r3, #0
 800887e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	3b01      	subs	r3, #1
 8008884:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	689a      	ldr	r2, [r3, #8]
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	4013      	ands	r3, r2
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	429a      	cmp	r2, r3
 8008894:	bf0c      	ite	eq
 8008896:	2301      	moveq	r3, #1
 8008898:	2300      	movne	r3, #0
 800889a:	b2db      	uxtb	r3, r3
 800889c:	461a      	mov	r2, r3
 800889e:	79fb      	ldrb	r3, [r7, #7]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d19b      	bne.n	80087dc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3720      	adds	r7, #32
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	20000000 	.word	0x20000000

080088b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b08a      	sub	sp, #40	; 0x28
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
 80088c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80088c2:	2300      	movs	r3, #0
 80088c4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80088c6:	f7fb fc8d 	bl	80041e4 <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ce:	1a9b      	subs	r3, r3, r2
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	4413      	add	r3, r2
 80088d4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80088d6:	f7fb fc85 	bl	80041e4 <HAL_GetTick>
 80088da:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	330c      	adds	r3, #12
 80088e2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80088e4:	4b3d      	ldr	r3, [pc, #244]	; (80089dc <SPI_WaitFifoStateUntilTimeout+0x128>)
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	4613      	mov	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	4413      	add	r3, r2
 80088ee:	00da      	lsls	r2, r3, #3
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	0d1b      	lsrs	r3, r3, #20
 80088f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088f6:	fb02 f303 	mul.w	r3, r2, r3
 80088fa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80088fc:	e060      	b.n	80089c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008904:	d107      	bne.n	8008916 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d104      	bne.n	8008916 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	b2db      	uxtb	r3, r3
 8008912:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008914:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800891c:	d050      	beq.n	80089c0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800891e:	f7fb fc61 	bl	80041e4 <HAL_GetTick>
 8008922:	4602      	mov	r2, r0
 8008924:	6a3b      	ldr	r3, [r7, #32]
 8008926:	1ad3      	subs	r3, r2, r3
 8008928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800892a:	429a      	cmp	r2, r3
 800892c:	d902      	bls.n	8008934 <SPI_WaitFifoStateUntilTimeout+0x80>
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	2b00      	cmp	r3, #0
 8008932:	d13d      	bne.n	80089b0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685a      	ldr	r2, [r3, #4]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008942:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800894c:	d111      	bne.n	8008972 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008956:	d004      	beq.n	8008962 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008960:	d107      	bne.n	8008972 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008970:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800897a:	d10f      	bne.n	800899c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800899a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e010      	b.n	80089d2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d101      	bne.n	80089ba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80089b6:	2300      	movs	r3, #0
 80089b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	3b01      	subs	r3, #1
 80089be:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	689a      	ldr	r2, [r3, #8]
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	4013      	ands	r3, r2
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d196      	bne.n	80088fe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3728      	adds	r7, #40	; 0x28
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	20000000 	.word	0x20000000

080089e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af02      	add	r7, sp, #8
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	9300      	str	r3, [sp, #0]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80089f8:	68f8      	ldr	r0, [r7, #12]
 80089fa:	f7ff ff5b 	bl	80088b4 <SPI_WaitFifoStateUntilTimeout>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d007      	beq.n	8008a14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a08:	f043 0220 	orr.w	r2, r3, #32
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e027      	b.n	8008a64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	2180      	movs	r1, #128	; 0x80
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f7ff fec0 	bl	80087a4 <SPI_WaitFlagStateUntilTimeout>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d007      	beq.n	8008a3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a2e:	f043 0220 	orr.w	r2, r3, #32
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e014      	b.n	8008a64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f7ff ff34 	bl	80088b4 <SPI_WaitFifoStateUntilTimeout>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d007      	beq.n	8008a62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a56:	f043 0220 	orr.w	r2, r3, #32
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e000      	b.n	8008a64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3710      	adds	r7, #16
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b08b      	sub	sp, #44	; 0x2c
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681a      	ldr	r2, [r3, #0]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	fa93 f3a3 	rbit	r3, r3
 8008a86:	613b      	str	r3, [r7, #16]
  return result;
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d101      	bne.n	8008a96 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008a92:	2320      	movs	r3, #32
 8008a94:	e003      	b.n	8008a9e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	fab3 f383 	clz	r3, r3
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	005b      	lsls	r3, r3, #1
 8008aa0:	2103      	movs	r1, #3
 8008aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa6:	43db      	mvns	r3, r3
 8008aa8:	401a      	ands	r2, r3
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aae:	6a3b      	ldr	r3, [r7, #32]
 8008ab0:	fa93 f3a3 	rbit	r3, r3
 8008ab4:	61fb      	str	r3, [r7, #28]
  return result;
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008ac0:	2320      	movs	r3, #32
 8008ac2:	e003      	b.n	8008acc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	fab3 f383 	clz	r3, r3
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	005b      	lsls	r3, r3, #1
 8008ace:	6879      	ldr	r1, [r7, #4]
 8008ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad4:	431a      	orrs	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	601a      	str	r2, [r3, #0]
}
 8008ada:	bf00      	nop
 8008adc:	372c      	adds	r7, #44	; 0x2c
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr

08008ae6 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b085      	sub	sp, #20
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	685a      	ldr	r2, [r3, #4]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	43db      	mvns	r3, r3
 8008afa:	401a      	ands	r2, r3
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	6879      	ldr	r1, [r7, #4]
 8008b00:	fb01 f303 	mul.w	r3, r1, r3
 8008b04:	431a      	orrs	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	605a      	str	r2, [r3, #4]
}
 8008b0a:	bf00      	nop
 8008b0c:	3714      	adds	r7, #20
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b08b      	sub	sp, #44	; 0x2c
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	60f8      	str	r0, [r7, #12]
 8008b1e:	60b9      	str	r1, [r7, #8]
 8008b20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	689a      	ldr	r2, [r3, #8]
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	fa93 f3a3 	rbit	r3, r3
 8008b30:	613b      	str	r3, [r7, #16]
  return result;
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d101      	bne.n	8008b40 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008b3c:	2320      	movs	r3, #32
 8008b3e:	e003      	b.n	8008b48 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	fab3 f383 	clz	r3, r3
 8008b46:	b2db      	uxtb	r3, r3
 8008b48:	005b      	lsls	r3, r3, #1
 8008b4a:	2103      	movs	r1, #3
 8008b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8008b50:	43db      	mvns	r3, r3
 8008b52:	401a      	ands	r2, r3
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	fa93 f3a3 	rbit	r3, r3
 8008b5e:	61fb      	str	r3, [r7, #28]
  return result;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008b6a:	2320      	movs	r3, #32
 8008b6c:	e003      	b.n	8008b76 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b70:	fab3 f383 	clz	r3, r3
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	6879      	ldr	r1, [r7, #4]
 8008b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b7e:	431a      	orrs	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008b84:	bf00      	nop
 8008b86:	372c      	adds	r7, #44	; 0x2c
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b08b      	sub	sp, #44	; 0x2c
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	60f8      	str	r0, [r7, #12]
 8008b98:	60b9      	str	r1, [r7, #8]
 8008b9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	fa93 f3a3 	rbit	r3, r3
 8008baa:	613b      	str	r3, [r7, #16]
  return result;
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008bb6:	2320      	movs	r3, #32
 8008bb8:	e003      	b.n	8008bc2 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	fab3 f383 	clz	r3, r3
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	005b      	lsls	r3, r3, #1
 8008bc4:	2103      	movs	r1, #3
 8008bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bca:	43db      	mvns	r3, r3
 8008bcc:	401a      	ands	r2, r3
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bd2:	6a3b      	ldr	r3, [r7, #32]
 8008bd4:	fa93 f3a3 	rbit	r3, r3
 8008bd8:	61fb      	str	r3, [r7, #28]
  return result;
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008be4:	2320      	movs	r3, #32
 8008be6:	e003      	b.n	8008bf0 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bea:	fab3 f383 	clz	r3, r3
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	005b      	lsls	r3, r3, #1
 8008bf2:	6879      	ldr	r1, [r7, #4]
 8008bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	60da      	str	r2, [r3, #12]
}
 8008bfe:	bf00      	nop
 8008c00:	372c      	adds	r7, #44	; 0x2c
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr

08008c0a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008c0a:	b480      	push	{r7}
 8008c0c:	b08b      	sub	sp, #44	; 0x2c
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6a1a      	ldr	r2, [r3, #32]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	fa93 f3a3 	rbit	r3, r3
 8008c24:	613b      	str	r3, [r7, #16]
  return result;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d101      	bne.n	8008c34 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008c30:	2320      	movs	r3, #32
 8008c32:	e003      	b.n	8008c3c <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	fab3 f383 	clz	r3, r3
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	210f      	movs	r1, #15
 8008c40:	fa01 f303 	lsl.w	r3, r1, r3
 8008c44:	43db      	mvns	r3, r3
 8008c46:	401a      	ands	r2, r3
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	fa93 f3a3 	rbit	r3, r3
 8008c52:	61fb      	str	r3, [r7, #28]
  return result;
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d101      	bne.n	8008c62 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008c5e:	2320      	movs	r3, #32
 8008c60:	e003      	b.n	8008c6a <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	fab3 f383 	clz	r3, r3
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	6879      	ldr	r1, [r7, #4]
 8008c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c72:	431a      	orrs	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008c78:	bf00      	nop
 8008c7a:	372c      	adds	r7, #44	; 0x2c
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b08b      	sub	sp, #44	; 0x2c
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	0a1b      	lsrs	r3, r3, #8
 8008c98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	fa93 f3a3 	rbit	r3, r3
 8008ca0:	613b      	str	r3, [r7, #16]
  return result;
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d101      	bne.n	8008cb0 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008cac:	2320      	movs	r3, #32
 8008cae:	e003      	b.n	8008cb8 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	fab3 f383 	clz	r3, r3
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	210f      	movs	r1, #15
 8008cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8008cc0:	43db      	mvns	r3, r3
 8008cc2:	401a      	ands	r2, r3
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	0a1b      	lsrs	r3, r3, #8
 8008cc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cca:	6a3b      	ldr	r3, [r7, #32]
 8008ccc:	fa93 f3a3 	rbit	r3, r3
 8008cd0:	61fb      	str	r3, [r7, #28]
  return result;
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d101      	bne.n	8008ce0 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008cdc:	2320      	movs	r3, #32
 8008cde:	e003      	b.n	8008ce8 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce2:	fab3 f383 	clz	r3, r3
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	6879      	ldr	r1, [r7, #4]
 8008cec:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf0:	431a      	orrs	r2, r3
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8008cf6:	bf00      	nop
 8008cf8:	372c      	adds	r7, #44	; 0x2c
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b088      	sub	sp, #32
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	fa93 f3a3 	rbit	r3, r3
 8008d18:	60fb      	str	r3, [r7, #12]
  return result;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <LL_GPIO_Init+0x26>
    return 32U;
 8008d24:	2320      	movs	r3, #32
 8008d26:	e003      	b.n	8008d30 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	fab3 f383 	clz	r3, r3
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8008d32:	e048      	b.n	8008dc6 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	2101      	movs	r1, #1
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8008d40:	4013      	ands	r3, r2
 8008d42:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d03a      	beq.n	8008dc0 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d003      	beq.n	8008d5a <LL_GPIO_Init+0x58>
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	685b      	ldr	r3, [r3, #4]
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d10e      	bne.n	8008d78 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	69b9      	ldr	r1, [r7, #24]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7ff fed7 	bl	8008b16 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	6819      	ldr	r1, [r3, #0]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	461a      	mov	r2, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7ff feb7 	bl	8008ae6 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	69b9      	ldr	r1, [r7, #24]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7ff ff05 	bl	8008b90 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d111      	bne.n	8008db2 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	2bff      	cmp	r3, #255	; 0xff
 8008d92:	d807      	bhi.n	8008da4 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	695b      	ldr	r3, [r3, #20]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	69b9      	ldr	r1, [r7, #24]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7ff ff34 	bl	8008c0a <LL_GPIO_SetAFPin_0_7>
 8008da2:	e006      	b.n	8008db2 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	695b      	ldr	r3, [r3, #20]
 8008da8:	461a      	mov	r2, r3
 8008daa:	69b9      	ldr	r1, [r7, #24]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7ff ff69 	bl	8008c84 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	461a      	mov	r2, r3
 8008db8:	69b9      	ldr	r1, [r7, #24]
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f7ff fe56 	bl	8008a6c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1af      	bne.n	8008d34 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3720      	adds	r7, #32
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <LL_LPUART_IsEnabled>:
{
 8008dde:	b480      	push	{r7}
 8008de0:	b083      	sub	sp, #12
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d101      	bne.n	8008df6 <LL_LPUART_IsEnabled+0x18>
 8008df2:	2301      	movs	r3, #1
 8008df4:	e000      	b.n	8008df8 <LL_LPUART_IsEnabled+0x1a>
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <LL_LPUART_SetStopBitsLength>:
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	605a      	str	r2, [r3, #4]
}
 8008e1e:	bf00      	nop
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <LL_LPUART_SetHWFlowCtrl>:
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	b083      	sub	sp, #12
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	431a      	orrs	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	609a      	str	r2, [r3, #8]
}
 8008e44:	bf00      	nop
 8008e46:	370c      	adds	r7, #12
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <LL_LPUART_SetBaudRate>:
{
 8008e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e54:	b086      	sub	sp, #24
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6178      	str	r0, [r7, #20]
 8008e5a:	6139      	str	r1, [r7, #16]
 8008e5c:	60fa      	str	r2, [r7, #12]
  if (BaudRate != 0U)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d025      	beq.n	8008eb0 <LL_LPUART_SetBaudRate+0x60>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, BaudRate);
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	2200      	movs	r2, #0
 8008e68:	461c      	mov	r4, r3
 8008e6a:	4615      	mov	r5, r2
 8008e6c:	f04f 0200 	mov.w	r2, #0
 8008e70:	f04f 0300 	mov.w	r3, #0
 8008e74:	022b      	lsls	r3, r5, #8
 8008e76:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008e7a:	0222      	lsls	r2, r4, #8
 8008e7c:	68f9      	ldr	r1, [r7, #12]
 8008e7e:	0849      	lsrs	r1, r1, #1
 8008e80:	2000      	movs	r0, #0
 8008e82:	4688      	mov	r8, r1
 8008e84:	4681      	mov	r9, r0
 8008e86:	eb12 0a08 	adds.w	sl, r2, r8
 8008e8a:	eb43 0b09 	adc.w	fp, r3, r9
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	603b      	str	r3, [r7, #0]
 8008e94:	607a      	str	r2, [r7, #4]
 8008e96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e9a:	4650      	mov	r0, sl
 8008e9c:	4659      	mov	r1, fp
 8008e9e:	f7f7 fed3 	bl	8000c48 <__aeabi_uldivmod>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	460b      	mov	r3, r1
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	60da      	str	r2, [r3, #12]
}
 8008eb0:	bf00      	nop
 8008eb2:	3718      	adds	r7, #24
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08008ebc <LL_APB1_GRP2_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_ForceReset(uint32_t Periphs)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8008ec4:	4b05      	ldr	r3, [pc, #20]	; (8008edc <LL_APB1_GRP2_ForceReset+0x20>)
 8008ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ec8:	4904      	ldr	r1, [pc, #16]	; (8008edc <LL_APB1_GRP2_ForceReset+0x20>)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8008ed0:	bf00      	nop
 8008ed2:	370c      	adds	r7, #12
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	40021000 	.word	0x40021000

08008ee0 <LL_APB1_GRP2_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_ReleaseReset(uint32_t Periphs)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8008ee8:	4b06      	ldr	r3, [pc, #24]	; (8008f04 <LL_APB1_GRP2_ReleaseReset+0x24>)
 8008eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	43db      	mvns	r3, r3
 8008ef0:	4904      	ldr	r1, [pc, #16]	; (8008f04 <LL_APB1_GRP2_ReleaseReset+0x24>)
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8008ef6:	bf00      	nop
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	40021000 	.word	0x40021000

08008f08 <LL_LPUART_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_LPUART_DeInit(const USART_TypeDef *LPUARTx)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LPUART_INSTANCE(LPUARTx));

  if (LPUARTx == LPUART1)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a08      	ldr	r2, [pc, #32]	; (8008f38 <LL_LPUART_DeInit+0x30>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d106      	bne.n	8008f2a <LL_LPUART_DeInit+0x22>
  {
    /* Force reset of LPUART peripheral */
    LL_APB1_GRP2_ForceReset(LL_APB1_GRP2_PERIPH_LPUART1);
 8008f1c:	2001      	movs	r0, #1
 8008f1e:	f7ff ffcd 	bl	8008ebc <LL_APB1_GRP2_ForceReset>

    /* Release reset of LPUART peripheral */
    LL_APB1_GRP2_ReleaseReset(LL_APB1_GRP2_PERIPH_LPUART1);
 8008f22:	2001      	movs	r0, #1
 8008f24:	f7ff ffdc 	bl	8008ee0 <LL_APB1_GRP2_ReleaseReset>
 8008f28:	e001      	b.n	8008f2e <LL_LPUART_DeInit+0x26>
  }
  else
  {
    status = ERROR;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	40008000 	.word	0x40008000

08008f3c <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
 8008f44:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f7ff ff47 	bl	8008dde <LL_LPUART_IsEnabled>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d12f      	bne.n	8008fb6 <LL_LPUART_Init+0x7a>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	4b19      	ldr	r3, [pc, #100]	; (8008fc0 <LL_LPUART_Init+0x84>)
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	6851      	ldr	r1, [r2, #4]
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	68d2      	ldr	r2, [r2, #12]
 8008f66:	4311      	orrs	r1, r2
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	6912      	ldr	r2, [r2, #16]
 8008f6c:	430a      	orrs	r2, r1
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f7ff ff42 	bl	8008e04 <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	695b      	ldr	r3, [r3, #20]
 8008f84:	4619      	mov	r1, r3
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7ff ff4f 	bl	8008e2a <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8008f8c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008f90:	f000 f8e2 	bl	8009158 <LL_RCC_GetLPUARTClockFreq>
 8008f94:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00c      	beq.n	8008fb6 <LL_LPUART_Init+0x7a>
        && (LPUART_InitStruct->BaudRate != 0U))
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d008      	beq.n	8008fb6 <LL_LPUART_Init+0x7a>
    {
      status = SUCCESS;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	461a      	mov	r2, r3
 8008fae:	68b9      	ldr	r1, [r7, #8]
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f7ff ff4d 	bl	8008e50 <LL_LPUART_SetBaudRate>
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }

  return (status);
 8008fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	efffe9f3 	.word	0xefffe9f3

08008fc4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8008fc8:	4b07      	ldr	r3, [pc, #28]	; (8008fe8 <LL_RCC_HSI_IsReady+0x24>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fd4:	d101      	bne.n	8008fda <LL_RCC_HSI_IsReady+0x16>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e000      	b.n	8008fdc <LL_RCC_HSI_IsReady+0x18>
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	40021000 	.word	0x40021000

08008fec <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8008fec:	b480      	push	{r7}
 8008fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8008ff0:	4b07      	ldr	r3, [pc, #28]	; (8009010 <LL_RCC_LSE_IsReady+0x24>)
 8008ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ff6:	f003 0302 	and.w	r3, r3, #2
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d101      	bne.n	8009002 <LL_RCC_LSE_IsReady+0x16>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e000      	b.n	8009004 <LL_RCC_LSE_IsReady+0x18>
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	40021000 	.word	0x40021000

08009014 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8009014:	b480      	push	{r7}
 8009016:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8009018:	4b06      	ldr	r3, [pc, #24]	; (8009034 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f003 0308 	and.w	r3, r3, #8
 8009020:	2b08      	cmp	r3, #8
 8009022:	d101      	bne.n	8009028 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8009024:	2301      	movs	r3, #1
 8009026:	e000      	b.n	800902a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	40021000 	.word	0x40021000

08009038 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8009038:	b480      	push	{r7}
 800903a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800903c:	4b04      	ldr	r3, [pc, #16]	; (8009050 <LL_RCC_MSI_GetRange+0x18>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009044:	4618      	mov	r0, r3
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	40021000 	.word	0x40021000

08009054 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8009054:	b480      	push	{r7}
 8009056:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8009058:	4b04      	ldr	r3, [pc, #16]	; (800906c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800905a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800905e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8009062:	4618      	mov	r0, r3
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	40021000 	.word	0x40021000

08009070 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8009070:	b480      	push	{r7}
 8009072:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009074:	4b04      	ldr	r3, [pc, #16]	; (8009088 <LL_RCC_GetSysClkSource+0x18>)
 8009076:	689b      	ldr	r3, [r3, #8]
 8009078:	f003 030c 	and.w	r3, r3, #12
}
 800907c:	4618      	mov	r0, r3
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
 8009086:	bf00      	nop
 8009088:	40021000 	.word	0x40021000

0800908c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009090:	4b04      	ldr	r3, [pc, #16]	; (80090a4 <LL_RCC_GetAHBPrescaler+0x18>)
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8009098:	4618      	mov	r0, r3
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	40021000 	.word	0x40021000

080090a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80090a8:	b480      	push	{r7}
 80090aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80090ac:	4b04      	ldr	r3, [pc, #16]	; (80090c0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	40021000 	.word	0x40021000

080090c4 <LL_RCC_GetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b083      	sub	sp, #12
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80090cc:	4b05      	ldr	r3, [pc, #20]	; (80090e4 <LL_RCC_GetLPUARTClockSource+0x20>)
 80090ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4013      	ands	r3, r2
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr
 80090e2:	bf00      	nop
 80090e4:	40021000 	.word	0x40021000

080090e8 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80090e8:	b480      	push	{r7}
 80090ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80090ec:	4b04      	ldr	r3, [pc, #16]	; (8009100 <LL_RCC_PLL_GetMainSource+0x18>)
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	f003 0303 	and.w	r3, r3, #3
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	40021000 	.word	0x40021000

08009104 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8009104:	b480      	push	{r7}
 8009106:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009108:	4b04      	ldr	r3, [pc, #16]	; (800911c <LL_RCC_PLL_GetN+0x18>)
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	0a1b      	lsrs	r3, r3, #8
 800910e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8009112:	4618      	mov	r0, r3
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	40021000 	.word	0x40021000

08009120 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8009120:	b480      	push	{r7}
 8009122:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8009124:	4b04      	ldr	r3, [pc, #16]	; (8009138 <LL_RCC_PLL_GetR+0x18>)
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800912c:	4618      	mov	r0, r3
 800912e:	46bd      	mov	sp, r7
 8009130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	40021000 	.word	0x40021000

0800913c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800913c:	b480      	push	{r7}
 800913e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009140:	4b04      	ldr	r3, [pc, #16]	; (8009154 <LL_RCC_PLL_GetDivider+0x18>)
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8009148:	4618      	mov	r0, r3
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr
 8009152:	bf00      	nop
 8009154:	40021000 	.word	0x40021000

08009158 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8009160:	2300      	movs	r3, #0
 8009162:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7ff ffad 	bl	80090c4 <LL_RCC_GetLPUARTClockSource>
 800916a:	4603      	mov	r3, r0
 800916c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009170:	d019      	beq.n	80091a6 <LL_RCC_GetLPUARTClockFreq+0x4e>
 8009172:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009176:	d82b      	bhi.n	80091d0 <LL_RCC_GetLPUARTClockFreq+0x78>
 8009178:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800917c:	d00b      	beq.n	8009196 <LL_RCC_GetLPUARTClockFreq+0x3e>
 800917e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009182:	d825      	bhi.n	80091d0 <LL_RCC_GetLPUARTClockFreq+0x78>
 8009184:	2b00      	cmp	r3, #0
 8009186:	d017      	beq.n	80091b8 <LL_RCC_GetLPUARTClockFreq+0x60>
 8009188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800918c:	d120      	bne.n	80091d0 <LL_RCC_GetLPUARTClockFreq+0x78>
  {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      lpuart_frequency = RCC_GetSystemClockFreq();
 800918e:	f000 f82b 	bl	80091e8 <RCC_GetSystemClockFreq>
 8009192:	60f8      	str	r0, [r7, #12]
      break;
 8009194:	e021      	b.n	80091da <LL_RCC_GetLPUARTClockFreq+0x82>

    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() != 0U)
 8009196:	f7ff ff15 	bl	8008fc4 <LL_RCC_HSI_IsReady>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d019      	beq.n	80091d4 <LL_RCC_GetLPUARTClockFreq+0x7c>
      {
        lpuart_frequency = HSI_VALUE;
 80091a0:	4b10      	ldr	r3, [pc, #64]	; (80091e4 <LL_RCC_GetLPUARTClockFreq+0x8c>)
 80091a2:	60fb      	str	r3, [r7, #12]
      }
      break;
 80091a4:	e016      	b.n	80091d4 <LL_RCC_GetLPUARTClockFreq+0x7c>

    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() != 0U)
 80091a6:	f7ff ff21 	bl	8008fec <LL_RCC_LSE_IsReady>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d013      	beq.n	80091d8 <LL_RCC_GetLPUARTClockFreq+0x80>
      {
        lpuart_frequency = LSE_VALUE;
 80091b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091b4:	60fb      	str	r3, [r7, #12]
      }
      break;
 80091b6:	e00f      	b.n	80091d8 <LL_RCC_GetLPUARTClockFreq+0x80>

    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80091b8:	f000 f816 	bl	80091e8 <RCC_GetSystemClockFreq>
 80091bc:	4603      	mov	r3, r0
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 f8a2 	bl	8009308 <RCC_GetHCLKClockFreq>
 80091c4:	4603      	mov	r3, r0
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 f8b4 	bl	8009334 <RCC_GetPCLK1ClockFreq>
 80091cc:	60f8      	str	r0, [r7, #12]
      break;
 80091ce:	e004      	b.n	80091da <LL_RCC_GetLPUARTClockFreq+0x82>

    default:
      break;
 80091d0:	bf00      	nop
 80091d2:	e002      	b.n	80091da <LL_RCC_GetLPUARTClockFreq+0x82>
      break;
 80091d4:	bf00      	nop
 80091d6:	e000      	b.n	80091da <LL_RCC_GetLPUARTClockFreq+0x82>
      break;
 80091d8:	bf00      	nop
  }

  return lpuart_frequency;
 80091da:	68fb      	ldr	r3, [r7, #12]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	00f42400 	.word	0x00f42400

080091e8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b082      	sub	sp, #8
 80091ec:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80091ee:	f7ff ff3f 	bl	8009070 <LL_RCC_GetSysClkSource>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b0c      	cmp	r3, #12
 80091f6:	d851      	bhi.n	800929c <RCC_GetSystemClockFreq+0xb4>
 80091f8:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <RCC_GetSystemClockFreq+0x18>)
 80091fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fe:	bf00      	nop
 8009200:	08009235 	.word	0x08009235
 8009204:	0800929d 	.word	0x0800929d
 8009208:	0800929d 	.word	0x0800929d
 800920c:	0800929d 	.word	0x0800929d
 8009210:	08009289 	.word	0x08009289
 8009214:	0800929d 	.word	0x0800929d
 8009218:	0800929d 	.word	0x0800929d
 800921c:	0800929d 	.word	0x0800929d
 8009220:	0800928f 	.word	0x0800928f
 8009224:	0800929d 	.word	0x0800929d
 8009228:	0800929d 	.word	0x0800929d
 800922c:	0800929d 	.word	0x0800929d
 8009230:	08009295 	.word	0x08009295
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009234:	f7ff feee 	bl	8009014 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d111      	bne.n	8009262 <RCC_GetSystemClockFreq+0x7a>
 800923e:	f7ff fee9 	bl	8009014 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d004      	beq.n	8009252 <RCC_GetSystemClockFreq+0x6a>
 8009248:	f7ff fef6 	bl	8009038 <LL_RCC_MSI_GetRange>
 800924c:	4603      	mov	r3, r0
 800924e:	0a1b      	lsrs	r3, r3, #8
 8009250:	e003      	b.n	800925a <RCC_GetSystemClockFreq+0x72>
 8009252:	f7ff feff 	bl	8009054 <LL_RCC_MSI_GetRangeAfterStandby>
 8009256:	4603      	mov	r3, r0
 8009258:	0a1b      	lsrs	r3, r3, #8
 800925a:	4a28      	ldr	r2, [pc, #160]	; (80092fc <RCC_GetSystemClockFreq+0x114>)
 800925c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009260:	e010      	b.n	8009284 <RCC_GetSystemClockFreq+0x9c>
 8009262:	f7ff fed7 	bl	8009014 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009266:	4603      	mov	r3, r0
 8009268:	2b00      	cmp	r3, #0
 800926a:	d004      	beq.n	8009276 <RCC_GetSystemClockFreq+0x8e>
 800926c:	f7ff fee4 	bl	8009038 <LL_RCC_MSI_GetRange>
 8009270:	4603      	mov	r3, r0
 8009272:	091b      	lsrs	r3, r3, #4
 8009274:	e003      	b.n	800927e <RCC_GetSystemClockFreq+0x96>
 8009276:	f7ff feed 	bl	8009054 <LL_RCC_MSI_GetRangeAfterStandby>
 800927a:	4603      	mov	r3, r0
 800927c:	091b      	lsrs	r3, r3, #4
 800927e:	4a1f      	ldr	r2, [pc, #124]	; (80092fc <RCC_GetSystemClockFreq+0x114>)
 8009280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009284:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8009286:	e033      	b.n	80092f0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8009288:	4b1d      	ldr	r3, [pc, #116]	; (8009300 <RCC_GetSystemClockFreq+0x118>)
 800928a:	607b      	str	r3, [r7, #4]
      break;
 800928c:	e030      	b.n	80092f0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800928e:	4b1d      	ldr	r3, [pc, #116]	; (8009304 <RCC_GetSystemClockFreq+0x11c>)
 8009290:	607b      	str	r3, [r7, #4]
      break;
 8009292:	e02d      	b.n	80092f0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8009294:	f000 f862 	bl	800935c <RCC_PLL_GetFreqDomain_SYS>
 8009298:	6078      	str	r0, [r7, #4]
      break;
 800929a:	e029      	b.n	80092f0 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800929c:	f7ff feba 	bl	8009014 <LL_RCC_MSI_IsEnabledRangeSelect>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d111      	bne.n	80092ca <RCC_GetSystemClockFreq+0xe2>
 80092a6:	f7ff feb5 	bl	8009014 <LL_RCC_MSI_IsEnabledRangeSelect>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d004      	beq.n	80092ba <RCC_GetSystemClockFreq+0xd2>
 80092b0:	f7ff fec2 	bl	8009038 <LL_RCC_MSI_GetRange>
 80092b4:	4603      	mov	r3, r0
 80092b6:	0a1b      	lsrs	r3, r3, #8
 80092b8:	e003      	b.n	80092c2 <RCC_GetSystemClockFreq+0xda>
 80092ba:	f7ff fecb 	bl	8009054 <LL_RCC_MSI_GetRangeAfterStandby>
 80092be:	4603      	mov	r3, r0
 80092c0:	0a1b      	lsrs	r3, r3, #8
 80092c2:	4a0e      	ldr	r2, [pc, #56]	; (80092fc <RCC_GetSystemClockFreq+0x114>)
 80092c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092c8:	e010      	b.n	80092ec <RCC_GetSystemClockFreq+0x104>
 80092ca:	f7ff fea3 	bl	8009014 <LL_RCC_MSI_IsEnabledRangeSelect>
 80092ce:	4603      	mov	r3, r0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d004      	beq.n	80092de <RCC_GetSystemClockFreq+0xf6>
 80092d4:	f7ff feb0 	bl	8009038 <LL_RCC_MSI_GetRange>
 80092d8:	4603      	mov	r3, r0
 80092da:	091b      	lsrs	r3, r3, #4
 80092dc:	e003      	b.n	80092e6 <RCC_GetSystemClockFreq+0xfe>
 80092de:	f7ff feb9 	bl	8009054 <LL_RCC_MSI_GetRangeAfterStandby>
 80092e2:	4603      	mov	r3, r0
 80092e4:	091b      	lsrs	r3, r3, #4
 80092e6:	4a05      	ldr	r2, [pc, #20]	; (80092fc <RCC_GetSystemClockFreq+0x114>)
 80092e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092ec:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80092ee:	bf00      	nop
  }

  return frequency;
 80092f0:	687b      	ldr	r3, [r7, #4]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	0800ce88 	.word	0x0800ce88
 8009300:	00f42400 	.word	0x00f42400
 8009304:	007a1200 	.word	0x007a1200

08009308 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009310:	f7ff febc 	bl	800908c <LL_RCC_GetAHBPrescaler>
 8009314:	4603      	mov	r3, r0
 8009316:	091b      	lsrs	r3, r3, #4
 8009318:	f003 030f 	and.w	r3, r3, #15
 800931c:	4a04      	ldr	r2, [pc, #16]	; (8009330 <RCC_GetHCLKClockFreq+0x28>)
 800931e:	5cd3      	ldrb	r3, [r2, r3]
 8009320:	461a      	mov	r2, r3
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	40d3      	lsrs	r3, r2
}
 8009326:	4618      	mov	r0, r3
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	0800ce70 	.word	0x0800ce70

08009334 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800933c:	f7ff feb4 	bl	80090a8 <LL_RCC_GetAPB1Prescaler>
 8009340:	4603      	mov	r3, r0
 8009342:	0a1b      	lsrs	r3, r3, #8
 8009344:	4a04      	ldr	r2, [pc, #16]	; (8009358 <RCC_GetPCLK1ClockFreq+0x24>)
 8009346:	5cd3      	ldrb	r3, [r2, r3]
 8009348:	461a      	mov	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	40d3      	lsrs	r3, r2
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	0800ce80 	.word	0x0800ce80

0800935c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800935c:	b590      	push	{r4, r7, lr}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8009362:	f7ff fec1 	bl	80090e8 <LL_RCC_PLL_GetMainSource>
 8009366:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	2b03      	cmp	r3, #3
 800936c:	d036      	beq.n	80093dc <RCC_PLL_GetFreqDomain_SYS+0x80>
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b03      	cmp	r3, #3
 8009372:	d836      	bhi.n	80093e2 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	2b01      	cmp	r3, #1
 8009378:	d003      	beq.n	8009382 <RCC_PLL_GetFreqDomain_SYS+0x26>
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	2b02      	cmp	r3, #2
 800937e:	d02a      	beq.n	80093d6 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8009380:	e02f      	b.n	80093e2 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009382:	f7ff fe47 	bl	8009014 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d111      	bne.n	80093b0 <RCC_PLL_GetFreqDomain_SYS+0x54>
 800938c:	f7ff fe42 	bl	8009014 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d004      	beq.n	80093a0 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8009396:	f7ff fe4f 	bl	8009038 <LL_RCC_MSI_GetRange>
 800939a:	4603      	mov	r3, r0
 800939c:	0a1b      	lsrs	r3, r3, #8
 800939e:	e003      	b.n	80093a8 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80093a0:	f7ff fe58 	bl	8009054 <LL_RCC_MSI_GetRangeAfterStandby>
 80093a4:	4603      	mov	r3, r0
 80093a6:	0a1b      	lsrs	r3, r3, #8
 80093a8:	4a2f      	ldr	r2, [pc, #188]	; (8009468 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80093aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093ae:	e010      	b.n	80093d2 <RCC_PLL_GetFreqDomain_SYS+0x76>
 80093b0:	f7ff fe30 	bl	8009014 <LL_RCC_MSI_IsEnabledRangeSelect>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d004      	beq.n	80093c4 <RCC_PLL_GetFreqDomain_SYS+0x68>
 80093ba:	f7ff fe3d 	bl	8009038 <LL_RCC_MSI_GetRange>
 80093be:	4603      	mov	r3, r0
 80093c0:	091b      	lsrs	r3, r3, #4
 80093c2:	e003      	b.n	80093cc <RCC_PLL_GetFreqDomain_SYS+0x70>
 80093c4:	f7ff fe46 	bl	8009054 <LL_RCC_MSI_GetRangeAfterStandby>
 80093c8:	4603      	mov	r3, r0
 80093ca:	091b      	lsrs	r3, r3, #4
 80093cc:	4a26      	ldr	r2, [pc, #152]	; (8009468 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80093ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093d2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80093d4:	e02f      	b.n	8009436 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80093d6:	4b25      	ldr	r3, [pc, #148]	; (800946c <RCC_PLL_GetFreqDomain_SYS+0x110>)
 80093d8:	607b      	str	r3, [r7, #4]
      break;
 80093da:	e02c      	b.n	8009436 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80093dc:	4b24      	ldr	r3, [pc, #144]	; (8009470 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 80093de:	607b      	str	r3, [r7, #4]
      break;
 80093e0:	e029      	b.n	8009436 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80093e2:	f7ff fe17 	bl	8009014 <LL_RCC_MSI_IsEnabledRangeSelect>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d111      	bne.n	8009410 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80093ec:	f7ff fe12 	bl	8009014 <LL_RCC_MSI_IsEnabledRangeSelect>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d004      	beq.n	8009400 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80093f6:	f7ff fe1f 	bl	8009038 <LL_RCC_MSI_GetRange>
 80093fa:	4603      	mov	r3, r0
 80093fc:	0a1b      	lsrs	r3, r3, #8
 80093fe:	e003      	b.n	8009408 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8009400:	f7ff fe28 	bl	8009054 <LL_RCC_MSI_GetRangeAfterStandby>
 8009404:	4603      	mov	r3, r0
 8009406:	0a1b      	lsrs	r3, r3, #8
 8009408:	4a17      	ldr	r2, [pc, #92]	; (8009468 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800940a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800940e:	e010      	b.n	8009432 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8009410:	f7ff fe00 	bl	8009014 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d004      	beq.n	8009424 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 800941a:	f7ff fe0d 	bl	8009038 <LL_RCC_MSI_GetRange>
 800941e:	4603      	mov	r3, r0
 8009420:	091b      	lsrs	r3, r3, #4
 8009422:	e003      	b.n	800942c <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8009424:	f7ff fe16 	bl	8009054 <LL_RCC_MSI_GetRangeAfterStandby>
 8009428:	4603      	mov	r3, r0
 800942a:	091b      	lsrs	r3, r3, #4
 800942c:	4a0e      	ldr	r2, [pc, #56]	; (8009468 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800942e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009432:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8009434:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009436:	f7ff fe81 	bl	800913c <LL_RCC_PLL_GetDivider>
 800943a:	4603      	mov	r3, r0
 800943c:	091b      	lsrs	r3, r3, #4
 800943e:	3301      	adds	r3, #1
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	fbb2 f4f3 	udiv	r4, r2, r3
 8009446:	f7ff fe5d 	bl	8009104 <LL_RCC_PLL_GetN>
 800944a:	4603      	mov	r3, r0
 800944c:	fb03 f404 	mul.w	r4, r3, r4
 8009450:	f7ff fe66 	bl	8009120 <LL_RCC_PLL_GetR>
 8009454:	4603      	mov	r3, r0
 8009456:	0e5b      	lsrs	r3, r3, #25
 8009458:	3301      	adds	r3, #1
 800945a:	005b      	lsls	r3, r3, #1
 800945c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8009460:	4618      	mov	r0, r3
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	bd90      	pop	{r4, r7, pc}
 8009468:	0800ce88 	.word	0x0800ce88
 800946c:	00f42400 	.word	0x00f42400
 8009470:	007a1200 	.word	0x007a1200

08009474 <LCD_Power>:
static void lcd_clear(void); 			//Clear Display
static bool lcd_hasData();
static uint8_t lcd_writeChar(uint8_t x, uint8_t y, uint8_t c);

//Functions
lcd_State_enum LCD_Power() {
 8009474:	b580      	push	{r7, lr}
 8009476:	af00      	add	r7, sp, #0
	switch (lcd_state) {
 8009478:	4b33      	ldr	r3, [pc, #204]	; (8009548 <LCD_Power+0xd4>)
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b04      	cmp	r3, #4
 8009480:	d85c      	bhi.n	800953c <LCD_Power+0xc8>
 8009482:	a201      	add	r2, pc, #4	; (adr r2, 8009488 <LCD_Power+0x14>)
 8009484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009488:	0800949d 	.word	0x0800949d
 800948c:	080094c3 	.word	0x080094c3
 8009490:	08009511 	.word	0x08009511
 8009494:	0800953d 	.word	0x0800953d
 8009498:	0800953d 	.word	0x0800953d
	case LCD_OFF:
		if (superCapmV >= mV_LCD_SLOW) {
 800949c:	4b2b      	ldr	r3, [pc, #172]	; (800954c <LCD_Power+0xd8>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d944      	bls.n	8009532 <LCD_Power+0xbe>
			//Turn on LCD
			lcd_state = LCD_READY;
 80094a8:	4b27      	ldr	r3, [pc, #156]	; (8009548 <LCD_Power+0xd4>)
 80094aa:	2202      	movs	r2, #2
 80094ac:	701a      	strb	r2, [r3, #0]
			//HAL_LPTIM_PWM_Start(&hlptim1, 2047, 1023); //32768 DIV16 DIV2048 1HZ
			HAL_GPIO_WritePin(DISP_EN_GPIO_Port, DISP_EN_Pin, GPIO_PIN_SET);
 80094ae:	2201      	movs	r2, #1
 80094b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80094b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80094b8:	f7fc fec4 	bl	8006244 <HAL_GPIO_WritePin>
			lcd_clear();
 80094bc:	f000 fa3e 	bl	800993c <lcd_clear>
		}
		break;
 80094c0:	e037      	b.n	8009532 <LCD_Power+0xbe>
	case LCD_TIMER:
		if (superCapmV < mV_LCD_OFF) {
 80094c2:	4b22      	ldr	r3, [pc, #136]	; (800954c <LCD_Power+0xd8>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f640 2227 	movw	r2, #2599	; 0xa27
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d80a      	bhi.n	80094e4 <LCD_Power+0x70>
			lcd_state = LCD_OFF;
 80094ce:	4b1e      	ldr	r3, [pc, #120]	; (8009548 <LCD_Power+0xd4>)
 80094d0:	2200      	movs	r2, #0
 80094d2:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DISP_EN_GPIO_Port, DISP_EN_Pin, GPIO_PIN_RESET);
 80094d4:	2200      	movs	r2, #0
 80094d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80094da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80094de:	f7fc feb1 	bl	8006244 <HAL_GPIO_WritePin>
		} else if ((superCapmV >= mV_LCD_FAST) && (guiTimer >= LCD_RATE_FAST)) {
			lcd_state = LCD_READY;
		} else if (guiTimer >= LCD_RATE_SLOW) {
			lcd_state = LCD_READY;
		}
		break;
 80094e2:	e028      	b.n	8009536 <LCD_Power+0xc2>
		} else if ((superCapmV >= mV_LCD_FAST) && (guiTimer >= LCD_RATE_FAST)) {
 80094e4:	4b19      	ldr	r3, [pc, #100]	; (800954c <LCD_Power+0xd8>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f640 42e3 	movw	r2, #3299	; 0xce3
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d907      	bls.n	8009500 <LCD_Power+0x8c>
 80094f0:	4b17      	ldr	r3, [pc, #92]	; (8009550 <LCD_Power+0xdc>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d003      	beq.n	8009500 <LCD_Power+0x8c>
			lcd_state = LCD_READY;
 80094f8:	4b13      	ldr	r3, [pc, #76]	; (8009548 <LCD_Power+0xd4>)
 80094fa:	2202      	movs	r2, #2
 80094fc:	701a      	strb	r2, [r3, #0]
		break;
 80094fe:	e01a      	b.n	8009536 <LCD_Power+0xc2>
		} else if (guiTimer >= LCD_RATE_SLOW) {
 8009500:	4b13      	ldr	r3, [pc, #76]	; (8009550 <LCD_Power+0xdc>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b0e      	cmp	r3, #14
 8009506:	d916      	bls.n	8009536 <LCD_Power+0xc2>
			lcd_state = LCD_READY;
 8009508:	4b0f      	ldr	r3, [pc, #60]	; (8009548 <LCD_Power+0xd4>)
 800950a:	2202      	movs	r2, #2
 800950c:	701a      	strb	r2, [r3, #0]
		break;
 800950e:	e012      	b.n	8009536 <LCD_Power+0xc2>
	case LCD_READY:
		if (superCapmV < mV_LCD_OFF) {
 8009510:	4b0e      	ldr	r3, [pc, #56]	; (800954c <LCD_Power+0xd8>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f640 2227 	movw	r2, #2599	; 0xa27
 8009518:	4293      	cmp	r3, r2
 800951a:	d80e      	bhi.n	800953a <LCD_Power+0xc6>
			lcd_state = LCD_OFF;
 800951c:	4b0a      	ldr	r3, [pc, #40]	; (8009548 <LCD_Power+0xd4>)
 800951e:	2200      	movs	r2, #0
 8009520:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DISP_EN_GPIO_Port, DISP_EN_Pin, GPIO_PIN_RESET);
 8009522:	2200      	movs	r2, #0
 8009524:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800952c:	f7fc fe8a 	bl	8006244 <HAL_GPIO_WritePin>
		}
		break;
 8009530:	e003      	b.n	800953a <LCD_Power+0xc6>
		break;
 8009532:	bf00      	nop
 8009534:	e002      	b.n	800953c <LCD_Power+0xc8>
		break;
 8009536:	bf00      	nop
 8009538:	e000      	b.n	800953c <LCD_Power+0xc8>
		break;
 800953a:	bf00      	nop
	case LCD_SENDING_DATA:
	case LCD_SENDING_CLR:
		break;
	}
	return lcd_state;
 800953c:	4b02      	ldr	r3, [pc, #8]	; (8009548 <LCD_Power+0xd4>)
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	b2db      	uxtb	r3, r3
}
 8009542:	4618      	mov	r0, r3
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20000d8c 	.word	0x20000d8c
 800954c:	2000037c 	.word	0x2000037c
 8009550:	20000390 	.word	0x20000390

08009554 <lcd_SetCursor>:

void lcd_SetCursor(uint8_t x, uint8_t y) {
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	460a      	mov	r2, r1
 800955e:	71fb      	strb	r3, [r7, #7]
 8009560:	4613      	mov	r3, r2
 8009562:	71bb      	strb	r3, [r7, #6]
	cursor_x = x;
 8009564:	79fb      	ldrb	r3, [r7, #7]
 8009566:	b29a      	uxth	r2, r3
 8009568:	4b05      	ldr	r3, [pc, #20]	; (8009580 <lcd_SetCursor+0x2c>)
 800956a:	801a      	strh	r2, [r3, #0]
	cursor_y = y;
 800956c:	79bb      	ldrb	r3, [r7, #6]
 800956e:	b29a      	uxth	r2, r3
 8009570:	4b04      	ldr	r3, [pc, #16]	; (8009584 <lcd_SetCursor+0x30>)
 8009572:	801a      	strh	r2, [r3, #0]
}
 8009574:	bf00      	nop
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr
 8009580:	20000d86 	.word	0x20000d86
 8009584:	20000d84 	.word	0x20000d84

08009588 <lcd_SetFont>:

void lcd_SetFont(GFXfont *f) {
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
	gfxFontPtr = (GFXfont*) f;
 8009590:	4a04      	ldr	r2, [pc, #16]	; (80095a4 <lcd_SetFont+0x1c>)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6013      	str	r3, [r2, #0]
}
 8009596:	bf00      	nop
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	20000d88 	.word	0x20000d88

080095a8 <lcd_writeChar>:

uint8_t lcd_writeChar(uint8_t x, uint8_t y, uint8_t c) {
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b088      	sub	sp, #32
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	4603      	mov	r3, r0
 80095b0:	71fb      	strb	r3, [r7, #7]
 80095b2:	460b      	mov	r3, r1
 80095b4:	71bb      	strb	r3, [r7, #6]
 80095b6:	4613      	mov	r3, r2
 80095b8:	717b      	strb	r3, [r7, #5]
	if (c >= (uint8_t) gfxFontPtr->first && c <= (uint8_t) gfxFontPtr->last) { //Char present in this font?
 80095ba:	4b40      	ldr	r3, [pc, #256]	; (80096bc <lcd_writeChar+0x114>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	891b      	ldrh	r3, [r3, #8]
 80095c0:	b2db      	uxtb	r3, r3
 80095c2:	797a      	ldrb	r2, [r7, #5]
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d374      	bcc.n	80096b2 <lcd_writeChar+0x10a>
 80095c8:	4b3c      	ldr	r3, [pc, #240]	; (80096bc <lcd_writeChar+0x114>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	895b      	ldrh	r3, [r3, #10]
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	797a      	ldrb	r2, [r7, #5]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d86d      	bhi.n	80096b2 <lcd_writeChar+0x10a>
		c -= (uint8_t) (gfxFontPtr->first);
 80095d6:	4b39      	ldr	r3, [pc, #228]	; (80096bc <lcd_writeChar+0x114>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	891b      	ldrh	r3, [r3, #8]
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	797a      	ldrb	r2, [r7, #5]
 80095e0:	1ad3      	subs	r3, r2, r3
 80095e2:	717b      	strb	r3, [r7, #5]
		GFXglyph glyph = gfxFontPtr->glyph[c];
 80095e4:	4b35      	ldr	r3, [pc, #212]	; (80096bc <lcd_writeChar+0x114>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	685a      	ldr	r2, [r3, #4]
 80095ea:	797b      	ldrb	r3, [r7, #5]
 80095ec:	00db      	lsls	r3, r3, #3
 80095ee:	441a      	add	r2, r3
 80095f0:	f107 0308 	add.w	r3, r7, #8
 80095f4:	6810      	ldr	r0, [r2, #0]
 80095f6:	6851      	ldr	r1, [r2, #4]
 80095f8:	c303      	stmia	r3!, {r0, r1}
		uint8_t *bitmap = gfxFontPtr->bitmap;
 80095fa:	4b30      	ldr	r3, [pc, #192]	; (80096bc <lcd_writeChar+0x114>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	617b      	str	r3, [r7, #20]

		uint16_t bo = glyph.bitmapOffset;
 8009602:	893b      	ldrh	r3, [r7, #8]
 8009604:	83fb      	strh	r3, [r7, #30]
		uint8_t w = glyph.width, h = glyph.height;
 8009606:	7abb      	ldrb	r3, [r7, #10]
 8009608:	74fb      	strb	r3, [r7, #19]
 800960a:	7afb      	ldrb	r3, [r7, #11]
 800960c:	74bb      	strb	r3, [r7, #18]
		int8_t xo = glyph.xOffset, yo = glyph.yOffset;
 800960e:	7b7b      	ldrb	r3, [r7, #13]
 8009610:	747b      	strb	r3, [r7, #17]
 8009612:	7bbb      	ldrb	r3, [r7, #14]
 8009614:	743b      	strb	r3, [r7, #16]
		uint8_t xx, yy, bits = 0, bit = 0;
 8009616:	2300      	movs	r3, #0
 8009618:	76fb      	strb	r3, [r7, #27]
 800961a:	2300      	movs	r3, #0
 800961c:	76bb      	strb	r3, [r7, #26]

		for (yy = 0; yy < h; yy++) {
 800961e:	2300      	movs	r3, #0
 8009620:	773b      	strb	r3, [r7, #28]
 8009622:	e040      	b.n	80096a6 <lcd_writeChar+0xfe>
			for (xx = 0; xx < w; xx++) {
 8009624:	2300      	movs	r3, #0
 8009626:	777b      	strb	r3, [r7, #29]
 8009628:	e036      	b.n	8009698 <lcd_writeChar+0xf0>
				if (!(bit++ & 7)) {
 800962a:	7ebb      	ldrb	r3, [r7, #26]
 800962c:	1c5a      	adds	r2, r3, #1
 800962e:	76ba      	strb	r2, [r7, #26]
 8009630:	f003 0307 	and.w	r3, r3, #7
 8009634:	2b00      	cmp	r3, #0
 8009636:	d107      	bne.n	8009648 <lcd_writeChar+0xa0>
					bits = bitmap[bo++];
 8009638:	8bfb      	ldrh	r3, [r7, #30]
 800963a:	1c5a      	adds	r2, r3, #1
 800963c:	83fa      	strh	r2, [r7, #30]
 800963e:	461a      	mov	r2, r3
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	4413      	add	r3, r2
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	76fb      	strb	r3, [r7, #27]
				}
				if (bits & 0x80) {
 8009648:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800964c:	2b00      	cmp	r3, #0
 800964e:	da1d      	bge.n	800968c <lcd_writeChar+0xe4>
					lcd_drawPixel(x + xo + xx, y + yo + yy, LCD_BLACK);
 8009650:	79fb      	ldrb	r3, [r7, #7]
 8009652:	b21a      	sxth	r2, r3
 8009654:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8009658:	b21b      	sxth	r3, r3
 800965a:	4413      	add	r3, r2
 800965c:	b21b      	sxth	r3, r3
 800965e:	b29a      	uxth	r2, r3
 8009660:	7f7b      	ldrb	r3, [r7, #29]
 8009662:	b29b      	uxth	r3, r3
 8009664:	4413      	add	r3, r2
 8009666:	b29b      	uxth	r3, r3
 8009668:	b218      	sxth	r0, r3
 800966a:	79bb      	ldrb	r3, [r7, #6]
 800966c:	b21a      	sxth	r2, r3
 800966e:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8009672:	b21b      	sxth	r3, r3
 8009674:	4413      	add	r3, r2
 8009676:	b21b      	sxth	r3, r3
 8009678:	b29a      	uxth	r2, r3
 800967a:	7f3b      	ldrb	r3, [r7, #28]
 800967c:	b29b      	uxth	r3, r3
 800967e:	4413      	add	r3, r2
 8009680:	b29b      	uxth	r3, r3
 8009682:	b21b      	sxth	r3, r3
 8009684:	2200      	movs	r2, #0
 8009686:	4619      	mov	r1, r3
 8009688:	f000 f868 	bl	800975c <lcd_drawPixel>
				}
				bits <<= 1;
 800968c:	7efb      	ldrb	r3, [r7, #27]
 800968e:	005b      	lsls	r3, r3, #1
 8009690:	76fb      	strb	r3, [r7, #27]
			for (xx = 0; xx < w; xx++) {
 8009692:	7f7b      	ldrb	r3, [r7, #29]
 8009694:	3301      	adds	r3, #1
 8009696:	777b      	strb	r3, [r7, #29]
 8009698:	7f7a      	ldrb	r2, [r7, #29]
 800969a:	7cfb      	ldrb	r3, [r7, #19]
 800969c:	429a      	cmp	r2, r3
 800969e:	d3c4      	bcc.n	800962a <lcd_writeChar+0x82>
		for (yy = 0; yy < h; yy++) {
 80096a0:	7f3b      	ldrb	r3, [r7, #28]
 80096a2:	3301      	adds	r3, #1
 80096a4:	773b      	strb	r3, [r7, #28]
 80096a6:	7f3a      	ldrb	r2, [r7, #28]
 80096a8:	7cbb      	ldrb	r3, [r7, #18]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d3ba      	bcc.n	8009624 <lcd_writeChar+0x7c>
			}
		}
		return (uint8_t) glyph.xAdvance; //Advance cursor
 80096ae:	7b3b      	ldrb	r3, [r7, #12]
 80096b0:	e000      	b.n	80096b4 <lcd_writeChar+0x10c>
	}
	return 0;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3720      	adds	r7, #32
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	20000d88 	.word	0x20000d88

080096c0 <lcd_print>:

void lcd_print(int n) {
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
	uint8_t bufPointer = 0;
 80096c8:	2300      	movs	r3, #0
 80096ca:	73fb      	strb	r3, [r7, #15]
	while (bufPointer < n) {
 80096cc:	e016      	b.n	80096fc <lcd_print+0x3c>
		cursor_x += lcd_writeChar(cursor_x, cursor_y, strbuffer[bufPointer++]);
 80096ce:	4b10      	ldr	r3, [pc, #64]	; (8009710 <lcd_print+0x50>)
 80096d0:	881b      	ldrh	r3, [r3, #0]
 80096d2:	b2d8      	uxtb	r0, r3
 80096d4:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <lcd_print+0x54>)
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	b2d9      	uxtb	r1, r3
 80096da:	7bfb      	ldrb	r3, [r7, #15]
 80096dc:	1c5a      	adds	r2, r3, #1
 80096de:	73fa      	strb	r2, [r7, #15]
 80096e0:	461a      	mov	r2, r3
 80096e2:	4b0d      	ldr	r3, [pc, #52]	; (8009718 <lcd_print+0x58>)
 80096e4:	5c9b      	ldrb	r3, [r3, r2]
 80096e6:	461a      	mov	r2, r3
 80096e8:	f7ff ff5e 	bl	80095a8 <lcd_writeChar>
 80096ec:	4603      	mov	r3, r0
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	4b07      	ldr	r3, [pc, #28]	; (8009710 <lcd_print+0x50>)
 80096f2:	881b      	ldrh	r3, [r3, #0]
 80096f4:	4413      	add	r3, r2
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	4b05      	ldr	r3, [pc, #20]	; (8009710 <lcd_print+0x50>)
 80096fa:	801a      	strh	r2, [r3, #0]
	while (bufPointer < n) {
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	429a      	cmp	r2, r3
 8009702:	dce4      	bgt.n	80096ce <lcd_print+0xe>
	}
}
 8009704:	bf00      	nop
 8009706:	bf00      	nop
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	20000d86 	.word	0x20000d86
 8009714:	20000d84 	.word	0x20000d84
 8009718:	20000d70 	.word	0x20000d70

0800971c <lcd_print_char>:

void lcd_print_char(uint8_t theChar) {
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	4603      	mov	r3, r0
 8009724:	71fb      	strb	r3, [r7, #7]
	cursor_x += lcd_writeChar(cursor_x, cursor_y, theChar);
 8009726:	4b0b      	ldr	r3, [pc, #44]	; (8009754 <lcd_print_char+0x38>)
 8009728:	881b      	ldrh	r3, [r3, #0]
 800972a:	b2db      	uxtb	r3, r3
 800972c:	4a0a      	ldr	r2, [pc, #40]	; (8009758 <lcd_print_char+0x3c>)
 800972e:	8812      	ldrh	r2, [r2, #0]
 8009730:	b2d1      	uxtb	r1, r2
 8009732:	79fa      	ldrb	r2, [r7, #7]
 8009734:	4618      	mov	r0, r3
 8009736:	f7ff ff37 	bl	80095a8 <lcd_writeChar>
 800973a:	4603      	mov	r3, r0
 800973c:	b29a      	uxth	r2, r3
 800973e:	4b05      	ldr	r3, [pc, #20]	; (8009754 <lcd_print_char+0x38>)
 8009740:	881b      	ldrh	r3, [r3, #0]
 8009742:	4413      	add	r3, r2
 8009744:	b29a      	uxth	r2, r3
 8009746:	4b03      	ldr	r3, [pc, #12]	; (8009754 <lcd_print_char+0x38>)
 8009748:	801a      	strh	r2, [r3, #0]
}
 800974a:	bf00      	nop
 800974c:	3708      	adds	r7, #8
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
 8009752:	bf00      	nop
 8009754:	20000d86 	.word	0x20000d86
 8009758:	20000d84 	.word	0x20000d84

0800975c <lcd_drawPixel>:

void lcd_drawPixel(int16_t x, int16_t y, uint8_t bDraw) {
 800975c:	b490      	push	{r4, r7}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	80fb      	strh	r3, [r7, #6]
 8009766:	460b      	mov	r3, r1
 8009768:	80bb      	strh	r3, [r7, #4]
 800976a:	4613      	mov	r3, r2
 800976c:	70fb      	strb	r3, [r7, #3]
	if (x < 0 || y < 0 || x >= LCD_RES_PX_X || y >= LCD_RES_PX_Y)
 800976e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009772:	2b00      	cmp	r3, #0
 8009774:	db61      	blt.n	800983a <lcd_drawPixel+0xde>
 8009776:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	db5d      	blt.n	800983a <lcd_drawPixel+0xde>
 800977e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009782:	2b7f      	cmp	r3, #127	; 0x7f
 8009784:	dc59      	bgt.n	800983a <lcd_drawPixel+0xde>
 8009786:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800978a:	2b7f      	cmp	r3, #127	; 0x7f
 800978c:	dc55      	bgt.n	800983a <lcd_drawPixel+0xde>
		return;

	uint8_t XbitInByte = (0x01 << (x % 8));
 800978e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009792:	425a      	negs	r2, r3
 8009794:	f003 0307 	and.w	r3, r3, #7
 8009798:	f002 0207 	and.w	r2, r2, #7
 800979c:	bf58      	it	pl
 800979e:	4253      	negpl	r3, r2
 80097a0:	b21b      	sxth	r3, r3
 80097a2:	461a      	mov	r2, r3
 80097a4:	2301      	movs	r3, #1
 80097a6:	4093      	lsls	r3, r2
 80097a8:	73fb      	strb	r3, [r7, #15]
	uint8_t xx = (x / 8) + 1; //X byte in array
 80097aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	da00      	bge.n	80097b4 <lcd_drawPixel+0x58>
 80097b2:	3307      	adds	r3, #7
 80097b4:	10db      	asrs	r3, r3, #3
 80097b6:	b21b      	sxth	r3, r3
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	3301      	adds	r3, #1
 80097bc:	73bb      	strb	r3, [r7, #14]
	if (bDraw == LCD_WHITE) { //Set bit
 80097be:	78fb      	ldrb	r3, [r7, #3]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d11a      	bne.n	80097fa <lcd_drawPixel+0x9e>
		LCD_BUFFER[y][xx] |= XbitInByte; 	//set bit
 80097c4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80097c8:	7bb9      	ldrb	r1, [r7, #14]
 80097ca:	481e      	ldr	r0, [pc, #120]	; (8009844 <lcd_drawPixel+0xe8>)
 80097cc:	4613      	mov	r3, r2
 80097ce:	00db      	lsls	r3, r3, #3
 80097d0:	4413      	add	r3, r2
 80097d2:	005b      	lsls	r3, r3, #1
 80097d4:	4403      	add	r3, r0
 80097d6:	440b      	add	r3, r1
 80097d8:	7818      	ldrb	r0, [r3, #0]
 80097da:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80097de:	7bb9      	ldrb	r1, [r7, #14]
 80097e0:	7bfb      	ldrb	r3, [r7, #15]
 80097e2:	4303      	orrs	r3, r0
 80097e4:	b2dc      	uxtb	r4, r3
 80097e6:	4817      	ldr	r0, [pc, #92]	; (8009844 <lcd_drawPixel+0xe8>)
 80097e8:	4613      	mov	r3, r2
 80097ea:	00db      	lsls	r3, r3, #3
 80097ec:	4413      	add	r3, r2
 80097ee:	005b      	lsls	r3, r3, #1
 80097f0:	4403      	add	r3, r0
 80097f2:	440b      	add	r3, r1
 80097f4:	4622      	mov	r2, r4
 80097f6:	701a      	strb	r2, [r3, #0]
 80097f8:	e020      	b.n	800983c <lcd_drawPixel+0xe0>
	} else {
		LCD_BUFFER[y][xx] &= ~XbitInByte; //clear bit
 80097fa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80097fe:	7bb9      	ldrb	r1, [r7, #14]
 8009800:	4810      	ldr	r0, [pc, #64]	; (8009844 <lcd_drawPixel+0xe8>)
 8009802:	4613      	mov	r3, r2
 8009804:	00db      	lsls	r3, r3, #3
 8009806:	4413      	add	r3, r2
 8009808:	005b      	lsls	r3, r3, #1
 800980a:	4403      	add	r3, r0
 800980c:	440b      	add	r3, r1
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	b25a      	sxtb	r2, r3
 8009812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009816:	43db      	mvns	r3, r3
 8009818:	b25b      	sxtb	r3, r3
 800981a:	4013      	ands	r3, r2
 800981c:	b25b      	sxtb	r3, r3
 800981e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009822:	7bb9      	ldrb	r1, [r7, #14]
 8009824:	b2dc      	uxtb	r4, r3
 8009826:	4807      	ldr	r0, [pc, #28]	; (8009844 <lcd_drawPixel+0xe8>)
 8009828:	4613      	mov	r3, r2
 800982a:	00db      	lsls	r3, r3, #3
 800982c:	4413      	add	r3, r2
 800982e:	005b      	lsls	r3, r3, #1
 8009830:	4403      	add	r3, r0
 8009832:	440b      	add	r3, r1
 8009834:	4622      	mov	r2, r4
 8009836:	701a      	strb	r2, [r3, #0]
 8009838:	e000      	b.n	800983c <lcd_drawPixel+0xe0>
		return;
 800983a:	bf00      	nop
	}
}
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bc90      	pop	{r4, r7}
 8009842:	4770      	bx	lr
 8009844:	20000470 	.word	0x20000470

08009848 <lcd_drawLine>:

void lcd_drawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
 8009848:	b590      	push	{r4, r7, lr}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	4604      	mov	r4, r0
 8009850:	4608      	mov	r0, r1
 8009852:	4611      	mov	r1, r2
 8009854:	461a      	mov	r2, r3
 8009856:	4623      	mov	r3, r4
 8009858:	71fb      	strb	r3, [r7, #7]
 800985a:	4603      	mov	r3, r0
 800985c:	71bb      	strb	r3, [r7, #6]
 800985e:	460b      	mov	r3, r1
 8009860:	717b      	strb	r3, [r7, #5]
 8009862:	4613      	mov	r3, r2
 8009864:	713b      	strb	r3, [r7, #4]
	if (x0 == x1) {
 8009866:	79fa      	ldrb	r2, [r7, #7]
 8009868:	797b      	ldrb	r3, [r7, #5]
 800986a:	429a      	cmp	r2, r3
 800986c:	d113      	bne.n	8009896 <lcd_drawLine+0x4e>
		//Vertical Line
		for (uint8_t i = y0; i <= y1; i++) {
 800986e:	79bb      	ldrb	r3, [r7, #6]
 8009870:	73fb      	strb	r3, [r7, #15]
 8009872:	e00b      	b.n	800988c <lcd_drawLine+0x44>
			lcd_drawPixel(x0, i, color);
 8009874:	79fb      	ldrb	r3, [r7, #7]
 8009876:	b21b      	sxth	r3, r3
 8009878:	7bfa      	ldrb	r2, [r7, #15]
 800987a:	b211      	sxth	r1, r2
 800987c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009880:	4618      	mov	r0, r3
 8009882:	f7ff ff6b 	bl	800975c <lcd_drawPixel>
		for (uint8_t i = y0; i <= y1; i++) {
 8009886:	7bfb      	ldrb	r3, [r7, #15]
 8009888:	3301      	adds	r3, #1
 800988a:	73fb      	strb	r3, [r7, #15]
 800988c:	7bfa      	ldrb	r2, [r7, #15]
 800988e:	793b      	ldrb	r3, [r7, #4]
 8009890:	429a      	cmp	r2, r3
 8009892:	d9ef      	bls.n	8009874 <lcd_drawLine+0x2c>
			lcd_drawPixel(i, y0, color);
		}
	} else {
		//Angled line
	}
}
 8009894:	e016      	b.n	80098c4 <lcd_drawLine+0x7c>
	} else if (y0 == y1) {
 8009896:	79ba      	ldrb	r2, [r7, #6]
 8009898:	793b      	ldrb	r3, [r7, #4]
 800989a:	429a      	cmp	r2, r3
 800989c:	d112      	bne.n	80098c4 <lcd_drawLine+0x7c>
		for (uint8_t i = x0; i <= x1; i++) {
 800989e:	79fb      	ldrb	r3, [r7, #7]
 80098a0:	73bb      	strb	r3, [r7, #14]
 80098a2:	e00b      	b.n	80098bc <lcd_drawLine+0x74>
			lcd_drawPixel(i, y0, color);
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	b21b      	sxth	r3, r3
 80098a8:	79ba      	ldrb	r2, [r7, #6]
 80098aa:	b211      	sxth	r1, r2
 80098ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7ff ff53 	bl	800975c <lcd_drawPixel>
		for (uint8_t i = x0; i <= x1; i++) {
 80098b6:	7bbb      	ldrb	r3, [r7, #14]
 80098b8:	3301      	adds	r3, #1
 80098ba:	73bb      	strb	r3, [r7, #14]
 80098bc:	7bba      	ldrb	r2, [r7, #14]
 80098be:	797b      	ldrb	r3, [r7, #5]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d9ef      	bls.n	80098a4 <lcd_drawLine+0x5c>
}
 80098c4:	bf00      	nop
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd90      	pop	{r4, r7, pc}

080098cc <lcd_clearLines>:
	for (uint8_t i = 0; i < h; i++) {
		lcd_drawLine(x, y + i, x + w, y + i, color);
	}
}

void lcd_clearLines(uint8_t y0, uint8_t y1) {
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	4603      	mov	r3, r0
 80098d4:	460a      	mov	r2, r1
 80098d6:	71fb      	strb	r3, [r7, #7]
 80098d8:	4613      	mov	r3, r2
 80098da:	71bb      	strb	r3, [r7, #6]
	//Clear lines for writing
	while (y0 <= y1) {
 80098dc:	e020      	b.n	8009920 <lcd_clearLines+0x54>
		for (uint8_t xByte = 1; xByte < (LCD_RES_PX_X_b - 1); xByte++) {
 80098de:	2301      	movs	r3, #1
 80098e0:	73fb      	strb	r3, [r7, #15]
 80098e2:	e00d      	b.n	8009900 <lcd_clearLines+0x34>
			LCD_BUFFER[y0][xByte] = 0xff; 	//Clear line
 80098e4:	79fa      	ldrb	r2, [r7, #7]
 80098e6:	7bf9      	ldrb	r1, [r7, #15]
 80098e8:	4813      	ldr	r0, [pc, #76]	; (8009938 <lcd_clearLines+0x6c>)
 80098ea:	4613      	mov	r3, r2
 80098ec:	00db      	lsls	r3, r3, #3
 80098ee:	4413      	add	r3, r2
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	4403      	add	r3, r0
 80098f4:	440b      	add	r3, r1
 80098f6:	22ff      	movs	r2, #255	; 0xff
 80098f8:	701a      	strb	r2, [r3, #0]
		for (uint8_t xByte = 1; xByte < (LCD_RES_PX_X_b - 1); xByte++) {
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
 80098fc:	3301      	adds	r3, #1
 80098fe:	73fb      	strb	r3, [r7, #15]
 8009900:	7bfb      	ldrb	r3, [r7, #15]
 8009902:	2b10      	cmp	r3, #16
 8009904:	d9ee      	bls.n	80098e4 <lcd_clearLines+0x18>
		}
		LCD_BUFFER[y0][LCD_RES_PX_X_b - 1] = 0x00; 		//transmit this line
 8009906:	79fa      	ldrb	r2, [r7, #7]
 8009908:	490b      	ldr	r1, [pc, #44]	; (8009938 <lcd_clearLines+0x6c>)
 800990a:	4613      	mov	r3, r2
 800990c:	00db      	lsls	r3, r3, #3
 800990e:	4413      	add	r3, r2
 8009910:	005b      	lsls	r3, r3, #1
 8009912:	440b      	add	r3, r1
 8009914:	3311      	adds	r3, #17
 8009916:	2200      	movs	r2, #0
 8009918:	701a      	strb	r2, [r3, #0]
		y0++;
 800991a:	79fb      	ldrb	r3, [r7, #7]
 800991c:	3301      	adds	r3, #1
 800991e:	71fb      	strb	r3, [r7, #7]
	while (y0 <= y1) {
 8009920:	79fa      	ldrb	r2, [r7, #7]
 8009922:	79bb      	ldrb	r3, [r7, #6]
 8009924:	429a      	cmp	r2, r3
 8009926:	d9da      	bls.n	80098de <lcd_clearLines+0x12>
	}
}
 8009928:	bf00      	nop
 800992a:	bf00      	nop
 800992c:	3714      	adds	r7, #20
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	20000470 	.word	0x20000470

0800993c <lcd_clear>:
void lcd_setRotation(uint8_t newRot) {
	if (rotation <= 3)
		rotation = newRot;
}

void lcd_clear(void) {
 800993c:	b590      	push	{r4, r7, lr}
 800993e:	b083      	sub	sp, #12
 8009940:	af00      	add	r7, sp, #0
	uint8_t clearBuffer[] = { MLCD_CM, MLCD_TR };
 8009942:	2304      	movs	r3, #4
 8009944:	713b      	strb	r3, [r7, #4]
 8009946:	2300      	movs	r3, #0
 8009948:	717b      	strb	r3, [r7, #5]
	lcd_state = LCD_SENDING_CLR;
 800994a:	4b2a      	ldr	r3, [pc, #168]	; (80099f4 <lcd_clear+0xb8>)
 800994c:	2204      	movs	r2, #4
 800994e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_SET);
 8009950:	2201      	movs	r2, #1
 8009952:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009956:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800995a:	f7fc fc73 	bl	8006244 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*) &clearBuffer, sizeof(clearBuffer));
 800995e:	1d3b      	adds	r3, r7, #4
 8009960:	2202      	movs	r2, #2
 8009962:	4619      	mov	r1, r3
 8009964:	4824      	ldr	r0, [pc, #144]	; (80099f8 <lcd_clear+0xbc>)
 8009966:	f7fe fc7f 	bl	8008268 <HAL_SPI_Transmit_DMA>

	//Clear buffer
	for (uint8_t y = 0; y < LCD_RES_PX_Y; y++) {
 800996a:	2300      	movs	r3, #0
 800996c:	71fb      	strb	r3, [r7, #7]
 800996e:	e037      	b.n	80099e0 <lcd_clear+0xa4>
		for (uint8_t x = 0; x < LCD_RES_PX_X_b; x++) {
 8009970:	2300      	movs	r3, #0
 8009972:	71bb      	strb	r3, [r7, #6]
 8009974:	e02e      	b.n	80099d4 <lcd_clear+0x98>
			if (x == 0) {
 8009976:	79bb      	ldrb	r3, [r7, #6]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d10e      	bne.n	800999a <lcd_clear+0x5e>
				LCD_BUFFER[y][x] = y + 1; //assign line number
 800997c:	79fa      	ldrb	r2, [r7, #7]
 800997e:	79b9      	ldrb	r1, [r7, #6]
 8009980:	79fb      	ldrb	r3, [r7, #7]
 8009982:	3301      	adds	r3, #1
 8009984:	b2dc      	uxtb	r4, r3
 8009986:	481d      	ldr	r0, [pc, #116]	; (80099fc <lcd_clear+0xc0>)
 8009988:	4613      	mov	r3, r2
 800998a:	00db      	lsls	r3, r3, #3
 800998c:	4413      	add	r3, r2
 800998e:	005b      	lsls	r3, r3, #1
 8009990:	4403      	add	r3, r0
 8009992:	440b      	add	r3, r1
 8009994:	4622      	mov	r2, r4
 8009996:	701a      	strb	r2, [r3, #0]
 8009998:	e019      	b.n	80099ce <lcd_clear+0x92>
			} else if (x == (LCD_RES_PX_X_b - 1)) {
 800999a:	79bb      	ldrb	r3, [r7, #6]
 800999c:	2b11      	cmp	r3, #17
 800999e:	d10b      	bne.n	80099b8 <lcd_clear+0x7c>
				LCD_BUFFER[y][x] = 0x00; //trailer with transmit flag
 80099a0:	79fa      	ldrb	r2, [r7, #7]
 80099a2:	79b9      	ldrb	r1, [r7, #6]
 80099a4:	4815      	ldr	r0, [pc, #84]	; (80099fc <lcd_clear+0xc0>)
 80099a6:	4613      	mov	r3, r2
 80099a8:	00db      	lsls	r3, r3, #3
 80099aa:	4413      	add	r3, r2
 80099ac:	005b      	lsls	r3, r3, #1
 80099ae:	4403      	add	r3, r0
 80099b0:	440b      	add	r3, r1
 80099b2:	2200      	movs	r2, #0
 80099b4:	701a      	strb	r2, [r3, #0]
 80099b6:	e00a      	b.n	80099ce <lcd_clear+0x92>
			} else {
				LCD_BUFFER[y][x] = 0xff; //white data
 80099b8:	79fa      	ldrb	r2, [r7, #7]
 80099ba:	79b9      	ldrb	r1, [r7, #6]
 80099bc:	480f      	ldr	r0, [pc, #60]	; (80099fc <lcd_clear+0xc0>)
 80099be:	4613      	mov	r3, r2
 80099c0:	00db      	lsls	r3, r3, #3
 80099c2:	4413      	add	r3, r2
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	4403      	add	r3, r0
 80099c8:	440b      	add	r3, r1
 80099ca:	22ff      	movs	r2, #255	; 0xff
 80099cc:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < LCD_RES_PX_X_b; x++) {
 80099ce:	79bb      	ldrb	r3, [r7, #6]
 80099d0:	3301      	adds	r3, #1
 80099d2:	71bb      	strb	r3, [r7, #6]
 80099d4:	79bb      	ldrb	r3, [r7, #6]
 80099d6:	2b11      	cmp	r3, #17
 80099d8:	d9cd      	bls.n	8009976 <lcd_clear+0x3a>
	for (uint8_t y = 0; y < LCD_RES_PX_Y; y++) {
 80099da:	79fb      	ldrb	r3, [r7, #7]
 80099dc:	3301      	adds	r3, #1
 80099de:	71fb      	strb	r3, [r7, #7]
 80099e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	dac3      	bge.n	8009970 <lcd_clear+0x34>
			}
		}
	}
}
 80099e8:	bf00      	nop
 80099ea:	bf00      	nop
 80099ec:	370c      	adds	r7, #12
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd90      	pop	{r4, r7, pc}
 80099f2:	bf00      	nop
 80099f4:	20000d8c 	.word	0x20000d8c
 80099f8:	200002cc 	.word	0x200002cc
 80099fc:	20000470 	.word	0x20000470

08009a00 <lcd_draw>:

lcd_State_enum lcd_draw(void) {
 8009a00:	b580      	push	{r7, lr}
 8009a02:	af00      	add	r7, sp, #0
	if (lcd_state == LCD_OFF) {
 8009a04:	4b15      	ldr	r3, [pc, #84]	; (8009a5c <lcd_draw+0x5c>)
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d103      	bne.n	8009a16 <lcd_draw+0x16>
		return lcd_state;
 8009a0e:	4b13      	ldr	r3, [pc, #76]	; (8009a5c <lcd_draw+0x5c>)
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	e01f      	b.n	8009a56 <lcd_draw+0x56>
	}
	if (lcd_state == LCD_READY && lcd_hasData()) {
 8009a16:	4b11      	ldr	r3, [pc, #68]	; (8009a5c <lcd_draw+0x5c>)
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d117      	bne.n	8009a50 <lcd_draw+0x50>
 8009a20:	f000 f822 	bl	8009a68 <lcd_hasData>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d012      	beq.n	8009a50 <lcd_draw+0x50>
		//start new transfer
		lcd_state = LCD_SENDING_DATA;
 8009a2a:	4b0c      	ldr	r3, [pc, #48]	; (8009a5c <lcd_draw+0x5c>)
 8009a2c:	2203      	movs	r2, #3
 8009a2e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_SET);
 8009a30:	2201      	movs	r2, #1
 8009a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a3a:	f7fc fc03 	bl	8006244 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) &MLCD_WR, sizeof(MLCD_WR), HAL_MAX_DELAY);
 8009a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a42:	2201      	movs	r2, #1
 8009a44:	4906      	ldr	r1, [pc, #24]	; (8009a60 <lcd_draw+0x60>)
 8009a46:	4807      	ldr	r0, [pc, #28]	; (8009a64 <lcd_draw+0x64>)
 8009a48:	f7fe fa9f 	bl	8007f8a <HAL_SPI_Transmit>
		lcd_DoTX();
 8009a4c:	f000 f830 	bl	8009ab0 <lcd_DoTX>
	}
	return lcd_state;
 8009a50:	4b02      	ldr	r3, [pc, #8]	; (8009a5c <lcd_draw+0x5c>)
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	b2db      	uxtb	r3, r3
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	20000d8c 	.word	0x20000d8c
 8009a60:	0800cf72 	.word	0x0800cf72
 8009a64:	200002cc 	.word	0x200002cc

08009a68 <lcd_hasData>:

static bool lcd_hasData() {
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y < LCD_RES_PX_Y; y++) {
 8009a6e:	2300      	movs	r3, #0
 8009a70:	71fb      	strb	r3, [r7, #7]
 8009a72:	e00f      	b.n	8009a94 <lcd_hasData+0x2c>
		if (LCD_BUFFER[y][LCD_RES_PX_X_b - 1] == 0x00) {
 8009a74:	79fa      	ldrb	r2, [r7, #7]
 8009a76:	490d      	ldr	r1, [pc, #52]	; (8009aac <lcd_hasData+0x44>)
 8009a78:	4613      	mov	r3, r2
 8009a7a:	00db      	lsls	r3, r3, #3
 8009a7c:	4413      	add	r3, r2
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	440b      	add	r3, r1
 8009a82:	3311      	adds	r3, #17
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d101      	bne.n	8009a8e <lcd_hasData+0x26>
			//we have some data to send
			return true;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e007      	b.n	8009a9e <lcd_hasData+0x36>
	for (uint8_t y = 0; y < LCD_RES_PX_Y; y++) {
 8009a8e:	79fb      	ldrb	r3, [r7, #7]
 8009a90:	3301      	adds	r3, #1
 8009a92:	71fb      	strb	r3, [r7, #7]
 8009a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	daeb      	bge.n	8009a74 <lcd_hasData+0xc>
		}
	}
	return false;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	370c      	adds	r7, #12
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
 8009aaa:	bf00      	nop
 8009aac:	20000470 	.word	0x20000470

08009ab0 <lcd_DoTX>:

static void lcd_DoTX() {
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	af00      	add	r7, sp, #0
	static uint8_t linePointer = 0;
	if (lcd_hasData()) {
 8009ab4:	f7ff ffd8 	bl	8009a68 <lcd_hasData>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d036      	beq.n	8009b2c <lcd_DoTX+0x7c>
		//start next transfer
		while (1) {
			if (LCD_BUFFER[linePointer][LCD_RES_PX_X_b - 1] == 0x00) {
 8009abe:	4b26      	ldr	r3, [pc, #152]	; (8009b58 <lcd_DoTX+0xa8>)
 8009ac0:	781b      	ldrb	r3, [r3, #0]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	4a25      	ldr	r2, [pc, #148]	; (8009b5c <lcd_DoTX+0xac>)
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	00db      	lsls	r3, r3, #3
 8009aca:	440b      	add	r3, r1
 8009acc:	005b      	lsls	r3, r3, #1
 8009ace:	4413      	add	r3, r2
 8009ad0:	3311      	adds	r3, #17
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d11a      	bne.n	8009b0e <lcd_DoTX+0x5e>
				//Send the line
				HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*) &LCD_BUFFER[linePointer][0], LCD_RES_PX_X_b);
 8009ad8:	4b1f      	ldr	r3, [pc, #124]	; (8009b58 <lcd_DoTX+0xa8>)
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	461a      	mov	r2, r3
 8009ade:	4613      	mov	r3, r2
 8009ae0:	00db      	lsls	r3, r3, #3
 8009ae2:	4413      	add	r3, r2
 8009ae4:	005b      	lsls	r3, r3, #1
 8009ae6:	4a1d      	ldr	r2, [pc, #116]	; (8009b5c <lcd_DoTX+0xac>)
 8009ae8:	4413      	add	r3, r2
 8009aea:	2212      	movs	r2, #18
 8009aec:	4619      	mov	r1, r3
 8009aee:	481c      	ldr	r0, [pc, #112]	; (8009b60 <lcd_DoTX+0xb0>)
 8009af0:	f7fe fbba 	bl	8008268 <HAL_SPI_Transmit_DMA>
				LCD_BUFFER[linePointer][LCD_RES_PX_X_b - 1] = 0x01; //Line Sent
 8009af4:	4b18      	ldr	r3, [pc, #96]	; (8009b58 <lcd_DoTX+0xa8>)
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	4619      	mov	r1, r3
 8009afa:	4a18      	ldr	r2, [pc, #96]	; (8009b5c <lcd_DoTX+0xac>)
 8009afc:	460b      	mov	r3, r1
 8009afe:	00db      	lsls	r3, r3, #3
 8009b00:	440b      	add	r3, r1
 8009b02:	005b      	lsls	r3, r3, #1
 8009b04:	4413      	add	r3, r2
 8009b06:	3311      	adds	r3, #17
 8009b08:	2201      	movs	r2, #1
 8009b0a:	701a      	strb	r2, [r3, #0]
				return;
 8009b0c:	e022      	b.n	8009b54 <lcd_DoTX+0xa4>
			}
			if (++linePointer >= LCD_RES_PX_Y) {
 8009b0e:	4b12      	ldr	r3, [pc, #72]	; (8009b58 <lcd_DoTX+0xa8>)
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	3301      	adds	r3, #1
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	4b10      	ldr	r3, [pc, #64]	; (8009b58 <lcd_DoTX+0xa8>)
 8009b18:	701a      	strb	r2, [r3, #0]
 8009b1a:	4b0f      	ldr	r3, [pc, #60]	; (8009b58 <lcd_DoTX+0xa8>)
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	b25b      	sxtb	r3, r3
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	dacc      	bge.n	8009abe <lcd_DoTX+0xe>
				linePointer = 0;
 8009b24:	4b0c      	ldr	r3, [pc, #48]	; (8009b58 <lcd_DoTX+0xa8>)
 8009b26:	2200      	movs	r2, #0
 8009b28:	701a      	strb	r2, [r3, #0]
			if (LCD_BUFFER[linePointer][LCD_RES_PX_X_b - 1] == 0x00) {
 8009b2a:	e7c8      	b.n	8009abe <lcd_DoTX+0xe>
			}
		}
	} else {
		//Done
		HAL_SPI_Transmit(&hspi1, (uint8_t*) &MLCD_TR, sizeof(MLCD_TR), HAL_MAX_DELAY); //send Trailer command
 8009b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b30:	2201      	movs	r2, #1
 8009b32:	490c      	ldr	r1, [pc, #48]	; (8009b64 <lcd_DoTX+0xb4>)
 8009b34:	480a      	ldr	r0, [pc, #40]	; (8009b60 <lcd_DoTX+0xb0>)
 8009b36:	f7fe fa28 	bl	8007f8a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b44:	f7fc fb7e 	bl	8006244 <HAL_GPIO_WritePin>
		guiTimer = 0; //drawing done
 8009b48:	4b07      	ldr	r3, [pc, #28]	; (8009b68 <lcd_DoTX+0xb8>)
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	601a      	str	r2, [r3, #0]
		lcd_state = LCD_TIMER; //Enter timer mode for power() to clear
 8009b4e:	4b07      	ldr	r3, [pc, #28]	; (8009b6c <lcd_DoTX+0xbc>)
 8009b50:	2201      	movs	r2, #1
 8009b52:	701a      	strb	r2, [r3, #0]
	}
}
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20000d8d 	.word	0x20000d8d
 8009b5c:	20000470 	.word	0x20000470
 8009b60:	200002cc 	.word	0x200002cc
 8009b64:	0800cf73 	.word	0x0800cf73
 8009b68:	20000390 	.word	0x20000390
 8009b6c:	20000d8c 	.word	0x20000d8c

08009b70 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
	if (lcd_state == LCD_SENDING_DATA) {
 8009b78:	4b0d      	ldr	r3, [pc, #52]	; (8009bb0 <HAL_SPI_TxCpltCallback+0x40>)
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	d102      	bne.n	8009b88 <HAL_SPI_TxCpltCallback+0x18>
		lcd_DoTX();
 8009b82:	f7ff ff95 	bl	8009ab0 <lcd_DoTX>
	} else if (lcd_state == LCD_SENDING_CLR) {
		HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
		lcd_state = LCD_READY;
	}
}
 8009b86:	e00e      	b.n	8009ba6 <HAL_SPI_TxCpltCallback+0x36>
	} else if (lcd_state == LCD_SENDING_CLR) {
 8009b88:	4b09      	ldr	r3, [pc, #36]	; (8009bb0 <HAL_SPI_TxCpltCallback+0x40>)
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	2b04      	cmp	r3, #4
 8009b90:	d109      	bne.n	8009ba6 <HAL_SPI_TxCpltCallback+0x36>
		HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
 8009b92:	2200      	movs	r2, #0
 8009b94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b9c:	f7fc fb52 	bl	8006244 <HAL_GPIO_WritePin>
		lcd_state = LCD_READY;
 8009ba0:	4b03      	ldr	r3, [pc, #12]	; (8009bb0 <HAL_SPI_TxCpltCallback+0x40>)
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	701a      	strb	r2, [r3, #0]
}
 8009ba6:	bf00      	nop
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	20000d8c 	.word	0x20000d8c

08009bb4 <__errno>:
 8009bb4:	4b01      	ldr	r3, [pc, #4]	; (8009bbc <__errno+0x8>)
 8009bb6:	6818      	ldr	r0, [r3, #0]
 8009bb8:	4770      	bx	lr
 8009bba:	bf00      	nop
 8009bbc:	20000010 	.word	0x20000010

08009bc0 <__libc_init_array>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	4d0d      	ldr	r5, [pc, #52]	; (8009bf8 <__libc_init_array+0x38>)
 8009bc4:	4c0d      	ldr	r4, [pc, #52]	; (8009bfc <__libc_init_array+0x3c>)
 8009bc6:	1b64      	subs	r4, r4, r5
 8009bc8:	10a4      	asrs	r4, r4, #2
 8009bca:	2600      	movs	r6, #0
 8009bcc:	42a6      	cmp	r6, r4
 8009bce:	d109      	bne.n	8009be4 <__libc_init_array+0x24>
 8009bd0:	4d0b      	ldr	r5, [pc, #44]	; (8009c00 <__libc_init_array+0x40>)
 8009bd2:	4c0c      	ldr	r4, [pc, #48]	; (8009c04 <__libc_init_array+0x44>)
 8009bd4:	f002 fd36 	bl	800c644 <_init>
 8009bd8:	1b64      	subs	r4, r4, r5
 8009bda:	10a4      	asrs	r4, r4, #2
 8009bdc:	2600      	movs	r6, #0
 8009bde:	42a6      	cmp	r6, r4
 8009be0:	d105      	bne.n	8009bee <__libc_init_array+0x2e>
 8009be2:	bd70      	pop	{r4, r5, r6, pc}
 8009be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009be8:	4798      	blx	r3
 8009bea:	3601      	adds	r6, #1
 8009bec:	e7ee      	b.n	8009bcc <__libc_init_array+0xc>
 8009bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf2:	4798      	blx	r3
 8009bf4:	3601      	adds	r6, #1
 8009bf6:	e7f2      	b.n	8009bde <__libc_init_array+0x1e>
 8009bf8:	0800d354 	.word	0x0800d354
 8009bfc:	0800d354 	.word	0x0800d354
 8009c00:	0800d354 	.word	0x0800d354
 8009c04:	0800d358 	.word	0x0800d358

08009c08 <memcpy>:
 8009c08:	440a      	add	r2, r1
 8009c0a:	4291      	cmp	r1, r2
 8009c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c10:	d100      	bne.n	8009c14 <memcpy+0xc>
 8009c12:	4770      	bx	lr
 8009c14:	b510      	push	{r4, lr}
 8009c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c1e:	4291      	cmp	r1, r2
 8009c20:	d1f9      	bne.n	8009c16 <memcpy+0xe>
 8009c22:	bd10      	pop	{r4, pc}

08009c24 <memset>:
 8009c24:	4402      	add	r2, r0
 8009c26:	4603      	mov	r3, r0
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d100      	bne.n	8009c2e <memset+0xa>
 8009c2c:	4770      	bx	lr
 8009c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c32:	e7f9      	b.n	8009c28 <memset+0x4>

08009c34 <__cvt>:
 8009c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c38:	ec55 4b10 	vmov	r4, r5, d0
 8009c3c:	2d00      	cmp	r5, #0
 8009c3e:	460e      	mov	r6, r1
 8009c40:	4619      	mov	r1, r3
 8009c42:	462b      	mov	r3, r5
 8009c44:	bfbb      	ittet	lt
 8009c46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009c4a:	461d      	movlt	r5, r3
 8009c4c:	2300      	movge	r3, #0
 8009c4e:	232d      	movlt	r3, #45	; 0x2d
 8009c50:	700b      	strb	r3, [r1, #0]
 8009c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009c58:	4691      	mov	r9, r2
 8009c5a:	f023 0820 	bic.w	r8, r3, #32
 8009c5e:	bfbc      	itt	lt
 8009c60:	4622      	movlt	r2, r4
 8009c62:	4614      	movlt	r4, r2
 8009c64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c68:	d005      	beq.n	8009c76 <__cvt+0x42>
 8009c6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009c6e:	d100      	bne.n	8009c72 <__cvt+0x3e>
 8009c70:	3601      	adds	r6, #1
 8009c72:	2102      	movs	r1, #2
 8009c74:	e000      	b.n	8009c78 <__cvt+0x44>
 8009c76:	2103      	movs	r1, #3
 8009c78:	ab03      	add	r3, sp, #12
 8009c7a:	9301      	str	r3, [sp, #4]
 8009c7c:	ab02      	add	r3, sp, #8
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	ec45 4b10 	vmov	d0, r4, r5
 8009c84:	4653      	mov	r3, sl
 8009c86:	4632      	mov	r2, r6
 8009c88:	f000 fcca 	bl	800a620 <_dtoa_r>
 8009c8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009c90:	4607      	mov	r7, r0
 8009c92:	d102      	bne.n	8009c9a <__cvt+0x66>
 8009c94:	f019 0f01 	tst.w	r9, #1
 8009c98:	d022      	beq.n	8009ce0 <__cvt+0xac>
 8009c9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009c9e:	eb07 0906 	add.w	r9, r7, r6
 8009ca2:	d110      	bne.n	8009cc6 <__cvt+0x92>
 8009ca4:	783b      	ldrb	r3, [r7, #0]
 8009ca6:	2b30      	cmp	r3, #48	; 0x30
 8009ca8:	d10a      	bne.n	8009cc0 <__cvt+0x8c>
 8009caa:	2200      	movs	r2, #0
 8009cac:	2300      	movs	r3, #0
 8009cae:	4620      	mov	r0, r4
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	f7f6 ff09 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cb6:	b918      	cbnz	r0, 8009cc0 <__cvt+0x8c>
 8009cb8:	f1c6 0601 	rsb	r6, r6, #1
 8009cbc:	f8ca 6000 	str.w	r6, [sl]
 8009cc0:	f8da 3000 	ldr.w	r3, [sl]
 8009cc4:	4499      	add	r9, r3
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	2300      	movs	r3, #0
 8009cca:	4620      	mov	r0, r4
 8009ccc:	4629      	mov	r1, r5
 8009cce:	f7f6 fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cd2:	b108      	cbz	r0, 8009cd8 <__cvt+0xa4>
 8009cd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8009cd8:	2230      	movs	r2, #48	; 0x30
 8009cda:	9b03      	ldr	r3, [sp, #12]
 8009cdc:	454b      	cmp	r3, r9
 8009cde:	d307      	bcc.n	8009cf0 <__cvt+0xbc>
 8009ce0:	9b03      	ldr	r3, [sp, #12]
 8009ce2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ce4:	1bdb      	subs	r3, r3, r7
 8009ce6:	4638      	mov	r0, r7
 8009ce8:	6013      	str	r3, [r2, #0]
 8009cea:	b004      	add	sp, #16
 8009cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf0:	1c59      	adds	r1, r3, #1
 8009cf2:	9103      	str	r1, [sp, #12]
 8009cf4:	701a      	strb	r2, [r3, #0]
 8009cf6:	e7f0      	b.n	8009cda <__cvt+0xa6>

08009cf8 <__exponent>:
 8009cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2900      	cmp	r1, #0
 8009cfe:	bfb8      	it	lt
 8009d00:	4249      	neglt	r1, r1
 8009d02:	f803 2b02 	strb.w	r2, [r3], #2
 8009d06:	bfb4      	ite	lt
 8009d08:	222d      	movlt	r2, #45	; 0x2d
 8009d0a:	222b      	movge	r2, #43	; 0x2b
 8009d0c:	2909      	cmp	r1, #9
 8009d0e:	7042      	strb	r2, [r0, #1]
 8009d10:	dd2a      	ble.n	8009d68 <__exponent+0x70>
 8009d12:	f10d 0407 	add.w	r4, sp, #7
 8009d16:	46a4      	mov	ip, r4
 8009d18:	270a      	movs	r7, #10
 8009d1a:	46a6      	mov	lr, r4
 8009d1c:	460a      	mov	r2, r1
 8009d1e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009d22:	fb07 1516 	mls	r5, r7, r6, r1
 8009d26:	3530      	adds	r5, #48	; 0x30
 8009d28:	2a63      	cmp	r2, #99	; 0x63
 8009d2a:	f104 34ff 	add.w	r4, r4, #4294967295
 8009d2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009d32:	4631      	mov	r1, r6
 8009d34:	dcf1      	bgt.n	8009d1a <__exponent+0x22>
 8009d36:	3130      	adds	r1, #48	; 0x30
 8009d38:	f1ae 0502 	sub.w	r5, lr, #2
 8009d3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009d40:	1c44      	adds	r4, r0, #1
 8009d42:	4629      	mov	r1, r5
 8009d44:	4561      	cmp	r1, ip
 8009d46:	d30a      	bcc.n	8009d5e <__exponent+0x66>
 8009d48:	f10d 0209 	add.w	r2, sp, #9
 8009d4c:	eba2 020e 	sub.w	r2, r2, lr
 8009d50:	4565      	cmp	r5, ip
 8009d52:	bf88      	it	hi
 8009d54:	2200      	movhi	r2, #0
 8009d56:	4413      	add	r3, r2
 8009d58:	1a18      	subs	r0, r3, r0
 8009d5a:	b003      	add	sp, #12
 8009d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d62:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009d66:	e7ed      	b.n	8009d44 <__exponent+0x4c>
 8009d68:	2330      	movs	r3, #48	; 0x30
 8009d6a:	3130      	adds	r1, #48	; 0x30
 8009d6c:	7083      	strb	r3, [r0, #2]
 8009d6e:	70c1      	strb	r1, [r0, #3]
 8009d70:	1d03      	adds	r3, r0, #4
 8009d72:	e7f1      	b.n	8009d58 <__exponent+0x60>

08009d74 <_printf_float>:
 8009d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d78:	ed2d 8b02 	vpush	{d8}
 8009d7c:	b08d      	sub	sp, #52	; 0x34
 8009d7e:	460c      	mov	r4, r1
 8009d80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009d84:	4616      	mov	r6, r2
 8009d86:	461f      	mov	r7, r3
 8009d88:	4605      	mov	r5, r0
 8009d8a:	f001 fa37 	bl	800b1fc <_localeconv_r>
 8009d8e:	f8d0 a000 	ldr.w	sl, [r0]
 8009d92:	4650      	mov	r0, sl
 8009d94:	f7f6 fa1c 	bl	80001d0 <strlen>
 8009d98:	2300      	movs	r3, #0
 8009d9a:	930a      	str	r3, [sp, #40]	; 0x28
 8009d9c:	6823      	ldr	r3, [r4, #0]
 8009d9e:	9305      	str	r3, [sp, #20]
 8009da0:	f8d8 3000 	ldr.w	r3, [r8]
 8009da4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009da8:	3307      	adds	r3, #7
 8009daa:	f023 0307 	bic.w	r3, r3, #7
 8009dae:	f103 0208 	add.w	r2, r3, #8
 8009db2:	f8c8 2000 	str.w	r2, [r8]
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009dbe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009dc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009dc6:	9307      	str	r3, [sp, #28]
 8009dc8:	f8cd 8018 	str.w	r8, [sp, #24]
 8009dcc:	ee08 0a10 	vmov	s16, r0
 8009dd0:	4b9f      	ldr	r3, [pc, #636]	; (800a050 <_printf_float+0x2dc>)
 8009dd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dda:	f7f6 fea7 	bl	8000b2c <__aeabi_dcmpun>
 8009dde:	bb88      	cbnz	r0, 8009e44 <_printf_float+0xd0>
 8009de0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009de4:	4b9a      	ldr	r3, [pc, #616]	; (800a050 <_printf_float+0x2dc>)
 8009de6:	f04f 32ff 	mov.w	r2, #4294967295
 8009dea:	f7f6 fe81 	bl	8000af0 <__aeabi_dcmple>
 8009dee:	bb48      	cbnz	r0, 8009e44 <_printf_float+0xd0>
 8009df0:	2200      	movs	r2, #0
 8009df2:	2300      	movs	r3, #0
 8009df4:	4640      	mov	r0, r8
 8009df6:	4649      	mov	r1, r9
 8009df8:	f7f6 fe70 	bl	8000adc <__aeabi_dcmplt>
 8009dfc:	b110      	cbz	r0, 8009e04 <_printf_float+0x90>
 8009dfe:	232d      	movs	r3, #45	; 0x2d
 8009e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e04:	4b93      	ldr	r3, [pc, #588]	; (800a054 <_printf_float+0x2e0>)
 8009e06:	4894      	ldr	r0, [pc, #592]	; (800a058 <_printf_float+0x2e4>)
 8009e08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009e0c:	bf94      	ite	ls
 8009e0e:	4698      	movls	r8, r3
 8009e10:	4680      	movhi	r8, r0
 8009e12:	2303      	movs	r3, #3
 8009e14:	6123      	str	r3, [r4, #16]
 8009e16:	9b05      	ldr	r3, [sp, #20]
 8009e18:	f023 0204 	bic.w	r2, r3, #4
 8009e1c:	6022      	str	r2, [r4, #0]
 8009e1e:	f04f 0900 	mov.w	r9, #0
 8009e22:	9700      	str	r7, [sp, #0]
 8009e24:	4633      	mov	r3, r6
 8009e26:	aa0b      	add	r2, sp, #44	; 0x2c
 8009e28:	4621      	mov	r1, r4
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	f000 f9d8 	bl	800a1e0 <_printf_common>
 8009e30:	3001      	adds	r0, #1
 8009e32:	f040 8090 	bne.w	8009f56 <_printf_float+0x1e2>
 8009e36:	f04f 30ff 	mov.w	r0, #4294967295
 8009e3a:	b00d      	add	sp, #52	; 0x34
 8009e3c:	ecbd 8b02 	vpop	{d8}
 8009e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e44:	4642      	mov	r2, r8
 8009e46:	464b      	mov	r3, r9
 8009e48:	4640      	mov	r0, r8
 8009e4a:	4649      	mov	r1, r9
 8009e4c:	f7f6 fe6e 	bl	8000b2c <__aeabi_dcmpun>
 8009e50:	b140      	cbz	r0, 8009e64 <_printf_float+0xf0>
 8009e52:	464b      	mov	r3, r9
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	bfbc      	itt	lt
 8009e58:	232d      	movlt	r3, #45	; 0x2d
 8009e5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009e5e:	487f      	ldr	r0, [pc, #508]	; (800a05c <_printf_float+0x2e8>)
 8009e60:	4b7f      	ldr	r3, [pc, #508]	; (800a060 <_printf_float+0x2ec>)
 8009e62:	e7d1      	b.n	8009e08 <_printf_float+0x94>
 8009e64:	6863      	ldr	r3, [r4, #4]
 8009e66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009e6a:	9206      	str	r2, [sp, #24]
 8009e6c:	1c5a      	adds	r2, r3, #1
 8009e6e:	d13f      	bne.n	8009ef0 <_printf_float+0x17c>
 8009e70:	2306      	movs	r3, #6
 8009e72:	6063      	str	r3, [r4, #4]
 8009e74:	9b05      	ldr	r3, [sp, #20]
 8009e76:	6861      	ldr	r1, [r4, #4]
 8009e78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	9303      	str	r3, [sp, #12]
 8009e80:	ab0a      	add	r3, sp, #40	; 0x28
 8009e82:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009e86:	ab09      	add	r3, sp, #36	; 0x24
 8009e88:	ec49 8b10 	vmov	d0, r8, r9
 8009e8c:	9300      	str	r3, [sp, #0]
 8009e8e:	6022      	str	r2, [r4, #0]
 8009e90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009e94:	4628      	mov	r0, r5
 8009e96:	f7ff fecd 	bl	8009c34 <__cvt>
 8009e9a:	9b06      	ldr	r3, [sp, #24]
 8009e9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e9e:	2b47      	cmp	r3, #71	; 0x47
 8009ea0:	4680      	mov	r8, r0
 8009ea2:	d108      	bne.n	8009eb6 <_printf_float+0x142>
 8009ea4:	1cc8      	adds	r0, r1, #3
 8009ea6:	db02      	blt.n	8009eae <_printf_float+0x13a>
 8009ea8:	6863      	ldr	r3, [r4, #4]
 8009eaa:	4299      	cmp	r1, r3
 8009eac:	dd41      	ble.n	8009f32 <_printf_float+0x1be>
 8009eae:	f1ab 0b02 	sub.w	fp, fp, #2
 8009eb2:	fa5f fb8b 	uxtb.w	fp, fp
 8009eb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009eba:	d820      	bhi.n	8009efe <_printf_float+0x18a>
 8009ebc:	3901      	subs	r1, #1
 8009ebe:	465a      	mov	r2, fp
 8009ec0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009ec4:	9109      	str	r1, [sp, #36]	; 0x24
 8009ec6:	f7ff ff17 	bl	8009cf8 <__exponent>
 8009eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ecc:	1813      	adds	r3, r2, r0
 8009ece:	2a01      	cmp	r2, #1
 8009ed0:	4681      	mov	r9, r0
 8009ed2:	6123      	str	r3, [r4, #16]
 8009ed4:	dc02      	bgt.n	8009edc <_printf_float+0x168>
 8009ed6:	6822      	ldr	r2, [r4, #0]
 8009ed8:	07d2      	lsls	r2, r2, #31
 8009eda:	d501      	bpl.n	8009ee0 <_printf_float+0x16c>
 8009edc:	3301      	adds	r3, #1
 8009ede:	6123      	str	r3, [r4, #16]
 8009ee0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d09c      	beq.n	8009e22 <_printf_float+0xae>
 8009ee8:	232d      	movs	r3, #45	; 0x2d
 8009eea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009eee:	e798      	b.n	8009e22 <_printf_float+0xae>
 8009ef0:	9a06      	ldr	r2, [sp, #24]
 8009ef2:	2a47      	cmp	r2, #71	; 0x47
 8009ef4:	d1be      	bne.n	8009e74 <_printf_float+0x100>
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1bc      	bne.n	8009e74 <_printf_float+0x100>
 8009efa:	2301      	movs	r3, #1
 8009efc:	e7b9      	b.n	8009e72 <_printf_float+0xfe>
 8009efe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009f02:	d118      	bne.n	8009f36 <_printf_float+0x1c2>
 8009f04:	2900      	cmp	r1, #0
 8009f06:	6863      	ldr	r3, [r4, #4]
 8009f08:	dd0b      	ble.n	8009f22 <_printf_float+0x1ae>
 8009f0a:	6121      	str	r1, [r4, #16]
 8009f0c:	b913      	cbnz	r3, 8009f14 <_printf_float+0x1a0>
 8009f0e:	6822      	ldr	r2, [r4, #0]
 8009f10:	07d0      	lsls	r0, r2, #31
 8009f12:	d502      	bpl.n	8009f1a <_printf_float+0x1a6>
 8009f14:	3301      	adds	r3, #1
 8009f16:	440b      	add	r3, r1
 8009f18:	6123      	str	r3, [r4, #16]
 8009f1a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009f1c:	f04f 0900 	mov.w	r9, #0
 8009f20:	e7de      	b.n	8009ee0 <_printf_float+0x16c>
 8009f22:	b913      	cbnz	r3, 8009f2a <_printf_float+0x1b6>
 8009f24:	6822      	ldr	r2, [r4, #0]
 8009f26:	07d2      	lsls	r2, r2, #31
 8009f28:	d501      	bpl.n	8009f2e <_printf_float+0x1ba>
 8009f2a:	3302      	adds	r3, #2
 8009f2c:	e7f4      	b.n	8009f18 <_printf_float+0x1a4>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e7f2      	b.n	8009f18 <_printf_float+0x1a4>
 8009f32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009f36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f38:	4299      	cmp	r1, r3
 8009f3a:	db05      	blt.n	8009f48 <_printf_float+0x1d4>
 8009f3c:	6823      	ldr	r3, [r4, #0]
 8009f3e:	6121      	str	r1, [r4, #16]
 8009f40:	07d8      	lsls	r0, r3, #31
 8009f42:	d5ea      	bpl.n	8009f1a <_printf_float+0x1a6>
 8009f44:	1c4b      	adds	r3, r1, #1
 8009f46:	e7e7      	b.n	8009f18 <_printf_float+0x1a4>
 8009f48:	2900      	cmp	r1, #0
 8009f4a:	bfd4      	ite	le
 8009f4c:	f1c1 0202 	rsble	r2, r1, #2
 8009f50:	2201      	movgt	r2, #1
 8009f52:	4413      	add	r3, r2
 8009f54:	e7e0      	b.n	8009f18 <_printf_float+0x1a4>
 8009f56:	6823      	ldr	r3, [r4, #0]
 8009f58:	055a      	lsls	r2, r3, #21
 8009f5a:	d407      	bmi.n	8009f6c <_printf_float+0x1f8>
 8009f5c:	6923      	ldr	r3, [r4, #16]
 8009f5e:	4642      	mov	r2, r8
 8009f60:	4631      	mov	r1, r6
 8009f62:	4628      	mov	r0, r5
 8009f64:	47b8      	blx	r7
 8009f66:	3001      	adds	r0, #1
 8009f68:	d12c      	bne.n	8009fc4 <_printf_float+0x250>
 8009f6a:	e764      	b.n	8009e36 <_printf_float+0xc2>
 8009f6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f70:	f240 80e0 	bls.w	800a134 <_printf_float+0x3c0>
 8009f74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009f78:	2200      	movs	r2, #0
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f7f6 fda4 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	d034      	beq.n	8009fee <_printf_float+0x27a>
 8009f84:	4a37      	ldr	r2, [pc, #220]	; (800a064 <_printf_float+0x2f0>)
 8009f86:	2301      	movs	r3, #1
 8009f88:	4631      	mov	r1, r6
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	47b8      	blx	r7
 8009f8e:	3001      	adds	r0, #1
 8009f90:	f43f af51 	beq.w	8009e36 <_printf_float+0xc2>
 8009f94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	db02      	blt.n	8009fa2 <_printf_float+0x22e>
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	07d8      	lsls	r0, r3, #31
 8009fa0:	d510      	bpl.n	8009fc4 <_printf_float+0x250>
 8009fa2:	ee18 3a10 	vmov	r3, s16
 8009fa6:	4652      	mov	r2, sl
 8009fa8:	4631      	mov	r1, r6
 8009faa:	4628      	mov	r0, r5
 8009fac:	47b8      	blx	r7
 8009fae:	3001      	adds	r0, #1
 8009fb0:	f43f af41 	beq.w	8009e36 <_printf_float+0xc2>
 8009fb4:	f04f 0800 	mov.w	r8, #0
 8009fb8:	f104 091a 	add.w	r9, r4, #26
 8009fbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fbe:	3b01      	subs	r3, #1
 8009fc0:	4543      	cmp	r3, r8
 8009fc2:	dc09      	bgt.n	8009fd8 <_printf_float+0x264>
 8009fc4:	6823      	ldr	r3, [r4, #0]
 8009fc6:	079b      	lsls	r3, r3, #30
 8009fc8:	f100 8105 	bmi.w	800a1d6 <_printf_float+0x462>
 8009fcc:	68e0      	ldr	r0, [r4, #12]
 8009fce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fd0:	4298      	cmp	r0, r3
 8009fd2:	bfb8      	it	lt
 8009fd4:	4618      	movlt	r0, r3
 8009fd6:	e730      	b.n	8009e3a <_printf_float+0xc6>
 8009fd8:	2301      	movs	r3, #1
 8009fda:	464a      	mov	r2, r9
 8009fdc:	4631      	mov	r1, r6
 8009fde:	4628      	mov	r0, r5
 8009fe0:	47b8      	blx	r7
 8009fe2:	3001      	adds	r0, #1
 8009fe4:	f43f af27 	beq.w	8009e36 <_printf_float+0xc2>
 8009fe8:	f108 0801 	add.w	r8, r8, #1
 8009fec:	e7e6      	b.n	8009fbc <_printf_float+0x248>
 8009fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	dc39      	bgt.n	800a068 <_printf_float+0x2f4>
 8009ff4:	4a1b      	ldr	r2, [pc, #108]	; (800a064 <_printf_float+0x2f0>)
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	4631      	mov	r1, r6
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	47b8      	blx	r7
 8009ffe:	3001      	adds	r0, #1
 800a000:	f43f af19 	beq.w	8009e36 <_printf_float+0xc2>
 800a004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a008:	4313      	orrs	r3, r2
 800a00a:	d102      	bne.n	800a012 <_printf_float+0x29e>
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	07d9      	lsls	r1, r3, #31
 800a010:	d5d8      	bpl.n	8009fc4 <_printf_float+0x250>
 800a012:	ee18 3a10 	vmov	r3, s16
 800a016:	4652      	mov	r2, sl
 800a018:	4631      	mov	r1, r6
 800a01a:	4628      	mov	r0, r5
 800a01c:	47b8      	blx	r7
 800a01e:	3001      	adds	r0, #1
 800a020:	f43f af09 	beq.w	8009e36 <_printf_float+0xc2>
 800a024:	f04f 0900 	mov.w	r9, #0
 800a028:	f104 0a1a 	add.w	sl, r4, #26
 800a02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a02e:	425b      	negs	r3, r3
 800a030:	454b      	cmp	r3, r9
 800a032:	dc01      	bgt.n	800a038 <_printf_float+0x2c4>
 800a034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a036:	e792      	b.n	8009f5e <_printf_float+0x1ea>
 800a038:	2301      	movs	r3, #1
 800a03a:	4652      	mov	r2, sl
 800a03c:	4631      	mov	r1, r6
 800a03e:	4628      	mov	r0, r5
 800a040:	47b8      	blx	r7
 800a042:	3001      	adds	r0, #1
 800a044:	f43f aef7 	beq.w	8009e36 <_printf_float+0xc2>
 800a048:	f109 0901 	add.w	r9, r9, #1
 800a04c:	e7ee      	b.n	800a02c <_printf_float+0x2b8>
 800a04e:	bf00      	nop
 800a050:	7fefffff 	.word	0x7fefffff
 800a054:	0800cf78 	.word	0x0800cf78
 800a058:	0800cf7c 	.word	0x0800cf7c
 800a05c:	0800cf84 	.word	0x0800cf84
 800a060:	0800cf80 	.word	0x0800cf80
 800a064:	0800cf88 	.word	0x0800cf88
 800a068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a06a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a06c:	429a      	cmp	r2, r3
 800a06e:	bfa8      	it	ge
 800a070:	461a      	movge	r2, r3
 800a072:	2a00      	cmp	r2, #0
 800a074:	4691      	mov	r9, r2
 800a076:	dc37      	bgt.n	800a0e8 <_printf_float+0x374>
 800a078:	f04f 0b00 	mov.w	fp, #0
 800a07c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a080:	f104 021a 	add.w	r2, r4, #26
 800a084:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a086:	9305      	str	r3, [sp, #20]
 800a088:	eba3 0309 	sub.w	r3, r3, r9
 800a08c:	455b      	cmp	r3, fp
 800a08e:	dc33      	bgt.n	800a0f8 <_printf_float+0x384>
 800a090:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a094:	429a      	cmp	r2, r3
 800a096:	db3b      	blt.n	800a110 <_printf_float+0x39c>
 800a098:	6823      	ldr	r3, [r4, #0]
 800a09a:	07da      	lsls	r2, r3, #31
 800a09c:	d438      	bmi.n	800a110 <_printf_float+0x39c>
 800a09e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0a0:	9a05      	ldr	r2, [sp, #20]
 800a0a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a0a4:	1a9a      	subs	r2, r3, r2
 800a0a6:	eba3 0901 	sub.w	r9, r3, r1
 800a0aa:	4591      	cmp	r9, r2
 800a0ac:	bfa8      	it	ge
 800a0ae:	4691      	movge	r9, r2
 800a0b0:	f1b9 0f00 	cmp.w	r9, #0
 800a0b4:	dc35      	bgt.n	800a122 <_printf_float+0x3ae>
 800a0b6:	f04f 0800 	mov.w	r8, #0
 800a0ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0be:	f104 0a1a 	add.w	sl, r4, #26
 800a0c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0c6:	1a9b      	subs	r3, r3, r2
 800a0c8:	eba3 0309 	sub.w	r3, r3, r9
 800a0cc:	4543      	cmp	r3, r8
 800a0ce:	f77f af79 	ble.w	8009fc4 <_printf_float+0x250>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	4652      	mov	r2, sl
 800a0d6:	4631      	mov	r1, r6
 800a0d8:	4628      	mov	r0, r5
 800a0da:	47b8      	blx	r7
 800a0dc:	3001      	adds	r0, #1
 800a0de:	f43f aeaa 	beq.w	8009e36 <_printf_float+0xc2>
 800a0e2:	f108 0801 	add.w	r8, r8, #1
 800a0e6:	e7ec      	b.n	800a0c2 <_printf_float+0x34e>
 800a0e8:	4613      	mov	r3, r2
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	4642      	mov	r2, r8
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	47b8      	blx	r7
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	d1c0      	bne.n	800a078 <_printf_float+0x304>
 800a0f6:	e69e      	b.n	8009e36 <_printf_float+0xc2>
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	4631      	mov	r1, r6
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	9205      	str	r2, [sp, #20]
 800a100:	47b8      	blx	r7
 800a102:	3001      	adds	r0, #1
 800a104:	f43f ae97 	beq.w	8009e36 <_printf_float+0xc2>
 800a108:	9a05      	ldr	r2, [sp, #20]
 800a10a:	f10b 0b01 	add.w	fp, fp, #1
 800a10e:	e7b9      	b.n	800a084 <_printf_float+0x310>
 800a110:	ee18 3a10 	vmov	r3, s16
 800a114:	4652      	mov	r2, sl
 800a116:	4631      	mov	r1, r6
 800a118:	4628      	mov	r0, r5
 800a11a:	47b8      	blx	r7
 800a11c:	3001      	adds	r0, #1
 800a11e:	d1be      	bne.n	800a09e <_printf_float+0x32a>
 800a120:	e689      	b.n	8009e36 <_printf_float+0xc2>
 800a122:	9a05      	ldr	r2, [sp, #20]
 800a124:	464b      	mov	r3, r9
 800a126:	4442      	add	r2, r8
 800a128:	4631      	mov	r1, r6
 800a12a:	4628      	mov	r0, r5
 800a12c:	47b8      	blx	r7
 800a12e:	3001      	adds	r0, #1
 800a130:	d1c1      	bne.n	800a0b6 <_printf_float+0x342>
 800a132:	e680      	b.n	8009e36 <_printf_float+0xc2>
 800a134:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a136:	2a01      	cmp	r2, #1
 800a138:	dc01      	bgt.n	800a13e <_printf_float+0x3ca>
 800a13a:	07db      	lsls	r3, r3, #31
 800a13c:	d538      	bpl.n	800a1b0 <_printf_float+0x43c>
 800a13e:	2301      	movs	r3, #1
 800a140:	4642      	mov	r2, r8
 800a142:	4631      	mov	r1, r6
 800a144:	4628      	mov	r0, r5
 800a146:	47b8      	blx	r7
 800a148:	3001      	adds	r0, #1
 800a14a:	f43f ae74 	beq.w	8009e36 <_printf_float+0xc2>
 800a14e:	ee18 3a10 	vmov	r3, s16
 800a152:	4652      	mov	r2, sl
 800a154:	4631      	mov	r1, r6
 800a156:	4628      	mov	r0, r5
 800a158:	47b8      	blx	r7
 800a15a:	3001      	adds	r0, #1
 800a15c:	f43f ae6b 	beq.w	8009e36 <_printf_float+0xc2>
 800a160:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a164:	2200      	movs	r2, #0
 800a166:	2300      	movs	r3, #0
 800a168:	f7f6 fcae 	bl	8000ac8 <__aeabi_dcmpeq>
 800a16c:	b9d8      	cbnz	r0, 800a1a6 <_printf_float+0x432>
 800a16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a170:	f108 0201 	add.w	r2, r8, #1
 800a174:	3b01      	subs	r3, #1
 800a176:	4631      	mov	r1, r6
 800a178:	4628      	mov	r0, r5
 800a17a:	47b8      	blx	r7
 800a17c:	3001      	adds	r0, #1
 800a17e:	d10e      	bne.n	800a19e <_printf_float+0x42a>
 800a180:	e659      	b.n	8009e36 <_printf_float+0xc2>
 800a182:	2301      	movs	r3, #1
 800a184:	4652      	mov	r2, sl
 800a186:	4631      	mov	r1, r6
 800a188:	4628      	mov	r0, r5
 800a18a:	47b8      	blx	r7
 800a18c:	3001      	adds	r0, #1
 800a18e:	f43f ae52 	beq.w	8009e36 <_printf_float+0xc2>
 800a192:	f108 0801 	add.w	r8, r8, #1
 800a196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a198:	3b01      	subs	r3, #1
 800a19a:	4543      	cmp	r3, r8
 800a19c:	dcf1      	bgt.n	800a182 <_printf_float+0x40e>
 800a19e:	464b      	mov	r3, r9
 800a1a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a1a4:	e6dc      	b.n	8009f60 <_printf_float+0x1ec>
 800a1a6:	f04f 0800 	mov.w	r8, #0
 800a1aa:	f104 0a1a 	add.w	sl, r4, #26
 800a1ae:	e7f2      	b.n	800a196 <_printf_float+0x422>
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	4642      	mov	r2, r8
 800a1b4:	e7df      	b.n	800a176 <_printf_float+0x402>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	464a      	mov	r2, r9
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	4628      	mov	r0, r5
 800a1be:	47b8      	blx	r7
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	f43f ae38 	beq.w	8009e36 <_printf_float+0xc2>
 800a1c6:	f108 0801 	add.w	r8, r8, #1
 800a1ca:	68e3      	ldr	r3, [r4, #12]
 800a1cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a1ce:	1a5b      	subs	r3, r3, r1
 800a1d0:	4543      	cmp	r3, r8
 800a1d2:	dcf0      	bgt.n	800a1b6 <_printf_float+0x442>
 800a1d4:	e6fa      	b.n	8009fcc <_printf_float+0x258>
 800a1d6:	f04f 0800 	mov.w	r8, #0
 800a1da:	f104 0919 	add.w	r9, r4, #25
 800a1de:	e7f4      	b.n	800a1ca <_printf_float+0x456>

0800a1e0 <_printf_common>:
 800a1e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e4:	4616      	mov	r6, r2
 800a1e6:	4699      	mov	r9, r3
 800a1e8:	688a      	ldr	r2, [r1, #8]
 800a1ea:	690b      	ldr	r3, [r1, #16]
 800a1ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	bfb8      	it	lt
 800a1f4:	4613      	movlt	r3, r2
 800a1f6:	6033      	str	r3, [r6, #0]
 800a1f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1fc:	4607      	mov	r7, r0
 800a1fe:	460c      	mov	r4, r1
 800a200:	b10a      	cbz	r2, 800a206 <_printf_common+0x26>
 800a202:	3301      	adds	r3, #1
 800a204:	6033      	str	r3, [r6, #0]
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	0699      	lsls	r1, r3, #26
 800a20a:	bf42      	ittt	mi
 800a20c:	6833      	ldrmi	r3, [r6, #0]
 800a20e:	3302      	addmi	r3, #2
 800a210:	6033      	strmi	r3, [r6, #0]
 800a212:	6825      	ldr	r5, [r4, #0]
 800a214:	f015 0506 	ands.w	r5, r5, #6
 800a218:	d106      	bne.n	800a228 <_printf_common+0x48>
 800a21a:	f104 0a19 	add.w	sl, r4, #25
 800a21e:	68e3      	ldr	r3, [r4, #12]
 800a220:	6832      	ldr	r2, [r6, #0]
 800a222:	1a9b      	subs	r3, r3, r2
 800a224:	42ab      	cmp	r3, r5
 800a226:	dc26      	bgt.n	800a276 <_printf_common+0x96>
 800a228:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a22c:	1e13      	subs	r3, r2, #0
 800a22e:	6822      	ldr	r2, [r4, #0]
 800a230:	bf18      	it	ne
 800a232:	2301      	movne	r3, #1
 800a234:	0692      	lsls	r2, r2, #26
 800a236:	d42b      	bmi.n	800a290 <_printf_common+0xb0>
 800a238:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a23c:	4649      	mov	r1, r9
 800a23e:	4638      	mov	r0, r7
 800a240:	47c0      	blx	r8
 800a242:	3001      	adds	r0, #1
 800a244:	d01e      	beq.n	800a284 <_printf_common+0xa4>
 800a246:	6823      	ldr	r3, [r4, #0]
 800a248:	68e5      	ldr	r5, [r4, #12]
 800a24a:	6832      	ldr	r2, [r6, #0]
 800a24c:	f003 0306 	and.w	r3, r3, #6
 800a250:	2b04      	cmp	r3, #4
 800a252:	bf08      	it	eq
 800a254:	1aad      	subeq	r5, r5, r2
 800a256:	68a3      	ldr	r3, [r4, #8]
 800a258:	6922      	ldr	r2, [r4, #16]
 800a25a:	bf0c      	ite	eq
 800a25c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a260:	2500      	movne	r5, #0
 800a262:	4293      	cmp	r3, r2
 800a264:	bfc4      	itt	gt
 800a266:	1a9b      	subgt	r3, r3, r2
 800a268:	18ed      	addgt	r5, r5, r3
 800a26a:	2600      	movs	r6, #0
 800a26c:	341a      	adds	r4, #26
 800a26e:	42b5      	cmp	r5, r6
 800a270:	d11a      	bne.n	800a2a8 <_printf_common+0xc8>
 800a272:	2000      	movs	r0, #0
 800a274:	e008      	b.n	800a288 <_printf_common+0xa8>
 800a276:	2301      	movs	r3, #1
 800a278:	4652      	mov	r2, sl
 800a27a:	4649      	mov	r1, r9
 800a27c:	4638      	mov	r0, r7
 800a27e:	47c0      	blx	r8
 800a280:	3001      	adds	r0, #1
 800a282:	d103      	bne.n	800a28c <_printf_common+0xac>
 800a284:	f04f 30ff 	mov.w	r0, #4294967295
 800a288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a28c:	3501      	adds	r5, #1
 800a28e:	e7c6      	b.n	800a21e <_printf_common+0x3e>
 800a290:	18e1      	adds	r1, r4, r3
 800a292:	1c5a      	adds	r2, r3, #1
 800a294:	2030      	movs	r0, #48	; 0x30
 800a296:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a29a:	4422      	add	r2, r4
 800a29c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2a4:	3302      	adds	r3, #2
 800a2a6:	e7c7      	b.n	800a238 <_printf_common+0x58>
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	4622      	mov	r2, r4
 800a2ac:	4649      	mov	r1, r9
 800a2ae:	4638      	mov	r0, r7
 800a2b0:	47c0      	blx	r8
 800a2b2:	3001      	adds	r0, #1
 800a2b4:	d0e6      	beq.n	800a284 <_printf_common+0xa4>
 800a2b6:	3601      	adds	r6, #1
 800a2b8:	e7d9      	b.n	800a26e <_printf_common+0x8e>
	...

0800a2bc <_printf_i>:
 800a2bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c0:	7e0f      	ldrb	r7, [r1, #24]
 800a2c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a2c4:	2f78      	cmp	r7, #120	; 0x78
 800a2c6:	4691      	mov	r9, r2
 800a2c8:	4680      	mov	r8, r0
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	469a      	mov	sl, r3
 800a2ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a2d2:	d807      	bhi.n	800a2e4 <_printf_i+0x28>
 800a2d4:	2f62      	cmp	r7, #98	; 0x62
 800a2d6:	d80a      	bhi.n	800a2ee <_printf_i+0x32>
 800a2d8:	2f00      	cmp	r7, #0
 800a2da:	f000 80d8 	beq.w	800a48e <_printf_i+0x1d2>
 800a2de:	2f58      	cmp	r7, #88	; 0x58
 800a2e0:	f000 80a3 	beq.w	800a42a <_printf_i+0x16e>
 800a2e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a2ec:	e03a      	b.n	800a364 <_printf_i+0xa8>
 800a2ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a2f2:	2b15      	cmp	r3, #21
 800a2f4:	d8f6      	bhi.n	800a2e4 <_printf_i+0x28>
 800a2f6:	a101      	add	r1, pc, #4	; (adr r1, 800a2fc <_printf_i+0x40>)
 800a2f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2fc:	0800a355 	.word	0x0800a355
 800a300:	0800a369 	.word	0x0800a369
 800a304:	0800a2e5 	.word	0x0800a2e5
 800a308:	0800a2e5 	.word	0x0800a2e5
 800a30c:	0800a2e5 	.word	0x0800a2e5
 800a310:	0800a2e5 	.word	0x0800a2e5
 800a314:	0800a369 	.word	0x0800a369
 800a318:	0800a2e5 	.word	0x0800a2e5
 800a31c:	0800a2e5 	.word	0x0800a2e5
 800a320:	0800a2e5 	.word	0x0800a2e5
 800a324:	0800a2e5 	.word	0x0800a2e5
 800a328:	0800a475 	.word	0x0800a475
 800a32c:	0800a399 	.word	0x0800a399
 800a330:	0800a457 	.word	0x0800a457
 800a334:	0800a2e5 	.word	0x0800a2e5
 800a338:	0800a2e5 	.word	0x0800a2e5
 800a33c:	0800a497 	.word	0x0800a497
 800a340:	0800a2e5 	.word	0x0800a2e5
 800a344:	0800a399 	.word	0x0800a399
 800a348:	0800a2e5 	.word	0x0800a2e5
 800a34c:	0800a2e5 	.word	0x0800a2e5
 800a350:	0800a45f 	.word	0x0800a45f
 800a354:	682b      	ldr	r3, [r5, #0]
 800a356:	1d1a      	adds	r2, r3, #4
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	602a      	str	r2, [r5, #0]
 800a35c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a360:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a364:	2301      	movs	r3, #1
 800a366:	e0a3      	b.n	800a4b0 <_printf_i+0x1f4>
 800a368:	6820      	ldr	r0, [r4, #0]
 800a36a:	6829      	ldr	r1, [r5, #0]
 800a36c:	0606      	lsls	r6, r0, #24
 800a36e:	f101 0304 	add.w	r3, r1, #4
 800a372:	d50a      	bpl.n	800a38a <_printf_i+0xce>
 800a374:	680e      	ldr	r6, [r1, #0]
 800a376:	602b      	str	r3, [r5, #0]
 800a378:	2e00      	cmp	r6, #0
 800a37a:	da03      	bge.n	800a384 <_printf_i+0xc8>
 800a37c:	232d      	movs	r3, #45	; 0x2d
 800a37e:	4276      	negs	r6, r6
 800a380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a384:	485e      	ldr	r0, [pc, #376]	; (800a500 <_printf_i+0x244>)
 800a386:	230a      	movs	r3, #10
 800a388:	e019      	b.n	800a3be <_printf_i+0x102>
 800a38a:	680e      	ldr	r6, [r1, #0]
 800a38c:	602b      	str	r3, [r5, #0]
 800a38e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a392:	bf18      	it	ne
 800a394:	b236      	sxthne	r6, r6
 800a396:	e7ef      	b.n	800a378 <_printf_i+0xbc>
 800a398:	682b      	ldr	r3, [r5, #0]
 800a39a:	6820      	ldr	r0, [r4, #0]
 800a39c:	1d19      	adds	r1, r3, #4
 800a39e:	6029      	str	r1, [r5, #0]
 800a3a0:	0601      	lsls	r1, r0, #24
 800a3a2:	d501      	bpl.n	800a3a8 <_printf_i+0xec>
 800a3a4:	681e      	ldr	r6, [r3, #0]
 800a3a6:	e002      	b.n	800a3ae <_printf_i+0xf2>
 800a3a8:	0646      	lsls	r6, r0, #25
 800a3aa:	d5fb      	bpl.n	800a3a4 <_printf_i+0xe8>
 800a3ac:	881e      	ldrh	r6, [r3, #0]
 800a3ae:	4854      	ldr	r0, [pc, #336]	; (800a500 <_printf_i+0x244>)
 800a3b0:	2f6f      	cmp	r7, #111	; 0x6f
 800a3b2:	bf0c      	ite	eq
 800a3b4:	2308      	moveq	r3, #8
 800a3b6:	230a      	movne	r3, #10
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3be:	6865      	ldr	r5, [r4, #4]
 800a3c0:	60a5      	str	r5, [r4, #8]
 800a3c2:	2d00      	cmp	r5, #0
 800a3c4:	bfa2      	ittt	ge
 800a3c6:	6821      	ldrge	r1, [r4, #0]
 800a3c8:	f021 0104 	bicge.w	r1, r1, #4
 800a3cc:	6021      	strge	r1, [r4, #0]
 800a3ce:	b90e      	cbnz	r6, 800a3d4 <_printf_i+0x118>
 800a3d0:	2d00      	cmp	r5, #0
 800a3d2:	d04d      	beq.n	800a470 <_printf_i+0x1b4>
 800a3d4:	4615      	mov	r5, r2
 800a3d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a3da:	fb03 6711 	mls	r7, r3, r1, r6
 800a3de:	5dc7      	ldrb	r7, [r0, r7]
 800a3e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a3e4:	4637      	mov	r7, r6
 800a3e6:	42bb      	cmp	r3, r7
 800a3e8:	460e      	mov	r6, r1
 800a3ea:	d9f4      	bls.n	800a3d6 <_printf_i+0x11a>
 800a3ec:	2b08      	cmp	r3, #8
 800a3ee:	d10b      	bne.n	800a408 <_printf_i+0x14c>
 800a3f0:	6823      	ldr	r3, [r4, #0]
 800a3f2:	07de      	lsls	r6, r3, #31
 800a3f4:	d508      	bpl.n	800a408 <_printf_i+0x14c>
 800a3f6:	6923      	ldr	r3, [r4, #16]
 800a3f8:	6861      	ldr	r1, [r4, #4]
 800a3fa:	4299      	cmp	r1, r3
 800a3fc:	bfde      	ittt	le
 800a3fe:	2330      	movle	r3, #48	; 0x30
 800a400:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a404:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a408:	1b52      	subs	r2, r2, r5
 800a40a:	6122      	str	r2, [r4, #16]
 800a40c:	f8cd a000 	str.w	sl, [sp]
 800a410:	464b      	mov	r3, r9
 800a412:	aa03      	add	r2, sp, #12
 800a414:	4621      	mov	r1, r4
 800a416:	4640      	mov	r0, r8
 800a418:	f7ff fee2 	bl	800a1e0 <_printf_common>
 800a41c:	3001      	adds	r0, #1
 800a41e:	d14c      	bne.n	800a4ba <_printf_i+0x1fe>
 800a420:	f04f 30ff 	mov.w	r0, #4294967295
 800a424:	b004      	add	sp, #16
 800a426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a42a:	4835      	ldr	r0, [pc, #212]	; (800a500 <_printf_i+0x244>)
 800a42c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a430:	6829      	ldr	r1, [r5, #0]
 800a432:	6823      	ldr	r3, [r4, #0]
 800a434:	f851 6b04 	ldr.w	r6, [r1], #4
 800a438:	6029      	str	r1, [r5, #0]
 800a43a:	061d      	lsls	r5, r3, #24
 800a43c:	d514      	bpl.n	800a468 <_printf_i+0x1ac>
 800a43e:	07df      	lsls	r7, r3, #31
 800a440:	bf44      	itt	mi
 800a442:	f043 0320 	orrmi.w	r3, r3, #32
 800a446:	6023      	strmi	r3, [r4, #0]
 800a448:	b91e      	cbnz	r6, 800a452 <_printf_i+0x196>
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	f023 0320 	bic.w	r3, r3, #32
 800a450:	6023      	str	r3, [r4, #0]
 800a452:	2310      	movs	r3, #16
 800a454:	e7b0      	b.n	800a3b8 <_printf_i+0xfc>
 800a456:	6823      	ldr	r3, [r4, #0]
 800a458:	f043 0320 	orr.w	r3, r3, #32
 800a45c:	6023      	str	r3, [r4, #0]
 800a45e:	2378      	movs	r3, #120	; 0x78
 800a460:	4828      	ldr	r0, [pc, #160]	; (800a504 <_printf_i+0x248>)
 800a462:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a466:	e7e3      	b.n	800a430 <_printf_i+0x174>
 800a468:	0659      	lsls	r1, r3, #25
 800a46a:	bf48      	it	mi
 800a46c:	b2b6      	uxthmi	r6, r6
 800a46e:	e7e6      	b.n	800a43e <_printf_i+0x182>
 800a470:	4615      	mov	r5, r2
 800a472:	e7bb      	b.n	800a3ec <_printf_i+0x130>
 800a474:	682b      	ldr	r3, [r5, #0]
 800a476:	6826      	ldr	r6, [r4, #0]
 800a478:	6961      	ldr	r1, [r4, #20]
 800a47a:	1d18      	adds	r0, r3, #4
 800a47c:	6028      	str	r0, [r5, #0]
 800a47e:	0635      	lsls	r5, r6, #24
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	d501      	bpl.n	800a488 <_printf_i+0x1cc>
 800a484:	6019      	str	r1, [r3, #0]
 800a486:	e002      	b.n	800a48e <_printf_i+0x1d2>
 800a488:	0670      	lsls	r0, r6, #25
 800a48a:	d5fb      	bpl.n	800a484 <_printf_i+0x1c8>
 800a48c:	8019      	strh	r1, [r3, #0]
 800a48e:	2300      	movs	r3, #0
 800a490:	6123      	str	r3, [r4, #16]
 800a492:	4615      	mov	r5, r2
 800a494:	e7ba      	b.n	800a40c <_printf_i+0x150>
 800a496:	682b      	ldr	r3, [r5, #0]
 800a498:	1d1a      	adds	r2, r3, #4
 800a49a:	602a      	str	r2, [r5, #0]
 800a49c:	681d      	ldr	r5, [r3, #0]
 800a49e:	6862      	ldr	r2, [r4, #4]
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	f7f5 fe9c 	bl	80001e0 <memchr>
 800a4a8:	b108      	cbz	r0, 800a4ae <_printf_i+0x1f2>
 800a4aa:	1b40      	subs	r0, r0, r5
 800a4ac:	6060      	str	r0, [r4, #4]
 800a4ae:	6863      	ldr	r3, [r4, #4]
 800a4b0:	6123      	str	r3, [r4, #16]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4b8:	e7a8      	b.n	800a40c <_printf_i+0x150>
 800a4ba:	6923      	ldr	r3, [r4, #16]
 800a4bc:	462a      	mov	r2, r5
 800a4be:	4649      	mov	r1, r9
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	47d0      	blx	sl
 800a4c4:	3001      	adds	r0, #1
 800a4c6:	d0ab      	beq.n	800a420 <_printf_i+0x164>
 800a4c8:	6823      	ldr	r3, [r4, #0]
 800a4ca:	079b      	lsls	r3, r3, #30
 800a4cc:	d413      	bmi.n	800a4f6 <_printf_i+0x23a>
 800a4ce:	68e0      	ldr	r0, [r4, #12]
 800a4d0:	9b03      	ldr	r3, [sp, #12]
 800a4d2:	4298      	cmp	r0, r3
 800a4d4:	bfb8      	it	lt
 800a4d6:	4618      	movlt	r0, r3
 800a4d8:	e7a4      	b.n	800a424 <_printf_i+0x168>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	4632      	mov	r2, r6
 800a4de:	4649      	mov	r1, r9
 800a4e0:	4640      	mov	r0, r8
 800a4e2:	47d0      	blx	sl
 800a4e4:	3001      	adds	r0, #1
 800a4e6:	d09b      	beq.n	800a420 <_printf_i+0x164>
 800a4e8:	3501      	adds	r5, #1
 800a4ea:	68e3      	ldr	r3, [r4, #12]
 800a4ec:	9903      	ldr	r1, [sp, #12]
 800a4ee:	1a5b      	subs	r3, r3, r1
 800a4f0:	42ab      	cmp	r3, r5
 800a4f2:	dcf2      	bgt.n	800a4da <_printf_i+0x21e>
 800a4f4:	e7eb      	b.n	800a4ce <_printf_i+0x212>
 800a4f6:	2500      	movs	r5, #0
 800a4f8:	f104 0619 	add.w	r6, r4, #25
 800a4fc:	e7f5      	b.n	800a4ea <_printf_i+0x22e>
 800a4fe:	bf00      	nop
 800a500:	0800cf8a 	.word	0x0800cf8a
 800a504:	0800cf9b 	.word	0x0800cf9b

0800a508 <quorem>:
 800a508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a50c:	6903      	ldr	r3, [r0, #16]
 800a50e:	690c      	ldr	r4, [r1, #16]
 800a510:	42a3      	cmp	r3, r4
 800a512:	4607      	mov	r7, r0
 800a514:	f2c0 8081 	blt.w	800a61a <quorem+0x112>
 800a518:	3c01      	subs	r4, #1
 800a51a:	f101 0814 	add.w	r8, r1, #20
 800a51e:	f100 0514 	add.w	r5, r0, #20
 800a522:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a526:	9301      	str	r3, [sp, #4]
 800a528:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a52c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a530:	3301      	adds	r3, #1
 800a532:	429a      	cmp	r2, r3
 800a534:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a538:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a53c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a540:	d331      	bcc.n	800a5a6 <quorem+0x9e>
 800a542:	f04f 0e00 	mov.w	lr, #0
 800a546:	4640      	mov	r0, r8
 800a548:	46ac      	mov	ip, r5
 800a54a:	46f2      	mov	sl, lr
 800a54c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a550:	b293      	uxth	r3, r2
 800a552:	fb06 e303 	mla	r3, r6, r3, lr
 800a556:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	ebaa 0303 	sub.w	r3, sl, r3
 800a560:	f8dc a000 	ldr.w	sl, [ip]
 800a564:	0c12      	lsrs	r2, r2, #16
 800a566:	fa13 f38a 	uxtah	r3, r3, sl
 800a56a:	fb06 e202 	mla	r2, r6, r2, lr
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	9b00      	ldr	r3, [sp, #0]
 800a572:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a576:	b292      	uxth	r2, r2
 800a578:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a57c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a580:	f8bd 3000 	ldrh.w	r3, [sp]
 800a584:	4581      	cmp	r9, r0
 800a586:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a58a:	f84c 3b04 	str.w	r3, [ip], #4
 800a58e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a592:	d2db      	bcs.n	800a54c <quorem+0x44>
 800a594:	f855 300b 	ldr.w	r3, [r5, fp]
 800a598:	b92b      	cbnz	r3, 800a5a6 <quorem+0x9e>
 800a59a:	9b01      	ldr	r3, [sp, #4]
 800a59c:	3b04      	subs	r3, #4
 800a59e:	429d      	cmp	r5, r3
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	d32e      	bcc.n	800a602 <quorem+0xfa>
 800a5a4:	613c      	str	r4, [r7, #16]
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	f001 f8b6 	bl	800b718 <__mcmp>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	db24      	blt.n	800a5fa <quorem+0xf2>
 800a5b0:	3601      	adds	r6, #1
 800a5b2:	4628      	mov	r0, r5
 800a5b4:	f04f 0c00 	mov.w	ip, #0
 800a5b8:	f858 2b04 	ldr.w	r2, [r8], #4
 800a5bc:	f8d0 e000 	ldr.w	lr, [r0]
 800a5c0:	b293      	uxth	r3, r2
 800a5c2:	ebac 0303 	sub.w	r3, ip, r3
 800a5c6:	0c12      	lsrs	r2, r2, #16
 800a5c8:	fa13 f38e 	uxtah	r3, r3, lr
 800a5cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a5d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5da:	45c1      	cmp	r9, r8
 800a5dc:	f840 3b04 	str.w	r3, [r0], #4
 800a5e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a5e4:	d2e8      	bcs.n	800a5b8 <quorem+0xb0>
 800a5e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5ee:	b922      	cbnz	r2, 800a5fa <quorem+0xf2>
 800a5f0:	3b04      	subs	r3, #4
 800a5f2:	429d      	cmp	r5, r3
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	d30a      	bcc.n	800a60e <quorem+0x106>
 800a5f8:	613c      	str	r4, [r7, #16]
 800a5fa:	4630      	mov	r0, r6
 800a5fc:	b003      	add	sp, #12
 800a5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a602:	6812      	ldr	r2, [r2, #0]
 800a604:	3b04      	subs	r3, #4
 800a606:	2a00      	cmp	r2, #0
 800a608:	d1cc      	bne.n	800a5a4 <quorem+0x9c>
 800a60a:	3c01      	subs	r4, #1
 800a60c:	e7c7      	b.n	800a59e <quorem+0x96>
 800a60e:	6812      	ldr	r2, [r2, #0]
 800a610:	3b04      	subs	r3, #4
 800a612:	2a00      	cmp	r2, #0
 800a614:	d1f0      	bne.n	800a5f8 <quorem+0xf0>
 800a616:	3c01      	subs	r4, #1
 800a618:	e7eb      	b.n	800a5f2 <quorem+0xea>
 800a61a:	2000      	movs	r0, #0
 800a61c:	e7ee      	b.n	800a5fc <quorem+0xf4>
	...

0800a620 <_dtoa_r>:
 800a620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a624:	ed2d 8b04 	vpush	{d8-d9}
 800a628:	ec57 6b10 	vmov	r6, r7, d0
 800a62c:	b093      	sub	sp, #76	; 0x4c
 800a62e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a630:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a634:	9106      	str	r1, [sp, #24]
 800a636:	ee10 aa10 	vmov	sl, s0
 800a63a:	4604      	mov	r4, r0
 800a63c:	9209      	str	r2, [sp, #36]	; 0x24
 800a63e:	930c      	str	r3, [sp, #48]	; 0x30
 800a640:	46bb      	mov	fp, r7
 800a642:	b975      	cbnz	r5, 800a662 <_dtoa_r+0x42>
 800a644:	2010      	movs	r0, #16
 800a646:	f000 fddd 	bl	800b204 <malloc>
 800a64a:	4602      	mov	r2, r0
 800a64c:	6260      	str	r0, [r4, #36]	; 0x24
 800a64e:	b920      	cbnz	r0, 800a65a <_dtoa_r+0x3a>
 800a650:	4ba7      	ldr	r3, [pc, #668]	; (800a8f0 <_dtoa_r+0x2d0>)
 800a652:	21ea      	movs	r1, #234	; 0xea
 800a654:	48a7      	ldr	r0, [pc, #668]	; (800a8f4 <_dtoa_r+0x2d4>)
 800a656:	f001 fa67 	bl	800bb28 <__assert_func>
 800a65a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a65e:	6005      	str	r5, [r0, #0]
 800a660:	60c5      	str	r5, [r0, #12]
 800a662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a664:	6819      	ldr	r1, [r3, #0]
 800a666:	b151      	cbz	r1, 800a67e <_dtoa_r+0x5e>
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	604a      	str	r2, [r1, #4]
 800a66c:	2301      	movs	r3, #1
 800a66e:	4093      	lsls	r3, r2
 800a670:	608b      	str	r3, [r1, #8]
 800a672:	4620      	mov	r0, r4
 800a674:	f000 fe0e 	bl	800b294 <_Bfree>
 800a678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a67a:	2200      	movs	r2, #0
 800a67c:	601a      	str	r2, [r3, #0]
 800a67e:	1e3b      	subs	r3, r7, #0
 800a680:	bfaa      	itet	ge
 800a682:	2300      	movge	r3, #0
 800a684:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a688:	f8c8 3000 	strge.w	r3, [r8]
 800a68c:	4b9a      	ldr	r3, [pc, #616]	; (800a8f8 <_dtoa_r+0x2d8>)
 800a68e:	bfbc      	itt	lt
 800a690:	2201      	movlt	r2, #1
 800a692:	f8c8 2000 	strlt.w	r2, [r8]
 800a696:	ea33 030b 	bics.w	r3, r3, fp
 800a69a:	d11b      	bne.n	800a6d4 <_dtoa_r+0xb4>
 800a69c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a69e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a6a2:	6013      	str	r3, [r2, #0]
 800a6a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6a8:	4333      	orrs	r3, r6
 800a6aa:	f000 8592 	beq.w	800b1d2 <_dtoa_r+0xbb2>
 800a6ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6b0:	b963      	cbnz	r3, 800a6cc <_dtoa_r+0xac>
 800a6b2:	4b92      	ldr	r3, [pc, #584]	; (800a8fc <_dtoa_r+0x2dc>)
 800a6b4:	e022      	b.n	800a6fc <_dtoa_r+0xdc>
 800a6b6:	4b92      	ldr	r3, [pc, #584]	; (800a900 <_dtoa_r+0x2e0>)
 800a6b8:	9301      	str	r3, [sp, #4]
 800a6ba:	3308      	adds	r3, #8
 800a6bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a6be:	6013      	str	r3, [r2, #0]
 800a6c0:	9801      	ldr	r0, [sp, #4]
 800a6c2:	b013      	add	sp, #76	; 0x4c
 800a6c4:	ecbd 8b04 	vpop	{d8-d9}
 800a6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6cc:	4b8b      	ldr	r3, [pc, #556]	; (800a8fc <_dtoa_r+0x2dc>)
 800a6ce:	9301      	str	r3, [sp, #4]
 800a6d0:	3303      	adds	r3, #3
 800a6d2:	e7f3      	b.n	800a6bc <_dtoa_r+0x9c>
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	4650      	mov	r0, sl
 800a6da:	4659      	mov	r1, fp
 800a6dc:	f7f6 f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6e0:	ec4b ab19 	vmov	d9, sl, fp
 800a6e4:	4680      	mov	r8, r0
 800a6e6:	b158      	cbz	r0, 800a700 <_dtoa_r+0xe0>
 800a6e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	6013      	str	r3, [r2, #0]
 800a6ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 856b 	beq.w	800b1cc <_dtoa_r+0xbac>
 800a6f6:	4883      	ldr	r0, [pc, #524]	; (800a904 <_dtoa_r+0x2e4>)
 800a6f8:	6018      	str	r0, [r3, #0]
 800a6fa:	1e43      	subs	r3, r0, #1
 800a6fc:	9301      	str	r3, [sp, #4]
 800a6fe:	e7df      	b.n	800a6c0 <_dtoa_r+0xa0>
 800a700:	ec4b ab10 	vmov	d0, sl, fp
 800a704:	aa10      	add	r2, sp, #64	; 0x40
 800a706:	a911      	add	r1, sp, #68	; 0x44
 800a708:	4620      	mov	r0, r4
 800a70a:	f001 f8ab 	bl	800b864 <__d2b>
 800a70e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a712:	ee08 0a10 	vmov	s16, r0
 800a716:	2d00      	cmp	r5, #0
 800a718:	f000 8084 	beq.w	800a824 <_dtoa_r+0x204>
 800a71c:	ee19 3a90 	vmov	r3, s19
 800a720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a724:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a728:	4656      	mov	r6, sl
 800a72a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a72e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a732:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a736:	4b74      	ldr	r3, [pc, #464]	; (800a908 <_dtoa_r+0x2e8>)
 800a738:	2200      	movs	r2, #0
 800a73a:	4630      	mov	r0, r6
 800a73c:	4639      	mov	r1, r7
 800a73e:	f7f5 fda3 	bl	8000288 <__aeabi_dsub>
 800a742:	a365      	add	r3, pc, #404	; (adr r3, 800a8d8 <_dtoa_r+0x2b8>)
 800a744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a748:	f7f5 ff56 	bl	80005f8 <__aeabi_dmul>
 800a74c:	a364      	add	r3, pc, #400	; (adr r3, 800a8e0 <_dtoa_r+0x2c0>)
 800a74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a752:	f7f5 fd9b 	bl	800028c <__adddf3>
 800a756:	4606      	mov	r6, r0
 800a758:	4628      	mov	r0, r5
 800a75a:	460f      	mov	r7, r1
 800a75c:	f7f5 fee2 	bl	8000524 <__aeabi_i2d>
 800a760:	a361      	add	r3, pc, #388	; (adr r3, 800a8e8 <_dtoa_r+0x2c8>)
 800a762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a766:	f7f5 ff47 	bl	80005f8 <__aeabi_dmul>
 800a76a:	4602      	mov	r2, r0
 800a76c:	460b      	mov	r3, r1
 800a76e:	4630      	mov	r0, r6
 800a770:	4639      	mov	r1, r7
 800a772:	f7f5 fd8b 	bl	800028c <__adddf3>
 800a776:	4606      	mov	r6, r0
 800a778:	460f      	mov	r7, r1
 800a77a:	f7f6 f9ed 	bl	8000b58 <__aeabi_d2iz>
 800a77e:	2200      	movs	r2, #0
 800a780:	9000      	str	r0, [sp, #0]
 800a782:	2300      	movs	r3, #0
 800a784:	4630      	mov	r0, r6
 800a786:	4639      	mov	r1, r7
 800a788:	f7f6 f9a8 	bl	8000adc <__aeabi_dcmplt>
 800a78c:	b150      	cbz	r0, 800a7a4 <_dtoa_r+0x184>
 800a78e:	9800      	ldr	r0, [sp, #0]
 800a790:	f7f5 fec8 	bl	8000524 <__aeabi_i2d>
 800a794:	4632      	mov	r2, r6
 800a796:	463b      	mov	r3, r7
 800a798:	f7f6 f996 	bl	8000ac8 <__aeabi_dcmpeq>
 800a79c:	b910      	cbnz	r0, 800a7a4 <_dtoa_r+0x184>
 800a79e:	9b00      	ldr	r3, [sp, #0]
 800a7a0:	3b01      	subs	r3, #1
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	9b00      	ldr	r3, [sp, #0]
 800a7a6:	2b16      	cmp	r3, #22
 800a7a8:	d85a      	bhi.n	800a860 <_dtoa_r+0x240>
 800a7aa:	9a00      	ldr	r2, [sp, #0]
 800a7ac:	4b57      	ldr	r3, [pc, #348]	; (800a90c <_dtoa_r+0x2ec>)
 800a7ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b6:	ec51 0b19 	vmov	r0, r1, d9
 800a7ba:	f7f6 f98f 	bl	8000adc <__aeabi_dcmplt>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d050      	beq.n	800a864 <_dtoa_r+0x244>
 800a7c2:	9b00      	ldr	r3, [sp, #0]
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7ce:	1b5d      	subs	r5, r3, r5
 800a7d0:	1e6b      	subs	r3, r5, #1
 800a7d2:	9305      	str	r3, [sp, #20]
 800a7d4:	bf45      	ittet	mi
 800a7d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800a7da:	9304      	strmi	r3, [sp, #16]
 800a7dc:	2300      	movpl	r3, #0
 800a7de:	2300      	movmi	r3, #0
 800a7e0:	bf4c      	ite	mi
 800a7e2:	9305      	strmi	r3, [sp, #20]
 800a7e4:	9304      	strpl	r3, [sp, #16]
 800a7e6:	9b00      	ldr	r3, [sp, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	db3d      	blt.n	800a868 <_dtoa_r+0x248>
 800a7ec:	9b05      	ldr	r3, [sp, #20]
 800a7ee:	9a00      	ldr	r2, [sp, #0]
 800a7f0:	920a      	str	r2, [sp, #40]	; 0x28
 800a7f2:	4413      	add	r3, r2
 800a7f4:	9305      	str	r3, [sp, #20]
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	9307      	str	r3, [sp, #28]
 800a7fa:	9b06      	ldr	r3, [sp, #24]
 800a7fc:	2b09      	cmp	r3, #9
 800a7fe:	f200 8089 	bhi.w	800a914 <_dtoa_r+0x2f4>
 800a802:	2b05      	cmp	r3, #5
 800a804:	bfc4      	itt	gt
 800a806:	3b04      	subgt	r3, #4
 800a808:	9306      	strgt	r3, [sp, #24]
 800a80a:	9b06      	ldr	r3, [sp, #24]
 800a80c:	f1a3 0302 	sub.w	r3, r3, #2
 800a810:	bfcc      	ite	gt
 800a812:	2500      	movgt	r5, #0
 800a814:	2501      	movle	r5, #1
 800a816:	2b03      	cmp	r3, #3
 800a818:	f200 8087 	bhi.w	800a92a <_dtoa_r+0x30a>
 800a81c:	e8df f003 	tbb	[pc, r3]
 800a820:	59383a2d 	.word	0x59383a2d
 800a824:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a828:	441d      	add	r5, r3
 800a82a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a82e:	2b20      	cmp	r3, #32
 800a830:	bfc1      	itttt	gt
 800a832:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a836:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a83a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a83e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a842:	bfda      	itte	le
 800a844:	f1c3 0320 	rsble	r3, r3, #32
 800a848:	fa06 f003 	lslle.w	r0, r6, r3
 800a84c:	4318      	orrgt	r0, r3
 800a84e:	f7f5 fe59 	bl	8000504 <__aeabi_ui2d>
 800a852:	2301      	movs	r3, #1
 800a854:	4606      	mov	r6, r0
 800a856:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a85a:	3d01      	subs	r5, #1
 800a85c:	930e      	str	r3, [sp, #56]	; 0x38
 800a85e:	e76a      	b.n	800a736 <_dtoa_r+0x116>
 800a860:	2301      	movs	r3, #1
 800a862:	e7b2      	b.n	800a7ca <_dtoa_r+0x1aa>
 800a864:	900b      	str	r0, [sp, #44]	; 0x2c
 800a866:	e7b1      	b.n	800a7cc <_dtoa_r+0x1ac>
 800a868:	9b04      	ldr	r3, [sp, #16]
 800a86a:	9a00      	ldr	r2, [sp, #0]
 800a86c:	1a9b      	subs	r3, r3, r2
 800a86e:	9304      	str	r3, [sp, #16]
 800a870:	4253      	negs	r3, r2
 800a872:	9307      	str	r3, [sp, #28]
 800a874:	2300      	movs	r3, #0
 800a876:	930a      	str	r3, [sp, #40]	; 0x28
 800a878:	e7bf      	b.n	800a7fa <_dtoa_r+0x1da>
 800a87a:	2300      	movs	r3, #0
 800a87c:	9308      	str	r3, [sp, #32]
 800a87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a880:	2b00      	cmp	r3, #0
 800a882:	dc55      	bgt.n	800a930 <_dtoa_r+0x310>
 800a884:	2301      	movs	r3, #1
 800a886:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a88a:	461a      	mov	r2, r3
 800a88c:	9209      	str	r2, [sp, #36]	; 0x24
 800a88e:	e00c      	b.n	800a8aa <_dtoa_r+0x28a>
 800a890:	2301      	movs	r3, #1
 800a892:	e7f3      	b.n	800a87c <_dtoa_r+0x25c>
 800a894:	2300      	movs	r3, #0
 800a896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a898:	9308      	str	r3, [sp, #32]
 800a89a:	9b00      	ldr	r3, [sp, #0]
 800a89c:	4413      	add	r3, r2
 800a89e:	9302      	str	r3, [sp, #8]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	2b01      	cmp	r3, #1
 800a8a4:	9303      	str	r3, [sp, #12]
 800a8a6:	bfb8      	it	lt
 800a8a8:	2301      	movlt	r3, #1
 800a8aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	6042      	str	r2, [r0, #4]
 800a8b0:	2204      	movs	r2, #4
 800a8b2:	f102 0614 	add.w	r6, r2, #20
 800a8b6:	429e      	cmp	r6, r3
 800a8b8:	6841      	ldr	r1, [r0, #4]
 800a8ba:	d93d      	bls.n	800a938 <_dtoa_r+0x318>
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f000 fca9 	bl	800b214 <_Balloc>
 800a8c2:	9001      	str	r0, [sp, #4]
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d13b      	bne.n	800a940 <_dtoa_r+0x320>
 800a8c8:	4b11      	ldr	r3, [pc, #68]	; (800a910 <_dtoa_r+0x2f0>)
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a8d0:	e6c0      	b.n	800a654 <_dtoa_r+0x34>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e7df      	b.n	800a896 <_dtoa_r+0x276>
 800a8d6:	bf00      	nop
 800a8d8:	636f4361 	.word	0x636f4361
 800a8dc:	3fd287a7 	.word	0x3fd287a7
 800a8e0:	8b60c8b3 	.word	0x8b60c8b3
 800a8e4:	3fc68a28 	.word	0x3fc68a28
 800a8e8:	509f79fb 	.word	0x509f79fb
 800a8ec:	3fd34413 	.word	0x3fd34413
 800a8f0:	0800cfb9 	.word	0x0800cfb9
 800a8f4:	0800cfd0 	.word	0x0800cfd0
 800a8f8:	7ff00000 	.word	0x7ff00000
 800a8fc:	0800cfb5 	.word	0x0800cfb5
 800a900:	0800cfac 	.word	0x0800cfac
 800a904:	0800cf89 	.word	0x0800cf89
 800a908:	3ff80000 	.word	0x3ff80000
 800a90c:	0800d0c0 	.word	0x0800d0c0
 800a910:	0800d02b 	.word	0x0800d02b
 800a914:	2501      	movs	r5, #1
 800a916:	2300      	movs	r3, #0
 800a918:	9306      	str	r3, [sp, #24]
 800a91a:	9508      	str	r5, [sp, #32]
 800a91c:	f04f 33ff 	mov.w	r3, #4294967295
 800a920:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a924:	2200      	movs	r2, #0
 800a926:	2312      	movs	r3, #18
 800a928:	e7b0      	b.n	800a88c <_dtoa_r+0x26c>
 800a92a:	2301      	movs	r3, #1
 800a92c:	9308      	str	r3, [sp, #32]
 800a92e:	e7f5      	b.n	800a91c <_dtoa_r+0x2fc>
 800a930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a932:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a936:	e7b8      	b.n	800a8aa <_dtoa_r+0x28a>
 800a938:	3101      	adds	r1, #1
 800a93a:	6041      	str	r1, [r0, #4]
 800a93c:	0052      	lsls	r2, r2, #1
 800a93e:	e7b8      	b.n	800a8b2 <_dtoa_r+0x292>
 800a940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a942:	9a01      	ldr	r2, [sp, #4]
 800a944:	601a      	str	r2, [r3, #0]
 800a946:	9b03      	ldr	r3, [sp, #12]
 800a948:	2b0e      	cmp	r3, #14
 800a94a:	f200 809d 	bhi.w	800aa88 <_dtoa_r+0x468>
 800a94e:	2d00      	cmp	r5, #0
 800a950:	f000 809a 	beq.w	800aa88 <_dtoa_r+0x468>
 800a954:	9b00      	ldr	r3, [sp, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	dd32      	ble.n	800a9c0 <_dtoa_r+0x3a0>
 800a95a:	4ab7      	ldr	r2, [pc, #732]	; (800ac38 <_dtoa_r+0x618>)
 800a95c:	f003 030f 	and.w	r3, r3, #15
 800a960:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a964:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a968:	9b00      	ldr	r3, [sp, #0]
 800a96a:	05d8      	lsls	r0, r3, #23
 800a96c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a970:	d516      	bpl.n	800a9a0 <_dtoa_r+0x380>
 800a972:	4bb2      	ldr	r3, [pc, #712]	; (800ac3c <_dtoa_r+0x61c>)
 800a974:	ec51 0b19 	vmov	r0, r1, d9
 800a978:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a97c:	f7f5 ff66 	bl	800084c <__aeabi_ddiv>
 800a980:	f007 070f 	and.w	r7, r7, #15
 800a984:	4682      	mov	sl, r0
 800a986:	468b      	mov	fp, r1
 800a988:	2503      	movs	r5, #3
 800a98a:	4eac      	ldr	r6, [pc, #688]	; (800ac3c <_dtoa_r+0x61c>)
 800a98c:	b957      	cbnz	r7, 800a9a4 <_dtoa_r+0x384>
 800a98e:	4642      	mov	r2, r8
 800a990:	464b      	mov	r3, r9
 800a992:	4650      	mov	r0, sl
 800a994:	4659      	mov	r1, fp
 800a996:	f7f5 ff59 	bl	800084c <__aeabi_ddiv>
 800a99a:	4682      	mov	sl, r0
 800a99c:	468b      	mov	fp, r1
 800a99e:	e028      	b.n	800a9f2 <_dtoa_r+0x3d2>
 800a9a0:	2502      	movs	r5, #2
 800a9a2:	e7f2      	b.n	800a98a <_dtoa_r+0x36a>
 800a9a4:	07f9      	lsls	r1, r7, #31
 800a9a6:	d508      	bpl.n	800a9ba <_dtoa_r+0x39a>
 800a9a8:	4640      	mov	r0, r8
 800a9aa:	4649      	mov	r1, r9
 800a9ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9b0:	f7f5 fe22 	bl	80005f8 <__aeabi_dmul>
 800a9b4:	3501      	adds	r5, #1
 800a9b6:	4680      	mov	r8, r0
 800a9b8:	4689      	mov	r9, r1
 800a9ba:	107f      	asrs	r7, r7, #1
 800a9bc:	3608      	adds	r6, #8
 800a9be:	e7e5      	b.n	800a98c <_dtoa_r+0x36c>
 800a9c0:	f000 809b 	beq.w	800aafa <_dtoa_r+0x4da>
 800a9c4:	9b00      	ldr	r3, [sp, #0]
 800a9c6:	4f9d      	ldr	r7, [pc, #628]	; (800ac3c <_dtoa_r+0x61c>)
 800a9c8:	425e      	negs	r6, r3
 800a9ca:	4b9b      	ldr	r3, [pc, #620]	; (800ac38 <_dtoa_r+0x618>)
 800a9cc:	f006 020f 	and.w	r2, r6, #15
 800a9d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d8:	ec51 0b19 	vmov	r0, r1, d9
 800a9dc:	f7f5 fe0c 	bl	80005f8 <__aeabi_dmul>
 800a9e0:	1136      	asrs	r6, r6, #4
 800a9e2:	4682      	mov	sl, r0
 800a9e4:	468b      	mov	fp, r1
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	2502      	movs	r5, #2
 800a9ea:	2e00      	cmp	r6, #0
 800a9ec:	d17a      	bne.n	800aae4 <_dtoa_r+0x4c4>
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1d3      	bne.n	800a99a <_dtoa_r+0x37a>
 800a9f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 8082 	beq.w	800aafe <_dtoa_r+0x4de>
 800a9fa:	4b91      	ldr	r3, [pc, #580]	; (800ac40 <_dtoa_r+0x620>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	4650      	mov	r0, sl
 800aa00:	4659      	mov	r1, fp
 800aa02:	f7f6 f86b 	bl	8000adc <__aeabi_dcmplt>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d079      	beq.n	800aafe <_dtoa_r+0x4de>
 800aa0a:	9b03      	ldr	r3, [sp, #12]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d076      	beq.n	800aafe <_dtoa_r+0x4de>
 800aa10:	9b02      	ldr	r3, [sp, #8]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	dd36      	ble.n	800aa84 <_dtoa_r+0x464>
 800aa16:	9b00      	ldr	r3, [sp, #0]
 800aa18:	4650      	mov	r0, sl
 800aa1a:	4659      	mov	r1, fp
 800aa1c:	1e5f      	subs	r7, r3, #1
 800aa1e:	2200      	movs	r2, #0
 800aa20:	4b88      	ldr	r3, [pc, #544]	; (800ac44 <_dtoa_r+0x624>)
 800aa22:	f7f5 fde9 	bl	80005f8 <__aeabi_dmul>
 800aa26:	9e02      	ldr	r6, [sp, #8]
 800aa28:	4682      	mov	sl, r0
 800aa2a:	468b      	mov	fp, r1
 800aa2c:	3501      	adds	r5, #1
 800aa2e:	4628      	mov	r0, r5
 800aa30:	f7f5 fd78 	bl	8000524 <__aeabi_i2d>
 800aa34:	4652      	mov	r2, sl
 800aa36:	465b      	mov	r3, fp
 800aa38:	f7f5 fdde 	bl	80005f8 <__aeabi_dmul>
 800aa3c:	4b82      	ldr	r3, [pc, #520]	; (800ac48 <_dtoa_r+0x628>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f7f5 fc24 	bl	800028c <__adddf3>
 800aa44:	46d0      	mov	r8, sl
 800aa46:	46d9      	mov	r9, fp
 800aa48:	4682      	mov	sl, r0
 800aa4a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aa4e:	2e00      	cmp	r6, #0
 800aa50:	d158      	bne.n	800ab04 <_dtoa_r+0x4e4>
 800aa52:	4b7e      	ldr	r3, [pc, #504]	; (800ac4c <_dtoa_r+0x62c>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	4640      	mov	r0, r8
 800aa58:	4649      	mov	r1, r9
 800aa5a:	f7f5 fc15 	bl	8000288 <__aeabi_dsub>
 800aa5e:	4652      	mov	r2, sl
 800aa60:	465b      	mov	r3, fp
 800aa62:	4680      	mov	r8, r0
 800aa64:	4689      	mov	r9, r1
 800aa66:	f7f6 f857 	bl	8000b18 <__aeabi_dcmpgt>
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	f040 8295 	bne.w	800af9a <_dtoa_r+0x97a>
 800aa70:	4652      	mov	r2, sl
 800aa72:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aa76:	4640      	mov	r0, r8
 800aa78:	4649      	mov	r1, r9
 800aa7a:	f7f6 f82f 	bl	8000adc <__aeabi_dcmplt>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	f040 8289 	bne.w	800af96 <_dtoa_r+0x976>
 800aa84:	ec5b ab19 	vmov	sl, fp, d9
 800aa88:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	f2c0 8148 	blt.w	800ad20 <_dtoa_r+0x700>
 800aa90:	9a00      	ldr	r2, [sp, #0]
 800aa92:	2a0e      	cmp	r2, #14
 800aa94:	f300 8144 	bgt.w	800ad20 <_dtoa_r+0x700>
 800aa98:	4b67      	ldr	r3, [pc, #412]	; (800ac38 <_dtoa_r+0x618>)
 800aa9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aaa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f280 80d5 	bge.w	800ac54 <_dtoa_r+0x634>
 800aaaa:	9b03      	ldr	r3, [sp, #12]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	f300 80d1 	bgt.w	800ac54 <_dtoa_r+0x634>
 800aab2:	f040 826f 	bne.w	800af94 <_dtoa_r+0x974>
 800aab6:	4b65      	ldr	r3, [pc, #404]	; (800ac4c <_dtoa_r+0x62c>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	4640      	mov	r0, r8
 800aabc:	4649      	mov	r1, r9
 800aabe:	f7f5 fd9b 	bl	80005f8 <__aeabi_dmul>
 800aac2:	4652      	mov	r2, sl
 800aac4:	465b      	mov	r3, fp
 800aac6:	f7f6 f81d 	bl	8000b04 <__aeabi_dcmpge>
 800aaca:	9e03      	ldr	r6, [sp, #12]
 800aacc:	4637      	mov	r7, r6
 800aace:	2800      	cmp	r0, #0
 800aad0:	f040 8245 	bne.w	800af5e <_dtoa_r+0x93e>
 800aad4:	9d01      	ldr	r5, [sp, #4]
 800aad6:	2331      	movs	r3, #49	; 0x31
 800aad8:	f805 3b01 	strb.w	r3, [r5], #1
 800aadc:	9b00      	ldr	r3, [sp, #0]
 800aade:	3301      	adds	r3, #1
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	e240      	b.n	800af66 <_dtoa_r+0x946>
 800aae4:	07f2      	lsls	r2, r6, #31
 800aae6:	d505      	bpl.n	800aaf4 <_dtoa_r+0x4d4>
 800aae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaec:	f7f5 fd84 	bl	80005f8 <__aeabi_dmul>
 800aaf0:	3501      	adds	r5, #1
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	1076      	asrs	r6, r6, #1
 800aaf6:	3708      	adds	r7, #8
 800aaf8:	e777      	b.n	800a9ea <_dtoa_r+0x3ca>
 800aafa:	2502      	movs	r5, #2
 800aafc:	e779      	b.n	800a9f2 <_dtoa_r+0x3d2>
 800aafe:	9f00      	ldr	r7, [sp, #0]
 800ab00:	9e03      	ldr	r6, [sp, #12]
 800ab02:	e794      	b.n	800aa2e <_dtoa_r+0x40e>
 800ab04:	9901      	ldr	r1, [sp, #4]
 800ab06:	4b4c      	ldr	r3, [pc, #304]	; (800ac38 <_dtoa_r+0x618>)
 800ab08:	4431      	add	r1, r6
 800ab0a:	910d      	str	r1, [sp, #52]	; 0x34
 800ab0c:	9908      	ldr	r1, [sp, #32]
 800ab0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ab12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab16:	2900      	cmp	r1, #0
 800ab18:	d043      	beq.n	800aba2 <_dtoa_r+0x582>
 800ab1a:	494d      	ldr	r1, [pc, #308]	; (800ac50 <_dtoa_r+0x630>)
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	f7f5 fe95 	bl	800084c <__aeabi_ddiv>
 800ab22:	4652      	mov	r2, sl
 800ab24:	465b      	mov	r3, fp
 800ab26:	f7f5 fbaf 	bl	8000288 <__aeabi_dsub>
 800ab2a:	9d01      	ldr	r5, [sp, #4]
 800ab2c:	4682      	mov	sl, r0
 800ab2e:	468b      	mov	fp, r1
 800ab30:	4649      	mov	r1, r9
 800ab32:	4640      	mov	r0, r8
 800ab34:	f7f6 f810 	bl	8000b58 <__aeabi_d2iz>
 800ab38:	4606      	mov	r6, r0
 800ab3a:	f7f5 fcf3 	bl	8000524 <__aeabi_i2d>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	4640      	mov	r0, r8
 800ab44:	4649      	mov	r1, r9
 800ab46:	f7f5 fb9f 	bl	8000288 <__aeabi_dsub>
 800ab4a:	3630      	adds	r6, #48	; 0x30
 800ab4c:	f805 6b01 	strb.w	r6, [r5], #1
 800ab50:	4652      	mov	r2, sl
 800ab52:	465b      	mov	r3, fp
 800ab54:	4680      	mov	r8, r0
 800ab56:	4689      	mov	r9, r1
 800ab58:	f7f5 ffc0 	bl	8000adc <__aeabi_dcmplt>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d163      	bne.n	800ac28 <_dtoa_r+0x608>
 800ab60:	4642      	mov	r2, r8
 800ab62:	464b      	mov	r3, r9
 800ab64:	4936      	ldr	r1, [pc, #216]	; (800ac40 <_dtoa_r+0x620>)
 800ab66:	2000      	movs	r0, #0
 800ab68:	f7f5 fb8e 	bl	8000288 <__aeabi_dsub>
 800ab6c:	4652      	mov	r2, sl
 800ab6e:	465b      	mov	r3, fp
 800ab70:	f7f5 ffb4 	bl	8000adc <__aeabi_dcmplt>
 800ab74:	2800      	cmp	r0, #0
 800ab76:	f040 80b5 	bne.w	800ace4 <_dtoa_r+0x6c4>
 800ab7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab7c:	429d      	cmp	r5, r3
 800ab7e:	d081      	beq.n	800aa84 <_dtoa_r+0x464>
 800ab80:	4b30      	ldr	r3, [pc, #192]	; (800ac44 <_dtoa_r+0x624>)
 800ab82:	2200      	movs	r2, #0
 800ab84:	4650      	mov	r0, sl
 800ab86:	4659      	mov	r1, fp
 800ab88:	f7f5 fd36 	bl	80005f8 <__aeabi_dmul>
 800ab8c:	4b2d      	ldr	r3, [pc, #180]	; (800ac44 <_dtoa_r+0x624>)
 800ab8e:	4682      	mov	sl, r0
 800ab90:	468b      	mov	fp, r1
 800ab92:	4640      	mov	r0, r8
 800ab94:	4649      	mov	r1, r9
 800ab96:	2200      	movs	r2, #0
 800ab98:	f7f5 fd2e 	bl	80005f8 <__aeabi_dmul>
 800ab9c:	4680      	mov	r8, r0
 800ab9e:	4689      	mov	r9, r1
 800aba0:	e7c6      	b.n	800ab30 <_dtoa_r+0x510>
 800aba2:	4650      	mov	r0, sl
 800aba4:	4659      	mov	r1, fp
 800aba6:	f7f5 fd27 	bl	80005f8 <__aeabi_dmul>
 800abaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abac:	9d01      	ldr	r5, [sp, #4]
 800abae:	930f      	str	r3, [sp, #60]	; 0x3c
 800abb0:	4682      	mov	sl, r0
 800abb2:	468b      	mov	fp, r1
 800abb4:	4649      	mov	r1, r9
 800abb6:	4640      	mov	r0, r8
 800abb8:	f7f5 ffce 	bl	8000b58 <__aeabi_d2iz>
 800abbc:	4606      	mov	r6, r0
 800abbe:	f7f5 fcb1 	bl	8000524 <__aeabi_i2d>
 800abc2:	3630      	adds	r6, #48	; 0x30
 800abc4:	4602      	mov	r2, r0
 800abc6:	460b      	mov	r3, r1
 800abc8:	4640      	mov	r0, r8
 800abca:	4649      	mov	r1, r9
 800abcc:	f7f5 fb5c 	bl	8000288 <__aeabi_dsub>
 800abd0:	f805 6b01 	strb.w	r6, [r5], #1
 800abd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abd6:	429d      	cmp	r5, r3
 800abd8:	4680      	mov	r8, r0
 800abda:	4689      	mov	r9, r1
 800abdc:	f04f 0200 	mov.w	r2, #0
 800abe0:	d124      	bne.n	800ac2c <_dtoa_r+0x60c>
 800abe2:	4b1b      	ldr	r3, [pc, #108]	; (800ac50 <_dtoa_r+0x630>)
 800abe4:	4650      	mov	r0, sl
 800abe6:	4659      	mov	r1, fp
 800abe8:	f7f5 fb50 	bl	800028c <__adddf3>
 800abec:	4602      	mov	r2, r0
 800abee:	460b      	mov	r3, r1
 800abf0:	4640      	mov	r0, r8
 800abf2:	4649      	mov	r1, r9
 800abf4:	f7f5 ff90 	bl	8000b18 <__aeabi_dcmpgt>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d173      	bne.n	800ace4 <_dtoa_r+0x6c4>
 800abfc:	4652      	mov	r2, sl
 800abfe:	465b      	mov	r3, fp
 800ac00:	4913      	ldr	r1, [pc, #76]	; (800ac50 <_dtoa_r+0x630>)
 800ac02:	2000      	movs	r0, #0
 800ac04:	f7f5 fb40 	bl	8000288 <__aeabi_dsub>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	4640      	mov	r0, r8
 800ac0e:	4649      	mov	r1, r9
 800ac10:	f7f5 ff64 	bl	8000adc <__aeabi_dcmplt>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	f43f af35 	beq.w	800aa84 <_dtoa_r+0x464>
 800ac1a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ac1c:	1e6b      	subs	r3, r5, #1
 800ac1e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac20:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac24:	2b30      	cmp	r3, #48	; 0x30
 800ac26:	d0f8      	beq.n	800ac1a <_dtoa_r+0x5fa>
 800ac28:	9700      	str	r7, [sp, #0]
 800ac2a:	e049      	b.n	800acc0 <_dtoa_r+0x6a0>
 800ac2c:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <_dtoa_r+0x624>)
 800ac2e:	f7f5 fce3 	bl	80005f8 <__aeabi_dmul>
 800ac32:	4680      	mov	r8, r0
 800ac34:	4689      	mov	r9, r1
 800ac36:	e7bd      	b.n	800abb4 <_dtoa_r+0x594>
 800ac38:	0800d0c0 	.word	0x0800d0c0
 800ac3c:	0800d098 	.word	0x0800d098
 800ac40:	3ff00000 	.word	0x3ff00000
 800ac44:	40240000 	.word	0x40240000
 800ac48:	401c0000 	.word	0x401c0000
 800ac4c:	40140000 	.word	0x40140000
 800ac50:	3fe00000 	.word	0x3fe00000
 800ac54:	9d01      	ldr	r5, [sp, #4]
 800ac56:	4656      	mov	r6, sl
 800ac58:	465f      	mov	r7, fp
 800ac5a:	4642      	mov	r2, r8
 800ac5c:	464b      	mov	r3, r9
 800ac5e:	4630      	mov	r0, r6
 800ac60:	4639      	mov	r1, r7
 800ac62:	f7f5 fdf3 	bl	800084c <__aeabi_ddiv>
 800ac66:	f7f5 ff77 	bl	8000b58 <__aeabi_d2iz>
 800ac6a:	4682      	mov	sl, r0
 800ac6c:	f7f5 fc5a 	bl	8000524 <__aeabi_i2d>
 800ac70:	4642      	mov	r2, r8
 800ac72:	464b      	mov	r3, r9
 800ac74:	f7f5 fcc0 	bl	80005f8 <__aeabi_dmul>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	4639      	mov	r1, r7
 800ac80:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ac84:	f7f5 fb00 	bl	8000288 <__aeabi_dsub>
 800ac88:	f805 6b01 	strb.w	r6, [r5], #1
 800ac8c:	9e01      	ldr	r6, [sp, #4]
 800ac8e:	9f03      	ldr	r7, [sp, #12]
 800ac90:	1bae      	subs	r6, r5, r6
 800ac92:	42b7      	cmp	r7, r6
 800ac94:	4602      	mov	r2, r0
 800ac96:	460b      	mov	r3, r1
 800ac98:	d135      	bne.n	800ad06 <_dtoa_r+0x6e6>
 800ac9a:	f7f5 faf7 	bl	800028c <__adddf3>
 800ac9e:	4642      	mov	r2, r8
 800aca0:	464b      	mov	r3, r9
 800aca2:	4606      	mov	r6, r0
 800aca4:	460f      	mov	r7, r1
 800aca6:	f7f5 ff37 	bl	8000b18 <__aeabi_dcmpgt>
 800acaa:	b9d0      	cbnz	r0, 800ace2 <_dtoa_r+0x6c2>
 800acac:	4642      	mov	r2, r8
 800acae:	464b      	mov	r3, r9
 800acb0:	4630      	mov	r0, r6
 800acb2:	4639      	mov	r1, r7
 800acb4:	f7f5 ff08 	bl	8000ac8 <__aeabi_dcmpeq>
 800acb8:	b110      	cbz	r0, 800acc0 <_dtoa_r+0x6a0>
 800acba:	f01a 0f01 	tst.w	sl, #1
 800acbe:	d110      	bne.n	800ace2 <_dtoa_r+0x6c2>
 800acc0:	4620      	mov	r0, r4
 800acc2:	ee18 1a10 	vmov	r1, s16
 800acc6:	f000 fae5 	bl	800b294 <_Bfree>
 800acca:	2300      	movs	r3, #0
 800accc:	9800      	ldr	r0, [sp, #0]
 800acce:	702b      	strb	r3, [r5, #0]
 800acd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acd2:	3001      	adds	r0, #1
 800acd4:	6018      	str	r0, [r3, #0]
 800acd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800acd8:	2b00      	cmp	r3, #0
 800acda:	f43f acf1 	beq.w	800a6c0 <_dtoa_r+0xa0>
 800acde:	601d      	str	r5, [r3, #0]
 800ace0:	e4ee      	b.n	800a6c0 <_dtoa_r+0xa0>
 800ace2:	9f00      	ldr	r7, [sp, #0]
 800ace4:	462b      	mov	r3, r5
 800ace6:	461d      	mov	r5, r3
 800ace8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acec:	2a39      	cmp	r2, #57	; 0x39
 800acee:	d106      	bne.n	800acfe <_dtoa_r+0x6de>
 800acf0:	9a01      	ldr	r2, [sp, #4]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d1f7      	bne.n	800ace6 <_dtoa_r+0x6c6>
 800acf6:	9901      	ldr	r1, [sp, #4]
 800acf8:	2230      	movs	r2, #48	; 0x30
 800acfa:	3701      	adds	r7, #1
 800acfc:	700a      	strb	r2, [r1, #0]
 800acfe:	781a      	ldrb	r2, [r3, #0]
 800ad00:	3201      	adds	r2, #1
 800ad02:	701a      	strb	r2, [r3, #0]
 800ad04:	e790      	b.n	800ac28 <_dtoa_r+0x608>
 800ad06:	4ba6      	ldr	r3, [pc, #664]	; (800afa0 <_dtoa_r+0x980>)
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f7f5 fc75 	bl	80005f8 <__aeabi_dmul>
 800ad0e:	2200      	movs	r2, #0
 800ad10:	2300      	movs	r3, #0
 800ad12:	4606      	mov	r6, r0
 800ad14:	460f      	mov	r7, r1
 800ad16:	f7f5 fed7 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad1a:	2800      	cmp	r0, #0
 800ad1c:	d09d      	beq.n	800ac5a <_dtoa_r+0x63a>
 800ad1e:	e7cf      	b.n	800acc0 <_dtoa_r+0x6a0>
 800ad20:	9a08      	ldr	r2, [sp, #32]
 800ad22:	2a00      	cmp	r2, #0
 800ad24:	f000 80d7 	beq.w	800aed6 <_dtoa_r+0x8b6>
 800ad28:	9a06      	ldr	r2, [sp, #24]
 800ad2a:	2a01      	cmp	r2, #1
 800ad2c:	f300 80ba 	bgt.w	800aea4 <_dtoa_r+0x884>
 800ad30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad32:	2a00      	cmp	r2, #0
 800ad34:	f000 80b2 	beq.w	800ae9c <_dtoa_r+0x87c>
 800ad38:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ad3c:	9e07      	ldr	r6, [sp, #28]
 800ad3e:	9d04      	ldr	r5, [sp, #16]
 800ad40:	9a04      	ldr	r2, [sp, #16]
 800ad42:	441a      	add	r2, r3
 800ad44:	9204      	str	r2, [sp, #16]
 800ad46:	9a05      	ldr	r2, [sp, #20]
 800ad48:	2101      	movs	r1, #1
 800ad4a:	441a      	add	r2, r3
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	9205      	str	r2, [sp, #20]
 800ad50:	f000 fb58 	bl	800b404 <__i2b>
 800ad54:	4607      	mov	r7, r0
 800ad56:	2d00      	cmp	r5, #0
 800ad58:	dd0c      	ble.n	800ad74 <_dtoa_r+0x754>
 800ad5a:	9b05      	ldr	r3, [sp, #20]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	dd09      	ble.n	800ad74 <_dtoa_r+0x754>
 800ad60:	42ab      	cmp	r3, r5
 800ad62:	9a04      	ldr	r2, [sp, #16]
 800ad64:	bfa8      	it	ge
 800ad66:	462b      	movge	r3, r5
 800ad68:	1ad2      	subs	r2, r2, r3
 800ad6a:	9204      	str	r2, [sp, #16]
 800ad6c:	9a05      	ldr	r2, [sp, #20]
 800ad6e:	1aed      	subs	r5, r5, r3
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	9305      	str	r3, [sp, #20]
 800ad74:	9b07      	ldr	r3, [sp, #28]
 800ad76:	b31b      	cbz	r3, 800adc0 <_dtoa_r+0x7a0>
 800ad78:	9b08      	ldr	r3, [sp, #32]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f000 80af 	beq.w	800aede <_dtoa_r+0x8be>
 800ad80:	2e00      	cmp	r6, #0
 800ad82:	dd13      	ble.n	800adac <_dtoa_r+0x78c>
 800ad84:	4639      	mov	r1, r7
 800ad86:	4632      	mov	r2, r6
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f000 fbfb 	bl	800b584 <__pow5mult>
 800ad8e:	ee18 2a10 	vmov	r2, s16
 800ad92:	4601      	mov	r1, r0
 800ad94:	4607      	mov	r7, r0
 800ad96:	4620      	mov	r0, r4
 800ad98:	f000 fb4a 	bl	800b430 <__multiply>
 800ad9c:	ee18 1a10 	vmov	r1, s16
 800ada0:	4680      	mov	r8, r0
 800ada2:	4620      	mov	r0, r4
 800ada4:	f000 fa76 	bl	800b294 <_Bfree>
 800ada8:	ee08 8a10 	vmov	s16, r8
 800adac:	9b07      	ldr	r3, [sp, #28]
 800adae:	1b9a      	subs	r2, r3, r6
 800adb0:	d006      	beq.n	800adc0 <_dtoa_r+0x7a0>
 800adb2:	ee18 1a10 	vmov	r1, s16
 800adb6:	4620      	mov	r0, r4
 800adb8:	f000 fbe4 	bl	800b584 <__pow5mult>
 800adbc:	ee08 0a10 	vmov	s16, r0
 800adc0:	2101      	movs	r1, #1
 800adc2:	4620      	mov	r0, r4
 800adc4:	f000 fb1e 	bl	800b404 <__i2b>
 800adc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adca:	2b00      	cmp	r3, #0
 800adcc:	4606      	mov	r6, r0
 800adce:	f340 8088 	ble.w	800aee2 <_dtoa_r+0x8c2>
 800add2:	461a      	mov	r2, r3
 800add4:	4601      	mov	r1, r0
 800add6:	4620      	mov	r0, r4
 800add8:	f000 fbd4 	bl	800b584 <__pow5mult>
 800addc:	9b06      	ldr	r3, [sp, #24]
 800adde:	2b01      	cmp	r3, #1
 800ade0:	4606      	mov	r6, r0
 800ade2:	f340 8081 	ble.w	800aee8 <_dtoa_r+0x8c8>
 800ade6:	f04f 0800 	mov.w	r8, #0
 800adea:	6933      	ldr	r3, [r6, #16]
 800adec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800adf0:	6918      	ldr	r0, [r3, #16]
 800adf2:	f000 fab7 	bl	800b364 <__hi0bits>
 800adf6:	f1c0 0020 	rsb	r0, r0, #32
 800adfa:	9b05      	ldr	r3, [sp, #20]
 800adfc:	4418      	add	r0, r3
 800adfe:	f010 001f 	ands.w	r0, r0, #31
 800ae02:	f000 8092 	beq.w	800af2a <_dtoa_r+0x90a>
 800ae06:	f1c0 0320 	rsb	r3, r0, #32
 800ae0a:	2b04      	cmp	r3, #4
 800ae0c:	f340 808a 	ble.w	800af24 <_dtoa_r+0x904>
 800ae10:	f1c0 001c 	rsb	r0, r0, #28
 800ae14:	9b04      	ldr	r3, [sp, #16]
 800ae16:	4403      	add	r3, r0
 800ae18:	9304      	str	r3, [sp, #16]
 800ae1a:	9b05      	ldr	r3, [sp, #20]
 800ae1c:	4403      	add	r3, r0
 800ae1e:	4405      	add	r5, r0
 800ae20:	9305      	str	r3, [sp, #20]
 800ae22:	9b04      	ldr	r3, [sp, #16]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	dd07      	ble.n	800ae38 <_dtoa_r+0x818>
 800ae28:	ee18 1a10 	vmov	r1, s16
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f000 fc02 	bl	800b638 <__lshift>
 800ae34:	ee08 0a10 	vmov	s16, r0
 800ae38:	9b05      	ldr	r3, [sp, #20]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	dd05      	ble.n	800ae4a <_dtoa_r+0x82a>
 800ae3e:	4631      	mov	r1, r6
 800ae40:	461a      	mov	r2, r3
 800ae42:	4620      	mov	r0, r4
 800ae44:	f000 fbf8 	bl	800b638 <__lshift>
 800ae48:	4606      	mov	r6, r0
 800ae4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d06e      	beq.n	800af2e <_dtoa_r+0x90e>
 800ae50:	ee18 0a10 	vmov	r0, s16
 800ae54:	4631      	mov	r1, r6
 800ae56:	f000 fc5f 	bl	800b718 <__mcmp>
 800ae5a:	2800      	cmp	r0, #0
 800ae5c:	da67      	bge.n	800af2e <_dtoa_r+0x90e>
 800ae5e:	9b00      	ldr	r3, [sp, #0]
 800ae60:	3b01      	subs	r3, #1
 800ae62:	ee18 1a10 	vmov	r1, s16
 800ae66:	9300      	str	r3, [sp, #0]
 800ae68:	220a      	movs	r2, #10
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	4620      	mov	r0, r4
 800ae6e:	f000 fa33 	bl	800b2d8 <__multadd>
 800ae72:	9b08      	ldr	r3, [sp, #32]
 800ae74:	ee08 0a10 	vmov	s16, r0
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f000 81b1 	beq.w	800b1e0 <_dtoa_r+0xbc0>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	4639      	mov	r1, r7
 800ae82:	220a      	movs	r2, #10
 800ae84:	4620      	mov	r0, r4
 800ae86:	f000 fa27 	bl	800b2d8 <__multadd>
 800ae8a:	9b02      	ldr	r3, [sp, #8]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	4607      	mov	r7, r0
 800ae90:	f300 808e 	bgt.w	800afb0 <_dtoa_r+0x990>
 800ae94:	9b06      	ldr	r3, [sp, #24]
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	dc51      	bgt.n	800af3e <_dtoa_r+0x91e>
 800ae9a:	e089      	b.n	800afb0 <_dtoa_r+0x990>
 800ae9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae9e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aea2:	e74b      	b.n	800ad3c <_dtoa_r+0x71c>
 800aea4:	9b03      	ldr	r3, [sp, #12]
 800aea6:	1e5e      	subs	r6, r3, #1
 800aea8:	9b07      	ldr	r3, [sp, #28]
 800aeaa:	42b3      	cmp	r3, r6
 800aeac:	bfbf      	itttt	lt
 800aeae:	9b07      	ldrlt	r3, [sp, #28]
 800aeb0:	9607      	strlt	r6, [sp, #28]
 800aeb2:	1af2      	sublt	r2, r6, r3
 800aeb4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aeb6:	bfb6      	itet	lt
 800aeb8:	189b      	addlt	r3, r3, r2
 800aeba:	1b9e      	subge	r6, r3, r6
 800aebc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aebe:	9b03      	ldr	r3, [sp, #12]
 800aec0:	bfb8      	it	lt
 800aec2:	2600      	movlt	r6, #0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	bfb7      	itett	lt
 800aec8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aecc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800aed0:	1a9d      	sublt	r5, r3, r2
 800aed2:	2300      	movlt	r3, #0
 800aed4:	e734      	b.n	800ad40 <_dtoa_r+0x720>
 800aed6:	9e07      	ldr	r6, [sp, #28]
 800aed8:	9d04      	ldr	r5, [sp, #16]
 800aeda:	9f08      	ldr	r7, [sp, #32]
 800aedc:	e73b      	b.n	800ad56 <_dtoa_r+0x736>
 800aede:	9a07      	ldr	r2, [sp, #28]
 800aee0:	e767      	b.n	800adb2 <_dtoa_r+0x792>
 800aee2:	9b06      	ldr	r3, [sp, #24]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	dc18      	bgt.n	800af1a <_dtoa_r+0x8fa>
 800aee8:	f1ba 0f00 	cmp.w	sl, #0
 800aeec:	d115      	bne.n	800af1a <_dtoa_r+0x8fa>
 800aeee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aef2:	b993      	cbnz	r3, 800af1a <_dtoa_r+0x8fa>
 800aef4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aef8:	0d1b      	lsrs	r3, r3, #20
 800aefa:	051b      	lsls	r3, r3, #20
 800aefc:	b183      	cbz	r3, 800af20 <_dtoa_r+0x900>
 800aefe:	9b04      	ldr	r3, [sp, #16]
 800af00:	3301      	adds	r3, #1
 800af02:	9304      	str	r3, [sp, #16]
 800af04:	9b05      	ldr	r3, [sp, #20]
 800af06:	3301      	adds	r3, #1
 800af08:	9305      	str	r3, [sp, #20]
 800af0a:	f04f 0801 	mov.w	r8, #1
 800af0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af10:	2b00      	cmp	r3, #0
 800af12:	f47f af6a 	bne.w	800adea <_dtoa_r+0x7ca>
 800af16:	2001      	movs	r0, #1
 800af18:	e76f      	b.n	800adfa <_dtoa_r+0x7da>
 800af1a:	f04f 0800 	mov.w	r8, #0
 800af1e:	e7f6      	b.n	800af0e <_dtoa_r+0x8ee>
 800af20:	4698      	mov	r8, r3
 800af22:	e7f4      	b.n	800af0e <_dtoa_r+0x8ee>
 800af24:	f43f af7d 	beq.w	800ae22 <_dtoa_r+0x802>
 800af28:	4618      	mov	r0, r3
 800af2a:	301c      	adds	r0, #28
 800af2c:	e772      	b.n	800ae14 <_dtoa_r+0x7f4>
 800af2e:	9b03      	ldr	r3, [sp, #12]
 800af30:	2b00      	cmp	r3, #0
 800af32:	dc37      	bgt.n	800afa4 <_dtoa_r+0x984>
 800af34:	9b06      	ldr	r3, [sp, #24]
 800af36:	2b02      	cmp	r3, #2
 800af38:	dd34      	ble.n	800afa4 <_dtoa_r+0x984>
 800af3a:	9b03      	ldr	r3, [sp, #12]
 800af3c:	9302      	str	r3, [sp, #8]
 800af3e:	9b02      	ldr	r3, [sp, #8]
 800af40:	b96b      	cbnz	r3, 800af5e <_dtoa_r+0x93e>
 800af42:	4631      	mov	r1, r6
 800af44:	2205      	movs	r2, #5
 800af46:	4620      	mov	r0, r4
 800af48:	f000 f9c6 	bl	800b2d8 <__multadd>
 800af4c:	4601      	mov	r1, r0
 800af4e:	4606      	mov	r6, r0
 800af50:	ee18 0a10 	vmov	r0, s16
 800af54:	f000 fbe0 	bl	800b718 <__mcmp>
 800af58:	2800      	cmp	r0, #0
 800af5a:	f73f adbb 	bgt.w	800aad4 <_dtoa_r+0x4b4>
 800af5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af60:	9d01      	ldr	r5, [sp, #4]
 800af62:	43db      	mvns	r3, r3
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	f04f 0800 	mov.w	r8, #0
 800af6a:	4631      	mov	r1, r6
 800af6c:	4620      	mov	r0, r4
 800af6e:	f000 f991 	bl	800b294 <_Bfree>
 800af72:	2f00      	cmp	r7, #0
 800af74:	f43f aea4 	beq.w	800acc0 <_dtoa_r+0x6a0>
 800af78:	f1b8 0f00 	cmp.w	r8, #0
 800af7c:	d005      	beq.n	800af8a <_dtoa_r+0x96a>
 800af7e:	45b8      	cmp	r8, r7
 800af80:	d003      	beq.n	800af8a <_dtoa_r+0x96a>
 800af82:	4641      	mov	r1, r8
 800af84:	4620      	mov	r0, r4
 800af86:	f000 f985 	bl	800b294 <_Bfree>
 800af8a:	4639      	mov	r1, r7
 800af8c:	4620      	mov	r0, r4
 800af8e:	f000 f981 	bl	800b294 <_Bfree>
 800af92:	e695      	b.n	800acc0 <_dtoa_r+0x6a0>
 800af94:	2600      	movs	r6, #0
 800af96:	4637      	mov	r7, r6
 800af98:	e7e1      	b.n	800af5e <_dtoa_r+0x93e>
 800af9a:	9700      	str	r7, [sp, #0]
 800af9c:	4637      	mov	r7, r6
 800af9e:	e599      	b.n	800aad4 <_dtoa_r+0x4b4>
 800afa0:	40240000 	.word	0x40240000
 800afa4:	9b08      	ldr	r3, [sp, #32]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 80ca 	beq.w	800b140 <_dtoa_r+0xb20>
 800afac:	9b03      	ldr	r3, [sp, #12]
 800afae:	9302      	str	r3, [sp, #8]
 800afb0:	2d00      	cmp	r5, #0
 800afb2:	dd05      	ble.n	800afc0 <_dtoa_r+0x9a0>
 800afb4:	4639      	mov	r1, r7
 800afb6:	462a      	mov	r2, r5
 800afb8:	4620      	mov	r0, r4
 800afba:	f000 fb3d 	bl	800b638 <__lshift>
 800afbe:	4607      	mov	r7, r0
 800afc0:	f1b8 0f00 	cmp.w	r8, #0
 800afc4:	d05b      	beq.n	800b07e <_dtoa_r+0xa5e>
 800afc6:	6879      	ldr	r1, [r7, #4]
 800afc8:	4620      	mov	r0, r4
 800afca:	f000 f923 	bl	800b214 <_Balloc>
 800afce:	4605      	mov	r5, r0
 800afd0:	b928      	cbnz	r0, 800afde <_dtoa_r+0x9be>
 800afd2:	4b87      	ldr	r3, [pc, #540]	; (800b1f0 <_dtoa_r+0xbd0>)
 800afd4:	4602      	mov	r2, r0
 800afd6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800afda:	f7ff bb3b 	b.w	800a654 <_dtoa_r+0x34>
 800afde:	693a      	ldr	r2, [r7, #16]
 800afe0:	3202      	adds	r2, #2
 800afe2:	0092      	lsls	r2, r2, #2
 800afe4:	f107 010c 	add.w	r1, r7, #12
 800afe8:	300c      	adds	r0, #12
 800afea:	f7fe fe0d 	bl	8009c08 <memcpy>
 800afee:	2201      	movs	r2, #1
 800aff0:	4629      	mov	r1, r5
 800aff2:	4620      	mov	r0, r4
 800aff4:	f000 fb20 	bl	800b638 <__lshift>
 800aff8:	9b01      	ldr	r3, [sp, #4]
 800affa:	f103 0901 	add.w	r9, r3, #1
 800affe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b002:	4413      	add	r3, r2
 800b004:	9305      	str	r3, [sp, #20]
 800b006:	f00a 0301 	and.w	r3, sl, #1
 800b00a:	46b8      	mov	r8, r7
 800b00c:	9304      	str	r3, [sp, #16]
 800b00e:	4607      	mov	r7, r0
 800b010:	4631      	mov	r1, r6
 800b012:	ee18 0a10 	vmov	r0, s16
 800b016:	f7ff fa77 	bl	800a508 <quorem>
 800b01a:	4641      	mov	r1, r8
 800b01c:	9002      	str	r0, [sp, #8]
 800b01e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b022:	ee18 0a10 	vmov	r0, s16
 800b026:	f000 fb77 	bl	800b718 <__mcmp>
 800b02a:	463a      	mov	r2, r7
 800b02c:	9003      	str	r0, [sp, #12]
 800b02e:	4631      	mov	r1, r6
 800b030:	4620      	mov	r0, r4
 800b032:	f000 fb8d 	bl	800b750 <__mdiff>
 800b036:	68c2      	ldr	r2, [r0, #12]
 800b038:	f109 3bff 	add.w	fp, r9, #4294967295
 800b03c:	4605      	mov	r5, r0
 800b03e:	bb02      	cbnz	r2, 800b082 <_dtoa_r+0xa62>
 800b040:	4601      	mov	r1, r0
 800b042:	ee18 0a10 	vmov	r0, s16
 800b046:	f000 fb67 	bl	800b718 <__mcmp>
 800b04a:	4602      	mov	r2, r0
 800b04c:	4629      	mov	r1, r5
 800b04e:	4620      	mov	r0, r4
 800b050:	9207      	str	r2, [sp, #28]
 800b052:	f000 f91f 	bl	800b294 <_Bfree>
 800b056:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b05a:	ea43 0102 	orr.w	r1, r3, r2
 800b05e:	9b04      	ldr	r3, [sp, #16]
 800b060:	430b      	orrs	r3, r1
 800b062:	464d      	mov	r5, r9
 800b064:	d10f      	bne.n	800b086 <_dtoa_r+0xa66>
 800b066:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b06a:	d02a      	beq.n	800b0c2 <_dtoa_r+0xaa2>
 800b06c:	9b03      	ldr	r3, [sp, #12]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	dd02      	ble.n	800b078 <_dtoa_r+0xa58>
 800b072:	9b02      	ldr	r3, [sp, #8]
 800b074:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b078:	f88b a000 	strb.w	sl, [fp]
 800b07c:	e775      	b.n	800af6a <_dtoa_r+0x94a>
 800b07e:	4638      	mov	r0, r7
 800b080:	e7ba      	b.n	800aff8 <_dtoa_r+0x9d8>
 800b082:	2201      	movs	r2, #1
 800b084:	e7e2      	b.n	800b04c <_dtoa_r+0xa2c>
 800b086:	9b03      	ldr	r3, [sp, #12]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	db04      	blt.n	800b096 <_dtoa_r+0xa76>
 800b08c:	9906      	ldr	r1, [sp, #24]
 800b08e:	430b      	orrs	r3, r1
 800b090:	9904      	ldr	r1, [sp, #16]
 800b092:	430b      	orrs	r3, r1
 800b094:	d122      	bne.n	800b0dc <_dtoa_r+0xabc>
 800b096:	2a00      	cmp	r2, #0
 800b098:	ddee      	ble.n	800b078 <_dtoa_r+0xa58>
 800b09a:	ee18 1a10 	vmov	r1, s16
 800b09e:	2201      	movs	r2, #1
 800b0a0:	4620      	mov	r0, r4
 800b0a2:	f000 fac9 	bl	800b638 <__lshift>
 800b0a6:	4631      	mov	r1, r6
 800b0a8:	ee08 0a10 	vmov	s16, r0
 800b0ac:	f000 fb34 	bl	800b718 <__mcmp>
 800b0b0:	2800      	cmp	r0, #0
 800b0b2:	dc03      	bgt.n	800b0bc <_dtoa_r+0xa9c>
 800b0b4:	d1e0      	bne.n	800b078 <_dtoa_r+0xa58>
 800b0b6:	f01a 0f01 	tst.w	sl, #1
 800b0ba:	d0dd      	beq.n	800b078 <_dtoa_r+0xa58>
 800b0bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b0c0:	d1d7      	bne.n	800b072 <_dtoa_r+0xa52>
 800b0c2:	2339      	movs	r3, #57	; 0x39
 800b0c4:	f88b 3000 	strb.w	r3, [fp]
 800b0c8:	462b      	mov	r3, r5
 800b0ca:	461d      	mov	r5, r3
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b0d2:	2a39      	cmp	r2, #57	; 0x39
 800b0d4:	d071      	beq.n	800b1ba <_dtoa_r+0xb9a>
 800b0d6:	3201      	adds	r2, #1
 800b0d8:	701a      	strb	r2, [r3, #0]
 800b0da:	e746      	b.n	800af6a <_dtoa_r+0x94a>
 800b0dc:	2a00      	cmp	r2, #0
 800b0de:	dd07      	ble.n	800b0f0 <_dtoa_r+0xad0>
 800b0e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b0e4:	d0ed      	beq.n	800b0c2 <_dtoa_r+0xaa2>
 800b0e6:	f10a 0301 	add.w	r3, sl, #1
 800b0ea:	f88b 3000 	strb.w	r3, [fp]
 800b0ee:	e73c      	b.n	800af6a <_dtoa_r+0x94a>
 800b0f0:	9b05      	ldr	r3, [sp, #20]
 800b0f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b0f6:	4599      	cmp	r9, r3
 800b0f8:	d047      	beq.n	800b18a <_dtoa_r+0xb6a>
 800b0fa:	ee18 1a10 	vmov	r1, s16
 800b0fe:	2300      	movs	r3, #0
 800b100:	220a      	movs	r2, #10
 800b102:	4620      	mov	r0, r4
 800b104:	f000 f8e8 	bl	800b2d8 <__multadd>
 800b108:	45b8      	cmp	r8, r7
 800b10a:	ee08 0a10 	vmov	s16, r0
 800b10e:	f04f 0300 	mov.w	r3, #0
 800b112:	f04f 020a 	mov.w	r2, #10
 800b116:	4641      	mov	r1, r8
 800b118:	4620      	mov	r0, r4
 800b11a:	d106      	bne.n	800b12a <_dtoa_r+0xb0a>
 800b11c:	f000 f8dc 	bl	800b2d8 <__multadd>
 800b120:	4680      	mov	r8, r0
 800b122:	4607      	mov	r7, r0
 800b124:	f109 0901 	add.w	r9, r9, #1
 800b128:	e772      	b.n	800b010 <_dtoa_r+0x9f0>
 800b12a:	f000 f8d5 	bl	800b2d8 <__multadd>
 800b12e:	4639      	mov	r1, r7
 800b130:	4680      	mov	r8, r0
 800b132:	2300      	movs	r3, #0
 800b134:	220a      	movs	r2, #10
 800b136:	4620      	mov	r0, r4
 800b138:	f000 f8ce 	bl	800b2d8 <__multadd>
 800b13c:	4607      	mov	r7, r0
 800b13e:	e7f1      	b.n	800b124 <_dtoa_r+0xb04>
 800b140:	9b03      	ldr	r3, [sp, #12]
 800b142:	9302      	str	r3, [sp, #8]
 800b144:	9d01      	ldr	r5, [sp, #4]
 800b146:	ee18 0a10 	vmov	r0, s16
 800b14a:	4631      	mov	r1, r6
 800b14c:	f7ff f9dc 	bl	800a508 <quorem>
 800b150:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b154:	9b01      	ldr	r3, [sp, #4]
 800b156:	f805 ab01 	strb.w	sl, [r5], #1
 800b15a:	1aea      	subs	r2, r5, r3
 800b15c:	9b02      	ldr	r3, [sp, #8]
 800b15e:	4293      	cmp	r3, r2
 800b160:	dd09      	ble.n	800b176 <_dtoa_r+0xb56>
 800b162:	ee18 1a10 	vmov	r1, s16
 800b166:	2300      	movs	r3, #0
 800b168:	220a      	movs	r2, #10
 800b16a:	4620      	mov	r0, r4
 800b16c:	f000 f8b4 	bl	800b2d8 <__multadd>
 800b170:	ee08 0a10 	vmov	s16, r0
 800b174:	e7e7      	b.n	800b146 <_dtoa_r+0xb26>
 800b176:	9b02      	ldr	r3, [sp, #8]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	bfc8      	it	gt
 800b17c:	461d      	movgt	r5, r3
 800b17e:	9b01      	ldr	r3, [sp, #4]
 800b180:	bfd8      	it	le
 800b182:	2501      	movle	r5, #1
 800b184:	441d      	add	r5, r3
 800b186:	f04f 0800 	mov.w	r8, #0
 800b18a:	ee18 1a10 	vmov	r1, s16
 800b18e:	2201      	movs	r2, #1
 800b190:	4620      	mov	r0, r4
 800b192:	f000 fa51 	bl	800b638 <__lshift>
 800b196:	4631      	mov	r1, r6
 800b198:	ee08 0a10 	vmov	s16, r0
 800b19c:	f000 fabc 	bl	800b718 <__mcmp>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	dc91      	bgt.n	800b0c8 <_dtoa_r+0xaa8>
 800b1a4:	d102      	bne.n	800b1ac <_dtoa_r+0xb8c>
 800b1a6:	f01a 0f01 	tst.w	sl, #1
 800b1aa:	d18d      	bne.n	800b0c8 <_dtoa_r+0xaa8>
 800b1ac:	462b      	mov	r3, r5
 800b1ae:	461d      	mov	r5, r3
 800b1b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b1b4:	2a30      	cmp	r2, #48	; 0x30
 800b1b6:	d0fa      	beq.n	800b1ae <_dtoa_r+0xb8e>
 800b1b8:	e6d7      	b.n	800af6a <_dtoa_r+0x94a>
 800b1ba:	9a01      	ldr	r2, [sp, #4]
 800b1bc:	429a      	cmp	r2, r3
 800b1be:	d184      	bne.n	800b0ca <_dtoa_r+0xaaa>
 800b1c0:	9b00      	ldr	r3, [sp, #0]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	2331      	movs	r3, #49	; 0x31
 800b1c8:	7013      	strb	r3, [r2, #0]
 800b1ca:	e6ce      	b.n	800af6a <_dtoa_r+0x94a>
 800b1cc:	4b09      	ldr	r3, [pc, #36]	; (800b1f4 <_dtoa_r+0xbd4>)
 800b1ce:	f7ff ba95 	b.w	800a6fc <_dtoa_r+0xdc>
 800b1d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f47f aa6e 	bne.w	800a6b6 <_dtoa_r+0x96>
 800b1da:	4b07      	ldr	r3, [pc, #28]	; (800b1f8 <_dtoa_r+0xbd8>)
 800b1dc:	f7ff ba8e 	b.w	800a6fc <_dtoa_r+0xdc>
 800b1e0:	9b02      	ldr	r3, [sp, #8]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	dcae      	bgt.n	800b144 <_dtoa_r+0xb24>
 800b1e6:	9b06      	ldr	r3, [sp, #24]
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	f73f aea8 	bgt.w	800af3e <_dtoa_r+0x91e>
 800b1ee:	e7a9      	b.n	800b144 <_dtoa_r+0xb24>
 800b1f0:	0800d02b 	.word	0x0800d02b
 800b1f4:	0800cf88 	.word	0x0800cf88
 800b1f8:	0800cfac 	.word	0x0800cfac

0800b1fc <_localeconv_r>:
 800b1fc:	4800      	ldr	r0, [pc, #0]	; (800b200 <_localeconv_r+0x4>)
 800b1fe:	4770      	bx	lr
 800b200:	20000164 	.word	0x20000164

0800b204 <malloc>:
 800b204:	4b02      	ldr	r3, [pc, #8]	; (800b210 <malloc+0xc>)
 800b206:	4601      	mov	r1, r0
 800b208:	6818      	ldr	r0, [r3, #0]
 800b20a:	f000 bc09 	b.w	800ba20 <_malloc_r>
 800b20e:	bf00      	nop
 800b210:	20000010 	.word	0x20000010

0800b214 <_Balloc>:
 800b214:	b570      	push	{r4, r5, r6, lr}
 800b216:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b218:	4604      	mov	r4, r0
 800b21a:	460d      	mov	r5, r1
 800b21c:	b976      	cbnz	r6, 800b23c <_Balloc+0x28>
 800b21e:	2010      	movs	r0, #16
 800b220:	f7ff fff0 	bl	800b204 <malloc>
 800b224:	4602      	mov	r2, r0
 800b226:	6260      	str	r0, [r4, #36]	; 0x24
 800b228:	b920      	cbnz	r0, 800b234 <_Balloc+0x20>
 800b22a:	4b18      	ldr	r3, [pc, #96]	; (800b28c <_Balloc+0x78>)
 800b22c:	4818      	ldr	r0, [pc, #96]	; (800b290 <_Balloc+0x7c>)
 800b22e:	2166      	movs	r1, #102	; 0x66
 800b230:	f000 fc7a 	bl	800bb28 <__assert_func>
 800b234:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b238:	6006      	str	r6, [r0, #0]
 800b23a:	60c6      	str	r6, [r0, #12]
 800b23c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b23e:	68f3      	ldr	r3, [r6, #12]
 800b240:	b183      	cbz	r3, 800b264 <_Balloc+0x50>
 800b242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b24a:	b9b8      	cbnz	r0, 800b27c <_Balloc+0x68>
 800b24c:	2101      	movs	r1, #1
 800b24e:	fa01 f605 	lsl.w	r6, r1, r5
 800b252:	1d72      	adds	r2, r6, #5
 800b254:	0092      	lsls	r2, r2, #2
 800b256:	4620      	mov	r0, r4
 800b258:	f000 fb60 	bl	800b91c <_calloc_r>
 800b25c:	b160      	cbz	r0, 800b278 <_Balloc+0x64>
 800b25e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b262:	e00e      	b.n	800b282 <_Balloc+0x6e>
 800b264:	2221      	movs	r2, #33	; 0x21
 800b266:	2104      	movs	r1, #4
 800b268:	4620      	mov	r0, r4
 800b26a:	f000 fb57 	bl	800b91c <_calloc_r>
 800b26e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b270:	60f0      	str	r0, [r6, #12]
 800b272:	68db      	ldr	r3, [r3, #12]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d1e4      	bne.n	800b242 <_Balloc+0x2e>
 800b278:	2000      	movs	r0, #0
 800b27a:	bd70      	pop	{r4, r5, r6, pc}
 800b27c:	6802      	ldr	r2, [r0, #0]
 800b27e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b282:	2300      	movs	r3, #0
 800b284:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b288:	e7f7      	b.n	800b27a <_Balloc+0x66>
 800b28a:	bf00      	nop
 800b28c:	0800cfb9 	.word	0x0800cfb9
 800b290:	0800d03c 	.word	0x0800d03c

0800b294 <_Bfree>:
 800b294:	b570      	push	{r4, r5, r6, lr}
 800b296:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b298:	4605      	mov	r5, r0
 800b29a:	460c      	mov	r4, r1
 800b29c:	b976      	cbnz	r6, 800b2bc <_Bfree+0x28>
 800b29e:	2010      	movs	r0, #16
 800b2a0:	f7ff ffb0 	bl	800b204 <malloc>
 800b2a4:	4602      	mov	r2, r0
 800b2a6:	6268      	str	r0, [r5, #36]	; 0x24
 800b2a8:	b920      	cbnz	r0, 800b2b4 <_Bfree+0x20>
 800b2aa:	4b09      	ldr	r3, [pc, #36]	; (800b2d0 <_Bfree+0x3c>)
 800b2ac:	4809      	ldr	r0, [pc, #36]	; (800b2d4 <_Bfree+0x40>)
 800b2ae:	218a      	movs	r1, #138	; 0x8a
 800b2b0:	f000 fc3a 	bl	800bb28 <__assert_func>
 800b2b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2b8:	6006      	str	r6, [r0, #0]
 800b2ba:	60c6      	str	r6, [r0, #12]
 800b2bc:	b13c      	cbz	r4, 800b2ce <_Bfree+0x3a>
 800b2be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b2c0:	6862      	ldr	r2, [r4, #4]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2c8:	6021      	str	r1, [r4, #0]
 800b2ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b2ce:	bd70      	pop	{r4, r5, r6, pc}
 800b2d0:	0800cfb9 	.word	0x0800cfb9
 800b2d4:	0800d03c 	.word	0x0800d03c

0800b2d8 <__multadd>:
 800b2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2dc:	690d      	ldr	r5, [r1, #16]
 800b2de:	4607      	mov	r7, r0
 800b2e0:	460c      	mov	r4, r1
 800b2e2:	461e      	mov	r6, r3
 800b2e4:	f101 0c14 	add.w	ip, r1, #20
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	f8dc 3000 	ldr.w	r3, [ip]
 800b2ee:	b299      	uxth	r1, r3
 800b2f0:	fb02 6101 	mla	r1, r2, r1, r6
 800b2f4:	0c1e      	lsrs	r6, r3, #16
 800b2f6:	0c0b      	lsrs	r3, r1, #16
 800b2f8:	fb02 3306 	mla	r3, r2, r6, r3
 800b2fc:	b289      	uxth	r1, r1
 800b2fe:	3001      	adds	r0, #1
 800b300:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b304:	4285      	cmp	r5, r0
 800b306:	f84c 1b04 	str.w	r1, [ip], #4
 800b30a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b30e:	dcec      	bgt.n	800b2ea <__multadd+0x12>
 800b310:	b30e      	cbz	r6, 800b356 <__multadd+0x7e>
 800b312:	68a3      	ldr	r3, [r4, #8]
 800b314:	42ab      	cmp	r3, r5
 800b316:	dc19      	bgt.n	800b34c <__multadd+0x74>
 800b318:	6861      	ldr	r1, [r4, #4]
 800b31a:	4638      	mov	r0, r7
 800b31c:	3101      	adds	r1, #1
 800b31e:	f7ff ff79 	bl	800b214 <_Balloc>
 800b322:	4680      	mov	r8, r0
 800b324:	b928      	cbnz	r0, 800b332 <__multadd+0x5a>
 800b326:	4602      	mov	r2, r0
 800b328:	4b0c      	ldr	r3, [pc, #48]	; (800b35c <__multadd+0x84>)
 800b32a:	480d      	ldr	r0, [pc, #52]	; (800b360 <__multadd+0x88>)
 800b32c:	21b5      	movs	r1, #181	; 0xb5
 800b32e:	f000 fbfb 	bl	800bb28 <__assert_func>
 800b332:	6922      	ldr	r2, [r4, #16]
 800b334:	3202      	adds	r2, #2
 800b336:	f104 010c 	add.w	r1, r4, #12
 800b33a:	0092      	lsls	r2, r2, #2
 800b33c:	300c      	adds	r0, #12
 800b33e:	f7fe fc63 	bl	8009c08 <memcpy>
 800b342:	4621      	mov	r1, r4
 800b344:	4638      	mov	r0, r7
 800b346:	f7ff ffa5 	bl	800b294 <_Bfree>
 800b34a:	4644      	mov	r4, r8
 800b34c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b350:	3501      	adds	r5, #1
 800b352:	615e      	str	r6, [r3, #20]
 800b354:	6125      	str	r5, [r4, #16]
 800b356:	4620      	mov	r0, r4
 800b358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b35c:	0800d02b 	.word	0x0800d02b
 800b360:	0800d03c 	.word	0x0800d03c

0800b364 <__hi0bits>:
 800b364:	0c03      	lsrs	r3, r0, #16
 800b366:	041b      	lsls	r3, r3, #16
 800b368:	b9d3      	cbnz	r3, 800b3a0 <__hi0bits+0x3c>
 800b36a:	0400      	lsls	r0, r0, #16
 800b36c:	2310      	movs	r3, #16
 800b36e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b372:	bf04      	itt	eq
 800b374:	0200      	lsleq	r0, r0, #8
 800b376:	3308      	addeq	r3, #8
 800b378:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b37c:	bf04      	itt	eq
 800b37e:	0100      	lsleq	r0, r0, #4
 800b380:	3304      	addeq	r3, #4
 800b382:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b386:	bf04      	itt	eq
 800b388:	0080      	lsleq	r0, r0, #2
 800b38a:	3302      	addeq	r3, #2
 800b38c:	2800      	cmp	r0, #0
 800b38e:	db05      	blt.n	800b39c <__hi0bits+0x38>
 800b390:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b394:	f103 0301 	add.w	r3, r3, #1
 800b398:	bf08      	it	eq
 800b39a:	2320      	moveq	r3, #32
 800b39c:	4618      	mov	r0, r3
 800b39e:	4770      	bx	lr
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	e7e4      	b.n	800b36e <__hi0bits+0xa>

0800b3a4 <__lo0bits>:
 800b3a4:	6803      	ldr	r3, [r0, #0]
 800b3a6:	f013 0207 	ands.w	r2, r3, #7
 800b3aa:	4601      	mov	r1, r0
 800b3ac:	d00b      	beq.n	800b3c6 <__lo0bits+0x22>
 800b3ae:	07da      	lsls	r2, r3, #31
 800b3b0:	d423      	bmi.n	800b3fa <__lo0bits+0x56>
 800b3b2:	0798      	lsls	r0, r3, #30
 800b3b4:	bf49      	itett	mi
 800b3b6:	085b      	lsrmi	r3, r3, #1
 800b3b8:	089b      	lsrpl	r3, r3, #2
 800b3ba:	2001      	movmi	r0, #1
 800b3bc:	600b      	strmi	r3, [r1, #0]
 800b3be:	bf5c      	itt	pl
 800b3c0:	600b      	strpl	r3, [r1, #0]
 800b3c2:	2002      	movpl	r0, #2
 800b3c4:	4770      	bx	lr
 800b3c6:	b298      	uxth	r0, r3
 800b3c8:	b9a8      	cbnz	r0, 800b3f6 <__lo0bits+0x52>
 800b3ca:	0c1b      	lsrs	r3, r3, #16
 800b3cc:	2010      	movs	r0, #16
 800b3ce:	b2da      	uxtb	r2, r3
 800b3d0:	b90a      	cbnz	r2, 800b3d6 <__lo0bits+0x32>
 800b3d2:	3008      	adds	r0, #8
 800b3d4:	0a1b      	lsrs	r3, r3, #8
 800b3d6:	071a      	lsls	r2, r3, #28
 800b3d8:	bf04      	itt	eq
 800b3da:	091b      	lsreq	r3, r3, #4
 800b3dc:	3004      	addeq	r0, #4
 800b3de:	079a      	lsls	r2, r3, #30
 800b3e0:	bf04      	itt	eq
 800b3e2:	089b      	lsreq	r3, r3, #2
 800b3e4:	3002      	addeq	r0, #2
 800b3e6:	07da      	lsls	r2, r3, #31
 800b3e8:	d403      	bmi.n	800b3f2 <__lo0bits+0x4e>
 800b3ea:	085b      	lsrs	r3, r3, #1
 800b3ec:	f100 0001 	add.w	r0, r0, #1
 800b3f0:	d005      	beq.n	800b3fe <__lo0bits+0x5a>
 800b3f2:	600b      	str	r3, [r1, #0]
 800b3f4:	4770      	bx	lr
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	e7e9      	b.n	800b3ce <__lo0bits+0x2a>
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	4770      	bx	lr
 800b3fe:	2020      	movs	r0, #32
 800b400:	4770      	bx	lr
	...

0800b404 <__i2b>:
 800b404:	b510      	push	{r4, lr}
 800b406:	460c      	mov	r4, r1
 800b408:	2101      	movs	r1, #1
 800b40a:	f7ff ff03 	bl	800b214 <_Balloc>
 800b40e:	4602      	mov	r2, r0
 800b410:	b928      	cbnz	r0, 800b41e <__i2b+0x1a>
 800b412:	4b05      	ldr	r3, [pc, #20]	; (800b428 <__i2b+0x24>)
 800b414:	4805      	ldr	r0, [pc, #20]	; (800b42c <__i2b+0x28>)
 800b416:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b41a:	f000 fb85 	bl	800bb28 <__assert_func>
 800b41e:	2301      	movs	r3, #1
 800b420:	6144      	str	r4, [r0, #20]
 800b422:	6103      	str	r3, [r0, #16]
 800b424:	bd10      	pop	{r4, pc}
 800b426:	bf00      	nop
 800b428:	0800d02b 	.word	0x0800d02b
 800b42c:	0800d03c 	.word	0x0800d03c

0800b430 <__multiply>:
 800b430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b434:	4691      	mov	r9, r2
 800b436:	690a      	ldr	r2, [r1, #16]
 800b438:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	bfb8      	it	lt
 800b440:	460b      	movlt	r3, r1
 800b442:	460c      	mov	r4, r1
 800b444:	bfbc      	itt	lt
 800b446:	464c      	movlt	r4, r9
 800b448:	4699      	movlt	r9, r3
 800b44a:	6927      	ldr	r7, [r4, #16]
 800b44c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b450:	68a3      	ldr	r3, [r4, #8]
 800b452:	6861      	ldr	r1, [r4, #4]
 800b454:	eb07 060a 	add.w	r6, r7, sl
 800b458:	42b3      	cmp	r3, r6
 800b45a:	b085      	sub	sp, #20
 800b45c:	bfb8      	it	lt
 800b45e:	3101      	addlt	r1, #1
 800b460:	f7ff fed8 	bl	800b214 <_Balloc>
 800b464:	b930      	cbnz	r0, 800b474 <__multiply+0x44>
 800b466:	4602      	mov	r2, r0
 800b468:	4b44      	ldr	r3, [pc, #272]	; (800b57c <__multiply+0x14c>)
 800b46a:	4845      	ldr	r0, [pc, #276]	; (800b580 <__multiply+0x150>)
 800b46c:	f240 115d 	movw	r1, #349	; 0x15d
 800b470:	f000 fb5a 	bl	800bb28 <__assert_func>
 800b474:	f100 0514 	add.w	r5, r0, #20
 800b478:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b47c:	462b      	mov	r3, r5
 800b47e:	2200      	movs	r2, #0
 800b480:	4543      	cmp	r3, r8
 800b482:	d321      	bcc.n	800b4c8 <__multiply+0x98>
 800b484:	f104 0314 	add.w	r3, r4, #20
 800b488:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b48c:	f109 0314 	add.w	r3, r9, #20
 800b490:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b494:	9202      	str	r2, [sp, #8]
 800b496:	1b3a      	subs	r2, r7, r4
 800b498:	3a15      	subs	r2, #21
 800b49a:	f022 0203 	bic.w	r2, r2, #3
 800b49e:	3204      	adds	r2, #4
 800b4a0:	f104 0115 	add.w	r1, r4, #21
 800b4a4:	428f      	cmp	r7, r1
 800b4a6:	bf38      	it	cc
 800b4a8:	2204      	movcc	r2, #4
 800b4aa:	9201      	str	r2, [sp, #4]
 800b4ac:	9a02      	ldr	r2, [sp, #8]
 800b4ae:	9303      	str	r3, [sp, #12]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d80c      	bhi.n	800b4ce <__multiply+0x9e>
 800b4b4:	2e00      	cmp	r6, #0
 800b4b6:	dd03      	ble.n	800b4c0 <__multiply+0x90>
 800b4b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d05a      	beq.n	800b576 <__multiply+0x146>
 800b4c0:	6106      	str	r6, [r0, #16]
 800b4c2:	b005      	add	sp, #20
 800b4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c8:	f843 2b04 	str.w	r2, [r3], #4
 800b4cc:	e7d8      	b.n	800b480 <__multiply+0x50>
 800b4ce:	f8b3 a000 	ldrh.w	sl, [r3]
 800b4d2:	f1ba 0f00 	cmp.w	sl, #0
 800b4d6:	d024      	beq.n	800b522 <__multiply+0xf2>
 800b4d8:	f104 0e14 	add.w	lr, r4, #20
 800b4dc:	46a9      	mov	r9, r5
 800b4de:	f04f 0c00 	mov.w	ip, #0
 800b4e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b4e6:	f8d9 1000 	ldr.w	r1, [r9]
 800b4ea:	fa1f fb82 	uxth.w	fp, r2
 800b4ee:	b289      	uxth	r1, r1
 800b4f0:	fb0a 110b 	mla	r1, sl, fp, r1
 800b4f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b4f8:	f8d9 2000 	ldr.w	r2, [r9]
 800b4fc:	4461      	add	r1, ip
 800b4fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b502:	fb0a c20b 	mla	r2, sl, fp, ip
 800b506:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b50a:	b289      	uxth	r1, r1
 800b50c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b510:	4577      	cmp	r7, lr
 800b512:	f849 1b04 	str.w	r1, [r9], #4
 800b516:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b51a:	d8e2      	bhi.n	800b4e2 <__multiply+0xb2>
 800b51c:	9a01      	ldr	r2, [sp, #4]
 800b51e:	f845 c002 	str.w	ip, [r5, r2]
 800b522:	9a03      	ldr	r2, [sp, #12]
 800b524:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b528:	3304      	adds	r3, #4
 800b52a:	f1b9 0f00 	cmp.w	r9, #0
 800b52e:	d020      	beq.n	800b572 <__multiply+0x142>
 800b530:	6829      	ldr	r1, [r5, #0]
 800b532:	f104 0c14 	add.w	ip, r4, #20
 800b536:	46ae      	mov	lr, r5
 800b538:	f04f 0a00 	mov.w	sl, #0
 800b53c:	f8bc b000 	ldrh.w	fp, [ip]
 800b540:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b544:	fb09 220b 	mla	r2, r9, fp, r2
 800b548:	4492      	add	sl, r2
 800b54a:	b289      	uxth	r1, r1
 800b54c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b550:	f84e 1b04 	str.w	r1, [lr], #4
 800b554:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b558:	f8be 1000 	ldrh.w	r1, [lr]
 800b55c:	0c12      	lsrs	r2, r2, #16
 800b55e:	fb09 1102 	mla	r1, r9, r2, r1
 800b562:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b566:	4567      	cmp	r7, ip
 800b568:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b56c:	d8e6      	bhi.n	800b53c <__multiply+0x10c>
 800b56e:	9a01      	ldr	r2, [sp, #4]
 800b570:	50a9      	str	r1, [r5, r2]
 800b572:	3504      	adds	r5, #4
 800b574:	e79a      	b.n	800b4ac <__multiply+0x7c>
 800b576:	3e01      	subs	r6, #1
 800b578:	e79c      	b.n	800b4b4 <__multiply+0x84>
 800b57a:	bf00      	nop
 800b57c:	0800d02b 	.word	0x0800d02b
 800b580:	0800d03c 	.word	0x0800d03c

0800b584 <__pow5mult>:
 800b584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b588:	4615      	mov	r5, r2
 800b58a:	f012 0203 	ands.w	r2, r2, #3
 800b58e:	4606      	mov	r6, r0
 800b590:	460f      	mov	r7, r1
 800b592:	d007      	beq.n	800b5a4 <__pow5mult+0x20>
 800b594:	4c25      	ldr	r4, [pc, #148]	; (800b62c <__pow5mult+0xa8>)
 800b596:	3a01      	subs	r2, #1
 800b598:	2300      	movs	r3, #0
 800b59a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b59e:	f7ff fe9b 	bl	800b2d8 <__multadd>
 800b5a2:	4607      	mov	r7, r0
 800b5a4:	10ad      	asrs	r5, r5, #2
 800b5a6:	d03d      	beq.n	800b624 <__pow5mult+0xa0>
 800b5a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b5aa:	b97c      	cbnz	r4, 800b5cc <__pow5mult+0x48>
 800b5ac:	2010      	movs	r0, #16
 800b5ae:	f7ff fe29 	bl	800b204 <malloc>
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	6270      	str	r0, [r6, #36]	; 0x24
 800b5b6:	b928      	cbnz	r0, 800b5c4 <__pow5mult+0x40>
 800b5b8:	4b1d      	ldr	r3, [pc, #116]	; (800b630 <__pow5mult+0xac>)
 800b5ba:	481e      	ldr	r0, [pc, #120]	; (800b634 <__pow5mult+0xb0>)
 800b5bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b5c0:	f000 fab2 	bl	800bb28 <__assert_func>
 800b5c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b5c8:	6004      	str	r4, [r0, #0]
 800b5ca:	60c4      	str	r4, [r0, #12]
 800b5cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b5d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b5d4:	b94c      	cbnz	r4, 800b5ea <__pow5mult+0x66>
 800b5d6:	f240 2171 	movw	r1, #625	; 0x271
 800b5da:	4630      	mov	r0, r6
 800b5dc:	f7ff ff12 	bl	800b404 <__i2b>
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b5e6:	4604      	mov	r4, r0
 800b5e8:	6003      	str	r3, [r0, #0]
 800b5ea:	f04f 0900 	mov.w	r9, #0
 800b5ee:	07eb      	lsls	r3, r5, #31
 800b5f0:	d50a      	bpl.n	800b608 <__pow5mult+0x84>
 800b5f2:	4639      	mov	r1, r7
 800b5f4:	4622      	mov	r2, r4
 800b5f6:	4630      	mov	r0, r6
 800b5f8:	f7ff ff1a 	bl	800b430 <__multiply>
 800b5fc:	4639      	mov	r1, r7
 800b5fe:	4680      	mov	r8, r0
 800b600:	4630      	mov	r0, r6
 800b602:	f7ff fe47 	bl	800b294 <_Bfree>
 800b606:	4647      	mov	r7, r8
 800b608:	106d      	asrs	r5, r5, #1
 800b60a:	d00b      	beq.n	800b624 <__pow5mult+0xa0>
 800b60c:	6820      	ldr	r0, [r4, #0]
 800b60e:	b938      	cbnz	r0, 800b620 <__pow5mult+0x9c>
 800b610:	4622      	mov	r2, r4
 800b612:	4621      	mov	r1, r4
 800b614:	4630      	mov	r0, r6
 800b616:	f7ff ff0b 	bl	800b430 <__multiply>
 800b61a:	6020      	str	r0, [r4, #0]
 800b61c:	f8c0 9000 	str.w	r9, [r0]
 800b620:	4604      	mov	r4, r0
 800b622:	e7e4      	b.n	800b5ee <__pow5mult+0x6a>
 800b624:	4638      	mov	r0, r7
 800b626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b62a:	bf00      	nop
 800b62c:	0800d188 	.word	0x0800d188
 800b630:	0800cfb9 	.word	0x0800cfb9
 800b634:	0800d03c 	.word	0x0800d03c

0800b638 <__lshift>:
 800b638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b63c:	460c      	mov	r4, r1
 800b63e:	6849      	ldr	r1, [r1, #4]
 800b640:	6923      	ldr	r3, [r4, #16]
 800b642:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b646:	68a3      	ldr	r3, [r4, #8]
 800b648:	4607      	mov	r7, r0
 800b64a:	4691      	mov	r9, r2
 800b64c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b650:	f108 0601 	add.w	r6, r8, #1
 800b654:	42b3      	cmp	r3, r6
 800b656:	db0b      	blt.n	800b670 <__lshift+0x38>
 800b658:	4638      	mov	r0, r7
 800b65a:	f7ff fddb 	bl	800b214 <_Balloc>
 800b65e:	4605      	mov	r5, r0
 800b660:	b948      	cbnz	r0, 800b676 <__lshift+0x3e>
 800b662:	4602      	mov	r2, r0
 800b664:	4b2a      	ldr	r3, [pc, #168]	; (800b710 <__lshift+0xd8>)
 800b666:	482b      	ldr	r0, [pc, #172]	; (800b714 <__lshift+0xdc>)
 800b668:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b66c:	f000 fa5c 	bl	800bb28 <__assert_func>
 800b670:	3101      	adds	r1, #1
 800b672:	005b      	lsls	r3, r3, #1
 800b674:	e7ee      	b.n	800b654 <__lshift+0x1c>
 800b676:	2300      	movs	r3, #0
 800b678:	f100 0114 	add.w	r1, r0, #20
 800b67c:	f100 0210 	add.w	r2, r0, #16
 800b680:	4618      	mov	r0, r3
 800b682:	4553      	cmp	r3, sl
 800b684:	db37      	blt.n	800b6f6 <__lshift+0xbe>
 800b686:	6920      	ldr	r0, [r4, #16]
 800b688:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b68c:	f104 0314 	add.w	r3, r4, #20
 800b690:	f019 091f 	ands.w	r9, r9, #31
 800b694:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b698:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b69c:	d02f      	beq.n	800b6fe <__lshift+0xc6>
 800b69e:	f1c9 0e20 	rsb	lr, r9, #32
 800b6a2:	468a      	mov	sl, r1
 800b6a4:	f04f 0c00 	mov.w	ip, #0
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	fa02 f209 	lsl.w	r2, r2, r9
 800b6ae:	ea42 020c 	orr.w	r2, r2, ip
 800b6b2:	f84a 2b04 	str.w	r2, [sl], #4
 800b6b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6ba:	4298      	cmp	r0, r3
 800b6bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b6c0:	d8f2      	bhi.n	800b6a8 <__lshift+0x70>
 800b6c2:	1b03      	subs	r3, r0, r4
 800b6c4:	3b15      	subs	r3, #21
 800b6c6:	f023 0303 	bic.w	r3, r3, #3
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	f104 0215 	add.w	r2, r4, #21
 800b6d0:	4290      	cmp	r0, r2
 800b6d2:	bf38      	it	cc
 800b6d4:	2304      	movcc	r3, #4
 800b6d6:	f841 c003 	str.w	ip, [r1, r3]
 800b6da:	f1bc 0f00 	cmp.w	ip, #0
 800b6de:	d001      	beq.n	800b6e4 <__lshift+0xac>
 800b6e0:	f108 0602 	add.w	r6, r8, #2
 800b6e4:	3e01      	subs	r6, #1
 800b6e6:	4638      	mov	r0, r7
 800b6e8:	612e      	str	r6, [r5, #16]
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	f7ff fdd2 	bl	800b294 <_Bfree>
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	e7c1      	b.n	800b682 <__lshift+0x4a>
 800b6fe:	3904      	subs	r1, #4
 800b700:	f853 2b04 	ldr.w	r2, [r3], #4
 800b704:	f841 2f04 	str.w	r2, [r1, #4]!
 800b708:	4298      	cmp	r0, r3
 800b70a:	d8f9      	bhi.n	800b700 <__lshift+0xc8>
 800b70c:	e7ea      	b.n	800b6e4 <__lshift+0xac>
 800b70e:	bf00      	nop
 800b710:	0800d02b 	.word	0x0800d02b
 800b714:	0800d03c 	.word	0x0800d03c

0800b718 <__mcmp>:
 800b718:	b530      	push	{r4, r5, lr}
 800b71a:	6902      	ldr	r2, [r0, #16]
 800b71c:	690c      	ldr	r4, [r1, #16]
 800b71e:	1b12      	subs	r2, r2, r4
 800b720:	d10e      	bne.n	800b740 <__mcmp+0x28>
 800b722:	f100 0314 	add.w	r3, r0, #20
 800b726:	3114      	adds	r1, #20
 800b728:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b72c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b730:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b734:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b738:	42a5      	cmp	r5, r4
 800b73a:	d003      	beq.n	800b744 <__mcmp+0x2c>
 800b73c:	d305      	bcc.n	800b74a <__mcmp+0x32>
 800b73e:	2201      	movs	r2, #1
 800b740:	4610      	mov	r0, r2
 800b742:	bd30      	pop	{r4, r5, pc}
 800b744:	4283      	cmp	r3, r0
 800b746:	d3f3      	bcc.n	800b730 <__mcmp+0x18>
 800b748:	e7fa      	b.n	800b740 <__mcmp+0x28>
 800b74a:	f04f 32ff 	mov.w	r2, #4294967295
 800b74e:	e7f7      	b.n	800b740 <__mcmp+0x28>

0800b750 <__mdiff>:
 800b750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b754:	460c      	mov	r4, r1
 800b756:	4606      	mov	r6, r0
 800b758:	4611      	mov	r1, r2
 800b75a:	4620      	mov	r0, r4
 800b75c:	4690      	mov	r8, r2
 800b75e:	f7ff ffdb 	bl	800b718 <__mcmp>
 800b762:	1e05      	subs	r5, r0, #0
 800b764:	d110      	bne.n	800b788 <__mdiff+0x38>
 800b766:	4629      	mov	r1, r5
 800b768:	4630      	mov	r0, r6
 800b76a:	f7ff fd53 	bl	800b214 <_Balloc>
 800b76e:	b930      	cbnz	r0, 800b77e <__mdiff+0x2e>
 800b770:	4b3a      	ldr	r3, [pc, #232]	; (800b85c <__mdiff+0x10c>)
 800b772:	4602      	mov	r2, r0
 800b774:	f240 2132 	movw	r1, #562	; 0x232
 800b778:	4839      	ldr	r0, [pc, #228]	; (800b860 <__mdiff+0x110>)
 800b77a:	f000 f9d5 	bl	800bb28 <__assert_func>
 800b77e:	2301      	movs	r3, #1
 800b780:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b784:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b788:	bfa4      	itt	ge
 800b78a:	4643      	movge	r3, r8
 800b78c:	46a0      	movge	r8, r4
 800b78e:	4630      	mov	r0, r6
 800b790:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b794:	bfa6      	itte	ge
 800b796:	461c      	movge	r4, r3
 800b798:	2500      	movge	r5, #0
 800b79a:	2501      	movlt	r5, #1
 800b79c:	f7ff fd3a 	bl	800b214 <_Balloc>
 800b7a0:	b920      	cbnz	r0, 800b7ac <__mdiff+0x5c>
 800b7a2:	4b2e      	ldr	r3, [pc, #184]	; (800b85c <__mdiff+0x10c>)
 800b7a4:	4602      	mov	r2, r0
 800b7a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b7aa:	e7e5      	b.n	800b778 <__mdiff+0x28>
 800b7ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b7b0:	6926      	ldr	r6, [r4, #16]
 800b7b2:	60c5      	str	r5, [r0, #12]
 800b7b4:	f104 0914 	add.w	r9, r4, #20
 800b7b8:	f108 0514 	add.w	r5, r8, #20
 800b7bc:	f100 0e14 	add.w	lr, r0, #20
 800b7c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b7c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b7c8:	f108 0210 	add.w	r2, r8, #16
 800b7cc:	46f2      	mov	sl, lr
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800b7d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b7d8:	fa1f f883 	uxth.w	r8, r3
 800b7dc:	fa11 f18b 	uxtah	r1, r1, fp
 800b7e0:	0c1b      	lsrs	r3, r3, #16
 800b7e2:	eba1 0808 	sub.w	r8, r1, r8
 800b7e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b7ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b7ee:	fa1f f888 	uxth.w	r8, r8
 800b7f2:	1419      	asrs	r1, r3, #16
 800b7f4:	454e      	cmp	r6, r9
 800b7f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b7fa:	f84a 3b04 	str.w	r3, [sl], #4
 800b7fe:	d8e7      	bhi.n	800b7d0 <__mdiff+0x80>
 800b800:	1b33      	subs	r3, r6, r4
 800b802:	3b15      	subs	r3, #21
 800b804:	f023 0303 	bic.w	r3, r3, #3
 800b808:	3304      	adds	r3, #4
 800b80a:	3415      	adds	r4, #21
 800b80c:	42a6      	cmp	r6, r4
 800b80e:	bf38      	it	cc
 800b810:	2304      	movcc	r3, #4
 800b812:	441d      	add	r5, r3
 800b814:	4473      	add	r3, lr
 800b816:	469e      	mov	lr, r3
 800b818:	462e      	mov	r6, r5
 800b81a:	4566      	cmp	r6, ip
 800b81c:	d30e      	bcc.n	800b83c <__mdiff+0xec>
 800b81e:	f10c 0203 	add.w	r2, ip, #3
 800b822:	1b52      	subs	r2, r2, r5
 800b824:	f022 0203 	bic.w	r2, r2, #3
 800b828:	3d03      	subs	r5, #3
 800b82a:	45ac      	cmp	ip, r5
 800b82c:	bf38      	it	cc
 800b82e:	2200      	movcc	r2, #0
 800b830:	441a      	add	r2, r3
 800b832:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b836:	b17b      	cbz	r3, 800b858 <__mdiff+0x108>
 800b838:	6107      	str	r7, [r0, #16]
 800b83a:	e7a3      	b.n	800b784 <__mdiff+0x34>
 800b83c:	f856 8b04 	ldr.w	r8, [r6], #4
 800b840:	fa11 f288 	uxtah	r2, r1, r8
 800b844:	1414      	asrs	r4, r2, #16
 800b846:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b84a:	b292      	uxth	r2, r2
 800b84c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b850:	f84e 2b04 	str.w	r2, [lr], #4
 800b854:	1421      	asrs	r1, r4, #16
 800b856:	e7e0      	b.n	800b81a <__mdiff+0xca>
 800b858:	3f01      	subs	r7, #1
 800b85a:	e7ea      	b.n	800b832 <__mdiff+0xe2>
 800b85c:	0800d02b 	.word	0x0800d02b
 800b860:	0800d03c 	.word	0x0800d03c

0800b864 <__d2b>:
 800b864:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b868:	4689      	mov	r9, r1
 800b86a:	2101      	movs	r1, #1
 800b86c:	ec57 6b10 	vmov	r6, r7, d0
 800b870:	4690      	mov	r8, r2
 800b872:	f7ff fccf 	bl	800b214 <_Balloc>
 800b876:	4604      	mov	r4, r0
 800b878:	b930      	cbnz	r0, 800b888 <__d2b+0x24>
 800b87a:	4602      	mov	r2, r0
 800b87c:	4b25      	ldr	r3, [pc, #148]	; (800b914 <__d2b+0xb0>)
 800b87e:	4826      	ldr	r0, [pc, #152]	; (800b918 <__d2b+0xb4>)
 800b880:	f240 310a 	movw	r1, #778	; 0x30a
 800b884:	f000 f950 	bl	800bb28 <__assert_func>
 800b888:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b88c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b890:	bb35      	cbnz	r5, 800b8e0 <__d2b+0x7c>
 800b892:	2e00      	cmp	r6, #0
 800b894:	9301      	str	r3, [sp, #4]
 800b896:	d028      	beq.n	800b8ea <__d2b+0x86>
 800b898:	4668      	mov	r0, sp
 800b89a:	9600      	str	r6, [sp, #0]
 800b89c:	f7ff fd82 	bl	800b3a4 <__lo0bits>
 800b8a0:	9900      	ldr	r1, [sp, #0]
 800b8a2:	b300      	cbz	r0, 800b8e6 <__d2b+0x82>
 800b8a4:	9a01      	ldr	r2, [sp, #4]
 800b8a6:	f1c0 0320 	rsb	r3, r0, #32
 800b8aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b8ae:	430b      	orrs	r3, r1
 800b8b0:	40c2      	lsrs	r2, r0
 800b8b2:	6163      	str	r3, [r4, #20]
 800b8b4:	9201      	str	r2, [sp, #4]
 800b8b6:	9b01      	ldr	r3, [sp, #4]
 800b8b8:	61a3      	str	r3, [r4, #24]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	bf14      	ite	ne
 800b8be:	2202      	movne	r2, #2
 800b8c0:	2201      	moveq	r2, #1
 800b8c2:	6122      	str	r2, [r4, #16]
 800b8c4:	b1d5      	cbz	r5, 800b8fc <__d2b+0x98>
 800b8c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b8ca:	4405      	add	r5, r0
 800b8cc:	f8c9 5000 	str.w	r5, [r9]
 800b8d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b8d4:	f8c8 0000 	str.w	r0, [r8]
 800b8d8:	4620      	mov	r0, r4
 800b8da:	b003      	add	sp, #12
 800b8dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b8e4:	e7d5      	b.n	800b892 <__d2b+0x2e>
 800b8e6:	6161      	str	r1, [r4, #20]
 800b8e8:	e7e5      	b.n	800b8b6 <__d2b+0x52>
 800b8ea:	a801      	add	r0, sp, #4
 800b8ec:	f7ff fd5a 	bl	800b3a4 <__lo0bits>
 800b8f0:	9b01      	ldr	r3, [sp, #4]
 800b8f2:	6163      	str	r3, [r4, #20]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	6122      	str	r2, [r4, #16]
 800b8f8:	3020      	adds	r0, #32
 800b8fa:	e7e3      	b.n	800b8c4 <__d2b+0x60>
 800b8fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b900:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b904:	f8c9 0000 	str.w	r0, [r9]
 800b908:	6918      	ldr	r0, [r3, #16]
 800b90a:	f7ff fd2b 	bl	800b364 <__hi0bits>
 800b90e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b912:	e7df      	b.n	800b8d4 <__d2b+0x70>
 800b914:	0800d02b 	.word	0x0800d02b
 800b918:	0800d03c 	.word	0x0800d03c

0800b91c <_calloc_r>:
 800b91c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b91e:	fba1 2402 	umull	r2, r4, r1, r2
 800b922:	b94c      	cbnz	r4, 800b938 <_calloc_r+0x1c>
 800b924:	4611      	mov	r1, r2
 800b926:	9201      	str	r2, [sp, #4]
 800b928:	f000 f87a 	bl	800ba20 <_malloc_r>
 800b92c:	9a01      	ldr	r2, [sp, #4]
 800b92e:	4605      	mov	r5, r0
 800b930:	b930      	cbnz	r0, 800b940 <_calloc_r+0x24>
 800b932:	4628      	mov	r0, r5
 800b934:	b003      	add	sp, #12
 800b936:	bd30      	pop	{r4, r5, pc}
 800b938:	220c      	movs	r2, #12
 800b93a:	6002      	str	r2, [r0, #0]
 800b93c:	2500      	movs	r5, #0
 800b93e:	e7f8      	b.n	800b932 <_calloc_r+0x16>
 800b940:	4621      	mov	r1, r4
 800b942:	f7fe f96f 	bl	8009c24 <memset>
 800b946:	e7f4      	b.n	800b932 <_calloc_r+0x16>

0800b948 <_free_r>:
 800b948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b94a:	2900      	cmp	r1, #0
 800b94c:	d044      	beq.n	800b9d8 <_free_r+0x90>
 800b94e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b952:	9001      	str	r0, [sp, #4]
 800b954:	2b00      	cmp	r3, #0
 800b956:	f1a1 0404 	sub.w	r4, r1, #4
 800b95a:	bfb8      	it	lt
 800b95c:	18e4      	addlt	r4, r4, r3
 800b95e:	f000 f925 	bl	800bbac <__malloc_lock>
 800b962:	4a1e      	ldr	r2, [pc, #120]	; (800b9dc <_free_r+0x94>)
 800b964:	9801      	ldr	r0, [sp, #4]
 800b966:	6813      	ldr	r3, [r2, #0]
 800b968:	b933      	cbnz	r3, 800b978 <_free_r+0x30>
 800b96a:	6063      	str	r3, [r4, #4]
 800b96c:	6014      	str	r4, [r2, #0]
 800b96e:	b003      	add	sp, #12
 800b970:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b974:	f000 b920 	b.w	800bbb8 <__malloc_unlock>
 800b978:	42a3      	cmp	r3, r4
 800b97a:	d908      	bls.n	800b98e <_free_r+0x46>
 800b97c:	6825      	ldr	r5, [r4, #0]
 800b97e:	1961      	adds	r1, r4, r5
 800b980:	428b      	cmp	r3, r1
 800b982:	bf01      	itttt	eq
 800b984:	6819      	ldreq	r1, [r3, #0]
 800b986:	685b      	ldreq	r3, [r3, #4]
 800b988:	1949      	addeq	r1, r1, r5
 800b98a:	6021      	streq	r1, [r4, #0]
 800b98c:	e7ed      	b.n	800b96a <_free_r+0x22>
 800b98e:	461a      	mov	r2, r3
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	b10b      	cbz	r3, 800b998 <_free_r+0x50>
 800b994:	42a3      	cmp	r3, r4
 800b996:	d9fa      	bls.n	800b98e <_free_r+0x46>
 800b998:	6811      	ldr	r1, [r2, #0]
 800b99a:	1855      	adds	r5, r2, r1
 800b99c:	42a5      	cmp	r5, r4
 800b99e:	d10b      	bne.n	800b9b8 <_free_r+0x70>
 800b9a0:	6824      	ldr	r4, [r4, #0]
 800b9a2:	4421      	add	r1, r4
 800b9a4:	1854      	adds	r4, r2, r1
 800b9a6:	42a3      	cmp	r3, r4
 800b9a8:	6011      	str	r1, [r2, #0]
 800b9aa:	d1e0      	bne.n	800b96e <_free_r+0x26>
 800b9ac:	681c      	ldr	r4, [r3, #0]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	6053      	str	r3, [r2, #4]
 800b9b2:	4421      	add	r1, r4
 800b9b4:	6011      	str	r1, [r2, #0]
 800b9b6:	e7da      	b.n	800b96e <_free_r+0x26>
 800b9b8:	d902      	bls.n	800b9c0 <_free_r+0x78>
 800b9ba:	230c      	movs	r3, #12
 800b9bc:	6003      	str	r3, [r0, #0]
 800b9be:	e7d6      	b.n	800b96e <_free_r+0x26>
 800b9c0:	6825      	ldr	r5, [r4, #0]
 800b9c2:	1961      	adds	r1, r4, r5
 800b9c4:	428b      	cmp	r3, r1
 800b9c6:	bf04      	itt	eq
 800b9c8:	6819      	ldreq	r1, [r3, #0]
 800b9ca:	685b      	ldreq	r3, [r3, #4]
 800b9cc:	6063      	str	r3, [r4, #4]
 800b9ce:	bf04      	itt	eq
 800b9d0:	1949      	addeq	r1, r1, r5
 800b9d2:	6021      	streq	r1, [r4, #0]
 800b9d4:	6054      	str	r4, [r2, #4]
 800b9d6:	e7ca      	b.n	800b96e <_free_r+0x26>
 800b9d8:	b003      	add	sp, #12
 800b9da:	bd30      	pop	{r4, r5, pc}
 800b9dc:	20000d90 	.word	0x20000d90

0800b9e0 <sbrk_aligned>:
 800b9e0:	b570      	push	{r4, r5, r6, lr}
 800b9e2:	4e0e      	ldr	r6, [pc, #56]	; (800ba1c <sbrk_aligned+0x3c>)
 800b9e4:	460c      	mov	r4, r1
 800b9e6:	6831      	ldr	r1, [r6, #0]
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	b911      	cbnz	r1, 800b9f2 <sbrk_aligned+0x12>
 800b9ec:	f000 f88c 	bl	800bb08 <_sbrk_r>
 800b9f0:	6030      	str	r0, [r6, #0]
 800b9f2:	4621      	mov	r1, r4
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	f000 f887 	bl	800bb08 <_sbrk_r>
 800b9fa:	1c43      	adds	r3, r0, #1
 800b9fc:	d00a      	beq.n	800ba14 <sbrk_aligned+0x34>
 800b9fe:	1cc4      	adds	r4, r0, #3
 800ba00:	f024 0403 	bic.w	r4, r4, #3
 800ba04:	42a0      	cmp	r0, r4
 800ba06:	d007      	beq.n	800ba18 <sbrk_aligned+0x38>
 800ba08:	1a21      	subs	r1, r4, r0
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	f000 f87c 	bl	800bb08 <_sbrk_r>
 800ba10:	3001      	adds	r0, #1
 800ba12:	d101      	bne.n	800ba18 <sbrk_aligned+0x38>
 800ba14:	f04f 34ff 	mov.w	r4, #4294967295
 800ba18:	4620      	mov	r0, r4
 800ba1a:	bd70      	pop	{r4, r5, r6, pc}
 800ba1c:	20000d94 	.word	0x20000d94

0800ba20 <_malloc_r>:
 800ba20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba24:	1ccd      	adds	r5, r1, #3
 800ba26:	f025 0503 	bic.w	r5, r5, #3
 800ba2a:	3508      	adds	r5, #8
 800ba2c:	2d0c      	cmp	r5, #12
 800ba2e:	bf38      	it	cc
 800ba30:	250c      	movcc	r5, #12
 800ba32:	2d00      	cmp	r5, #0
 800ba34:	4607      	mov	r7, r0
 800ba36:	db01      	blt.n	800ba3c <_malloc_r+0x1c>
 800ba38:	42a9      	cmp	r1, r5
 800ba3a:	d905      	bls.n	800ba48 <_malloc_r+0x28>
 800ba3c:	230c      	movs	r3, #12
 800ba3e:	603b      	str	r3, [r7, #0]
 800ba40:	2600      	movs	r6, #0
 800ba42:	4630      	mov	r0, r6
 800ba44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba48:	4e2e      	ldr	r6, [pc, #184]	; (800bb04 <_malloc_r+0xe4>)
 800ba4a:	f000 f8af 	bl	800bbac <__malloc_lock>
 800ba4e:	6833      	ldr	r3, [r6, #0]
 800ba50:	461c      	mov	r4, r3
 800ba52:	bb34      	cbnz	r4, 800baa2 <_malloc_r+0x82>
 800ba54:	4629      	mov	r1, r5
 800ba56:	4638      	mov	r0, r7
 800ba58:	f7ff ffc2 	bl	800b9e0 <sbrk_aligned>
 800ba5c:	1c43      	adds	r3, r0, #1
 800ba5e:	4604      	mov	r4, r0
 800ba60:	d14d      	bne.n	800bafe <_malloc_r+0xde>
 800ba62:	6834      	ldr	r4, [r6, #0]
 800ba64:	4626      	mov	r6, r4
 800ba66:	2e00      	cmp	r6, #0
 800ba68:	d140      	bne.n	800baec <_malloc_r+0xcc>
 800ba6a:	6823      	ldr	r3, [r4, #0]
 800ba6c:	4631      	mov	r1, r6
 800ba6e:	4638      	mov	r0, r7
 800ba70:	eb04 0803 	add.w	r8, r4, r3
 800ba74:	f000 f848 	bl	800bb08 <_sbrk_r>
 800ba78:	4580      	cmp	r8, r0
 800ba7a:	d13a      	bne.n	800baf2 <_malloc_r+0xd2>
 800ba7c:	6821      	ldr	r1, [r4, #0]
 800ba7e:	3503      	adds	r5, #3
 800ba80:	1a6d      	subs	r5, r5, r1
 800ba82:	f025 0503 	bic.w	r5, r5, #3
 800ba86:	3508      	adds	r5, #8
 800ba88:	2d0c      	cmp	r5, #12
 800ba8a:	bf38      	it	cc
 800ba8c:	250c      	movcc	r5, #12
 800ba8e:	4629      	mov	r1, r5
 800ba90:	4638      	mov	r0, r7
 800ba92:	f7ff ffa5 	bl	800b9e0 <sbrk_aligned>
 800ba96:	3001      	adds	r0, #1
 800ba98:	d02b      	beq.n	800baf2 <_malloc_r+0xd2>
 800ba9a:	6823      	ldr	r3, [r4, #0]
 800ba9c:	442b      	add	r3, r5
 800ba9e:	6023      	str	r3, [r4, #0]
 800baa0:	e00e      	b.n	800bac0 <_malloc_r+0xa0>
 800baa2:	6822      	ldr	r2, [r4, #0]
 800baa4:	1b52      	subs	r2, r2, r5
 800baa6:	d41e      	bmi.n	800bae6 <_malloc_r+0xc6>
 800baa8:	2a0b      	cmp	r2, #11
 800baaa:	d916      	bls.n	800bada <_malloc_r+0xba>
 800baac:	1961      	adds	r1, r4, r5
 800baae:	42a3      	cmp	r3, r4
 800bab0:	6025      	str	r5, [r4, #0]
 800bab2:	bf18      	it	ne
 800bab4:	6059      	strne	r1, [r3, #4]
 800bab6:	6863      	ldr	r3, [r4, #4]
 800bab8:	bf08      	it	eq
 800baba:	6031      	streq	r1, [r6, #0]
 800babc:	5162      	str	r2, [r4, r5]
 800babe:	604b      	str	r3, [r1, #4]
 800bac0:	4638      	mov	r0, r7
 800bac2:	f104 060b 	add.w	r6, r4, #11
 800bac6:	f000 f877 	bl	800bbb8 <__malloc_unlock>
 800baca:	f026 0607 	bic.w	r6, r6, #7
 800bace:	1d23      	adds	r3, r4, #4
 800bad0:	1af2      	subs	r2, r6, r3
 800bad2:	d0b6      	beq.n	800ba42 <_malloc_r+0x22>
 800bad4:	1b9b      	subs	r3, r3, r6
 800bad6:	50a3      	str	r3, [r4, r2]
 800bad8:	e7b3      	b.n	800ba42 <_malloc_r+0x22>
 800bada:	6862      	ldr	r2, [r4, #4]
 800badc:	42a3      	cmp	r3, r4
 800bade:	bf0c      	ite	eq
 800bae0:	6032      	streq	r2, [r6, #0]
 800bae2:	605a      	strne	r2, [r3, #4]
 800bae4:	e7ec      	b.n	800bac0 <_malloc_r+0xa0>
 800bae6:	4623      	mov	r3, r4
 800bae8:	6864      	ldr	r4, [r4, #4]
 800baea:	e7b2      	b.n	800ba52 <_malloc_r+0x32>
 800baec:	4634      	mov	r4, r6
 800baee:	6876      	ldr	r6, [r6, #4]
 800baf0:	e7b9      	b.n	800ba66 <_malloc_r+0x46>
 800baf2:	230c      	movs	r3, #12
 800baf4:	603b      	str	r3, [r7, #0]
 800baf6:	4638      	mov	r0, r7
 800baf8:	f000 f85e 	bl	800bbb8 <__malloc_unlock>
 800bafc:	e7a1      	b.n	800ba42 <_malloc_r+0x22>
 800bafe:	6025      	str	r5, [r4, #0]
 800bb00:	e7de      	b.n	800bac0 <_malloc_r+0xa0>
 800bb02:	bf00      	nop
 800bb04:	20000d90 	.word	0x20000d90

0800bb08 <_sbrk_r>:
 800bb08:	b538      	push	{r3, r4, r5, lr}
 800bb0a:	4d06      	ldr	r5, [pc, #24]	; (800bb24 <_sbrk_r+0x1c>)
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	4604      	mov	r4, r0
 800bb10:	4608      	mov	r0, r1
 800bb12:	602b      	str	r3, [r5, #0]
 800bb14:	f7f7 fdde 	bl	80036d4 <_sbrk>
 800bb18:	1c43      	adds	r3, r0, #1
 800bb1a:	d102      	bne.n	800bb22 <_sbrk_r+0x1a>
 800bb1c:	682b      	ldr	r3, [r5, #0]
 800bb1e:	b103      	cbz	r3, 800bb22 <_sbrk_r+0x1a>
 800bb20:	6023      	str	r3, [r4, #0]
 800bb22:	bd38      	pop	{r3, r4, r5, pc}
 800bb24:	20000d98 	.word	0x20000d98

0800bb28 <__assert_func>:
 800bb28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb2a:	4614      	mov	r4, r2
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	4b09      	ldr	r3, [pc, #36]	; (800bb54 <__assert_func+0x2c>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4605      	mov	r5, r0
 800bb34:	68d8      	ldr	r0, [r3, #12]
 800bb36:	b14c      	cbz	r4, 800bb4c <__assert_func+0x24>
 800bb38:	4b07      	ldr	r3, [pc, #28]	; (800bb58 <__assert_func+0x30>)
 800bb3a:	9100      	str	r1, [sp, #0]
 800bb3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb40:	4906      	ldr	r1, [pc, #24]	; (800bb5c <__assert_func+0x34>)
 800bb42:	462b      	mov	r3, r5
 800bb44:	f000 f80e 	bl	800bb64 <fiprintf>
 800bb48:	f000 fa64 	bl	800c014 <abort>
 800bb4c:	4b04      	ldr	r3, [pc, #16]	; (800bb60 <__assert_func+0x38>)
 800bb4e:	461c      	mov	r4, r3
 800bb50:	e7f3      	b.n	800bb3a <__assert_func+0x12>
 800bb52:	bf00      	nop
 800bb54:	20000010 	.word	0x20000010
 800bb58:	0800d194 	.word	0x0800d194
 800bb5c:	0800d1a1 	.word	0x0800d1a1
 800bb60:	0800d1cf 	.word	0x0800d1cf

0800bb64 <fiprintf>:
 800bb64:	b40e      	push	{r1, r2, r3}
 800bb66:	b503      	push	{r0, r1, lr}
 800bb68:	4601      	mov	r1, r0
 800bb6a:	ab03      	add	r3, sp, #12
 800bb6c:	4805      	ldr	r0, [pc, #20]	; (800bb84 <fiprintf+0x20>)
 800bb6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb72:	6800      	ldr	r0, [r0, #0]
 800bb74:	9301      	str	r3, [sp, #4]
 800bb76:	f000 f84f 	bl	800bc18 <_vfiprintf_r>
 800bb7a:	b002      	add	sp, #8
 800bb7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb80:	b003      	add	sp, #12
 800bb82:	4770      	bx	lr
 800bb84:	20000010 	.word	0x20000010

0800bb88 <__ascii_mbtowc>:
 800bb88:	b082      	sub	sp, #8
 800bb8a:	b901      	cbnz	r1, 800bb8e <__ascii_mbtowc+0x6>
 800bb8c:	a901      	add	r1, sp, #4
 800bb8e:	b142      	cbz	r2, 800bba2 <__ascii_mbtowc+0x1a>
 800bb90:	b14b      	cbz	r3, 800bba6 <__ascii_mbtowc+0x1e>
 800bb92:	7813      	ldrb	r3, [r2, #0]
 800bb94:	600b      	str	r3, [r1, #0]
 800bb96:	7812      	ldrb	r2, [r2, #0]
 800bb98:	1e10      	subs	r0, r2, #0
 800bb9a:	bf18      	it	ne
 800bb9c:	2001      	movne	r0, #1
 800bb9e:	b002      	add	sp, #8
 800bba0:	4770      	bx	lr
 800bba2:	4610      	mov	r0, r2
 800bba4:	e7fb      	b.n	800bb9e <__ascii_mbtowc+0x16>
 800bba6:	f06f 0001 	mvn.w	r0, #1
 800bbaa:	e7f8      	b.n	800bb9e <__ascii_mbtowc+0x16>

0800bbac <__malloc_lock>:
 800bbac:	4801      	ldr	r0, [pc, #4]	; (800bbb4 <__malloc_lock+0x8>)
 800bbae:	f000 bbf1 	b.w	800c394 <__retarget_lock_acquire_recursive>
 800bbb2:	bf00      	nop
 800bbb4:	20000d9c 	.word	0x20000d9c

0800bbb8 <__malloc_unlock>:
 800bbb8:	4801      	ldr	r0, [pc, #4]	; (800bbc0 <__malloc_unlock+0x8>)
 800bbba:	f000 bbec 	b.w	800c396 <__retarget_lock_release_recursive>
 800bbbe:	bf00      	nop
 800bbc0:	20000d9c 	.word	0x20000d9c

0800bbc4 <__sfputc_r>:
 800bbc4:	6893      	ldr	r3, [r2, #8]
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	b410      	push	{r4}
 800bbcc:	6093      	str	r3, [r2, #8]
 800bbce:	da08      	bge.n	800bbe2 <__sfputc_r+0x1e>
 800bbd0:	6994      	ldr	r4, [r2, #24]
 800bbd2:	42a3      	cmp	r3, r4
 800bbd4:	db01      	blt.n	800bbda <__sfputc_r+0x16>
 800bbd6:	290a      	cmp	r1, #10
 800bbd8:	d103      	bne.n	800bbe2 <__sfputc_r+0x1e>
 800bbda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbde:	f000 b94b 	b.w	800be78 <__swbuf_r>
 800bbe2:	6813      	ldr	r3, [r2, #0]
 800bbe4:	1c58      	adds	r0, r3, #1
 800bbe6:	6010      	str	r0, [r2, #0]
 800bbe8:	7019      	strb	r1, [r3, #0]
 800bbea:	4608      	mov	r0, r1
 800bbec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbf0:	4770      	bx	lr

0800bbf2 <__sfputs_r>:
 800bbf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbf4:	4606      	mov	r6, r0
 800bbf6:	460f      	mov	r7, r1
 800bbf8:	4614      	mov	r4, r2
 800bbfa:	18d5      	adds	r5, r2, r3
 800bbfc:	42ac      	cmp	r4, r5
 800bbfe:	d101      	bne.n	800bc04 <__sfputs_r+0x12>
 800bc00:	2000      	movs	r0, #0
 800bc02:	e007      	b.n	800bc14 <__sfputs_r+0x22>
 800bc04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc08:	463a      	mov	r2, r7
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	f7ff ffda 	bl	800bbc4 <__sfputc_r>
 800bc10:	1c43      	adds	r3, r0, #1
 800bc12:	d1f3      	bne.n	800bbfc <__sfputs_r+0xa>
 800bc14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc18 <_vfiprintf_r>:
 800bc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1c:	460d      	mov	r5, r1
 800bc1e:	b09d      	sub	sp, #116	; 0x74
 800bc20:	4614      	mov	r4, r2
 800bc22:	4698      	mov	r8, r3
 800bc24:	4606      	mov	r6, r0
 800bc26:	b118      	cbz	r0, 800bc30 <_vfiprintf_r+0x18>
 800bc28:	6983      	ldr	r3, [r0, #24]
 800bc2a:	b90b      	cbnz	r3, 800bc30 <_vfiprintf_r+0x18>
 800bc2c:	f000 fb14 	bl	800c258 <__sinit>
 800bc30:	4b89      	ldr	r3, [pc, #548]	; (800be58 <_vfiprintf_r+0x240>)
 800bc32:	429d      	cmp	r5, r3
 800bc34:	d11b      	bne.n	800bc6e <_vfiprintf_r+0x56>
 800bc36:	6875      	ldr	r5, [r6, #4]
 800bc38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc3a:	07d9      	lsls	r1, r3, #31
 800bc3c:	d405      	bmi.n	800bc4a <_vfiprintf_r+0x32>
 800bc3e:	89ab      	ldrh	r3, [r5, #12]
 800bc40:	059a      	lsls	r2, r3, #22
 800bc42:	d402      	bmi.n	800bc4a <_vfiprintf_r+0x32>
 800bc44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc46:	f000 fba5 	bl	800c394 <__retarget_lock_acquire_recursive>
 800bc4a:	89ab      	ldrh	r3, [r5, #12]
 800bc4c:	071b      	lsls	r3, r3, #28
 800bc4e:	d501      	bpl.n	800bc54 <_vfiprintf_r+0x3c>
 800bc50:	692b      	ldr	r3, [r5, #16]
 800bc52:	b9eb      	cbnz	r3, 800bc90 <_vfiprintf_r+0x78>
 800bc54:	4629      	mov	r1, r5
 800bc56:	4630      	mov	r0, r6
 800bc58:	f000 f96e 	bl	800bf38 <__swsetup_r>
 800bc5c:	b1c0      	cbz	r0, 800bc90 <_vfiprintf_r+0x78>
 800bc5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc60:	07dc      	lsls	r4, r3, #31
 800bc62:	d50e      	bpl.n	800bc82 <_vfiprintf_r+0x6a>
 800bc64:	f04f 30ff 	mov.w	r0, #4294967295
 800bc68:	b01d      	add	sp, #116	; 0x74
 800bc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc6e:	4b7b      	ldr	r3, [pc, #492]	; (800be5c <_vfiprintf_r+0x244>)
 800bc70:	429d      	cmp	r5, r3
 800bc72:	d101      	bne.n	800bc78 <_vfiprintf_r+0x60>
 800bc74:	68b5      	ldr	r5, [r6, #8]
 800bc76:	e7df      	b.n	800bc38 <_vfiprintf_r+0x20>
 800bc78:	4b79      	ldr	r3, [pc, #484]	; (800be60 <_vfiprintf_r+0x248>)
 800bc7a:	429d      	cmp	r5, r3
 800bc7c:	bf08      	it	eq
 800bc7e:	68f5      	ldreq	r5, [r6, #12]
 800bc80:	e7da      	b.n	800bc38 <_vfiprintf_r+0x20>
 800bc82:	89ab      	ldrh	r3, [r5, #12]
 800bc84:	0598      	lsls	r0, r3, #22
 800bc86:	d4ed      	bmi.n	800bc64 <_vfiprintf_r+0x4c>
 800bc88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc8a:	f000 fb84 	bl	800c396 <__retarget_lock_release_recursive>
 800bc8e:	e7e9      	b.n	800bc64 <_vfiprintf_r+0x4c>
 800bc90:	2300      	movs	r3, #0
 800bc92:	9309      	str	r3, [sp, #36]	; 0x24
 800bc94:	2320      	movs	r3, #32
 800bc96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc9a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc9e:	2330      	movs	r3, #48	; 0x30
 800bca0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800be64 <_vfiprintf_r+0x24c>
 800bca4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bca8:	f04f 0901 	mov.w	r9, #1
 800bcac:	4623      	mov	r3, r4
 800bcae:	469a      	mov	sl, r3
 800bcb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcb4:	b10a      	cbz	r2, 800bcba <_vfiprintf_r+0xa2>
 800bcb6:	2a25      	cmp	r2, #37	; 0x25
 800bcb8:	d1f9      	bne.n	800bcae <_vfiprintf_r+0x96>
 800bcba:	ebba 0b04 	subs.w	fp, sl, r4
 800bcbe:	d00b      	beq.n	800bcd8 <_vfiprintf_r+0xc0>
 800bcc0:	465b      	mov	r3, fp
 800bcc2:	4622      	mov	r2, r4
 800bcc4:	4629      	mov	r1, r5
 800bcc6:	4630      	mov	r0, r6
 800bcc8:	f7ff ff93 	bl	800bbf2 <__sfputs_r>
 800bccc:	3001      	adds	r0, #1
 800bcce:	f000 80aa 	beq.w	800be26 <_vfiprintf_r+0x20e>
 800bcd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcd4:	445a      	add	r2, fp
 800bcd6:	9209      	str	r2, [sp, #36]	; 0x24
 800bcd8:	f89a 3000 	ldrb.w	r3, [sl]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	f000 80a2 	beq.w	800be26 <_vfiprintf_r+0x20e>
 800bce2:	2300      	movs	r3, #0
 800bce4:	f04f 32ff 	mov.w	r2, #4294967295
 800bce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcec:	f10a 0a01 	add.w	sl, sl, #1
 800bcf0:	9304      	str	r3, [sp, #16]
 800bcf2:	9307      	str	r3, [sp, #28]
 800bcf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcf8:	931a      	str	r3, [sp, #104]	; 0x68
 800bcfa:	4654      	mov	r4, sl
 800bcfc:	2205      	movs	r2, #5
 800bcfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd02:	4858      	ldr	r0, [pc, #352]	; (800be64 <_vfiprintf_r+0x24c>)
 800bd04:	f7f4 fa6c 	bl	80001e0 <memchr>
 800bd08:	9a04      	ldr	r2, [sp, #16]
 800bd0a:	b9d8      	cbnz	r0, 800bd44 <_vfiprintf_r+0x12c>
 800bd0c:	06d1      	lsls	r1, r2, #27
 800bd0e:	bf44      	itt	mi
 800bd10:	2320      	movmi	r3, #32
 800bd12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd16:	0713      	lsls	r3, r2, #28
 800bd18:	bf44      	itt	mi
 800bd1a:	232b      	movmi	r3, #43	; 0x2b
 800bd1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd20:	f89a 3000 	ldrb.w	r3, [sl]
 800bd24:	2b2a      	cmp	r3, #42	; 0x2a
 800bd26:	d015      	beq.n	800bd54 <_vfiprintf_r+0x13c>
 800bd28:	9a07      	ldr	r2, [sp, #28]
 800bd2a:	4654      	mov	r4, sl
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	f04f 0c0a 	mov.w	ip, #10
 800bd32:	4621      	mov	r1, r4
 800bd34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd38:	3b30      	subs	r3, #48	; 0x30
 800bd3a:	2b09      	cmp	r3, #9
 800bd3c:	d94e      	bls.n	800bddc <_vfiprintf_r+0x1c4>
 800bd3e:	b1b0      	cbz	r0, 800bd6e <_vfiprintf_r+0x156>
 800bd40:	9207      	str	r2, [sp, #28]
 800bd42:	e014      	b.n	800bd6e <_vfiprintf_r+0x156>
 800bd44:	eba0 0308 	sub.w	r3, r0, r8
 800bd48:	fa09 f303 	lsl.w	r3, r9, r3
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	9304      	str	r3, [sp, #16]
 800bd50:	46a2      	mov	sl, r4
 800bd52:	e7d2      	b.n	800bcfa <_vfiprintf_r+0xe2>
 800bd54:	9b03      	ldr	r3, [sp, #12]
 800bd56:	1d19      	adds	r1, r3, #4
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	9103      	str	r1, [sp, #12]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	bfbb      	ittet	lt
 800bd60:	425b      	neglt	r3, r3
 800bd62:	f042 0202 	orrlt.w	r2, r2, #2
 800bd66:	9307      	strge	r3, [sp, #28]
 800bd68:	9307      	strlt	r3, [sp, #28]
 800bd6a:	bfb8      	it	lt
 800bd6c:	9204      	strlt	r2, [sp, #16]
 800bd6e:	7823      	ldrb	r3, [r4, #0]
 800bd70:	2b2e      	cmp	r3, #46	; 0x2e
 800bd72:	d10c      	bne.n	800bd8e <_vfiprintf_r+0x176>
 800bd74:	7863      	ldrb	r3, [r4, #1]
 800bd76:	2b2a      	cmp	r3, #42	; 0x2a
 800bd78:	d135      	bne.n	800bde6 <_vfiprintf_r+0x1ce>
 800bd7a:	9b03      	ldr	r3, [sp, #12]
 800bd7c:	1d1a      	adds	r2, r3, #4
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	9203      	str	r2, [sp, #12]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	bfb8      	it	lt
 800bd86:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd8a:	3402      	adds	r4, #2
 800bd8c:	9305      	str	r3, [sp, #20]
 800bd8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800be74 <_vfiprintf_r+0x25c>
 800bd92:	7821      	ldrb	r1, [r4, #0]
 800bd94:	2203      	movs	r2, #3
 800bd96:	4650      	mov	r0, sl
 800bd98:	f7f4 fa22 	bl	80001e0 <memchr>
 800bd9c:	b140      	cbz	r0, 800bdb0 <_vfiprintf_r+0x198>
 800bd9e:	2340      	movs	r3, #64	; 0x40
 800bda0:	eba0 000a 	sub.w	r0, r0, sl
 800bda4:	fa03 f000 	lsl.w	r0, r3, r0
 800bda8:	9b04      	ldr	r3, [sp, #16]
 800bdaa:	4303      	orrs	r3, r0
 800bdac:	3401      	adds	r4, #1
 800bdae:	9304      	str	r3, [sp, #16]
 800bdb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdb4:	482c      	ldr	r0, [pc, #176]	; (800be68 <_vfiprintf_r+0x250>)
 800bdb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdba:	2206      	movs	r2, #6
 800bdbc:	f7f4 fa10 	bl	80001e0 <memchr>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d03f      	beq.n	800be44 <_vfiprintf_r+0x22c>
 800bdc4:	4b29      	ldr	r3, [pc, #164]	; (800be6c <_vfiprintf_r+0x254>)
 800bdc6:	bb1b      	cbnz	r3, 800be10 <_vfiprintf_r+0x1f8>
 800bdc8:	9b03      	ldr	r3, [sp, #12]
 800bdca:	3307      	adds	r3, #7
 800bdcc:	f023 0307 	bic.w	r3, r3, #7
 800bdd0:	3308      	adds	r3, #8
 800bdd2:	9303      	str	r3, [sp, #12]
 800bdd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdd6:	443b      	add	r3, r7
 800bdd8:	9309      	str	r3, [sp, #36]	; 0x24
 800bdda:	e767      	b.n	800bcac <_vfiprintf_r+0x94>
 800bddc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bde0:	460c      	mov	r4, r1
 800bde2:	2001      	movs	r0, #1
 800bde4:	e7a5      	b.n	800bd32 <_vfiprintf_r+0x11a>
 800bde6:	2300      	movs	r3, #0
 800bde8:	3401      	adds	r4, #1
 800bdea:	9305      	str	r3, [sp, #20]
 800bdec:	4619      	mov	r1, r3
 800bdee:	f04f 0c0a 	mov.w	ip, #10
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdf8:	3a30      	subs	r2, #48	; 0x30
 800bdfa:	2a09      	cmp	r2, #9
 800bdfc:	d903      	bls.n	800be06 <_vfiprintf_r+0x1ee>
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d0c5      	beq.n	800bd8e <_vfiprintf_r+0x176>
 800be02:	9105      	str	r1, [sp, #20]
 800be04:	e7c3      	b.n	800bd8e <_vfiprintf_r+0x176>
 800be06:	fb0c 2101 	mla	r1, ip, r1, r2
 800be0a:	4604      	mov	r4, r0
 800be0c:	2301      	movs	r3, #1
 800be0e:	e7f0      	b.n	800bdf2 <_vfiprintf_r+0x1da>
 800be10:	ab03      	add	r3, sp, #12
 800be12:	9300      	str	r3, [sp, #0]
 800be14:	462a      	mov	r2, r5
 800be16:	4b16      	ldr	r3, [pc, #88]	; (800be70 <_vfiprintf_r+0x258>)
 800be18:	a904      	add	r1, sp, #16
 800be1a:	4630      	mov	r0, r6
 800be1c:	f7fd ffaa 	bl	8009d74 <_printf_float>
 800be20:	4607      	mov	r7, r0
 800be22:	1c78      	adds	r0, r7, #1
 800be24:	d1d6      	bne.n	800bdd4 <_vfiprintf_r+0x1bc>
 800be26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be28:	07d9      	lsls	r1, r3, #31
 800be2a:	d405      	bmi.n	800be38 <_vfiprintf_r+0x220>
 800be2c:	89ab      	ldrh	r3, [r5, #12]
 800be2e:	059a      	lsls	r2, r3, #22
 800be30:	d402      	bmi.n	800be38 <_vfiprintf_r+0x220>
 800be32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be34:	f000 faaf 	bl	800c396 <__retarget_lock_release_recursive>
 800be38:	89ab      	ldrh	r3, [r5, #12]
 800be3a:	065b      	lsls	r3, r3, #25
 800be3c:	f53f af12 	bmi.w	800bc64 <_vfiprintf_r+0x4c>
 800be40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be42:	e711      	b.n	800bc68 <_vfiprintf_r+0x50>
 800be44:	ab03      	add	r3, sp, #12
 800be46:	9300      	str	r3, [sp, #0]
 800be48:	462a      	mov	r2, r5
 800be4a:	4b09      	ldr	r3, [pc, #36]	; (800be70 <_vfiprintf_r+0x258>)
 800be4c:	a904      	add	r1, sp, #16
 800be4e:	4630      	mov	r0, r6
 800be50:	f7fe fa34 	bl	800a2bc <_printf_i>
 800be54:	e7e4      	b.n	800be20 <_vfiprintf_r+0x208>
 800be56:	bf00      	nop
 800be58:	0800d30c 	.word	0x0800d30c
 800be5c:	0800d32c 	.word	0x0800d32c
 800be60:	0800d2ec 	.word	0x0800d2ec
 800be64:	0800d1da 	.word	0x0800d1da
 800be68:	0800d1e4 	.word	0x0800d1e4
 800be6c:	08009d75 	.word	0x08009d75
 800be70:	0800bbf3 	.word	0x0800bbf3
 800be74:	0800d1e0 	.word	0x0800d1e0

0800be78 <__swbuf_r>:
 800be78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be7a:	460e      	mov	r6, r1
 800be7c:	4614      	mov	r4, r2
 800be7e:	4605      	mov	r5, r0
 800be80:	b118      	cbz	r0, 800be8a <__swbuf_r+0x12>
 800be82:	6983      	ldr	r3, [r0, #24]
 800be84:	b90b      	cbnz	r3, 800be8a <__swbuf_r+0x12>
 800be86:	f000 f9e7 	bl	800c258 <__sinit>
 800be8a:	4b21      	ldr	r3, [pc, #132]	; (800bf10 <__swbuf_r+0x98>)
 800be8c:	429c      	cmp	r4, r3
 800be8e:	d12b      	bne.n	800bee8 <__swbuf_r+0x70>
 800be90:	686c      	ldr	r4, [r5, #4]
 800be92:	69a3      	ldr	r3, [r4, #24]
 800be94:	60a3      	str	r3, [r4, #8]
 800be96:	89a3      	ldrh	r3, [r4, #12]
 800be98:	071a      	lsls	r2, r3, #28
 800be9a:	d52f      	bpl.n	800befc <__swbuf_r+0x84>
 800be9c:	6923      	ldr	r3, [r4, #16]
 800be9e:	b36b      	cbz	r3, 800befc <__swbuf_r+0x84>
 800bea0:	6923      	ldr	r3, [r4, #16]
 800bea2:	6820      	ldr	r0, [r4, #0]
 800bea4:	1ac0      	subs	r0, r0, r3
 800bea6:	6963      	ldr	r3, [r4, #20]
 800bea8:	b2f6      	uxtb	r6, r6
 800beaa:	4283      	cmp	r3, r0
 800beac:	4637      	mov	r7, r6
 800beae:	dc04      	bgt.n	800beba <__swbuf_r+0x42>
 800beb0:	4621      	mov	r1, r4
 800beb2:	4628      	mov	r0, r5
 800beb4:	f000 f93c 	bl	800c130 <_fflush_r>
 800beb8:	bb30      	cbnz	r0, 800bf08 <__swbuf_r+0x90>
 800beba:	68a3      	ldr	r3, [r4, #8]
 800bebc:	3b01      	subs	r3, #1
 800bebe:	60a3      	str	r3, [r4, #8]
 800bec0:	6823      	ldr	r3, [r4, #0]
 800bec2:	1c5a      	adds	r2, r3, #1
 800bec4:	6022      	str	r2, [r4, #0]
 800bec6:	701e      	strb	r6, [r3, #0]
 800bec8:	6963      	ldr	r3, [r4, #20]
 800beca:	3001      	adds	r0, #1
 800becc:	4283      	cmp	r3, r0
 800bece:	d004      	beq.n	800beda <__swbuf_r+0x62>
 800bed0:	89a3      	ldrh	r3, [r4, #12]
 800bed2:	07db      	lsls	r3, r3, #31
 800bed4:	d506      	bpl.n	800bee4 <__swbuf_r+0x6c>
 800bed6:	2e0a      	cmp	r6, #10
 800bed8:	d104      	bne.n	800bee4 <__swbuf_r+0x6c>
 800beda:	4621      	mov	r1, r4
 800bedc:	4628      	mov	r0, r5
 800bede:	f000 f927 	bl	800c130 <_fflush_r>
 800bee2:	b988      	cbnz	r0, 800bf08 <__swbuf_r+0x90>
 800bee4:	4638      	mov	r0, r7
 800bee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bee8:	4b0a      	ldr	r3, [pc, #40]	; (800bf14 <__swbuf_r+0x9c>)
 800beea:	429c      	cmp	r4, r3
 800beec:	d101      	bne.n	800bef2 <__swbuf_r+0x7a>
 800beee:	68ac      	ldr	r4, [r5, #8]
 800bef0:	e7cf      	b.n	800be92 <__swbuf_r+0x1a>
 800bef2:	4b09      	ldr	r3, [pc, #36]	; (800bf18 <__swbuf_r+0xa0>)
 800bef4:	429c      	cmp	r4, r3
 800bef6:	bf08      	it	eq
 800bef8:	68ec      	ldreq	r4, [r5, #12]
 800befa:	e7ca      	b.n	800be92 <__swbuf_r+0x1a>
 800befc:	4621      	mov	r1, r4
 800befe:	4628      	mov	r0, r5
 800bf00:	f000 f81a 	bl	800bf38 <__swsetup_r>
 800bf04:	2800      	cmp	r0, #0
 800bf06:	d0cb      	beq.n	800bea0 <__swbuf_r+0x28>
 800bf08:	f04f 37ff 	mov.w	r7, #4294967295
 800bf0c:	e7ea      	b.n	800bee4 <__swbuf_r+0x6c>
 800bf0e:	bf00      	nop
 800bf10:	0800d30c 	.word	0x0800d30c
 800bf14:	0800d32c 	.word	0x0800d32c
 800bf18:	0800d2ec 	.word	0x0800d2ec

0800bf1c <__ascii_wctomb>:
 800bf1c:	b149      	cbz	r1, 800bf32 <__ascii_wctomb+0x16>
 800bf1e:	2aff      	cmp	r2, #255	; 0xff
 800bf20:	bf85      	ittet	hi
 800bf22:	238a      	movhi	r3, #138	; 0x8a
 800bf24:	6003      	strhi	r3, [r0, #0]
 800bf26:	700a      	strbls	r2, [r1, #0]
 800bf28:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf2c:	bf98      	it	ls
 800bf2e:	2001      	movls	r0, #1
 800bf30:	4770      	bx	lr
 800bf32:	4608      	mov	r0, r1
 800bf34:	4770      	bx	lr
	...

0800bf38 <__swsetup_r>:
 800bf38:	4b32      	ldr	r3, [pc, #200]	; (800c004 <__swsetup_r+0xcc>)
 800bf3a:	b570      	push	{r4, r5, r6, lr}
 800bf3c:	681d      	ldr	r5, [r3, #0]
 800bf3e:	4606      	mov	r6, r0
 800bf40:	460c      	mov	r4, r1
 800bf42:	b125      	cbz	r5, 800bf4e <__swsetup_r+0x16>
 800bf44:	69ab      	ldr	r3, [r5, #24]
 800bf46:	b913      	cbnz	r3, 800bf4e <__swsetup_r+0x16>
 800bf48:	4628      	mov	r0, r5
 800bf4a:	f000 f985 	bl	800c258 <__sinit>
 800bf4e:	4b2e      	ldr	r3, [pc, #184]	; (800c008 <__swsetup_r+0xd0>)
 800bf50:	429c      	cmp	r4, r3
 800bf52:	d10f      	bne.n	800bf74 <__swsetup_r+0x3c>
 800bf54:	686c      	ldr	r4, [r5, #4]
 800bf56:	89a3      	ldrh	r3, [r4, #12]
 800bf58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf5c:	0719      	lsls	r1, r3, #28
 800bf5e:	d42c      	bmi.n	800bfba <__swsetup_r+0x82>
 800bf60:	06dd      	lsls	r5, r3, #27
 800bf62:	d411      	bmi.n	800bf88 <__swsetup_r+0x50>
 800bf64:	2309      	movs	r3, #9
 800bf66:	6033      	str	r3, [r6, #0]
 800bf68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf6c:	81a3      	strh	r3, [r4, #12]
 800bf6e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf72:	e03e      	b.n	800bff2 <__swsetup_r+0xba>
 800bf74:	4b25      	ldr	r3, [pc, #148]	; (800c00c <__swsetup_r+0xd4>)
 800bf76:	429c      	cmp	r4, r3
 800bf78:	d101      	bne.n	800bf7e <__swsetup_r+0x46>
 800bf7a:	68ac      	ldr	r4, [r5, #8]
 800bf7c:	e7eb      	b.n	800bf56 <__swsetup_r+0x1e>
 800bf7e:	4b24      	ldr	r3, [pc, #144]	; (800c010 <__swsetup_r+0xd8>)
 800bf80:	429c      	cmp	r4, r3
 800bf82:	bf08      	it	eq
 800bf84:	68ec      	ldreq	r4, [r5, #12]
 800bf86:	e7e6      	b.n	800bf56 <__swsetup_r+0x1e>
 800bf88:	0758      	lsls	r0, r3, #29
 800bf8a:	d512      	bpl.n	800bfb2 <__swsetup_r+0x7a>
 800bf8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf8e:	b141      	cbz	r1, 800bfa2 <__swsetup_r+0x6a>
 800bf90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf94:	4299      	cmp	r1, r3
 800bf96:	d002      	beq.n	800bf9e <__swsetup_r+0x66>
 800bf98:	4630      	mov	r0, r6
 800bf9a:	f7ff fcd5 	bl	800b948 <_free_r>
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	6363      	str	r3, [r4, #52]	; 0x34
 800bfa2:	89a3      	ldrh	r3, [r4, #12]
 800bfa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bfa8:	81a3      	strh	r3, [r4, #12]
 800bfaa:	2300      	movs	r3, #0
 800bfac:	6063      	str	r3, [r4, #4]
 800bfae:	6923      	ldr	r3, [r4, #16]
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	89a3      	ldrh	r3, [r4, #12]
 800bfb4:	f043 0308 	orr.w	r3, r3, #8
 800bfb8:	81a3      	strh	r3, [r4, #12]
 800bfba:	6923      	ldr	r3, [r4, #16]
 800bfbc:	b94b      	cbnz	r3, 800bfd2 <__swsetup_r+0x9a>
 800bfbe:	89a3      	ldrh	r3, [r4, #12]
 800bfc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfc8:	d003      	beq.n	800bfd2 <__swsetup_r+0x9a>
 800bfca:	4621      	mov	r1, r4
 800bfcc:	4630      	mov	r0, r6
 800bfce:	f000 fa09 	bl	800c3e4 <__smakebuf_r>
 800bfd2:	89a0      	ldrh	r0, [r4, #12]
 800bfd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfd8:	f010 0301 	ands.w	r3, r0, #1
 800bfdc:	d00a      	beq.n	800bff4 <__swsetup_r+0xbc>
 800bfde:	2300      	movs	r3, #0
 800bfe0:	60a3      	str	r3, [r4, #8]
 800bfe2:	6963      	ldr	r3, [r4, #20]
 800bfe4:	425b      	negs	r3, r3
 800bfe6:	61a3      	str	r3, [r4, #24]
 800bfe8:	6923      	ldr	r3, [r4, #16]
 800bfea:	b943      	cbnz	r3, 800bffe <__swsetup_r+0xc6>
 800bfec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bff0:	d1ba      	bne.n	800bf68 <__swsetup_r+0x30>
 800bff2:	bd70      	pop	{r4, r5, r6, pc}
 800bff4:	0781      	lsls	r1, r0, #30
 800bff6:	bf58      	it	pl
 800bff8:	6963      	ldrpl	r3, [r4, #20]
 800bffa:	60a3      	str	r3, [r4, #8]
 800bffc:	e7f4      	b.n	800bfe8 <__swsetup_r+0xb0>
 800bffe:	2000      	movs	r0, #0
 800c000:	e7f7      	b.n	800bff2 <__swsetup_r+0xba>
 800c002:	bf00      	nop
 800c004:	20000010 	.word	0x20000010
 800c008:	0800d30c 	.word	0x0800d30c
 800c00c:	0800d32c 	.word	0x0800d32c
 800c010:	0800d2ec 	.word	0x0800d2ec

0800c014 <abort>:
 800c014:	b508      	push	{r3, lr}
 800c016:	2006      	movs	r0, #6
 800c018:	f000 fa4c 	bl	800c4b4 <raise>
 800c01c:	2001      	movs	r0, #1
 800c01e:	f7f7 fae1 	bl	80035e4 <_exit>
	...

0800c024 <__sflush_r>:
 800c024:	898a      	ldrh	r2, [r1, #12]
 800c026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c02a:	4605      	mov	r5, r0
 800c02c:	0710      	lsls	r0, r2, #28
 800c02e:	460c      	mov	r4, r1
 800c030:	d458      	bmi.n	800c0e4 <__sflush_r+0xc0>
 800c032:	684b      	ldr	r3, [r1, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	dc05      	bgt.n	800c044 <__sflush_r+0x20>
 800c038:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	dc02      	bgt.n	800c044 <__sflush_r+0x20>
 800c03e:	2000      	movs	r0, #0
 800c040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c046:	2e00      	cmp	r6, #0
 800c048:	d0f9      	beq.n	800c03e <__sflush_r+0x1a>
 800c04a:	2300      	movs	r3, #0
 800c04c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c050:	682f      	ldr	r7, [r5, #0]
 800c052:	602b      	str	r3, [r5, #0]
 800c054:	d032      	beq.n	800c0bc <__sflush_r+0x98>
 800c056:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c058:	89a3      	ldrh	r3, [r4, #12]
 800c05a:	075a      	lsls	r2, r3, #29
 800c05c:	d505      	bpl.n	800c06a <__sflush_r+0x46>
 800c05e:	6863      	ldr	r3, [r4, #4]
 800c060:	1ac0      	subs	r0, r0, r3
 800c062:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c064:	b10b      	cbz	r3, 800c06a <__sflush_r+0x46>
 800c066:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c068:	1ac0      	subs	r0, r0, r3
 800c06a:	2300      	movs	r3, #0
 800c06c:	4602      	mov	r2, r0
 800c06e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c070:	6a21      	ldr	r1, [r4, #32]
 800c072:	4628      	mov	r0, r5
 800c074:	47b0      	blx	r6
 800c076:	1c43      	adds	r3, r0, #1
 800c078:	89a3      	ldrh	r3, [r4, #12]
 800c07a:	d106      	bne.n	800c08a <__sflush_r+0x66>
 800c07c:	6829      	ldr	r1, [r5, #0]
 800c07e:	291d      	cmp	r1, #29
 800c080:	d82c      	bhi.n	800c0dc <__sflush_r+0xb8>
 800c082:	4a2a      	ldr	r2, [pc, #168]	; (800c12c <__sflush_r+0x108>)
 800c084:	40ca      	lsrs	r2, r1
 800c086:	07d6      	lsls	r6, r2, #31
 800c088:	d528      	bpl.n	800c0dc <__sflush_r+0xb8>
 800c08a:	2200      	movs	r2, #0
 800c08c:	6062      	str	r2, [r4, #4]
 800c08e:	04d9      	lsls	r1, r3, #19
 800c090:	6922      	ldr	r2, [r4, #16]
 800c092:	6022      	str	r2, [r4, #0]
 800c094:	d504      	bpl.n	800c0a0 <__sflush_r+0x7c>
 800c096:	1c42      	adds	r2, r0, #1
 800c098:	d101      	bne.n	800c09e <__sflush_r+0x7a>
 800c09a:	682b      	ldr	r3, [r5, #0]
 800c09c:	b903      	cbnz	r3, 800c0a0 <__sflush_r+0x7c>
 800c09e:	6560      	str	r0, [r4, #84]	; 0x54
 800c0a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c0a2:	602f      	str	r7, [r5, #0]
 800c0a4:	2900      	cmp	r1, #0
 800c0a6:	d0ca      	beq.n	800c03e <__sflush_r+0x1a>
 800c0a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c0ac:	4299      	cmp	r1, r3
 800c0ae:	d002      	beq.n	800c0b6 <__sflush_r+0x92>
 800c0b0:	4628      	mov	r0, r5
 800c0b2:	f7ff fc49 	bl	800b948 <_free_r>
 800c0b6:	2000      	movs	r0, #0
 800c0b8:	6360      	str	r0, [r4, #52]	; 0x34
 800c0ba:	e7c1      	b.n	800c040 <__sflush_r+0x1c>
 800c0bc:	6a21      	ldr	r1, [r4, #32]
 800c0be:	2301      	movs	r3, #1
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	47b0      	blx	r6
 800c0c4:	1c41      	adds	r1, r0, #1
 800c0c6:	d1c7      	bne.n	800c058 <__sflush_r+0x34>
 800c0c8:	682b      	ldr	r3, [r5, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d0c4      	beq.n	800c058 <__sflush_r+0x34>
 800c0ce:	2b1d      	cmp	r3, #29
 800c0d0:	d001      	beq.n	800c0d6 <__sflush_r+0xb2>
 800c0d2:	2b16      	cmp	r3, #22
 800c0d4:	d101      	bne.n	800c0da <__sflush_r+0xb6>
 800c0d6:	602f      	str	r7, [r5, #0]
 800c0d8:	e7b1      	b.n	800c03e <__sflush_r+0x1a>
 800c0da:	89a3      	ldrh	r3, [r4, #12]
 800c0dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0e0:	81a3      	strh	r3, [r4, #12]
 800c0e2:	e7ad      	b.n	800c040 <__sflush_r+0x1c>
 800c0e4:	690f      	ldr	r7, [r1, #16]
 800c0e6:	2f00      	cmp	r7, #0
 800c0e8:	d0a9      	beq.n	800c03e <__sflush_r+0x1a>
 800c0ea:	0793      	lsls	r3, r2, #30
 800c0ec:	680e      	ldr	r6, [r1, #0]
 800c0ee:	bf08      	it	eq
 800c0f0:	694b      	ldreq	r3, [r1, #20]
 800c0f2:	600f      	str	r7, [r1, #0]
 800c0f4:	bf18      	it	ne
 800c0f6:	2300      	movne	r3, #0
 800c0f8:	eba6 0807 	sub.w	r8, r6, r7
 800c0fc:	608b      	str	r3, [r1, #8]
 800c0fe:	f1b8 0f00 	cmp.w	r8, #0
 800c102:	dd9c      	ble.n	800c03e <__sflush_r+0x1a>
 800c104:	6a21      	ldr	r1, [r4, #32]
 800c106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c108:	4643      	mov	r3, r8
 800c10a:	463a      	mov	r2, r7
 800c10c:	4628      	mov	r0, r5
 800c10e:	47b0      	blx	r6
 800c110:	2800      	cmp	r0, #0
 800c112:	dc06      	bgt.n	800c122 <__sflush_r+0xfe>
 800c114:	89a3      	ldrh	r3, [r4, #12]
 800c116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c11a:	81a3      	strh	r3, [r4, #12]
 800c11c:	f04f 30ff 	mov.w	r0, #4294967295
 800c120:	e78e      	b.n	800c040 <__sflush_r+0x1c>
 800c122:	4407      	add	r7, r0
 800c124:	eba8 0800 	sub.w	r8, r8, r0
 800c128:	e7e9      	b.n	800c0fe <__sflush_r+0xda>
 800c12a:	bf00      	nop
 800c12c:	20400001 	.word	0x20400001

0800c130 <_fflush_r>:
 800c130:	b538      	push	{r3, r4, r5, lr}
 800c132:	690b      	ldr	r3, [r1, #16]
 800c134:	4605      	mov	r5, r0
 800c136:	460c      	mov	r4, r1
 800c138:	b913      	cbnz	r3, 800c140 <_fflush_r+0x10>
 800c13a:	2500      	movs	r5, #0
 800c13c:	4628      	mov	r0, r5
 800c13e:	bd38      	pop	{r3, r4, r5, pc}
 800c140:	b118      	cbz	r0, 800c14a <_fflush_r+0x1a>
 800c142:	6983      	ldr	r3, [r0, #24]
 800c144:	b90b      	cbnz	r3, 800c14a <_fflush_r+0x1a>
 800c146:	f000 f887 	bl	800c258 <__sinit>
 800c14a:	4b14      	ldr	r3, [pc, #80]	; (800c19c <_fflush_r+0x6c>)
 800c14c:	429c      	cmp	r4, r3
 800c14e:	d11b      	bne.n	800c188 <_fflush_r+0x58>
 800c150:	686c      	ldr	r4, [r5, #4]
 800c152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d0ef      	beq.n	800c13a <_fflush_r+0xa>
 800c15a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c15c:	07d0      	lsls	r0, r2, #31
 800c15e:	d404      	bmi.n	800c16a <_fflush_r+0x3a>
 800c160:	0599      	lsls	r1, r3, #22
 800c162:	d402      	bmi.n	800c16a <_fflush_r+0x3a>
 800c164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c166:	f000 f915 	bl	800c394 <__retarget_lock_acquire_recursive>
 800c16a:	4628      	mov	r0, r5
 800c16c:	4621      	mov	r1, r4
 800c16e:	f7ff ff59 	bl	800c024 <__sflush_r>
 800c172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c174:	07da      	lsls	r2, r3, #31
 800c176:	4605      	mov	r5, r0
 800c178:	d4e0      	bmi.n	800c13c <_fflush_r+0xc>
 800c17a:	89a3      	ldrh	r3, [r4, #12]
 800c17c:	059b      	lsls	r3, r3, #22
 800c17e:	d4dd      	bmi.n	800c13c <_fflush_r+0xc>
 800c180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c182:	f000 f908 	bl	800c396 <__retarget_lock_release_recursive>
 800c186:	e7d9      	b.n	800c13c <_fflush_r+0xc>
 800c188:	4b05      	ldr	r3, [pc, #20]	; (800c1a0 <_fflush_r+0x70>)
 800c18a:	429c      	cmp	r4, r3
 800c18c:	d101      	bne.n	800c192 <_fflush_r+0x62>
 800c18e:	68ac      	ldr	r4, [r5, #8]
 800c190:	e7df      	b.n	800c152 <_fflush_r+0x22>
 800c192:	4b04      	ldr	r3, [pc, #16]	; (800c1a4 <_fflush_r+0x74>)
 800c194:	429c      	cmp	r4, r3
 800c196:	bf08      	it	eq
 800c198:	68ec      	ldreq	r4, [r5, #12]
 800c19a:	e7da      	b.n	800c152 <_fflush_r+0x22>
 800c19c:	0800d30c 	.word	0x0800d30c
 800c1a0:	0800d32c 	.word	0x0800d32c
 800c1a4:	0800d2ec 	.word	0x0800d2ec

0800c1a8 <std>:
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	b510      	push	{r4, lr}
 800c1ac:	4604      	mov	r4, r0
 800c1ae:	e9c0 3300 	strd	r3, r3, [r0]
 800c1b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1b6:	6083      	str	r3, [r0, #8]
 800c1b8:	8181      	strh	r1, [r0, #12]
 800c1ba:	6643      	str	r3, [r0, #100]	; 0x64
 800c1bc:	81c2      	strh	r2, [r0, #14]
 800c1be:	6183      	str	r3, [r0, #24]
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	2208      	movs	r2, #8
 800c1c4:	305c      	adds	r0, #92	; 0x5c
 800c1c6:	f7fd fd2d 	bl	8009c24 <memset>
 800c1ca:	4b05      	ldr	r3, [pc, #20]	; (800c1e0 <std+0x38>)
 800c1cc:	6263      	str	r3, [r4, #36]	; 0x24
 800c1ce:	4b05      	ldr	r3, [pc, #20]	; (800c1e4 <std+0x3c>)
 800c1d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800c1d2:	4b05      	ldr	r3, [pc, #20]	; (800c1e8 <std+0x40>)
 800c1d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c1d6:	4b05      	ldr	r3, [pc, #20]	; (800c1ec <std+0x44>)
 800c1d8:	6224      	str	r4, [r4, #32]
 800c1da:	6323      	str	r3, [r4, #48]	; 0x30
 800c1dc:	bd10      	pop	{r4, pc}
 800c1de:	bf00      	nop
 800c1e0:	0800c4ed 	.word	0x0800c4ed
 800c1e4:	0800c50f 	.word	0x0800c50f
 800c1e8:	0800c547 	.word	0x0800c547
 800c1ec:	0800c56b 	.word	0x0800c56b

0800c1f0 <_cleanup_r>:
 800c1f0:	4901      	ldr	r1, [pc, #4]	; (800c1f8 <_cleanup_r+0x8>)
 800c1f2:	f000 b8af 	b.w	800c354 <_fwalk_reent>
 800c1f6:	bf00      	nop
 800c1f8:	0800c131 	.word	0x0800c131

0800c1fc <__sfmoreglue>:
 800c1fc:	b570      	push	{r4, r5, r6, lr}
 800c1fe:	2268      	movs	r2, #104	; 0x68
 800c200:	1e4d      	subs	r5, r1, #1
 800c202:	4355      	muls	r5, r2
 800c204:	460e      	mov	r6, r1
 800c206:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c20a:	f7ff fc09 	bl	800ba20 <_malloc_r>
 800c20e:	4604      	mov	r4, r0
 800c210:	b140      	cbz	r0, 800c224 <__sfmoreglue+0x28>
 800c212:	2100      	movs	r1, #0
 800c214:	e9c0 1600 	strd	r1, r6, [r0]
 800c218:	300c      	adds	r0, #12
 800c21a:	60a0      	str	r0, [r4, #8]
 800c21c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c220:	f7fd fd00 	bl	8009c24 <memset>
 800c224:	4620      	mov	r0, r4
 800c226:	bd70      	pop	{r4, r5, r6, pc}

0800c228 <__sfp_lock_acquire>:
 800c228:	4801      	ldr	r0, [pc, #4]	; (800c230 <__sfp_lock_acquire+0x8>)
 800c22a:	f000 b8b3 	b.w	800c394 <__retarget_lock_acquire_recursive>
 800c22e:	bf00      	nop
 800c230:	20000d9d 	.word	0x20000d9d

0800c234 <__sfp_lock_release>:
 800c234:	4801      	ldr	r0, [pc, #4]	; (800c23c <__sfp_lock_release+0x8>)
 800c236:	f000 b8ae 	b.w	800c396 <__retarget_lock_release_recursive>
 800c23a:	bf00      	nop
 800c23c:	20000d9d 	.word	0x20000d9d

0800c240 <__sinit_lock_acquire>:
 800c240:	4801      	ldr	r0, [pc, #4]	; (800c248 <__sinit_lock_acquire+0x8>)
 800c242:	f000 b8a7 	b.w	800c394 <__retarget_lock_acquire_recursive>
 800c246:	bf00      	nop
 800c248:	20000d9e 	.word	0x20000d9e

0800c24c <__sinit_lock_release>:
 800c24c:	4801      	ldr	r0, [pc, #4]	; (800c254 <__sinit_lock_release+0x8>)
 800c24e:	f000 b8a2 	b.w	800c396 <__retarget_lock_release_recursive>
 800c252:	bf00      	nop
 800c254:	20000d9e 	.word	0x20000d9e

0800c258 <__sinit>:
 800c258:	b510      	push	{r4, lr}
 800c25a:	4604      	mov	r4, r0
 800c25c:	f7ff fff0 	bl	800c240 <__sinit_lock_acquire>
 800c260:	69a3      	ldr	r3, [r4, #24]
 800c262:	b11b      	cbz	r3, 800c26c <__sinit+0x14>
 800c264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c268:	f7ff bff0 	b.w	800c24c <__sinit_lock_release>
 800c26c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c270:	6523      	str	r3, [r4, #80]	; 0x50
 800c272:	4b13      	ldr	r3, [pc, #76]	; (800c2c0 <__sinit+0x68>)
 800c274:	4a13      	ldr	r2, [pc, #76]	; (800c2c4 <__sinit+0x6c>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	62a2      	str	r2, [r4, #40]	; 0x28
 800c27a:	42a3      	cmp	r3, r4
 800c27c:	bf04      	itt	eq
 800c27e:	2301      	moveq	r3, #1
 800c280:	61a3      	streq	r3, [r4, #24]
 800c282:	4620      	mov	r0, r4
 800c284:	f000 f820 	bl	800c2c8 <__sfp>
 800c288:	6060      	str	r0, [r4, #4]
 800c28a:	4620      	mov	r0, r4
 800c28c:	f000 f81c 	bl	800c2c8 <__sfp>
 800c290:	60a0      	str	r0, [r4, #8]
 800c292:	4620      	mov	r0, r4
 800c294:	f000 f818 	bl	800c2c8 <__sfp>
 800c298:	2200      	movs	r2, #0
 800c29a:	60e0      	str	r0, [r4, #12]
 800c29c:	2104      	movs	r1, #4
 800c29e:	6860      	ldr	r0, [r4, #4]
 800c2a0:	f7ff ff82 	bl	800c1a8 <std>
 800c2a4:	68a0      	ldr	r0, [r4, #8]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	2109      	movs	r1, #9
 800c2aa:	f7ff ff7d 	bl	800c1a8 <std>
 800c2ae:	68e0      	ldr	r0, [r4, #12]
 800c2b0:	2202      	movs	r2, #2
 800c2b2:	2112      	movs	r1, #18
 800c2b4:	f7ff ff78 	bl	800c1a8 <std>
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	61a3      	str	r3, [r4, #24]
 800c2bc:	e7d2      	b.n	800c264 <__sinit+0xc>
 800c2be:	bf00      	nop
 800c2c0:	0800cf74 	.word	0x0800cf74
 800c2c4:	0800c1f1 	.word	0x0800c1f1

0800c2c8 <__sfp>:
 800c2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ca:	4607      	mov	r7, r0
 800c2cc:	f7ff ffac 	bl	800c228 <__sfp_lock_acquire>
 800c2d0:	4b1e      	ldr	r3, [pc, #120]	; (800c34c <__sfp+0x84>)
 800c2d2:	681e      	ldr	r6, [r3, #0]
 800c2d4:	69b3      	ldr	r3, [r6, #24]
 800c2d6:	b913      	cbnz	r3, 800c2de <__sfp+0x16>
 800c2d8:	4630      	mov	r0, r6
 800c2da:	f7ff ffbd 	bl	800c258 <__sinit>
 800c2de:	3648      	adds	r6, #72	; 0x48
 800c2e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	d503      	bpl.n	800c2f0 <__sfp+0x28>
 800c2e8:	6833      	ldr	r3, [r6, #0]
 800c2ea:	b30b      	cbz	r3, 800c330 <__sfp+0x68>
 800c2ec:	6836      	ldr	r6, [r6, #0]
 800c2ee:	e7f7      	b.n	800c2e0 <__sfp+0x18>
 800c2f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c2f4:	b9d5      	cbnz	r5, 800c32c <__sfp+0x64>
 800c2f6:	4b16      	ldr	r3, [pc, #88]	; (800c350 <__sfp+0x88>)
 800c2f8:	60e3      	str	r3, [r4, #12]
 800c2fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c2fe:	6665      	str	r5, [r4, #100]	; 0x64
 800c300:	f000 f847 	bl	800c392 <__retarget_lock_init_recursive>
 800c304:	f7ff ff96 	bl	800c234 <__sfp_lock_release>
 800c308:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c30c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c310:	6025      	str	r5, [r4, #0]
 800c312:	61a5      	str	r5, [r4, #24]
 800c314:	2208      	movs	r2, #8
 800c316:	4629      	mov	r1, r5
 800c318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c31c:	f7fd fc82 	bl	8009c24 <memset>
 800c320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c328:	4620      	mov	r0, r4
 800c32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c32c:	3468      	adds	r4, #104	; 0x68
 800c32e:	e7d9      	b.n	800c2e4 <__sfp+0x1c>
 800c330:	2104      	movs	r1, #4
 800c332:	4638      	mov	r0, r7
 800c334:	f7ff ff62 	bl	800c1fc <__sfmoreglue>
 800c338:	4604      	mov	r4, r0
 800c33a:	6030      	str	r0, [r6, #0]
 800c33c:	2800      	cmp	r0, #0
 800c33e:	d1d5      	bne.n	800c2ec <__sfp+0x24>
 800c340:	f7ff ff78 	bl	800c234 <__sfp_lock_release>
 800c344:	230c      	movs	r3, #12
 800c346:	603b      	str	r3, [r7, #0]
 800c348:	e7ee      	b.n	800c328 <__sfp+0x60>
 800c34a:	bf00      	nop
 800c34c:	0800cf74 	.word	0x0800cf74
 800c350:	ffff0001 	.word	0xffff0001

0800c354 <_fwalk_reent>:
 800c354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c358:	4606      	mov	r6, r0
 800c35a:	4688      	mov	r8, r1
 800c35c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c360:	2700      	movs	r7, #0
 800c362:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c366:	f1b9 0901 	subs.w	r9, r9, #1
 800c36a:	d505      	bpl.n	800c378 <_fwalk_reent+0x24>
 800c36c:	6824      	ldr	r4, [r4, #0]
 800c36e:	2c00      	cmp	r4, #0
 800c370:	d1f7      	bne.n	800c362 <_fwalk_reent+0xe>
 800c372:	4638      	mov	r0, r7
 800c374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c378:	89ab      	ldrh	r3, [r5, #12]
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d907      	bls.n	800c38e <_fwalk_reent+0x3a>
 800c37e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c382:	3301      	adds	r3, #1
 800c384:	d003      	beq.n	800c38e <_fwalk_reent+0x3a>
 800c386:	4629      	mov	r1, r5
 800c388:	4630      	mov	r0, r6
 800c38a:	47c0      	blx	r8
 800c38c:	4307      	orrs	r7, r0
 800c38e:	3568      	adds	r5, #104	; 0x68
 800c390:	e7e9      	b.n	800c366 <_fwalk_reent+0x12>

0800c392 <__retarget_lock_init_recursive>:
 800c392:	4770      	bx	lr

0800c394 <__retarget_lock_acquire_recursive>:
 800c394:	4770      	bx	lr

0800c396 <__retarget_lock_release_recursive>:
 800c396:	4770      	bx	lr

0800c398 <__swhatbuf_r>:
 800c398:	b570      	push	{r4, r5, r6, lr}
 800c39a:	460e      	mov	r6, r1
 800c39c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3a0:	2900      	cmp	r1, #0
 800c3a2:	b096      	sub	sp, #88	; 0x58
 800c3a4:	4614      	mov	r4, r2
 800c3a6:	461d      	mov	r5, r3
 800c3a8:	da08      	bge.n	800c3bc <__swhatbuf_r+0x24>
 800c3aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	602a      	str	r2, [r5, #0]
 800c3b2:	061a      	lsls	r2, r3, #24
 800c3b4:	d410      	bmi.n	800c3d8 <__swhatbuf_r+0x40>
 800c3b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3ba:	e00e      	b.n	800c3da <__swhatbuf_r+0x42>
 800c3bc:	466a      	mov	r2, sp
 800c3be:	f000 f8fb 	bl	800c5b8 <_fstat_r>
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	dbf1      	blt.n	800c3aa <__swhatbuf_r+0x12>
 800c3c6:	9a01      	ldr	r2, [sp, #4]
 800c3c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c3cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c3d0:	425a      	negs	r2, r3
 800c3d2:	415a      	adcs	r2, r3
 800c3d4:	602a      	str	r2, [r5, #0]
 800c3d6:	e7ee      	b.n	800c3b6 <__swhatbuf_r+0x1e>
 800c3d8:	2340      	movs	r3, #64	; 0x40
 800c3da:	2000      	movs	r0, #0
 800c3dc:	6023      	str	r3, [r4, #0]
 800c3de:	b016      	add	sp, #88	; 0x58
 800c3e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c3e4 <__smakebuf_r>:
 800c3e4:	898b      	ldrh	r3, [r1, #12]
 800c3e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c3e8:	079d      	lsls	r5, r3, #30
 800c3ea:	4606      	mov	r6, r0
 800c3ec:	460c      	mov	r4, r1
 800c3ee:	d507      	bpl.n	800c400 <__smakebuf_r+0x1c>
 800c3f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c3f4:	6023      	str	r3, [r4, #0]
 800c3f6:	6123      	str	r3, [r4, #16]
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	6163      	str	r3, [r4, #20]
 800c3fc:	b002      	add	sp, #8
 800c3fe:	bd70      	pop	{r4, r5, r6, pc}
 800c400:	ab01      	add	r3, sp, #4
 800c402:	466a      	mov	r2, sp
 800c404:	f7ff ffc8 	bl	800c398 <__swhatbuf_r>
 800c408:	9900      	ldr	r1, [sp, #0]
 800c40a:	4605      	mov	r5, r0
 800c40c:	4630      	mov	r0, r6
 800c40e:	f7ff fb07 	bl	800ba20 <_malloc_r>
 800c412:	b948      	cbnz	r0, 800c428 <__smakebuf_r+0x44>
 800c414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c418:	059a      	lsls	r2, r3, #22
 800c41a:	d4ef      	bmi.n	800c3fc <__smakebuf_r+0x18>
 800c41c:	f023 0303 	bic.w	r3, r3, #3
 800c420:	f043 0302 	orr.w	r3, r3, #2
 800c424:	81a3      	strh	r3, [r4, #12]
 800c426:	e7e3      	b.n	800c3f0 <__smakebuf_r+0xc>
 800c428:	4b0d      	ldr	r3, [pc, #52]	; (800c460 <__smakebuf_r+0x7c>)
 800c42a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c42c:	89a3      	ldrh	r3, [r4, #12]
 800c42e:	6020      	str	r0, [r4, #0]
 800c430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c434:	81a3      	strh	r3, [r4, #12]
 800c436:	9b00      	ldr	r3, [sp, #0]
 800c438:	6163      	str	r3, [r4, #20]
 800c43a:	9b01      	ldr	r3, [sp, #4]
 800c43c:	6120      	str	r0, [r4, #16]
 800c43e:	b15b      	cbz	r3, 800c458 <__smakebuf_r+0x74>
 800c440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c444:	4630      	mov	r0, r6
 800c446:	f000 f8c9 	bl	800c5dc <_isatty_r>
 800c44a:	b128      	cbz	r0, 800c458 <__smakebuf_r+0x74>
 800c44c:	89a3      	ldrh	r3, [r4, #12]
 800c44e:	f023 0303 	bic.w	r3, r3, #3
 800c452:	f043 0301 	orr.w	r3, r3, #1
 800c456:	81a3      	strh	r3, [r4, #12]
 800c458:	89a0      	ldrh	r0, [r4, #12]
 800c45a:	4305      	orrs	r5, r0
 800c45c:	81a5      	strh	r5, [r4, #12]
 800c45e:	e7cd      	b.n	800c3fc <__smakebuf_r+0x18>
 800c460:	0800c1f1 	.word	0x0800c1f1

0800c464 <_raise_r>:
 800c464:	291f      	cmp	r1, #31
 800c466:	b538      	push	{r3, r4, r5, lr}
 800c468:	4604      	mov	r4, r0
 800c46a:	460d      	mov	r5, r1
 800c46c:	d904      	bls.n	800c478 <_raise_r+0x14>
 800c46e:	2316      	movs	r3, #22
 800c470:	6003      	str	r3, [r0, #0]
 800c472:	f04f 30ff 	mov.w	r0, #4294967295
 800c476:	bd38      	pop	{r3, r4, r5, pc}
 800c478:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c47a:	b112      	cbz	r2, 800c482 <_raise_r+0x1e>
 800c47c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c480:	b94b      	cbnz	r3, 800c496 <_raise_r+0x32>
 800c482:	4620      	mov	r0, r4
 800c484:	f000 f830 	bl	800c4e8 <_getpid_r>
 800c488:	462a      	mov	r2, r5
 800c48a:	4601      	mov	r1, r0
 800c48c:	4620      	mov	r0, r4
 800c48e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c492:	f000 b817 	b.w	800c4c4 <_kill_r>
 800c496:	2b01      	cmp	r3, #1
 800c498:	d00a      	beq.n	800c4b0 <_raise_r+0x4c>
 800c49a:	1c59      	adds	r1, r3, #1
 800c49c:	d103      	bne.n	800c4a6 <_raise_r+0x42>
 800c49e:	2316      	movs	r3, #22
 800c4a0:	6003      	str	r3, [r0, #0]
 800c4a2:	2001      	movs	r0, #1
 800c4a4:	e7e7      	b.n	800c476 <_raise_r+0x12>
 800c4a6:	2400      	movs	r4, #0
 800c4a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c4ac:	4628      	mov	r0, r5
 800c4ae:	4798      	blx	r3
 800c4b0:	2000      	movs	r0, #0
 800c4b2:	e7e0      	b.n	800c476 <_raise_r+0x12>

0800c4b4 <raise>:
 800c4b4:	4b02      	ldr	r3, [pc, #8]	; (800c4c0 <raise+0xc>)
 800c4b6:	4601      	mov	r1, r0
 800c4b8:	6818      	ldr	r0, [r3, #0]
 800c4ba:	f7ff bfd3 	b.w	800c464 <_raise_r>
 800c4be:	bf00      	nop
 800c4c0:	20000010 	.word	0x20000010

0800c4c4 <_kill_r>:
 800c4c4:	b538      	push	{r3, r4, r5, lr}
 800c4c6:	4d07      	ldr	r5, [pc, #28]	; (800c4e4 <_kill_r+0x20>)
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	4608      	mov	r0, r1
 800c4ce:	4611      	mov	r1, r2
 800c4d0:	602b      	str	r3, [r5, #0]
 800c4d2:	f7f7 f877 	bl	80035c4 <_kill>
 800c4d6:	1c43      	adds	r3, r0, #1
 800c4d8:	d102      	bne.n	800c4e0 <_kill_r+0x1c>
 800c4da:	682b      	ldr	r3, [r5, #0]
 800c4dc:	b103      	cbz	r3, 800c4e0 <_kill_r+0x1c>
 800c4de:	6023      	str	r3, [r4, #0]
 800c4e0:	bd38      	pop	{r3, r4, r5, pc}
 800c4e2:	bf00      	nop
 800c4e4:	20000d98 	.word	0x20000d98

0800c4e8 <_getpid_r>:
 800c4e8:	f7f7 b864 	b.w	80035b4 <_getpid>

0800c4ec <__sread>:
 800c4ec:	b510      	push	{r4, lr}
 800c4ee:	460c      	mov	r4, r1
 800c4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4f4:	f000 f894 	bl	800c620 <_read_r>
 800c4f8:	2800      	cmp	r0, #0
 800c4fa:	bfab      	itete	ge
 800c4fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c4fe:	89a3      	ldrhlt	r3, [r4, #12]
 800c500:	181b      	addge	r3, r3, r0
 800c502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c506:	bfac      	ite	ge
 800c508:	6563      	strge	r3, [r4, #84]	; 0x54
 800c50a:	81a3      	strhlt	r3, [r4, #12]
 800c50c:	bd10      	pop	{r4, pc}

0800c50e <__swrite>:
 800c50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c512:	461f      	mov	r7, r3
 800c514:	898b      	ldrh	r3, [r1, #12]
 800c516:	05db      	lsls	r3, r3, #23
 800c518:	4605      	mov	r5, r0
 800c51a:	460c      	mov	r4, r1
 800c51c:	4616      	mov	r6, r2
 800c51e:	d505      	bpl.n	800c52c <__swrite+0x1e>
 800c520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c524:	2302      	movs	r3, #2
 800c526:	2200      	movs	r2, #0
 800c528:	f000 f868 	bl	800c5fc <_lseek_r>
 800c52c:	89a3      	ldrh	r3, [r4, #12]
 800c52e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c536:	81a3      	strh	r3, [r4, #12]
 800c538:	4632      	mov	r2, r6
 800c53a:	463b      	mov	r3, r7
 800c53c:	4628      	mov	r0, r5
 800c53e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c542:	f000 b817 	b.w	800c574 <_write_r>

0800c546 <__sseek>:
 800c546:	b510      	push	{r4, lr}
 800c548:	460c      	mov	r4, r1
 800c54a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c54e:	f000 f855 	bl	800c5fc <_lseek_r>
 800c552:	1c43      	adds	r3, r0, #1
 800c554:	89a3      	ldrh	r3, [r4, #12]
 800c556:	bf15      	itete	ne
 800c558:	6560      	strne	r0, [r4, #84]	; 0x54
 800c55a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c55e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c562:	81a3      	strheq	r3, [r4, #12]
 800c564:	bf18      	it	ne
 800c566:	81a3      	strhne	r3, [r4, #12]
 800c568:	bd10      	pop	{r4, pc}

0800c56a <__sclose>:
 800c56a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c56e:	f000 b813 	b.w	800c598 <_close_r>
	...

0800c574 <_write_r>:
 800c574:	b538      	push	{r3, r4, r5, lr}
 800c576:	4d07      	ldr	r5, [pc, #28]	; (800c594 <_write_r+0x20>)
 800c578:	4604      	mov	r4, r0
 800c57a:	4608      	mov	r0, r1
 800c57c:	4611      	mov	r1, r2
 800c57e:	2200      	movs	r2, #0
 800c580:	602a      	str	r2, [r5, #0]
 800c582:	461a      	mov	r2, r3
 800c584:	f7f7 f855 	bl	8003632 <_write>
 800c588:	1c43      	adds	r3, r0, #1
 800c58a:	d102      	bne.n	800c592 <_write_r+0x1e>
 800c58c:	682b      	ldr	r3, [r5, #0]
 800c58e:	b103      	cbz	r3, 800c592 <_write_r+0x1e>
 800c590:	6023      	str	r3, [r4, #0]
 800c592:	bd38      	pop	{r3, r4, r5, pc}
 800c594:	20000d98 	.word	0x20000d98

0800c598 <_close_r>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	4d06      	ldr	r5, [pc, #24]	; (800c5b4 <_close_r+0x1c>)
 800c59c:	2300      	movs	r3, #0
 800c59e:	4604      	mov	r4, r0
 800c5a0:	4608      	mov	r0, r1
 800c5a2:	602b      	str	r3, [r5, #0]
 800c5a4:	f7f7 f861 	bl	800366a <_close>
 800c5a8:	1c43      	adds	r3, r0, #1
 800c5aa:	d102      	bne.n	800c5b2 <_close_r+0x1a>
 800c5ac:	682b      	ldr	r3, [r5, #0]
 800c5ae:	b103      	cbz	r3, 800c5b2 <_close_r+0x1a>
 800c5b0:	6023      	str	r3, [r4, #0]
 800c5b2:	bd38      	pop	{r3, r4, r5, pc}
 800c5b4:	20000d98 	.word	0x20000d98

0800c5b8 <_fstat_r>:
 800c5b8:	b538      	push	{r3, r4, r5, lr}
 800c5ba:	4d07      	ldr	r5, [pc, #28]	; (800c5d8 <_fstat_r+0x20>)
 800c5bc:	2300      	movs	r3, #0
 800c5be:	4604      	mov	r4, r0
 800c5c0:	4608      	mov	r0, r1
 800c5c2:	4611      	mov	r1, r2
 800c5c4:	602b      	str	r3, [r5, #0]
 800c5c6:	f7f7 f85c 	bl	8003682 <_fstat>
 800c5ca:	1c43      	adds	r3, r0, #1
 800c5cc:	d102      	bne.n	800c5d4 <_fstat_r+0x1c>
 800c5ce:	682b      	ldr	r3, [r5, #0]
 800c5d0:	b103      	cbz	r3, 800c5d4 <_fstat_r+0x1c>
 800c5d2:	6023      	str	r3, [r4, #0]
 800c5d4:	bd38      	pop	{r3, r4, r5, pc}
 800c5d6:	bf00      	nop
 800c5d8:	20000d98 	.word	0x20000d98

0800c5dc <_isatty_r>:
 800c5dc:	b538      	push	{r3, r4, r5, lr}
 800c5de:	4d06      	ldr	r5, [pc, #24]	; (800c5f8 <_isatty_r+0x1c>)
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	4608      	mov	r0, r1
 800c5e6:	602b      	str	r3, [r5, #0]
 800c5e8:	f7f7 f85b 	bl	80036a2 <_isatty>
 800c5ec:	1c43      	adds	r3, r0, #1
 800c5ee:	d102      	bne.n	800c5f6 <_isatty_r+0x1a>
 800c5f0:	682b      	ldr	r3, [r5, #0]
 800c5f2:	b103      	cbz	r3, 800c5f6 <_isatty_r+0x1a>
 800c5f4:	6023      	str	r3, [r4, #0]
 800c5f6:	bd38      	pop	{r3, r4, r5, pc}
 800c5f8:	20000d98 	.word	0x20000d98

0800c5fc <_lseek_r>:
 800c5fc:	b538      	push	{r3, r4, r5, lr}
 800c5fe:	4d07      	ldr	r5, [pc, #28]	; (800c61c <_lseek_r+0x20>)
 800c600:	4604      	mov	r4, r0
 800c602:	4608      	mov	r0, r1
 800c604:	4611      	mov	r1, r2
 800c606:	2200      	movs	r2, #0
 800c608:	602a      	str	r2, [r5, #0]
 800c60a:	461a      	mov	r2, r3
 800c60c:	f7f7 f854 	bl	80036b8 <_lseek>
 800c610:	1c43      	adds	r3, r0, #1
 800c612:	d102      	bne.n	800c61a <_lseek_r+0x1e>
 800c614:	682b      	ldr	r3, [r5, #0]
 800c616:	b103      	cbz	r3, 800c61a <_lseek_r+0x1e>
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	20000d98 	.word	0x20000d98

0800c620 <_read_r>:
 800c620:	b538      	push	{r3, r4, r5, lr}
 800c622:	4d07      	ldr	r5, [pc, #28]	; (800c640 <_read_r+0x20>)
 800c624:	4604      	mov	r4, r0
 800c626:	4608      	mov	r0, r1
 800c628:	4611      	mov	r1, r2
 800c62a:	2200      	movs	r2, #0
 800c62c:	602a      	str	r2, [r5, #0]
 800c62e:	461a      	mov	r2, r3
 800c630:	f7f6 ffe2 	bl	80035f8 <_read>
 800c634:	1c43      	adds	r3, r0, #1
 800c636:	d102      	bne.n	800c63e <_read_r+0x1e>
 800c638:	682b      	ldr	r3, [r5, #0]
 800c63a:	b103      	cbz	r3, 800c63e <_read_r+0x1e>
 800c63c:	6023      	str	r3, [r4, #0]
 800c63e:	bd38      	pop	{r3, r4, r5, pc}
 800c640:	20000d98 	.word	0x20000d98

0800c644 <_init>:
 800c644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c646:	bf00      	nop
 800c648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c64a:	bc08      	pop	{r3}
 800c64c:	469e      	mov	lr, r3
 800c64e:	4770      	bx	lr

0800c650 <_fini>:
 800c650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c652:	bf00      	nop
 800c654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c656:	bc08      	pop	{r3}
 800c658:	469e      	mov	lr, r3
 800c65a:	4770      	bx	lr
