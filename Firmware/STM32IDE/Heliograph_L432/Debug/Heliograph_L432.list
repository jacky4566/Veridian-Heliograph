
Heliograph_L432.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c534  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca4  0800c6c8  0800c6c8  0001c6c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d36c  0800d36c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d36c  0800d36c  0001d36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d374  0800d374  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d374  0800d374  0001d374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d378  0800d378  0001d378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800d37c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bbc  200001e0  0800d55c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d9c  0800d55c  00020d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c20  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a70  00000000  00000000  00037e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001628  00000000  00000000  0003b8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c0  00000000  00000000  0003cec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a25  00000000  00000000  0003e388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ec6  00000000  00000000  00064dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e340d  00000000  00000000  0007bc73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015f080  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cb0  00000000  00000000  0015f0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c6ac 	.word	0x0800c6ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c6ac 	.word	0x0800c6ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f50:	4b04      	ldr	r3, [pc, #16]	; (8000f64 <__NVIC_GetPriorityGrouping+0x18>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0a1b      	lsrs	r3, r3, #8
 8000f56:	f003 0307 	and.w	r3, r3, #7
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	db0b      	blt.n	8000f92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f003 021f 	and.w	r2, r3, #31
 8000f80:	4907      	ldr	r1, [pc, #28]	; (8000fa0 <__NVIC_EnableIRQ+0x38>)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	095b      	lsrs	r3, r3, #5
 8000f88:	2001      	movs	r0, #1
 8000f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f043 0201 	orr.w	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	601a      	str	r2, [r3, #0]
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <LL_LPUART_EnableClockInStopMode>:
  * @rmtoll CR3          UCESM         LL_LPUART_EnableClockInStopMode
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableClockInStopMode(USART_TypeDef *LPUARTx)
{
 800107e:	b480      	push	{r7}
 8001080:	b089      	sub	sp, #36	; 0x24
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_UCESM);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3308      	adds	r3, #8
 800108a:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	e853 3f00 	ldrex	r3, [r3]
 8001092:	60bb      	str	r3, [r7, #8]
   return(result);
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3308      	adds	r3, #8
 80010a0:	69fa      	ldr	r2, [r7, #28]
 80010a2:	61ba      	str	r2, [r7, #24]
 80010a4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80010a6:	6979      	ldr	r1, [r7, #20]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	e841 2300 	strex	r3, r2, [r1]
 80010ae:	613b      	str	r3, [r7, #16]
   return(result);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d1e7      	bne.n	8001086 <LL_LPUART_EnableClockInStopMode+0x8>
}
 80010b6:	bf00      	nop
 80010b8:	bf00      	nop
 80010ba:	3724      	adds	r7, #36	; 0x24
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_LPUART_DisableOverrunDetect>:
  * @rmtoll CR3          OVRDIS        LL_LPUART_DisableOverrunDetect
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableOverrunDetect(USART_TypeDef *LPUARTx)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR3, USART_CR3_OVRDIS);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	609a      	str	r2, [r3, #8]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_LPUART_SetWKUPType>:
  *         @arg @ref LL_LPUART_WAKEUP_ON_STARTBIT
  *         @arg @ref LL_LPUART_WAKEUP_ON_RXNE
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetWKUPType(USART_TypeDef *LPUARTx, uint32_t Type)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_WUS, Type);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	431a      	orrs	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	609a      	str	r2, [r3, #8]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <LL_LPUART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_LPUART_EnableIT_RXNE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_RXNE(USART_TypeDef *LPUARTx)
{
 800110a:	b480      	push	{r7}
 800110c:	b089      	sub	sp, #36	; 0x24
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	e853 3f00 	ldrex	r3, [r3]
 800111c:	60bb      	str	r3, [r7, #8]
   return(result);
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	f043 0320 	orr.w	r3, r3, #32
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	61ba      	str	r2, [r7, #24]
 800112c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800112e:	6979      	ldr	r1, [r7, #20]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	e841 2300 	strex	r3, r2, [r1]
 8001136:	613b      	str	r3, [r7, #16]
   return(result);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1e9      	bne.n	8001112 <LL_LPUART_EnableIT_RXNE+0x8>
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	3724      	adds	r7, #36	; 0x24
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4313      	orrs	r3, r2
 800115e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4013      	ands	r3, r2
 8001168:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800116a:	68fb      	ldr	r3, [r7, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40021000 	.word	0x40021000

0800117c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800117c:	b480      	push	{r7}
 800117e:	b085      	sub	sp, #20
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001184:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001186:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001188:	4907      	ldr	r1, [pc, #28]	; (80011a8 <LL_APB1_GRP2_EnableClock+0x2c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4313      	orrs	r3, r2
 800118e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001190:	4b05      	ldr	r3, [pc, #20]	; (80011a8 <LL_APB1_GRP2_EnableClock+0x2c>)
 8001192:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4013      	ands	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800119a:	68fb      	ldr	r3, [r7, #12]
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	40021000 	.word	0x40021000

080011ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b0:	f002 ff9c 	bl	80040ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b4:	f000 f810 	bl	80011d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b8:	f000 fa36 	bl	8001628 <MX_GPIO_Init>
  MX_DMA_Init();
 80011bc:	f000 fa0e 	bl	80015dc <MX_DMA_Init>
  MX_SPI1_Init();
 80011c0:	f000 f9ce 	bl	8001560 <MX_SPI1_Init>
  MX_ADC1_Init();
 80011c4:	f000 f860 	bl	8001288 <MX_ADC1_Init>
  MX_RTC_Init();
 80011c8:	f000 f962 	bl	8001490 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  myApp_init();
 80011cc:	f001 fc88 	bl	8002ae0 <myApp_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  myApp_loop();
 80011d0:	f001 fcb0 	bl	8002b34 <myApp_loop>
 80011d4:	e7fc      	b.n	80011d0 <main+0x24>
	...

080011d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b096      	sub	sp, #88	; 0x58
 80011dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	2244      	movs	r2, #68	; 0x44
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f008 fd4e 	bl	8009c88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ec:	463b      	mov	r3, r7
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80011fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011fe:	f005 f85f 	bl	80062c0 <HAL_PWREx_ControlVoltageScaling>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001208:	f000 faf2 	bl	80017f0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800120c:	f005 f806 	bl	800621c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <SystemClock_Config+0xac>)
 8001212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001216:	f023 0318 	bic.w	r3, r3, #24
 800121a:	4a1a      	ldr	r2, [pc, #104]	; (8001284 <SystemClock_Config+0xac>)
 800121c:	f043 0310 	orr.w	r3, r3, #16
 8001220:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001224:	2314      	movs	r3, #20
 8001226:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001228:	2301      	movs	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800122c:	2301      	movs	r3, #1
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001230:	2300      	movs	r3, #0
 8001232:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001238:	2300      	movs	r3, #0
 800123a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800123c:	f107 0314 	add.w	r3, r7, #20
 8001240:	4618      	mov	r0, r3
 8001242:	f005 f907 	bl	8006454 <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800124c:	f000 fad0 	bl	80017f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001254:	2300      	movs	r3, #0
 8001256:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	2102      	movs	r1, #2
 8001268:	4618      	mov	r0, r3
 800126a:	f005 fd07 	bl	8006c7c <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001274:	f000 fabc 	bl	80017f0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001278:	f006 f8e2 	bl	8007440 <HAL_RCCEx_EnableMSIPLLMode>
}
 800127c:	bf00      	nop
 800127e:	3758      	adds	r7, #88	; 0x58
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40021000 	.word	0x40021000

08001288 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	463b      	mov	r3, r7
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
 800129c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800129e:	4b38      	ldr	r3, [pc, #224]	; (8001380 <MX_ADC1_Init+0xf8>)
 80012a0:	4a38      	ldr	r2, [pc, #224]	; (8001384 <MX_ADC1_Init+0xfc>)
 80012a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV16;
 80012a4:	4b36      	ldr	r3, [pc, #216]	; (8001380 <MX_ADC1_Init+0xf8>)
 80012a6:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80012aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ac:	4b34      	ldr	r3, [pc, #208]	; (8001380 <MX_ADC1_Init+0xf8>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b2:	4b33      	ldr	r3, [pc, #204]	; (8001380 <MX_ADC1_Init+0xf8>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012b8:	4b31      	ldr	r3, [pc, #196]	; (8001380 <MX_ADC1_Init+0xf8>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80012be:	4b30      	ldr	r3, [pc, #192]	; (8001380 <MX_ADC1_Init+0xf8>)
 80012c0:	2208      	movs	r2, #8
 80012c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012c4:	4b2e      	ldr	r3, [pc, #184]	; (8001380 <MX_ADC1_Init+0xf8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <MX_ADC1_Init+0xf8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80012d0:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <MX_ADC1_Init+0xf8>)
 80012d2:	2203      	movs	r2, #3
 80012d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012d6:	4b2a      	ldr	r3, [pc, #168]	; (8001380 <MX_ADC1_Init+0xf8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012de:	4b28      	ldr	r3, [pc, #160]	; (8001380 <MX_ADC1_Init+0xf8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012e4:	4b26      	ldr	r3, [pc, #152]	; (8001380 <MX_ADC1_Init+0xf8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012ea:	4b25      	ldr	r3, [pc, #148]	; (8001380 <MX_ADC1_Init+0xf8>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012f2:	4b23      	ldr	r3, [pc, #140]	; (8001380 <MX_ADC1_Init+0xf8>)
 80012f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012f8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012fa:	4b21      	ldr	r3, [pc, #132]	; (8001380 <MX_ADC1_Init+0xf8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001302:	481f      	ldr	r0, [pc, #124]	; (8001380 <MX_ADC1_Init+0xf8>)
 8001304:	f003 f99c 	bl	8004640 <HAL_ADC_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800130e:	f000 fa6f 	bl	80017f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001312:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <MX_ADC1_Init+0x100>)
 8001314:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001316:	2306      	movs	r3, #6
 8001318:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800131a:	2307      	movs	r3, #7
 800131c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800131e:	237f      	movs	r3, #127	; 0x7f
 8001320:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001322:	2304      	movs	r3, #4
 8001324:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800132a:	463b      	mov	r3, r7
 800132c:	4619      	mov	r1, r3
 800132e:	4814      	ldr	r0, [pc, #80]	; (8001380 <MX_ADC1_Init+0xf8>)
 8001330:	f003 fbc8 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 800133a:	f000 fa59 	bl	80017f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <MX_ADC1_Init+0x104>)
 8001340:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001342:	230c      	movs	r3, #12
 8001344:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001346:	463b      	mov	r3, r7
 8001348:	4619      	mov	r1, r3
 800134a:	480d      	ldr	r0, [pc, #52]	; (8001380 <MX_ADC1_Init+0xf8>)
 800134c:	f003 fbba 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001356:	f000 fa4b 	bl	80017f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <MX_ADC1_Init+0x108>)
 800135c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800135e:	2312      	movs	r3, #18
 8001360:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	; (8001380 <MX_ADC1_Init+0xf8>)
 8001368:	f003 fbac 	bl	8004ac4 <HAL_ADC_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8001372:	f000 fa3d 	bl	80017f0 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */


  /* USER CODE END ADC1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200001fc 	.word	0x200001fc
 8001384:	50040000 	.word	0x50040000
 8001388:	19200040 	.word	0x19200040
 800138c:	c7520000 	.word	0xc7520000
 8001390:	80000001 	.word	0x80000001

08001394 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b0a2      	sub	sp, #136	; 0x88
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 800139a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]
 80013aa:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2254      	movs	r2, #84	; 0x54
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f008 fc5f 	bl	8009c88 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80013ca:	2320      	movs	r3, #32
 80013cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_LSE;
 80013ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	4618      	mov	r0, r3
 80013d8:	f005 fe3c 	bl	8007054 <HAL_RCCEx_PeriphCLKConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80013e2:	f000 fa05 	bl	80017f0 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f7ff fec8 	bl	800117c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80013ec:	2001      	movs	r0, #1
 80013ee:	f7ff fead 	bl	800114c <LL_AHB2_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  PA3   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80013f2:	230c      	movs	r3, #12
 80013f4:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013f6:	2302      	movs	r3, #2
 80013f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001402:	2300      	movs	r3, #0
 8001404:	66bb      	str	r3, [r7, #104]	; 0x68
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001406:	2308      	movs	r3, #8
 8001408:	66fb      	str	r3, [r7, #108]	; 0x6c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800140e:	4619      	mov	r1, r3
 8001410:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001414:	f007 fc89 	bl	8008d2a <LL_GPIO_Init>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(LPUART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001418:	f7ff fd98 	bl	8000f4c <__NVIC_GetPriorityGrouping>
 800141c:	4603      	mov	r3, r0
 800141e:	2200      	movs	r2, #0
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fde8 	bl	8000ff8 <NVIC_EncodePriority>
 8001428:	4603      	mov	r3, r0
 800142a:	4619      	mov	r1, r3
 800142c:	2046      	movs	r0, #70	; 0x46
 800142e:	f7ff fdb9 	bl	8000fa4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPUART1_IRQn);
 8001432:	2046      	movs	r0, #70	; 0x46
 8001434:	f7ff fd98 	bl	8000f68 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */
  LL_LPUART_DisableOverrunDetect(LPUART1);
 8001438:	4814      	ldr	r0, [pc, #80]	; (800148c <MX_LPUART1_UART_Init+0xf8>)
 800143a:	f7ff fe43 	bl	80010c4 <LL_LPUART_DisableOverrunDetect>
  LL_LPUART_EnableClockInStopMode(LPUART1);
 800143e:	4813      	ldr	r0, [pc, #76]	; (800148c <MX_LPUART1_UART_Init+0xf8>)
 8001440:	f7ff fe1d 	bl	800107e <LL_LPUART_EnableClockInStopMode>
  LL_LPUART_SetWKUPType(LPUART1, LL_LPUART_WAKEUP_ON_RXNE); //Set the wake-up event type : specify wake-up on RXNE flag
 8001444:	f44f 1140 	mov.w	r1, #3145728	; 0x300000
 8001448:	4810      	ldr	r0, [pc, #64]	; (800148c <MX_LPUART1_UART_Init+0xf8>)
 800144a:	f7ff fe4b 	bl	80010e4 <LL_LPUART_SetWKUPType>

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.BaudRate = 9600;
 800144e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001452:	673b      	str	r3, [r7, #112]	; 0x70
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 8001454:	2300      	movs	r3, #0
 8001456:	677b      	str	r3, [r7, #116]	; 0x74
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 8001458:	2300      	movs	r3, #0
 800145a:	67bb      	str	r3, [r7, #120]	; 0x78
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 800145c:	2300      	movs	r3, #0
 800145e:	67fb      	str	r3, [r7, #124]	; 0x7c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8001460:	230c      	movs	r3, #12
 8001462:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 800146c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001470:	4619      	mov	r1, r3
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <MX_LPUART1_UART_Init+0xf8>)
 8001474:	f007 fd76 	bl	8008f64 <LL_LPUART_Init>
  LL_LPUART_Enable(LPUART1);
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <MX_LPUART1_UART_Init+0xf8>)
 800147a:	f7ff fdf0 	bl	800105e <LL_LPUART_Enable>
  /* USER CODE BEGIN LPUART1_Init 2 */
  LL_LPUART_EnableIT_RXNE(LPUART1);
 800147e:	4803      	ldr	r0, [pc, #12]	; (800148c <MX_LPUART1_UART_Init+0xf8>)
 8001480:	f7ff fe43 	bl	800110a <LL_LPUART_EnableIT_RXNE>

  /* USER CODE END LPUART1_Init 2 */

}
 8001484:	bf00      	nop
 8001486:	3788      	adds	r7, #136	; 0x88
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40008000 	.word	0x40008000

08001490 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80014a4:	2300      	movs	r3, #0
 80014a6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <MX_RTC_Init+0xc8>)
 80014aa:	4a2c      	ldr	r2, [pc, #176]	; (800155c <MX_RTC_Init+0xcc>)
 80014ac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014ae:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <MX_RTC_Init+0xc8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014b4:	4b28      	ldr	r3, [pc, #160]	; (8001558 <MX_RTC_Init+0xc8>)
 80014b6:	227f      	movs	r2, #127	; 0x7f
 80014b8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014ba:	4b27      	ldr	r3, [pc, #156]	; (8001558 <MX_RTC_Init+0xc8>)
 80014bc:	22ff      	movs	r2, #255	; 0xff
 80014be:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <MX_RTC_Init+0xc8>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <MX_RTC_Init+0xc8>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <MX_RTC_Init+0xc8>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <MX_RTC_Init+0xc8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014d8:	481f      	ldr	r0, [pc, #124]	; (8001558 <MX_RTC_Init+0xc8>)
 80014da:	f006 f8b3 	bl	8007644 <HAL_RTC_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80014e4:	f000 f984 	bl	80017f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x4;
 80014e8:	2304      	movs	r3, #4
 80014ea:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x4;
 80014ec:	2304      	movs	r3, #4
 80014ee:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x57;
 80014f0:	2357      	movs	r3, #87	; 0x57
 80014f2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2201      	movs	r2, #1
 8001500:	4619      	mov	r1, r3
 8001502:	4815      	ldr	r0, [pc, #84]	; (8001558 <MX_RTC_Init+0xc8>)
 8001504:	f006 f919 	bl	800773a <HAL_RTC_SetTime>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800150e:	f000 f96f 	bl	80017f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001512:	2301      	movs	r3, #1
 8001514:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8001516:	2305      	movs	r3, #5
 8001518:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x10;
 800151a:	2310      	movs	r3, #16
 800151c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 800151e:	2323      	movs	r3, #35	; 0x23
 8001520:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	2201      	movs	r2, #1
 8001526:	4619      	mov	r1, r3
 8001528:	480b      	ldr	r0, [pc, #44]	; (8001558 <MX_RTC_Init+0xc8>)
 800152a:	f006 f9ff 	bl	800792c <HAL_RTC_SetDate>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8001534:	f000 f95c 	bl	80017f0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2047, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8001538:	2200      	movs	r2, #0
 800153a:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800153e:	4806      	ldr	r0, [pc, #24]	; (8001558 <MX_RTC_Init+0xc8>)
 8001540:	f006 fb9a 	bl	8007c78 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_RTC_Init+0xbe>
  {
    Error_Handler();
 800154a:	f000 f951 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200002a8 	.word	0x200002a8
 800155c:	40002800 	.word	0x40002800

08001560 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <MX_SPI1_Init+0x74>)
 8001566:	4a1c      	ldr	r2, [pc, #112]	; (80015d8 <MX_SPI1_Init+0x78>)
 8001568:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <MX_SPI1_Init+0x74>)
 800156c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001570:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <MX_SPI1_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <MX_SPI1_Init+0x74>)
 800157a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800157e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_SPI1_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <MX_SPI1_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_SPI1_Init+0x74>)
 800158e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001592:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_SPI1_Init+0x74>)
 8001596:	2218      	movs	r2, #24
 8001598:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_SPI1_Init+0x74>)
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_SPI1_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_SPI1_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_SPI1_Init+0x74>)
 80015ae:	2207      	movs	r2, #7
 80015b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_SPI1_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_SPI1_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_SPI1_Init+0x74>)
 80015c0:	f006 fc14 	bl	8007dec <HAL_SPI_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015ca:	f000 f911 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200002cc 	.word	0x200002cc
 80015d8:	40013000 	.word	0x40013000

080015dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <MX_DMA_Init+0x48>)
 80015e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e6:	4a0f      	ldr	r2, [pc, #60]	; (8001624 <MX_DMA_Init+0x48>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6493      	str	r3, [r2, #72]	; 0x48
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <MX_DMA_Init+0x48>)
 80015f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	200b      	movs	r0, #11
 8001600:	f004 f9dd 	bl	80059be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001604:	200b      	movs	r0, #11
 8001606:	f004 f9f6 	bl	80059f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	200d      	movs	r0, #13
 8001610:	f004 f9d5 	bl	80059be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001614:	200d      	movs	r0, #13
 8001616:	f004 f9ee 	bl	80059f6 <HAL_NVIC_EnableIRQ>

}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40021000 	.word	0x40021000

08001628 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
 800163c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800163e:	4b44      	ldr	r3, [pc, #272]	; (8001750 <MX_GPIO_Init+0x128>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	4a43      	ldr	r2, [pc, #268]	; (8001750 <MX_GPIO_Init+0x128>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164a:	4b41      	ldr	r3, [pc, #260]	; (8001750 <MX_GPIO_Init+0x128>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	f003 0304 	and.w	r3, r3, #4
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	4b3e      	ldr	r3, [pc, #248]	; (8001750 <MX_GPIO_Init+0x128>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	4a3d      	ldr	r2, [pc, #244]	; (8001750 <MX_GPIO_Init+0x128>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001662:	4b3b      	ldr	r3, [pc, #236]	; (8001750 <MX_GPIO_Init+0x128>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	4b38      	ldr	r3, [pc, #224]	; (8001750 <MX_GPIO_Init+0x128>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	4a37      	ldr	r2, [pc, #220]	; (8001750 <MX_GPIO_Init+0x128>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800167a:	4b35      	ldr	r3, [pc, #212]	; (8001750 <MX_GPIO_Init+0x128>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001686:	4b32      	ldr	r3, [pc, #200]	; (8001750 <MX_GPIO_Init+0x128>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	4a31      	ldr	r2, [pc, #196]	; (8001750 <MX_GPIO_Init+0x128>)
 800168c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001692:	4b2f      	ldr	r3, [pc, #188]	; (8001750 <MX_GPIO_Init+0x128>)
 8001694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GNSS_EXT_Pin|DISP_CS_Pin|DISP_EN_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a8:	f004 fda0 	bl	80061ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SolarEN_GPIO_Port, SolarEN_Pin, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b6:	f004 fd99 	bl	80061ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 80016ba:	f649 0301 	movw	r3, #38913	; 0x9801
 80016be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016c0:	2303      	movs	r3, #3
 80016c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d2:	f004 fc21 	bl	8005f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNSS_EXT_Pin DISP_CS_Pin DISP_EN_Pin */
  GPIO_InitStruct.Pin = GNSS_EXT_Pin|DISP_CS_Pin|DISP_EN_Pin;
 80016d6:	f44f 63c2 	mov.w	r3, #1552	; 0x610
 80016da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4619      	mov	r1, r3
 80016ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f2:	f004 fc11 	bl	8005f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5
                           PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80016f6:	23f3      	movs	r3, #243	; 0xf3
 80016f8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fa:	2303      	movs	r3, #3
 80016fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4812      	ldr	r0, [pc, #72]	; (8001754 <MX_GPIO_Init+0x12c>)
 800170a:	f004 fc05 	bl	8005f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : SolarEN_Pin */
  GPIO_InitStruct.Pin = SolarEN_Pin;
 800170e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001712:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001714:	2311      	movs	r3, #17
 8001716:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SolarEN_GPIO_Port, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f004 fbf5 	bl	8005f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800172e:	2308      	movs	r3, #8
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001732:	2303      	movs	r3, #3
 8001734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_GPIO_Init+0x130>)
 8001742:	f004 fbe9 	bl	8005f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001746:	bf00      	nop
 8001748:	3728      	adds	r7, #40	; 0x28
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000
 8001754:	48000400 	.word	0x48000400
 8001758:	48001c00 	.word	0x48001c00

0800175c <HAL_Delay>:

/* USER CODE BEGIN 4 */
void HAL_Delay(uint32_t Delay)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001764:	f002 fd2a 	bl	80041bc <HAL_GetTick>
 8001768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001774:	d007      	beq.n	8001786 <HAL_Delay+0x2a>
  {
    wait += (uint32_t)uwTickFreq;
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_Delay+0x44>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	4413      	add	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]

  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001782:	e000      	b.n	8001786 <HAL_Delay+0x2a>
  {
	  __WFI();
 8001784:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001786:	f002 fd19 	bl	80041bc <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	429a      	cmp	r2, r3
 8001794:	d8f6      	bhi.n	8001784 <HAL_Delay+0x28>
  }
}
 8001796:	bf00      	nop
 8001798:	bf00      	nop
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	2000000c 	.word	0x2000000c

080017a4 <USER_LPUART1_UART_Init>:

void USER_LPUART1_UART_Init(){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	MX_LPUART1_UART_Init();
 80017a8:	f7ff fdf4 	bl	8001394 <MX_LPUART1_UART_Init>
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <USER_LPUART1_UART_DeInit>:

void USER_LPUART1_UART_DeInit(){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
	LL_LPUART_DeInit(LPUART1);
 80017b6:	480d      	ldr	r0, [pc, #52]	; (80017ec <USER_LPUART1_UART_DeInit+0x3c>)
 80017b8:	f007 fbba 	bl	8008f30 <LL_LPUART_DeInit>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017ca:	230c      	movs	r3, #12
 80017cc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017ce:	2303      	movs	r3, #3
 80017d0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017de:	f004 fb9b 	bl	8005f18 <HAL_GPIO_Init>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40008000 	.word	0x40008000

080017f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80017f4:	b672      	cpsid	i
}
 80017f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <Error_Handler+0x8>

080017fa <LL_LPUART_DisableIT_WKUP>:
  * @rmtoll CR3          WUFIE         LL_LPUART_DisableIT_WKUP
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_WKUP(USART_TypeDef *LPUARTx)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b089      	sub	sp, #36	; 0x24
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(LPUARTx->CR3, USART_CR3_WUFIE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3308      	adds	r3, #8
 8001806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	e853 3f00 	ldrex	r3, [r3]
 800180e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001816:	61fb      	str	r3, [r7, #28]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3308      	adds	r3, #8
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	61ba      	str	r2, [r7, #24]
 8001820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001822:	6979      	ldr	r1, [r7, #20]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	e841 2300 	strex	r3, r2, [r1]
 800182a:	613b      	str	r3, [r7, #16]
   return(result);
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1e7      	bne.n	8001802 <LL_LPUART_DisableIT_WKUP+0x8>
}
 8001832:	bf00      	nop
 8001834:	bf00      	nop
 8001836:	3724      	adds	r7, #36	; 0x24
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <npf_min>:

#ifdef _MSC_VER
  #include <intrin.h>
#endif

static int npf_min(int x, int y) { return (x < y) ? x : y; }
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4293      	cmp	r3, r2
 8001850:	bfa8      	it	ge
 8001852:	4613      	movge	r3, r2
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <npf_max>:
static int npf_max(int x, int y) { return (x > y) ? x : y; }
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	683a      	ldr	r2, [r7, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4293      	cmp	r3, r2
 8001870:	bfb8      	it	lt
 8001872:	4613      	movlt	r3, r2
 8001874:	4618      	mov	r0, r3
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <npf_parse_format_spec>:

int npf_parse_format_spec(char const *format, npf_format_spec_t *out_spec) {
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  char const *cur = format;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	60fb      	str	r3, [r7, #12]

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
  out_spec->left_justified = 0;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	2200      	movs	r2, #0
 8001892:	721a      	strb	r2, [r3, #8]
  out_spec->leading_zero_pad = 0;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	2200      	movs	r2, #0
 8001898:	725a      	strb	r2, [r3, #9]
#endif
  out_spec->case_adjust = 'a'-'A'; // lowercase
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	2220      	movs	r2, #32
 800189e:	749a      	strb	r2, [r3, #18]
  out_spec->prepend = 0;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
  out_spec->alt_form = 0;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2200      	movs	r2, #0
 80018aa:	705a      	strb	r2, [r3, #1]

  while (*++cur) { // cur points at the leading '%' character
 80018ac:	e04c      	b.n	8001948 <npf_parse_format_spec+0xc8>
    switch (*cur) { // Optional flags
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	3b20      	subs	r3, #32
 80018b4:	2b10      	cmp	r3, #16
 80018b6:	d84f      	bhi.n	8001958 <npf_parse_format_spec+0xd8>
 80018b8:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <npf_parse_format_spec+0x40>)
 80018ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018be:	bf00      	nop
 80018c0:	08001931 	.word	0x08001931
 80018c4:	08001959 	.word	0x08001959
 80018c8:	08001959 	.word	0x08001959
 80018cc:	08001941 	.word	0x08001941
 80018d0:	08001959 	.word	0x08001959
 80018d4:	08001959 	.word	0x08001959
 80018d8:	08001959 	.word	0x08001959
 80018dc:	08001959 	.word	0x08001959
 80018e0:	08001959 	.word	0x08001959
 80018e4:	08001959 	.word	0x08001959
 80018e8:	08001959 	.word	0x08001959
 80018ec:	08001929 	.word	0x08001929
 80018f0:	08001959 	.word	0x08001959
 80018f4:	08001905 	.word	0x08001905
 80018f8:	08001959 	.word	0x08001959
 80018fc:	08001959 	.word	0x08001959
 8001900:	08001913 	.word	0x08001913
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
      case '-':
        out_spec->left_justified = '-';
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	222d      	movs	r2, #45	; 0x2d
 8001908:	721a      	strb	r2, [r3, #8]
        out_spec->leading_zero_pad = 0;
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2200      	movs	r2, #0
 800190e:	725a      	strb	r2, [r3, #9]
        continue;
 8001910:	e01a      	b.n	8001948 <npf_parse_format_spec+0xc8>
      case '0':
        out_spec->leading_zero_pad = !out_spec->left_justified;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	7a1b      	ldrb	r3, [r3, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	bf0c      	ite	eq
 800191a:	2301      	moveq	r3, #1
 800191c:	2300      	movne	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	461a      	mov	r2, r3
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	725a      	strb	r2, [r3, #9]
        continue;
 8001926:	e00f      	b.n	8001948 <npf_parse_format_spec+0xc8>
#endif
      case '+':
        out_spec->prepend = '+';
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	222b      	movs	r2, #43	; 0x2b
 800192c:	701a      	strb	r2, [r3, #0]
        continue;
 800192e:	e00b      	b.n	8001948 <npf_parse_format_spec+0xc8>
      case ' ':
        if (out_spec->prepend == 0) { out_spec->prepend = ' '; }
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d107      	bne.n	8001948 <npf_parse_format_spec+0xc8>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2220      	movs	r2, #32
 800193c:	701a      	strb	r2, [r3, #0]
        continue;
 800193e:	e003      	b.n	8001948 <npf_parse_format_spec+0xc8>
      case '#':
        out_spec->alt_form = '#';
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	2223      	movs	r2, #35	; 0x23
 8001944:	705a      	strb	r2, [r3, #1]
        continue;
 8001946:	bf00      	nop
  while (*++cur) { // cur points at the leading '%' character
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	3301      	adds	r3, #1
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1ab      	bne.n	80018ae <npf_parse_format_spec+0x2e>
 8001956:	e000      	b.n	800195a <npf_parse_format_spec+0xda>
      default: break;
    }
    break;
 8001958:	bf00      	nop
  }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
  out_spec->field_width_opt = NPF_FMT_SPEC_OPT_NONE;
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	2200      	movs	r2, #0
 800195e:	709a      	strb	r2, [r3, #2]
  if (*cur == '*') {
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b2a      	cmp	r3, #42	; 0x2a
 8001966:	d106      	bne.n	8001976 <npf_parse_format_spec+0xf6>
    out_spec->field_width_opt = NPF_FMT_SPEC_OPT_STAR;
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2202      	movs	r2, #2
 800196c:	709a      	strb	r2, [r3, #2]
    ++cur;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3301      	adds	r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	e01d      	b.n	80019b2 <npf_parse_format_spec+0x132>
  } else {
    out_spec->field_width = 0;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
    while ((*cur >= '0') && (*cur <= '9')) {
 800197c:	e011      	b.n	80019a2 <npf_parse_format_spec+0x122>
      out_spec->field_width_opt = NPF_FMT_SPEC_OPT_LITERAL;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2201      	movs	r2, #1
 8001982:	709a      	strb	r2, [r3, #2]
      out_spec->field_width = (out_spec->field_width * 10) + (*cur++ - '0');
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	4619      	mov	r1, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	60fa      	str	r2, [r7, #12]
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	3b30      	subs	r3, #48	; 0x30
 800199c:	18ca      	adds	r2, r1, r3
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	605a      	str	r2, [r3, #4]
    while ((*cur >= '0') && (*cur <= '9')) {
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b2f      	cmp	r3, #47	; 0x2f
 80019a8:	d903      	bls.n	80019b2 <npf_parse_format_spec+0x132>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b39      	cmp	r3, #57	; 0x39
 80019b0:	d9e5      	bls.n	800197e <npf_parse_format_spec+0xfe>
    }
  }
#endif

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
  out_spec->prec = 0;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2200      	movs	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
  out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	2200      	movs	r2, #0
 80019bc:	729a      	strb	r2, [r3, #10]
  if (*cur == '.') {
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b2e      	cmp	r3, #46	; 0x2e
 80019c4:	d133      	bne.n	8001a2e <npf_parse_format_spec+0x1ae>
    ++cur;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	3301      	adds	r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
    if (*cur == '*') {
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b2a      	cmp	r3, #42	; 0x2a
 80019d2:	d106      	bne.n	80019e2 <npf_parse_format_spec+0x162>
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_STAR;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2202      	movs	r2, #2
 80019d8:	729a      	strb	r2, [r3, #10]
      ++cur;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3301      	adds	r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	e025      	b.n	8001a2e <npf_parse_format_spec+0x1ae>
    } else {
      if (*cur == '-') {
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b2d      	cmp	r3, #45	; 0x2d
 80019e8:	d106      	bne.n	80019f8 <npf_parse_format_spec+0x178>
        ++cur;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	3301      	adds	r3, #1
 80019ee:	60fb      	str	r3, [r7, #12]
        out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	2200      	movs	r2, #0
 80019f4:	729a      	strb	r2, [r3, #10]
 80019f6:	e012      	b.n	8001a1e <npf_parse_format_spec+0x19e>
      } else {
        out_spec->prec_opt = NPF_FMT_SPEC_OPT_LITERAL;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2201      	movs	r2, #1
 80019fc:	729a      	strb	r2, [r3, #10]
      }
      while ((*cur >= '0') && (*cur <= '9')) {
 80019fe:	e00e      	b.n	8001a1e <npf_parse_format_spec+0x19e>
        out_spec->prec = (out_spec->prec * 10) + (*cur++ - '0');
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1c5a      	adds	r2, r3, #1
 8001a12:	60fa      	str	r2, [r7, #12]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	3b30      	subs	r3, #48	; 0x30
 8001a18:	18ca      	adds	r2, r1, r3
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	60da      	str	r2, [r3, #12]
      while ((*cur >= '0') && (*cur <= '9')) {
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	2b2f      	cmp	r3, #47	; 0x2f
 8001a24:	d903      	bls.n	8001a2e <npf_parse_format_spec+0x1ae>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b39      	cmp	r3, #57	; 0x39
 8001a2c:	d9e8      	bls.n	8001a00 <npf_parse_format_spec+0x180>
      }
    }
  }
#endif

  out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_NONE;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	2200      	movs	r2, #0
 8001a32:	741a      	strb	r2, [r3, #16]
  switch (*cur++) { // Length modifier
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1c5a      	adds	r2, r3, #1
 8001a38:	60fa      	str	r2, [r7, #12]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	2b6c      	cmp	r3, #108	; 0x6c
 8001a3e:	d013      	beq.n	8001a68 <npf_parse_format_spec+0x1e8>
 8001a40:	2b6c      	cmp	r3, #108	; 0x6c
 8001a42:	dc19      	bgt.n	8001a78 <npf_parse_format_spec+0x1f8>
 8001a44:	2b4c      	cmp	r3, #76	; 0x4c
 8001a46:	d013      	beq.n	8001a70 <npf_parse_format_spec+0x1f0>
 8001a48:	2b68      	cmp	r3, #104	; 0x68
 8001a4a:	d115      	bne.n	8001a78 <npf_parse_format_spec+0x1f8>
    case 'h':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_SHORT;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	741a      	strb	r2, [r3, #16]
      if (*cur == 'h') {
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b68      	cmp	r3, #104	; 0x68
 8001a58:	d112      	bne.n	8001a80 <npf_parse_format_spec+0x200>
        out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_CHAR;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	741a      	strb	r2, [r3, #16]
        ++cur;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3301      	adds	r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
      }
      break;
 8001a66:	e00b      	b.n	8001a80 <npf_parse_format_spec+0x200>
    case 'l':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LONG;
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	741a      	strb	r2, [r3, #16]
      if (*cur == 'l') {
        out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LARGE_LONG_LONG;
        ++cur;
      }
#endif
      break;
 8001a6e:	e008      	b.n	8001a82 <npf_parse_format_spec+0x202>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    case 'L':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LONG_DOUBLE;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	2202      	movs	r2, #2
 8001a74:	741a      	strb	r2, [r3, #16]
      break;
 8001a76:	e004      	b.n	8001a82 <npf_parse_format_spec+0x202>
      break;
    case 't':
      out_spec->length_modifier = NPF_FMT_SPEC_LEN_MOD_LARGE_PTRDIFFT;
      break;
#endif
    default: --cur; break;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	e000      	b.n	8001a82 <npf_parse_format_spec+0x202>
      break;
 8001a80:	bf00      	nop
  }

  switch (*cur++) { // Conversion specifier
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	60fa      	str	r2, [r7, #12]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	3b25      	subs	r3, #37	; 0x25
 8001a8c:	2b53      	cmp	r3, #83	; 0x53
 8001a8e:	f200 80e8 	bhi.w	8001c62 <npf_parse_format_spec+0x3e2>
 8001a92:	a201      	add	r2, pc, #4	; (adr r2, 8001a98 <npf_parse_format_spec+0x218>)
 8001a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a98:	08001be9 	.word	0x08001be9
 8001a9c:	08001c63 	.word	0x08001c63
 8001aa0:	08001c63 	.word	0x08001c63
 8001aa4:	08001c63 	.word	0x08001c63
 8001aa8:	08001c63 	.word	0x08001c63
 8001aac:	08001c63 	.word	0x08001c63
 8001ab0:	08001c63 	.word	0x08001c63
 8001ab4:	08001c63 	.word	0x08001c63
 8001ab8:	08001c63 	.word	0x08001c63
 8001abc:	08001c63 	.word	0x08001c63
 8001ac0:	08001c63 	.word	0x08001c63
 8001ac4:	08001c63 	.word	0x08001c63
 8001ac8:	08001c63 	.word	0x08001c63
 8001acc:	08001c63 	.word	0x08001c63
 8001ad0:	08001c63 	.word	0x08001c63
 8001ad4:	08001c63 	.word	0x08001c63
 8001ad8:	08001c63 	.word	0x08001c63
 8001adc:	08001c63 	.word	0x08001c63
 8001ae0:	08001c63 	.word	0x08001c63
 8001ae4:	08001c63 	.word	0x08001c63
 8001ae8:	08001c63 	.word	0x08001c63
 8001aec:	08001c63 	.word	0x08001c63
 8001af0:	08001c63 	.word	0x08001c63
 8001af4:	08001c63 	.word	0x08001c63
 8001af8:	08001c63 	.word	0x08001c63
 8001afc:	08001c63 	.word	0x08001c63
 8001b00:	08001c63 	.word	0x08001c63
 8001b04:	08001c63 	.word	0x08001c63
 8001b08:	08001c63 	.word	0x08001c63
 8001b0c:	08001c63 	.word	0x08001c63
 8001b10:	08001c63 	.word	0x08001c63
 8001b14:	08001c63 	.word	0x08001c63
 8001b18:	08001c63 	.word	0x08001c63
 8001b1c:	08001c39 	.word	0x08001c39
 8001b20:	08001c63 	.word	0x08001c63
 8001b24:	08001c63 	.word	0x08001c63
 8001b28:	08001c63 	.word	0x08001c63
 8001b2c:	08001c63 	.word	0x08001c63
 8001b30:	08001c63 	.word	0x08001c63
 8001b34:	08001c63 	.word	0x08001c63
 8001b38:	08001c63 	.word	0x08001c63
 8001b3c:	08001c63 	.word	0x08001c63
 8001b40:	08001c63 	.word	0x08001c63
 8001b44:	08001c63 	.word	0x08001c63
 8001b48:	08001c63 	.word	0x08001c63
 8001b4c:	08001c63 	.word	0x08001c63
 8001b50:	08001c63 	.word	0x08001c63
 8001b54:	08001c63 	.word	0x08001c63
 8001b58:	08001c63 	.word	0x08001c63
 8001b5c:	08001c63 	.word	0x08001c63
 8001b60:	08001c63 	.word	0x08001c63
 8001b64:	08001c2b 	.word	0x08001c2b
 8001b68:	08001c63 	.word	0x08001c63
 8001b6c:	08001c63 	.word	0x08001c63
 8001b70:	08001c63 	.word	0x08001c63
 8001b74:	08001c63 	.word	0x08001c63
 8001b78:	08001c63 	.word	0x08001c63
 8001b7c:	08001c63 	.word	0x08001c63
 8001b80:	08001c63 	.word	0x08001c63
 8001b84:	08001c63 	.word	0x08001c63
 8001b88:	08001c63 	.word	0x08001c63
 8001b8c:	08001c63 	.word	0x08001c63
 8001b90:	08001bf7 	.word	0x08001bf7
 8001b94:	08001c13 	.word	0x08001c13
 8001b98:	08001c63 	.word	0x08001c63
 8001b9c:	08001c3f 	.word	0x08001c3f
 8001ba0:	08001c63 	.word	0x08001c63
 8001ba4:	08001c63 	.word	0x08001c63
 8001ba8:	08001c13 	.word	0x08001c13
 8001bac:	08001c63 	.word	0x08001c63
 8001bb0:	08001c63 	.word	0x08001c63
 8001bb4:	08001c63 	.word	0x08001c63
 8001bb8:	08001c63 	.word	0x08001c63
 8001bbc:	08001c63 	.word	0x08001c63
 8001bc0:	08001c1b 	.word	0x08001c1b
 8001bc4:	08001c55 	.word	0x08001c55
 8001bc8:	08001c63 	.word	0x08001c63
 8001bcc:	08001c63 	.word	0x08001c63
 8001bd0:	08001c05 	.word	0x08001c05
 8001bd4:	08001c63 	.word	0x08001c63
 8001bd8:	08001c23 	.word	0x08001c23
 8001bdc:	08001c63 	.word	0x08001c63
 8001be0:	08001c63 	.word	0x08001c63
 8001be4:	08001c31 	.word	0x08001c31
    case '%':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_PERCENT;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	2200      	movs	r2, #0
 8001bec:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8001bf4:	e038      	b.n	8001c68 <npf_parse_format_spec+0x3e8>
    case 'c':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_CHAR;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8001c02:	e031      	b.n	8001c68 <npf_parse_format_spec+0x3e8>
    case 's':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_STRING;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	2202      	movs	r2, #2
 8001c08:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
      out_spec->leading_zero_pad = 0;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	725a      	strb	r2, [r3, #9]
#endif
      break;
 8001c10:	e02a      	b.n	8001c68 <npf_parse_format_spec+0x3e8>

    case 'i':
    case 'd':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_SIGNED_INT;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2203      	movs	r2, #3
 8001c16:	745a      	strb	r2, [r3, #17]
      break;
 8001c18:	e026      	b.n	8001c68 <npf_parse_format_spec+0x3e8>

    case 'o':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_OCTAL;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	745a      	strb	r2, [r3, #17]
      break;
 8001c20:	e022      	b.n	8001c68 <npf_parse_format_spec+0x3e8>
    case 'u':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_UNSIGNED_INT;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	2206      	movs	r2, #6
 8001c26:	745a      	strb	r2, [r3, #17]
      break;
 8001c28:	e01e      	b.n	8001c68 <npf_parse_format_spec+0x3e8>

    case 'X':
      out_spec->case_adjust = 0;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	749a      	strb	r2, [r3, #18]
    case 'x':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_HEX_INT;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	2205      	movs	r2, #5
 8001c34:	745a      	strb	r2, [r3, #17]
      break;
 8001c36:	e017      	b.n	8001c68 <npf_parse_format_spec+0x3e8>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    case 'F':
      out_spec->case_adjust = 0;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	749a      	strb	r2, [r3, #18]
    case 'f':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_FLOAT_DECIMAL;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	2208      	movs	r2, #8
 8001c42:	745a      	strb	r2, [r3, #17]
      if (out_spec->prec_opt == NPF_FMT_SPEC_OPT_NONE) { out_spec->prec = 6; }
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	7a9b      	ldrb	r3, [r3, #10]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10c      	bne.n	8001c66 <npf_parse_format_spec+0x3e6>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2206      	movs	r2, #6
 8001c50:	60da      	str	r2, [r3, #12]
      break;
 8001c52:	e008      	b.n	8001c66 <npf_parse_format_spec+0x3e6>
#endif
      break;
#endif

    case 'p':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_POINTER;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	2207      	movs	r2, #7
 8001c58:	745a      	strb	r2, [r3, #17]
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
      out_spec->prec_opt = NPF_FMT_SPEC_OPT_NONE;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	729a      	strb	r2, [r3, #10]
#endif
      break;
 8001c60:	e002      	b.n	8001c68 <npf_parse_format_spec+0x3e8>
    case 'b':
      out_spec->conv_spec = NPF_FMT_SPEC_CONV_BINARY;
      break;
#endif

    default: return 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e003      	b.n	8001c6e <npf_parse_format_spec+0x3ee>
      break;
 8001c66:	bf00      	nop
  }

  return (int)(cur - format);
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	1ad3      	subs	r3, r2, r3
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3714      	adds	r7, #20
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop

08001c7c <npf_itoa_rev>:

int npf_itoa_rev(char *buf, npf_int_t i) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  int n = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  int const sign = (i >= 0) ? 1 : -1;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	db01      	blt.n	8001c94 <npf_itoa_rev+0x18>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e001      	b.n	8001c98 <npf_itoa_rev+0x1c>
 8001c94:	f04f 33ff 	mov.w	r3, #4294967295
 8001c98:	60bb      	str	r3, [r7, #8]
  do { *buf++ = (char)('0' + (sign * (i % 10))); i /= 10; ++n; } while (i);
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	b2d8      	uxtb	r0, r3
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <npf_itoa_rev+0x78>)
 8001ca2:	fb83 1302 	smull	r1, r3, r3, r2
 8001ca6:	1099      	asrs	r1, r3, #2
 8001ca8:	17d3      	asrs	r3, r2, #31
 8001caa:	1ac9      	subs	r1, r1, r3
 8001cac:	460b      	mov	r3, r1
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	1ad1      	subs	r1, r2, r3
 8001cb6:	b2cb      	uxtb	r3, r1
 8001cb8:	fb10 f303 	smulbb	r3, r0, r3
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	1c59      	adds	r1, r3, #1
 8001cc2:	6079      	str	r1, [r7, #4]
 8001cc4:	3230      	adds	r2, #48	; 0x30
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	4a09      	ldr	r2, [pc, #36]	; (8001cf4 <npf_itoa_rev+0x78>)
 8001cce:	fb82 1203 	smull	r1, r2, r2, r3
 8001cd2:	1092      	asrs	r2, r2, #2
 8001cd4:	17db      	asrs	r3, r3, #31
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1d9      	bne.n	8001c9a <npf_itoa_rev+0x1e>
  return n;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	66666667 	.word	0x66666667

08001cf8 <npf_utoa_rev>:

int npf_utoa_rev(char *buf, npf_uint_t i, unsigned base, unsigned case_adj) {
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
  int n = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
  do {
    unsigned const d = (unsigned)(i % base);
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	fb01 f202 	mul.w	r2, r1, r2
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
    *buf++ = (char)((d < 10) ? ('0' + d) : ('A' + case_adj + (d - 10)));
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b09      	cmp	r3, #9
 8001d20:	d804      	bhi.n	8001d2c <npf_utoa_rev+0x34>
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	3330      	adds	r3, #48	; 0x30
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	e007      	b.n	8001d3c <npf_utoa_rev+0x44>
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	4413      	add	r3, r2
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	3337      	adds	r3, #55	; 0x37
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1c59      	adds	r1, r3, #1
 8001d40:	60f9      	str	r1, [r7, #12]
 8001d42:	701a      	strb	r2, [r3, #0]
    i /= base;
 8001d44:	68ba      	ldr	r2, [r7, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4c:	60bb      	str	r3, [r7, #8]
    ++n;
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3301      	adds	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
  } while (i);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1d7      	bne.n	8001d0a <npf_utoa_rev+0x12>
  return n;
 8001d5a:	697b      	ldr	r3, [r7, #20]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	371c      	adds	r7, #28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <npf_fsplit_abs>:
  NPF_FRACTION_BIN_DIGITS = 64,
  NPF_MAX_FRACTION_DEC_DIGITS = 8
};

int npf_fsplit_abs(float f, uint64_t *out_int_part, uint64_t *out_frac_part,
                   int *out_frac_base10_neg_exp) {
 8001d68:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001d6c:	b0af      	sub	sp, #188	; 0xbc
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
 8001d74:	6738      	str	r0, [r7, #112]	; 0x70
 8001d76:	66f9      	str	r1, [r7, #108]	; 0x6c
 8001d78:	66ba      	str	r2, [r7, #104]	; 0x68
     http://0x80.pl/notesen/2015-12-29-float-to-string.html
     grisu2 (https://bit.ly/2JgMggX) and ryu (https://bit.ly/2RLXSg0)
     are fast + precise + round, but require large lookup tables. */

  uint32_t f_bits; { // union-cast is UB, let compiler optimize byte-copy loop.
    char const *src = (char const *)&f;
 8001d7a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    char *dst = (char *)&f_bits;
 8001d82:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for (unsigned i = 0; i < sizeof(f_bits); ++i) { dst[i] = src[i]; }
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001d90:	e010      	b.n	8001db4 <npf_fsplit_abs+0x4c>
 8001d92:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001d96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001d9a:	18d1      	adds	r1, r2, r3
 8001d9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001da0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001da4:	441a      	add	r2, r3
 8001da6:	780b      	ldrb	r3, [r1, #0]
 8001da8:	7013      	strb	r3, [r2, #0]
 8001daa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001dae:	3301      	adds	r3, #1
 8001db0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001db4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d9ea      	bls.n	8001d92 <npf_fsplit_abs+0x2a>
  }

  int const exponent =
    ((int)((f_bits >> NPF_MANTISSA_BITS) & ((1u << NPF_EXPONENT_BITS) - 1u)) -
 8001dbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dbe:	0ddb      	lsrs	r3, r3, #23
 8001dc0:	b2db      	uxtb	r3, r3
  int const exponent =
 8001dc2:	3b96      	subs	r3, #150	; 0x96
 8001dc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      NPF_EXPONENT_BIAS) - NPF_MANTISSA_BITS;

  if (exponent >= (64 - NPF_MANTISSA_BITS)) { return 0; } // value is out of range
 8001dc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dcc:	2b28      	cmp	r3, #40	; 0x28
 8001dce:	dd01      	ble.n	8001dd4 <npf_fsplit_abs+0x6c>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e15b      	b.n	800208c <npf_fsplit_abs+0x324>

  uint32_t const implicit_one = 1u << NPF_MANTISSA_BITS;
 8001dd4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001dd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t const mantissa = f_bits & (implicit_one - 1);
 8001ddc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001de0:	1e5a      	subs	r2, r3, #1
 8001de2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001de4:	4013      	ands	r3, r2
 8001de6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t const mantissa_norm = mantissa | implicit_one;
 8001dea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001dee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  if (exponent > 0) {
 8001df8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	dd18      	ble.n	8001e32 <npf_fsplit_abs+0xca>
    *out_int_part = (uint64_t)mantissa_norm << exponent;
 8001e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e04:	2200      	movs	r2, #0
 8001e06:	469a      	mov	sl, r3
 8001e08:	4693      	mov	fp, r2
 8001e0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001e0e:	f1a1 0320 	sub.w	r3, r1, #32
 8001e12:	f1c1 0220 	rsb	r2, r1, #32
 8001e16:	fa0b f501 	lsl.w	r5, fp, r1
 8001e1a:	fa0a f303 	lsl.w	r3, sl, r3
 8001e1e:	431d      	orrs	r5, r3
 8001e20:	fa2a f202 	lsr.w	r2, sl, r2
 8001e24:	4315      	orrs	r5, r2
 8001e26:	fa0a f401 	lsl.w	r4, sl, r1
 8001e2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e2c:	e9c3 4500 	strd	r4, r5, [r3]
 8001e30:	e029      	b.n	8001e86 <npf_fsplit_abs+0x11e>
  } else if (exponent < 0) {
 8001e32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	da1b      	bge.n	8001e72 <npf_fsplit_abs+0x10a>
    if (-exponent > NPF_MANTISSA_BITS) {
 8001e3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e3e:	f113 0f17 	cmn.w	r3, #23
 8001e42:	da07      	bge.n	8001e54 <npf_fsplit_abs+0xec>
      *out_int_part = 0;
 8001e44:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	e9c1 2300 	strd	r2, r3, [r1]
 8001e52:	e018      	b.n	8001e86 <npf_fsplit_abs+0x11e>
    } else {
      *out_int_part = mantissa_norm >> -exponent;
 8001e54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e58:	425a      	negs	r2, r3
 8001e5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e5e:	40d3      	lsrs	r3, r2
 8001e60:	2200      	movs	r2, #0
 8001e62:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e64:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e68:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8001e6c:	e9c3 1200 	strd	r1, r2, [r3]
 8001e70:	e009      	b.n	8001e86 <npf_fsplit_abs+0x11e>
    }
  } else {
    *out_int_part = mantissa_norm;
 8001e72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e76:	2200      	movs	r2, #0
 8001e78:	643b      	str	r3, [r7, #64]	; 0x40
 8001e7a:	647a      	str	r2, [r7, #68]	; 0x44
 8001e7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e7e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8001e82:	e9c3 1200 	strd	r1, r2, [r3]
  }

  uint64_t frac; {
    int const shift = NPF_FRACTION_BIN_DIGITS + exponent - 4;
 8001e86:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001e8a:	333c      	adds	r3, #60	; 0x3c
 8001e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if ((shift >= (NPF_FRACTION_BIN_DIGITS - 4)) || (shift < 0)) {
 8001e90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e94:	2b3b      	cmp	r3, #59	; 0x3b
 8001e96:	dc03      	bgt.n	8001ea0 <npf_fsplit_abs+0x138>
 8001e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	da06      	bge.n	8001eae <npf_fsplit_abs+0x146>
      frac = 0;
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 8001eac:	e022      	b.n	8001ef4 <npf_fsplit_abs+0x18c>
    } else {
      frac = ((uint64_t)mantissa_norm) << shift;
 8001eae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001eb6:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001eb8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001ebc:	f1a1 0320 	sub.w	r3, r1, #32
 8001ec0:	f1c1 0220 	rsb	r2, r1, #32
 8001ec4:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001ec8:	4628      	mov	r0, r5
 8001eca:	4088      	lsls	r0, r1
 8001ecc:	6678      	str	r0, [r7, #100]	; 0x64
 8001ece:	4620      	mov	r0, r4
 8001ed0:	fa00 f303 	lsl.w	r3, r0, r3
 8001ed4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001ed6:	4318      	orrs	r0, r3
 8001ed8:	6678      	str	r0, [r7, #100]	; 0x64
 8001eda:	4623      	mov	r3, r4
 8001edc:	fa23 f202 	lsr.w	r2, r3, r2
 8001ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	667b      	str	r3, [r7, #100]	; 0x64
 8001ee6:	4623      	mov	r3, r4
 8001ee8:	408b      	lsls	r3, r1
 8001eea:	663b      	str	r3, [r7, #96]	; 0x60
 8001eec:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001ef0:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    }
    // multiply off the leading one's digit
    frac &= 0x0fffffffffffffffllu;
 8001ef4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001ef8:	62ba      	str	r2, [r7, #40]	; 0x28
 8001efa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f00:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001f04:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    frac *= 10;
 8001f08:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8001f0c:	4622      	mov	r2, r4
 8001f0e:	462b      	mov	r3, r5
 8001f10:	f04f 0000 	mov.w	r0, #0
 8001f14:	f04f 0100 	mov.w	r1, #0
 8001f18:	0099      	lsls	r1, r3, #2
 8001f1a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f1e:	0090      	lsls	r0, r2, #2
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	eb12 0804 	adds.w	r8, r2, r4
 8001f28:	eb43 0905 	adc.w	r9, r3, r5
 8001f2c:	eb18 0308 	adds.w	r3, r8, r8
 8001f30:	623b      	str	r3, [r7, #32]
 8001f32:	eb49 0309 	adc.w	r3, r9, r9
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
 8001f38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f3c:	e9c7 892a 	strd	r8, r9, [r7, #168]	; 0xa8
  }

  { // Count the number of 0s at the beginning of the fractional part.
    int frac_base10_neg_exp = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    while (frac && ((frac >> (NPF_FRACTION_BIN_DIGITS - 4))) == 0) {
 8001f46:	e02f      	b.n	8001fa8 <npf_fsplit_abs+0x240>
      ++frac_base10_neg_exp;
 8001f48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
      frac &= 0x0fffffffffffffffllu;
 8001f52:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001f56:	61ba      	str	r2, [r7, #24]
 8001f58:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001f5c:	61fb      	str	r3, [r7, #28]
 8001f5e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001f62:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
      frac *= 10;
 8001f66:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 8001f6a:	4622      	mov	r2, r4
 8001f6c:	462b      	mov	r3, r5
 8001f6e:	f04f 0000 	mov.w	r0, #0
 8001f72:	f04f 0100 	mov.w	r1, #0
 8001f76:	0099      	lsls	r1, r3, #2
 8001f78:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001f7c:	0090      	lsls	r0, r2, #2
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	1911      	adds	r1, r2, r4
 8001f84:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f86:	416b      	adcs	r3, r5
 8001f88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f8a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8001f8e:	460b      	mov	r3, r1
 8001f90:	18db      	adds	r3, r3, r3
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	4613      	mov	r3, r2
 8001f96:	eb42 0303 	adc.w	r3, r2, r3
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001fa0:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
 8001fa4:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    while (frac && ((frac >> (NPF_FRACTION_BIN_DIGITS - 4))) == 0) {
 8001fa8:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001fac:	4313      	orrs	r3, r2
 8001fae:	d00a      	beq.n	8001fc6 <npf_fsplit_abs+0x25e>
 8001fb0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001fb4:	f04f 0000 	mov.w	r0, #0
 8001fb8:	f04f 0100 	mov.w	r1, #0
 8001fbc:	0f18      	lsrs	r0, r3, #28
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	ea50 0301 	orrs.w	r3, r0, r1
 8001fc4:	d0c0      	beq.n	8001f48 <npf_fsplit_abs+0x1e0>
    }
    *out_frac_base10_neg_exp = frac_base10_neg_exp;
 8001fc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fc8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001fcc:	601a      	str	r2, [r3, #0]
  }

  { // Convert the fractional part to base 10.
    unsigned frac_part = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    for (int i = 0; frac && (i < NPF_MAX_FRACTION_DEC_DIGITS); ++i) {
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001fda:	e044      	b.n	8002066 <npf_fsplit_abs+0x2fe>
      frac_part *= 10;
 8001fdc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      frac_part += (unsigned)(frac >> (NPF_FRACTION_BIN_DIGITS - 4));
 8001fec:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	0f0a      	lsrs	r2, r1, #28
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002000:	4413      	add	r3, r2
 8002002:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      frac &= 0x0fffffffffffffffllu;
 8002006:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800200a:	60ba      	str	r2, [r7, #8]
 800200c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002016:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
      frac *= 10;
 800201a:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800201e:	4622      	mov	r2, r4
 8002020:	462b      	mov	r3, r5
 8002022:	f04f 0000 	mov.w	r0, #0
 8002026:	f04f 0100 	mov.w	r1, #0
 800202a:	0099      	lsls	r1, r3, #2
 800202c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002030:	0090      	lsls	r0, r2, #2
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	1911      	adds	r1, r2, r4
 8002038:	6539      	str	r1, [r7, #80]	; 0x50
 800203a:	416b      	adcs	r3, r5
 800203c:	657b      	str	r3, [r7, #84]	; 0x54
 800203e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8002042:	460b      	mov	r3, r1
 8002044:	18db      	adds	r3, r3, r3
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	eb42 0303 	adc.w	r3, r2, r3
 800204e:	607b      	str	r3, [r7, #4]
 8002050:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002054:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
 8002058:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
    for (int i = 0; frac && (i < NPF_MAX_FRACTION_DEC_DIGITS); ++i) {
 800205c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002060:	3301      	adds	r3, #1
 8002062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002066:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800206a:	4313      	orrs	r3, r2
 800206c:	d003      	beq.n	8002076 <npf_fsplit_abs+0x30e>
 800206e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002072:	2b07      	cmp	r3, #7
 8002074:	ddb2      	ble.n	8001fdc <npf_fsplit_abs+0x274>
    }
    *out_frac_part = frac_part;
 8002076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800207a:	2200      	movs	r2, #0
 800207c:	633b      	str	r3, [r7, #48]	; 0x30
 800207e:	637a      	str	r2, [r7, #52]	; 0x34
 8002080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002082:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002086:	e9c3 1200 	strd	r1, r2, [r3]
  }
  return 1;
 800208a:	2301      	movs	r3, #1
}
 800208c:	4618      	mov	r0, r3
 800208e:	37bc      	adds	r7, #188	; 0xbc
 8002090:	46bd      	mov	sp, r7
 8002092:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002096:	4770      	bx	lr

08002098 <npf_ftoa_rev>:

int npf_ftoa_rev(char *buf, float f, char case_adj, int *out_frac_chars) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b092      	sub	sp, #72	; 0x48
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80020a4:	460b      	mov	r3, r1
 80020a6:	603a      	str	r2, [r7, #0]
 80020a8:	71fb      	strb	r3, [r7, #7]
  uint32_t f_bits; { // union-cast is UB, let compiler optimize byte-copy loop.
    char const *src = (char const *)&f;
 80020aa:	f107 0308 	add.w	r3, r7, #8
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
    char *dst = (char *)&f_bits;
 80020b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (unsigned i = 0; i < sizeof(f_bits); ++i) { dst[i] = src[i]; }
 80020b6:	2300      	movs	r3, #0
 80020b8:	647b      	str	r3, [r7, #68]	; 0x44
 80020ba:	e00a      	b.n	80020d2 <npf_ftoa_rev+0x3a>
 80020bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c0:	441a      	add	r2, r3
 80020c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80020c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c6:	440b      	add	r3, r1
 80020c8:	7812      	ldrb	r2, [r2, #0]
 80020ca:	701a      	strb	r2, [r3, #0]
 80020cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ce:	3301      	adds	r3, #1
 80020d0:	647b      	str	r3, [r7, #68]	; 0x44
 80020d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d9f1      	bls.n	80020bc <npf_ftoa_rev+0x24>
  }

  if ((uint8_t)(f_bits >> 23) == 0xFF) {
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020da:	0ddb      	lsrs	r3, r3, #23
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2bff      	cmp	r3, #255	; 0xff
 80020e0:	d130      	bne.n	8002144 <npf_ftoa_rev+0xac>
    if (f_bits & 0x7fffff) {
 80020e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d014      	beq.n	8002116 <npf_ftoa_rev+0x7e>
      for (int i = 0; i < 3; ++i) { *buf++ = (char)("NAN"[i] + case_adj); }
 80020ec:	2300      	movs	r3, #0
 80020ee:	643b      	str	r3, [r7, #64]	; 0x40
 80020f0:	e00d      	b.n	800210e <npf_ftoa_rev+0x76>
 80020f2:	4a56      	ldr	r2, [pc, #344]	; (800224c <npf_ftoa_rev+0x1b4>)
 80020f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020f6:	4413      	add	r3, r2
 80020f8:	7819      	ldrb	r1, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1c5a      	adds	r2, r3, #1
 80020fe:	60fa      	str	r2, [r7, #12]
 8002100:	79fa      	ldrb	r2, [r7, #7]
 8002102:	440a      	add	r2, r1
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800210a:	3301      	adds	r3, #1
 800210c:	643b      	str	r3, [r7, #64]	; 0x40
 800210e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002110:	2b02      	cmp	r3, #2
 8002112:	ddee      	ble.n	80020f2 <npf_ftoa_rev+0x5a>
 8002114:	e013      	b.n	800213e <npf_ftoa_rev+0xa6>
    } else {
      for (int i = 0; i < 3; ++i) { *buf++ = (char)("FNI"[i] + case_adj); }
 8002116:	2300      	movs	r3, #0
 8002118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800211a:	e00d      	b.n	8002138 <npf_ftoa_rev+0xa0>
 800211c:	4a4c      	ldr	r2, [pc, #304]	; (8002250 <npf_ftoa_rev+0x1b8>)
 800211e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002120:	4413      	add	r3, r2
 8002122:	7819      	ldrb	r1, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	60fa      	str	r2, [r7, #12]
 800212a:	79fa      	ldrb	r2, [r7, #7]
 800212c:	440a      	add	r2, r1
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002134:	3301      	adds	r3, #1
 8002136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800213a:	2b02      	cmp	r3, #2
 800213c:	ddee      	ble.n	800211c <npf_ftoa_rev+0x84>
    }
    return -3;
 800213e:	f06f 0302 	mvn.w	r3, #2
 8002142:	e07f      	b.n	8002244 <npf_ftoa_rev+0x1ac>
  }

  uint64_t int_part, frac_part;
  int frac_base10_neg_exp;
  if (npf_fsplit_abs(f, &int_part, &frac_part, &frac_base10_neg_exp) == 0) {
 8002144:	edd7 7a02 	vldr	s15, [r7, #8]
 8002148:	f107 0214 	add.w	r2, r7, #20
 800214c:	f107 0118 	add.w	r1, r7, #24
 8002150:	f107 0320 	add.w	r3, r7, #32
 8002154:	4618      	mov	r0, r3
 8002156:	eeb0 0a67 	vmov.f32	s0, s15
 800215a:	f7ff fe05 	bl	8001d68 <npf_fsplit_abs>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d116      	bne.n	8002192 <npf_ftoa_rev+0xfa>
    for (int i = 0; i < 3; ++i) { *buf++ = (char)("ROO"[i] + case_adj); }
 8002164:	2300      	movs	r3, #0
 8002166:	63bb      	str	r3, [r7, #56]	; 0x38
 8002168:	e00d      	b.n	8002186 <npf_ftoa_rev+0xee>
 800216a:	4a3a      	ldr	r2, [pc, #232]	; (8002254 <npf_ftoa_rev+0x1bc>)
 800216c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800216e:	4413      	add	r3, r2
 8002170:	7819      	ldrb	r1, [r3, #0]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	60fa      	str	r2, [r7, #12]
 8002178:	79fa      	ldrb	r2, [r7, #7]
 800217a:	440a      	add	r2, r1
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	701a      	strb	r2, [r3, #0]
 8002180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002182:	3301      	adds	r3, #1
 8002184:	63bb      	str	r3, [r7, #56]	; 0x38
 8002186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002188:	2b02      	cmp	r3, #2
 800218a:	ddee      	ble.n	800216a <npf_ftoa_rev+0xd2>
    return -3;
 800218c:	f06f 0302 	mvn.w	r3, #2
 8002190:	e058      	b.n	8002244 <npf_ftoa_rev+0x1ac>
  }

  char *dst = buf;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	637b      	str	r3, [r7, #52]	; 0x34

  while (frac_part) { // write the fractional digits
 8002196:	e01a      	b.n	80021ce <npf_ftoa_rev+0x136>
    *dst++ = (char)('0' + (frac_part % 10));
 8002198:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800219c:	f04f 020a 	mov.w	r2, #10
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	f7fe fd50 	bl	8000c48 <__aeabi_uldivmod>
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021ac:	1c59      	adds	r1, r3, #1
 80021ae:	6379      	str	r1, [r7, #52]	; 0x34
 80021b0:	3230      	adds	r2, #48	; 0x30
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]
    frac_part /= 10;
 80021b6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021ba:	f04f 020a 	mov.w	r2, #10
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	f7fe fd41 	bl	8000c48 <__aeabi_uldivmod>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
  while (frac_part) { // write the fractional digits
 80021ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	d1e0      	bne.n	8002198 <npf_ftoa_rev+0x100>
  }

  // write the 0 digits between the . and the first fractional digit
  while (frac_base10_neg_exp-- > 0) { *dst++ = '0'; }
 80021d6:	e004      	b.n	80021e2 <npf_ftoa_rev+0x14a>
 80021d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	637a      	str	r2, [r7, #52]	; 0x34
 80021de:	2230      	movs	r2, #48	; 0x30
 80021e0:	701a      	strb	r2, [r3, #0]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	1e5a      	subs	r2, r3, #1
 80021e6:	617a      	str	r2, [r7, #20]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	dcf5      	bgt.n	80021d8 <npf_ftoa_rev+0x140>
  *out_frac_chars = (int)(dst - buf);
 80021ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1ad2      	subs	r2, r2, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	601a      	str	r2, [r3, #0]
  *dst++ = '.';
 80021f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	637a      	str	r2, [r7, #52]	; 0x34
 80021fc:	222e      	movs	r2, #46	; 0x2e
 80021fe:	701a      	strb	r2, [r3, #0]

  // write the integer digits
  do { *dst++ = (char)('0' + (int_part % 10)); int_part /= 10; } while (int_part);
 8002200:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002204:	f04f 020a 	mov.w	r2, #10
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	f7fe fd1c 	bl	8000c48 <__aeabi_uldivmod>
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002214:	1c59      	adds	r1, r3, #1
 8002216:	6379      	str	r1, [r7, #52]	; 0x34
 8002218:	3230      	adds	r2, #48	; 0x30
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002222:	f04f 020a 	mov.w	r2, #10
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	f7fe fd0d 	bl	8000c48 <__aeabi_uldivmod>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8002236:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800223a:	4313      	orrs	r3, r2
 800223c:	d1e0      	bne.n	8002200 <npf_ftoa_rev+0x168>
  return (int)(dst - buf);
 800223e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
}
 8002244:	4618      	mov	r0, r3
 8002246:	3748      	adds	r7, #72	; 0x48
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	0800c6c8 	.word	0x0800c6c8
 8002250:	0800c6cc 	.word	0x0800c6cc
 8002254:	0800c6d0 	.word	0x0800c6d0

08002258 <npf_bufputc>:
  #undef NPF_CLZ
#endif
}
#endif

void npf_bufputc(int c, void *ctx) {
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  npf_bufputc_ctx_t *bpc = (npf_bufputc_ctx_t *)ctx;
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  if (bpc->cur < bpc->len) { bpc->dst[bpc->cur++] = (char)c; }
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	429a      	cmp	r2, r3
 8002270:	d20a      	bcs.n	8002288 <npf_bufputc+0x30>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	1c58      	adds	r0, r3, #1
 800227c:	68f9      	ldr	r1, [r7, #12]
 800227e:	6088      	str	r0, [r1, #8]
 8002280:	4413      	add	r3, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	701a      	strb	r2, [r3, #0]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <npf_bufputc_nop>:

void npf_bufputc_nop(int c, void *ctx) { (void)c; (void)ctx; }
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <npf_putc_cnt>:
  npf_putc pc;
  void *ctx;
  int n;
} npf_cnt_putc_ctx_t;

static void npf_putc_cnt(int c, void *ctx) {
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
  npf_cnt_putc_ctx_t *pc_cnt = (npf_cnt_putc_ctx_t *)ctx;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	60fb      	str	r3, [r7, #12]
  ++pc_cnt->n;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	609a      	str	r2, [r3, #8]
  pc_cnt->pc(c, pc_cnt->ctx); // sibling-call optimization
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	6852      	ldr	r2, [r2, #4]
 80022ca:	4611      	mov	r1, r2
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	4798      	blx	r3
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <npf_vpprintf>:
  case NPF_FMT_SPEC_LEN_MOD_##MOD: val = (CAST_TO)va_arg(args, EXTRACT_AS); break

#define NPF_WRITEBACK(MOD, TYPE) \
  case NPF_FMT_SPEC_LEN_MOD_##MOD: *(va_arg(args, TYPE *)) = (TYPE)pc_cnt.n; break

int npf_vpprintf(npf_putc pc, void *pc_ctx, char const *format, va_list args) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b0a8      	sub	sp, #160	; 0xa0
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
  npf_format_spec_t fs;
  char const *cur = format;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  npf_cnt_putc_ctx_t pc_cnt;
  pc_cnt.pc = pc;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	637b      	str	r3, [r7, #52]	; 0x34
  pc_cnt.ctx = pc_ctx;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	63bb      	str	r3, [r7, #56]	; 0x38
  pc_cnt.n = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	63fb      	str	r3, [r7, #60]	; 0x3c

  while (*cur) {
 80022f8:	e3a2      	b.n	8002a40 <npf_vpprintf+0x768>
    int const fs_len = (*cur != '%') ? 0 : npf_parse_format_spec(cur, &fs);
 80022fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b25      	cmp	r3, #37	; 0x25
 8002302:	d108      	bne.n	8002316 <npf_vpprintf+0x3e>
 8002304:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002308:	4619      	mov	r1, r3
 800230a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800230e:	f7ff fab7 	bl	8001880 <npf_parse_format_spec>
 8002312:	4603      	mov	r3, r0
 8002314:	e000      	b.n	8002318 <npf_vpprintf+0x40>
 8002316:	2300      	movs	r3, #0
 8002318:	663b      	str	r3, [r7, #96]	; 0x60
    if (!fs_len) { NPF_PUTC(*cur++); continue; }
 800231a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800231c:	2b00      	cmp	r3, #0
 800231e:	d10d      	bne.n	800233c <npf_vpprintf+0x64>
 8002320:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002324:	1c5a      	adds	r2, r3, #1
 8002326:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002332:	4619      	mov	r1, r3
 8002334:	4610      	mov	r0, r2
 8002336:	f7ff ffb8 	bl	80022aa <npf_putc_cnt>
 800233a:	e381      	b.n	8002a40 <npf_vpprintf+0x768>
    cur += fs_len;
 800233c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800233e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8002342:	4413      	add	r3, r2
 8002344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    // Extract star-args immediately
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    if (fs.field_width_opt == NPF_FMT_SPEC_OPT_STAR) {
 8002348:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800234c:	2b02      	cmp	r3, #2
 800234e:	d110      	bne.n	8002372 <npf_vpprintf+0x9a>
      fs.field_width_opt = NPF_FMT_SPEC_OPT_LITERAL;
 8002350:	2301      	movs	r3, #1
 8002352:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      fs.field_width = va_arg(args, int);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	1d1a      	adds	r2, r3, #4
 800235a:	603a      	str	r2, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	647b      	str	r3, [r7, #68]	; 0x44
      if (fs.field_width < 0) {
 8002360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002362:	2b00      	cmp	r3, #0
 8002364:	da05      	bge.n	8002372 <npf_vpprintf+0x9a>
        fs.field_width = -fs.field_width;
 8002366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002368:	425b      	negs	r3, r3
 800236a:	647b      	str	r3, [r7, #68]	; 0x44
        fs.left_justified = 1;
 800236c:	2301      	movs	r3, #1
 800236e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
      }
    }
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    if (fs.prec_opt == NPF_FMT_SPEC_OPT_STAR) {
 8002372:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002376:	2b02      	cmp	r3, #2
 8002378:	d10d      	bne.n	8002396 <npf_vpprintf+0xbe>
      fs.prec_opt = NPF_FMT_SPEC_OPT_NONE;
 800237a:	2300      	movs	r3, #0
 800237c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      fs.prec = va_arg(args, int);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	1d1a      	adds	r2, r3, #4
 8002384:	603a      	str	r2, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (fs.prec >= 0) { fs.prec_opt = NPF_FMT_SPEC_OPT_LITERAL; }
 800238a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800238c:	2b00      	cmp	r3, #0
 800238e:	db02      	blt.n	8002396 <npf_vpprintf+0xbe>
 8002390:	2301      	movs	r3, #1
 8002392:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
    }
#endif

    union { char cbuf_mem[32]; npf_uint_t binval; } u;
    char *cbuf = u.cbuf_mem, sign_c = 0;
 8002396:	f107 0310 	add.w	r3, r7, #16
 800239a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800239e:	2300      	movs	r3, #0
 80023a0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    int cbuf_len = 0, need_0x = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023aa:	2300      	movs	r3, #0
 80023ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    int field_pad = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    char pad_c = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    int prec_pad = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    int zero = 0;
 80023c2:	2300      	movs	r3, #0
 80023c4:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
#endif
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    int frac_chars = 0, inf_or_nan = 0;
 80023c6:	2300      	movs	r3, #0
 80023c8:	633b      	str	r3, [r7, #48]	; 0x30
 80023ca:	2300      	movs	r3, #0
 80023cc:	67bb      	str	r3, [r7, #120]	; 0x78
#endif

    // Extract and convert the argument to string, point cbuf at the text.
    switch (fs.conv_spec) {
 80023ce:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	f200 81c5 	bhi.w	8002762 <npf_vpprintf+0x48a>
 80023d8:	a201      	add	r2, pc, #4	; (adr r2, 80023e0 <npf_vpprintf+0x108>)
 80023da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023de:	bf00      	nop
 80023e0:	08002405 	.word	0x08002405
 80023e4:	08002419 	.word	0x08002419
 80023e8:	08002435 	.word	0x08002435
 80023ec:	0800247d 	.word	0x0800247d
 80023f0:	08002533 	.word	0x08002533
 80023f4:	08002533 	.word	0x08002533
 80023f8:	08002533 	.word	0x08002533
 80023fc:	0800266f 	.word	0x0800266f
 8002400:	08002691 	.word	0x08002691
      case NPF_FMT_SPEC_CONV_PERCENT:
        *cbuf = '%';
 8002404:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002408:	2225      	movs	r2, #37	; 0x25
 800240a:	701a      	strb	r2, [r3, #0]
        ++cbuf_len;
 800240c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002410:	3301      	adds	r3, #1
 8002412:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        break;
 8002416:	e1a9      	b.n	800276c <npf_vpprintf+0x494>

      case NPF_FMT_SPEC_CONV_CHAR:
        *cbuf = (char)va_arg(args, int);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	1d1a      	adds	r2, r3, #4
 800241c:	603a      	str	r2, [r7, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002426:	701a      	strb	r2, [r3, #0]
        ++cbuf_len;
 8002428:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800242c:	3301      	adds	r3, #1
 800242e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        break;
 8002432:	e19b      	b.n	800276c <npf_vpprintf+0x494>

      case NPF_FMT_SPEC_CONV_STRING: {
        cbuf = va_arg(args, char *);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	1d1a      	adds	r2, r3, #4
 8002438:	603a      	str	r2, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        for (char const *s = cbuf; *s; ++s, ++cbuf_len); // strlen
 8002440:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002444:	677b      	str	r3, [r7, #116]	; 0x74
 8002446:	e007      	b.n	8002458 <npf_vpprintf+0x180>
 8002448:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800244a:	3301      	adds	r3, #1
 800244c:	677b      	str	r3, [r7, #116]	; 0x74
 800244e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002452:	3301      	adds	r3, #1
 8002454:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002458:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f3      	bne.n	8002448 <npf_vpprintf+0x170>
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
        if (fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) {
 8002460:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002464:	2b01      	cmp	r3, #1
 8002466:	f040 817e 	bne.w	8002766 <npf_vpprintf+0x48e>
          cbuf_len = npf_min(fs.prec, cbuf_len); // prec truncates strings
 800246a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800246c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff f9e5 	bl	8001840 <npf_min>
 8002476:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        }
#endif
      } break;
 800247a:	e174      	b.n	8002766 <npf_vpprintf+0x48e>

      case NPF_FMT_SPEC_CONV_SIGNED_INT: {
        npf_int_t val = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	673b      	str	r3, [r7, #112]	; 0x70
        switch (fs.length_modifier) {
 8002480:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002484:	2b04      	cmp	r3, #4
 8002486:	d82d      	bhi.n	80024e4 <npf_vpprintf+0x20c>
 8002488:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <npf_vpprintf+0x1b8>)
 800248a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248e:	bf00      	nop
 8002490:	080024a5 	.word	0x080024a5
 8002494:	080024b1 	.word	0x080024b1
 8002498:	080024bf 	.word	0x080024bf
 800249c:	080024cb 	.word	0x080024cb
 80024a0:	080024d9 	.word	0x080024d9
          NPF_EXTRACT(NONE, int, int);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	1d1a      	adds	r2, r3, #4
 80024a8:	603a      	str	r2, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	673b      	str	r3, [r7, #112]	; 0x70
 80024ae:	e01a      	b.n	80024e6 <npf_vpprintf+0x20e>
          NPF_EXTRACT(SHORT, short, int);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	1d1a      	adds	r2, r3, #4
 80024b4:	603a      	str	r2, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	b21b      	sxth	r3, r3
 80024ba:	673b      	str	r3, [r7, #112]	; 0x70
 80024bc:	e013      	b.n	80024e6 <npf_vpprintf+0x20e>
          NPF_EXTRACT(LONG_DOUBLE, int, int);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	1d1a      	adds	r2, r3, #4
 80024c2:	603a      	str	r2, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	673b      	str	r3, [r7, #112]	; 0x70
 80024c8:	e00d      	b.n	80024e6 <npf_vpprintf+0x20e>
          NPF_EXTRACT(CHAR, char, int);
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	1d1a      	adds	r2, r3, #4
 80024ce:	603a      	str	r2, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	673b      	str	r3, [r7, #112]	; 0x70
 80024d6:	e006      	b.n	80024e6 <npf_vpprintf+0x20e>
          NPF_EXTRACT(LONG, long, long);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	1d1a      	adds	r2, r3, #4
 80024dc:	603a      	str	r2, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	673b      	str	r3, [r7, #112]	; 0x70
 80024e2:	e000      	b.n	80024e6 <npf_vpprintf+0x20e>
          NPF_EXTRACT(LARGE_LONG_LONG, long long, long long);
          NPF_EXTRACT(LARGE_INTMAX, intmax_t, intmax_t);
          NPF_EXTRACT(LARGE_SIZET, ssize_t, ssize_t);
          NPF_EXTRACT(LARGE_PTRDIFFT, ptrdiff_t, ptrdiff_t);
#endif
          default: break;
 80024e4:	bf00      	nop
        }

        sign_c = (val < 0) ? '-' : fs.prepend;
 80024e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	db02      	blt.n	80024f2 <npf_vpprintf+0x21a>
 80024ec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80024f0:	e000      	b.n	80024f4 <npf_vpprintf+0x21c>
 80024f2:	232d      	movs	r3, #45	; 0x2d
 80024f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = !val;
 80024f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bf0c      	ite	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	2300      	movne	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        // special case, if prec and value are 0, skip
        if (!val && (fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec) {
 8002506:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10a      	bne.n	8002522 <npf_vpprintf+0x24a>
 800250c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002510:	2b01      	cmp	r3, #1
 8002512:	d106      	bne.n	8002522 <npf_vpprintf+0x24a>
 8002514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002516:	2b00      	cmp	r3, #0
 8002518:	d103      	bne.n	8002522 <npf_vpprintf+0x24a>
          cbuf_len = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        } else
#endif
        { cbuf_len = npf_itoa_rev(cbuf, val); }
      } break;
 8002520:	e124      	b.n	800276c <npf_vpprintf+0x494>
        { cbuf_len = npf_itoa_rev(cbuf, val); }
 8002522:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002524:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002528:	f7ff fba8 	bl	8001c7c <npf_itoa_rev>
 800252c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
      } break;
 8002530:	e11c      	b.n	800276c <npf_vpprintf+0x494>
      case NPF_FMT_SPEC_CONV_BINARY:
#endif
      case NPF_FMT_SPEC_CONV_OCTAL:
      case NPF_FMT_SPEC_CONV_HEX_INT:
      case NPF_FMT_SPEC_CONV_UNSIGNED_INT: {
        npf_uint_t val = 0;
 8002532:	2300      	movs	r3, #0
 8002534:	66fb      	str	r3, [r7, #108]	; 0x6c

        switch (fs.length_modifier) {
 8002536:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800253a:	2b04      	cmp	r3, #4
 800253c:	d82c      	bhi.n	8002598 <npf_vpprintf+0x2c0>
 800253e:	a201      	add	r2, pc, #4	; (adr r2, 8002544 <npf_vpprintf+0x26c>)
 8002540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002544:	08002559 	.word	0x08002559
 8002548:	08002565 	.word	0x08002565
 800254c:	08002573 	.word	0x08002573
 8002550:	0800257f 	.word	0x0800257f
 8002554:	0800258d 	.word	0x0800258d
          NPF_EXTRACT(NONE, unsigned, unsigned);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	1d1a      	adds	r2, r3, #4
 800255c:	603a      	str	r2, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002562:	e01a      	b.n	800259a <npf_vpprintf+0x2c2>
          NPF_EXTRACT(SHORT, unsigned short, unsigned);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	1d1a      	adds	r2, r3, #4
 8002568:	603a      	str	r2, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	b29b      	uxth	r3, r3
 800256e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002570:	e013      	b.n	800259a <npf_vpprintf+0x2c2>
          NPF_EXTRACT(LONG_DOUBLE, unsigned, unsigned);
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	1d1a      	adds	r2, r3, #4
 8002576:	603a      	str	r2, [r7, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800257c:	e00d      	b.n	800259a <npf_vpprintf+0x2c2>
          NPF_EXTRACT(CHAR, unsigned char, unsigned);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	1d1a      	adds	r2, r3, #4
 8002582:	603a      	str	r2, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	b2db      	uxtb	r3, r3
 8002588:	66fb      	str	r3, [r7, #108]	; 0x6c
 800258a:	e006      	b.n	800259a <npf_vpprintf+0x2c2>
          NPF_EXTRACT(LONG, unsigned long, unsigned long);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	1d1a      	adds	r2, r3, #4
 8002590:	603a      	str	r2, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002596:	e000      	b.n	800259a <npf_vpprintf+0x2c2>
          NPF_EXTRACT(LARGE_LONG_LONG, unsigned long long, unsigned long long);
          NPF_EXTRACT(LARGE_INTMAX, uintmax_t, uintmax_t);
          NPF_EXTRACT(LARGE_SIZET, size_t, size_t);
          NPF_EXTRACT(LARGE_PTRDIFFT, size_t, size_t);
#endif
          default: break;
 8002598:	bf00      	nop
        }

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = !val;
 800259a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf0c      	ite	eq
 80025a0:	2301      	moveq	r3, #1
 80025a2:	2300      	movne	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        if (!val && (fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec) {
 80025a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d111      	bne.n	80025d2 <npf_vpprintf+0x2fa>
 80025ae:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d10d      	bne.n	80025d2 <npf_vpprintf+0x2fa>
 80025b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10a      	bne.n	80025d2 <npf_vpprintf+0x2fa>
          // Zero value and explicitly-requested zero precision means "print nothing".
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 80025bc:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d11f      	bne.n	8002604 <npf_vpprintf+0x32c>
 80025c4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d01b      	beq.n	8002604 <npf_vpprintf+0x32c>
            fs.prec = 1; // octal special case, print a single '0'
 80025cc:	2301      	movs	r3, #1
 80025ce:	64fb      	str	r3, [r7, #76]	; 0x4c
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 80025d0:	e018      	b.n	8002604 <npf_vpprintf+0x32c>
        if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) {
          cbuf_len = npf_bin_len(val); u.binval = val;
        } else
#endif
        {
          unsigned const base = (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) ?
 80025d2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
            8u : ((fs.conv_spec == NPF_FMT_SPEC_CONV_HEX_INT) ? 16u : 10u);
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d007      	beq.n	80025ea <npf_vpprintf+0x312>
 80025da:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80025de:	2b05      	cmp	r3, #5
 80025e0:	d101      	bne.n	80025e6 <npf_vpprintf+0x30e>
 80025e2:	2310      	movs	r3, #16
 80025e4:	e002      	b.n	80025ec <npf_vpprintf+0x314>
 80025e6:	230a      	movs	r3, #10
 80025e8:	e000      	b.n	80025ec <npf_vpprintf+0x314>
 80025ea:	2308      	movs	r3, #8
          unsigned const base = (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) ?
 80025ec:	65bb      	str	r3, [r7, #88]	; 0x58
          cbuf_len = npf_utoa_rev(cbuf, val, base, (unsigned)fs.case_adjust);
 80025ee:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80025f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025f4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80025f6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80025fa:	f7ff fb7d 	bl	8001cf8 <npf_utoa_rev>
 80025fe:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 8002602:	e000      	b.n	8002606 <npf_vpprintf+0x32e>
          if ((fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL) && fs.alt_form) {
 8002604:	bf00      	nop
        }

        if (val && fs.alt_form && (fs.conv_spec == NPF_FMT_SPEC_CONV_OCTAL)) {
 8002606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002608:	2b00      	cmp	r3, #0
 800260a:	d012      	beq.n	8002632 <npf_vpprintf+0x35a>
 800260c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00e      	beq.n	8002632 <npf_vpprintf+0x35a>
 8002614:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002618:	2b04      	cmp	r3, #4
 800261a:	d10a      	bne.n	8002632 <npf_vpprintf+0x35a>
          cbuf[cbuf_len++] = '0'; // OK to add leading octal '0' immediately.
 800261c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002626:	461a      	mov	r2, r3
 8002628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800262c:	4413      	add	r3, r2
 800262e:	2230      	movs	r2, #48	; 0x30
 8002630:	701a      	strb	r2, [r3, #0]
        }

        if (val && fs.alt_form) { // 0x or 0b but can't write it yet.
 8002632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8098 	beq.w	800276a <npf_vpprintf+0x492>
 800263a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 8093 	beq.w	800276a <npf_vpprintf+0x492>
          if (fs.conv_spec == NPF_FMT_SPEC_CONV_HEX_INT) { need_0x = 'X'; }
 8002644:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002648:	2b05      	cmp	r3, #5
 800264a:	d102      	bne.n	8002652 <npf_vpprintf+0x37a>
 800264c:	2358      	movs	r3, #88	; 0x58
 800264e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#if NANOPRINTF_USE_BINARY_FORMAT_SPECIFIERS == 1
          else if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) { need_0x = 'B'; }
#endif
          if (need_0x) { need_0x += fs.case_adjust; }
 8002652:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8087 	beq.w	800276a <npf_vpprintf+0x492>
 800265c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8002660:	461a      	mov	r2, r3
 8002662:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002666:	4413      	add	r3, r2
 8002668:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
      } break;
 800266c:	e07d      	b.n	800276a <npf_vpprintf+0x492>

      case NPF_FMT_SPEC_CONV_POINTER: {
        cbuf_len =
          npf_utoa_rev(cbuf, (npf_uint_t)(uintptr_t)va_arg(args, void *), 16, 'a'-'A');
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	1d1a      	adds	r2, r3, #4
 8002672:	603a      	str	r2, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4619      	mov	r1, r3
 8002678:	2320      	movs	r3, #32
 800267a:	2210      	movs	r2, #16
 800267c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002680:	f7ff fb3a 	bl	8001cf8 <npf_utoa_rev>
 8002684:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        need_0x = 'x';
 8002688:	2378      	movs	r3, #120	; 0x78
 800268a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      } break;
 800268e:	e06d      	b.n	800276c <npf_vpprintf+0x494>
#endif

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      case NPF_FMT_SPEC_CONV_FLOAT_DECIMAL: {
        float val;
        if (fs.length_modifier == NPF_FMT_SPEC_LEN_MOD_LONG_DOUBLE) {
 8002690:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002694:	2b02      	cmp	r3, #2
 8002696:	d10f      	bne.n	80026b8 <npf_vpprintf+0x3e0>
          val = (float)va_arg(args, long double);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	3307      	adds	r3, #7
 800269c:	f023 0307 	bic.w	r3, r3, #7
 80026a0:	f103 0208 	add.w	r2, r3, #8
 80026a4:	603a      	str	r2, [r7, #0]
 80026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f7fe fa7b 	bl	8000ba8 <__aeabi_d2f>
 80026b2:	4603      	mov	r3, r0
 80026b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80026b6:	e00e      	b.n	80026d6 <npf_vpprintf+0x3fe>
        } else {
          val = (float)va_arg(args, double);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	3307      	adds	r3, #7
 80026bc:	f023 0307 	bic.w	r3, r3, #7
 80026c0:	f103 0208 	add.w	r2, r3, #8
 80026c4:	603a      	str	r2, [r7, #0]
 80026c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ca:	4610      	mov	r0, r2
 80026cc:	4619      	mov	r1, r3
 80026ce:	f7fe fa6b 	bl	8000ba8 <__aeabi_d2f>
 80026d2:	4603      	mov	r3, r0
 80026d4:	66bb      	str	r3, [r7, #104]	; 0x68
        }

        sign_c = (val < 0.f) ? '-' : fs.prepend;
 80026d6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80026da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e2:	d501      	bpl.n	80026e8 <npf_vpprintf+0x410>
 80026e4:	232d      	movs	r3, #45	; 0x2d
 80026e6:	e001      	b.n	80026ec <npf_vpprintf+0x414>
 80026e8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80026ec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
        zero = (val == 0.f);
 80026f0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80026f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80026f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fc:	bf0c      	ite	eq
 80026fe:	2301      	moveq	r3, #1
 8002700:	2300      	movne	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	67fb      	str	r3, [r7, #124]	; 0x7c
#endif
        cbuf_len = npf_ftoa_rev(cbuf, val, fs.case_adjust, &frac_chars);
 8002706:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 800270a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800270e:	4619      	mov	r1, r3
 8002710:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 8002714:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002718:	f7ff fcbe 	bl	8002098 <npf_ftoa_rev>
 800271c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

        if (cbuf_len < 0) {
 8002720:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002724:	2b00      	cmp	r3, #0
 8002726:	da07      	bge.n	8002738 <npf_vpprintf+0x460>
          cbuf_len = -cbuf_len;
 8002728:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800272c:	425b      	negs	r3, r3
 800272e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
          inf_or_nan = 1;
 8002732:	2301      	movs	r3, #1
 8002734:	67bb      	str	r3, [r7, #120]	; 0x78
        } else {
          int const prec_adj = npf_max(0, frac_chars - fs.prec);
          cbuf += prec_adj;
          cbuf_len -= prec_adj;
        }
      } break;
 8002736:	e019      	b.n	800276c <npf_vpprintf+0x494>
          int const prec_adj = npf_max(0, frac_chars - fs.prec);
 8002738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800273a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	4619      	mov	r1, r3
 8002740:	2000      	movs	r0, #0
 8002742:	f7ff f88d 	bl	8001860 <npf_max>
 8002746:	65f8      	str	r0, [r7, #92]	; 0x5c
          cbuf += prec_adj;
 8002748:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800274a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800274e:	4413      	add	r3, r2
 8002750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
          cbuf_len -= prec_adj;
 8002754:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002758:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      } break;
 8002760:	e004      	b.n	800276c <npf_vpprintf+0x494>
#endif
      default: break;
 8002762:	bf00      	nop
 8002764:	e002      	b.n	800276c <npf_vpprintf+0x494>
      } break;
 8002766:	bf00      	nop
 8002768:	e000      	b.n	800276c <npf_vpprintf+0x494>
      } break;
 800276a:	bf00      	nop
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Compute the field width pad character
    if (fs.field_width_opt == NPF_FMT_SPEC_OPT_LITERAL) {
 800276c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002770:	2b01      	cmp	r3, #1
 8002772:	d124      	bne.n	80027be <npf_vpprintf+0x4e6>
      if (fs.leading_zero_pad) { // '0' flag is only legal with numeric types
 8002774:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002778:	2b00      	cmp	r3, #0
 800277a:	d01d      	beq.n	80027b8 <npf_vpprintf+0x4e0>
        if ((fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) &&
 800277c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002780:	2b02      	cmp	r3, #2
 8002782:	d01c      	beq.n	80027be <npf_vpprintf+0x4e6>
            (fs.conv_spec != NPF_FMT_SPEC_CONV_CHAR) &&
 8002784:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
        if ((fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) &&
 8002788:	2b01      	cmp	r3, #1
 800278a:	d018      	beq.n	80027be <npf_vpprintf+0x4e6>
            (fs.conv_spec != NPF_FMT_SPEC_CONV_PERCENT)) {
 800278c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
            (fs.conv_spec != NPF_FMT_SPEC_CONV_CHAR) &&
 8002790:	2b00      	cmp	r3, #0
 8002792:	d014      	beq.n	80027be <npf_vpprintf+0x4e6>
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
          if ((fs.prec_opt == NPF_FMT_SPEC_OPT_LITERAL) && !fs.prec && zero) {
 8002794:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002798:	2b01      	cmp	r3, #1
 800279a:	d109      	bne.n	80027b0 <npf_vpprintf+0x4d8>
 800279c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <npf_vpprintf+0x4d8>
 80027a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <npf_vpprintf+0x4d8>
            pad_c = ' ';
 80027a8:	2320      	movs	r3, #32
 80027aa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80027ae:	e006      	b.n	80027be <npf_vpprintf+0x4e6>
          } else
#endif
          { pad_c = '0'; }
 80027b0:	2330      	movs	r3, #48	; 0x30
 80027b2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80027b6:	e002      	b.n	80027be <npf_vpprintf+0x4e6>
        }
      } else { pad_c = ' '; }
 80027b8:	2320      	movs	r3, #32
 80027ba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    }
#endif

    // Compute the number of bytes to truncate or '0'-pad.
    if (fs.conv_spec != NPF_FMT_SPEC_CONV_STRING) {
 80027be:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d014      	beq.n	80027f0 <npf_vpprintf+0x518>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      if (!inf_or_nan) { // float precision is after the decimal point
 80027c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d111      	bne.n	80027f0 <npf_vpprintf+0x518>
        int const prec_start =
          (fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DECIMAL) ? frac_chars : cbuf_len;
 80027cc:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d101      	bne.n	80027d8 <npf_vpprintf+0x500>
 80027d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d6:	e001      	b.n	80027dc <npf_vpprintf+0x504>
 80027d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        int const prec_start =
 80027dc:	657b      	str	r3, [r7, #84]	; 0x54
        prec_pad = npf_max(0, fs.prec - prec_start);
 80027de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	4619      	mov	r1, r3
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7ff f83a 	bl	8001860 <npf_max>
 80027ec:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
#endif
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Given the full converted length, how many pad bytes?
    field_pad = fs.field_width - cbuf_len - !!sign_c;
 80027f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 80027fc:	2a00      	cmp	r2, #0
 80027fe:	bf14      	ite	ne
 8002800:	2201      	movne	r2, #1
 8002802:	2200      	moveq	r2, #0
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (need_0x) { field_pad -= 2; }
 800280c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <npf_vpprintf+0x546>
 8002814:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002818:	3b02      	subs	r3, #2
 800281a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
    if ((fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DECIMAL) && !fs.prec && !fs.alt_form) {
 800281e:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002822:	2b08      	cmp	r3, #8
 8002824:	d10b      	bne.n	800283e <npf_vpprintf+0x566>
 8002826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d108      	bne.n	800283e <npf_vpprintf+0x566>
 800282c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8002830:	2b00      	cmp	r3, #0
 8002832:	d104      	bne.n	800283e <npf_vpprintf+0x566>
      ++field_pad; // 0-pad, no decimal point.
 8002834:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002838:	3301      	adds	r3, #1
 800283a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }
#endif
#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
    field_pad -= prec_pad;
 800283e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002842:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#endif
    field_pad = npf_max(0, field_pad);
 800284c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002850:	2000      	movs	r0, #0
 8002852:	f7ff f805 	bl	8001860 <npf_max>
 8002856:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
#endif // NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    // Apply right-justified field width if requested
    if (!fs.left_justified && pad_c) { // If leading zeros pad, sign goes first.
 800285a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800285e:	2b00      	cmp	r3, #0
 8002860:	d14d      	bne.n	80028fe <npf_vpprintf+0x626>
 8002862:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002866:	2b00      	cmp	r3, #0
 8002868:	d049      	beq.n	80028fe <npf_vpprintf+0x626>
      if (pad_c == '0') {
 800286a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800286e:	2b30      	cmp	r3, #48	; 0x30
 8002870:	d128      	bne.n	80028c4 <npf_vpprintf+0x5ec>
        if (sign_c) { NPF_PUTC(sign_c); sign_c = 0; }
 8002872:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00a      	beq.n	8002890 <npf_vpprintf+0x5b8>
 800287a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800287e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fd10 	bl	80022aa <npf_putc_cnt>
 800288a:	2300      	movs	r3, #0
 800288c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
        // Pad byte is '0', write '0x' before '0' pad chars.
        if (need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 8002890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002894:	2b00      	cmp	r3, #0
 8002896:	d015      	beq.n	80028c4 <npf_vpprintf+0x5ec>
 8002898:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800289c:	4619      	mov	r1, r3
 800289e:	2030      	movs	r0, #48	; 0x30
 80028a0:	f7ff fd03 	bl	80022aa <npf_putc_cnt>
 80028a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028a8:	4619      	mov	r1, r3
 80028aa:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80028ae:	f7ff fcfc 	bl	80022aa <npf_putc_cnt>
      }
      while (field_pad-- > 0) { NPF_PUTC(pad_c); }
 80028b2:	e007      	b.n	80028c4 <npf_vpprintf+0x5ec>
 80028b4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80028b8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff fcf3 	bl	80022aa <npf_putc_cnt>
 80028c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028c8:	1e5a      	subs	r2, r3, #1
 80028ca:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	dcf0      	bgt.n	80028b4 <npf_vpprintf+0x5dc>
      // Pad byte is ' ', write '0x' after ' ' pad chars but before number.
      if ((pad_c != '0') && need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 80028d2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80028d6:	2b30      	cmp	r3, #48	; 0x30
 80028d8:	d023      	beq.n	8002922 <npf_vpprintf+0x64a>
 80028da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d01f      	beq.n	8002922 <npf_vpprintf+0x64a>
 80028e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028e6:	4619      	mov	r1, r3
 80028e8:	2030      	movs	r0, #48	; 0x30
 80028ea:	f7ff fcde 	bl	80022aa <npf_putc_cnt>
 80028ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028f2:	4619      	mov	r1, r3
 80028f4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80028f8:	f7ff fcd7 	bl	80022aa <npf_putc_cnt>
 80028fc:	e011      	b.n	8002922 <npf_vpprintf+0x64a>
    } else
#endif
    { if (need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); } } // no pad, '0x' requested.
 80028fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00e      	beq.n	8002924 <npf_vpprintf+0x64c>
 8002906:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800290a:	4619      	mov	r1, r3
 800290c:	2030      	movs	r0, #48	; 0x30
 800290e:	f7ff fccc 	bl	80022aa <npf_putc_cnt>
 8002912:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002916:	4619      	mov	r1, r3
 8002918:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800291c:	f7ff fcc5 	bl	80022aa <npf_putc_cnt>
 8002920:	e000      	b.n	8002924 <npf_vpprintf+0x64c>
      if ((pad_c != '0') && need_0x) { NPF_PUTC('0'); NPF_PUTC(need_0x); }
 8002922:	bf00      	nop

    // Write the converted payload
    if (fs.conv_spec == NPF_FMT_SPEC_CONV_STRING) {
 8002924:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002928:	2b02      	cmp	r3, #2
 800292a:	d117      	bne.n	800295c <npf_vpprintf+0x684>
      for (int i = 0; i < cbuf_len; ++i) { NPF_PUTC(cbuf[i]); }
 800292c:	2300      	movs	r3, #0
 800292e:	667b      	str	r3, [r7, #100]	; 0x64
 8002930:	e00e      	b.n	8002950 <npf_vpprintf+0x678>
 8002932:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002934:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002938:	4413      	add	r3, r2
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002942:	4619      	mov	r1, r3
 8002944:	4610      	mov	r0, r2
 8002946:	f7ff fcb0 	bl	80022aa <npf_putc_cnt>
 800294a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800294c:	3301      	adds	r3, #1
 800294e:	667b      	str	r3, [r7, #100]	; 0x64
 8002950:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002952:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002956:	429a      	cmp	r2, r3
 8002958:	dbeb      	blt.n	8002932 <npf_vpprintf+0x65a>
 800295a:	e059      	b.n	8002a10 <npf_vpprintf+0x738>
    } else {
      if (sign_c) { NPF_PUTC(sign_c); }
 800295c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <npf_vpprintf+0x69c>
 8002964:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002968:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fc9b 	bl	80022aa <npf_putc_cnt>
#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      if (fs.conv_spec != NPF_FMT_SPEC_CONV_FLOAT_DECIMAL) {
 8002974:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8002978:	2b08      	cmp	r3, #8
 800297a:	d00e      	beq.n	800299a <npf_vpprintf+0x6c2>
#endif

#if NANOPRINTF_USE_PRECISION_FORMAT_SPECIFIERS == 1
        while (prec_pad-- > 0) { NPF_PUTC('0'); } // int precision leads.
 800297c:	e005      	b.n	800298a <npf_vpprintf+0x6b2>
 800297e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002982:	4619      	mov	r1, r3
 8002984:	2030      	movs	r0, #48	; 0x30
 8002986:	f7ff fc90 	bl	80022aa <npf_putc_cnt>
 800298a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800298e:	1e5a      	subs	r2, r3, #1
 8002990:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002994:	2b00      	cmp	r3, #0
 8002996:	dcf2      	bgt.n	800297e <npf_vpprintf+0x6a6>
 8002998:	e01e      	b.n	80029d8 <npf_vpprintf+0x700>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      } else {
        // if 0 precision, skip the fractional part and '.'
        // if 0 prec + alternative form, keep the '.'
        if (!fs.prec && !fs.alt_form) { ++cbuf; --cbuf_len; }
 800299a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d11b      	bne.n	80029d8 <npf_vpprintf+0x700>
 80029a0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d117      	bne.n	80029d8 <npf_vpprintf+0x700>
 80029a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029ac:	3301      	adds	r3, #1
 80029ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029b6:	3b01      	subs	r3, #1
 80029b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
#if NANOPRINTF_USE_BINARY_FORMAT_SPECIFIERS == 1
      if (fs.conv_spec == NPF_FMT_SPEC_CONV_BINARY) {
        while (cbuf_len) { NPF_PUTC('0' + ((u.binval >> --cbuf_len) & 1)); }
      } else
#endif
      { while (cbuf_len-- > 0) { NPF_PUTC(cbuf[cbuf_len]); } } // payload is reversed
 80029bc:	e00c      	b.n	80029d8 <npf_vpprintf+0x700>
 80029be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80029c6:	4413      	add	r3, r2
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029d0:	4619      	mov	r1, r3
 80029d2:	4610      	mov	r0, r2
 80029d4:	f7ff fc69 	bl	80022aa <npf_putc_cnt>
 80029d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029dc:	1e5a      	subs	r2, r3, #1
 80029de:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	dceb      	bgt.n	80029be <npf_vpprintf+0x6e6>

#if NANOPRINTF_USE_FLOAT_FORMAT_SPECIFIERS == 1
      // real precision comes after the number.
      if ((fs.conv_spec == NPF_FMT_SPEC_CONV_FLOAT_DECIMAL) && !inf_or_nan) {
 80029e6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d110      	bne.n	8002a10 <npf_vpprintf+0x738>
 80029ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10d      	bne.n	8002a10 <npf_vpprintf+0x738>
        while (prec_pad-- > 0) { NPF_PUTC('0'); }
 80029f4:	e005      	b.n	8002a02 <npf_vpprintf+0x72a>
 80029f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029fa:	4619      	mov	r1, r3
 80029fc:	2030      	movs	r0, #48	; 0x30
 80029fe:	f7ff fc54 	bl	80022aa <npf_putc_cnt>
 8002a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a06:	1e5a      	subs	r2, r3, #1
 8002a08:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	dcf2      	bgt.n	80029f6 <npf_vpprintf+0x71e>
      }
#endif
    }

#if NANOPRINTF_USE_FIELD_WIDTH_FORMAT_SPECIFIERS == 1
    if (fs.left_justified && pad_c) { // Apply left-justified field width
 8002a10:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d013      	beq.n	8002a40 <npf_vpprintf+0x768>
 8002a18:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00f      	beq.n	8002a40 <npf_vpprintf+0x768>
      while (field_pad-- > 0) { NPF_PUTC(pad_c); }
 8002a20:	e007      	b.n	8002a32 <npf_vpprintf+0x75a>
 8002a22:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8002a26:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fc3c 	bl	80022aa <npf_putc_cnt>
 8002a32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a36:	1e5a      	subs	r2, r3, #1
 8002a38:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	dcf0      	bgt.n	8002a22 <npf_vpprintf+0x74a>
  while (*cur) {
 8002a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f47f ac57 	bne.w	80022fa <npf_vpprintf+0x22>
    }
#endif
  }

  return pc_cnt.n;
 8002a4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	37a0      	adds	r7, #160	; 0xa0
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop

08002a58 <npf_snprintf>:
  int const rv = npf_vpprintf(pc, pc_ctx, format, val);
  va_end(val);
  return rv;
}

int npf_snprintf(char *buffer, size_t bufsz, const char *format, ...) {
 8002a58:	b40c      	push	{r2, r3}
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
  va_list val;
  va_start(val, format);
 8002a64:	f107 031c 	add.w	r3, r7, #28
 8002a68:	60bb      	str	r3, [r7, #8]
  int const rv = npf_vsnprintf(buffer, bufsz, format, val);
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	6839      	ldr	r1, [r7, #0]
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f809 	bl	8002a88 <npf_vsnprintf>
 8002a76:	60f8      	str	r0, [r7, #12]
  va_end(val);
  return rv;
 8002a78:	68fb      	ldr	r3, [r7, #12]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a84:	b002      	add	sp, #8
 8002a86:	4770      	bx	lr

08002a88 <npf_vsnprintf>:

int npf_vsnprintf(char *buffer, size_t bufsz, char const *format, va_list vlist) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	; 0x28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
 8002a94:	603b      	str	r3, [r7, #0]
  npf_bufputc_ctx_t bufputc_ctx;
  bufputc_ctx.dst = buffer;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	617b      	str	r3, [r7, #20]
  bufputc_ctx.len = bufsz;
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	61bb      	str	r3, [r7, #24]
  bufputc_ctx.cur = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61fb      	str	r3, [r7, #28]

  npf_putc const pc = buffer ? npf_bufputc : npf_bufputc_nop;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <npf_vsnprintf+0x24>
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <npf_vsnprintf+0x50>)
 8002aaa:	e000      	b.n	8002aae <npf_vsnprintf+0x26>
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <npf_vsnprintf+0x54>)
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
  int const n = npf_vpprintf(pc, &bufputc_ctx, format, vlist);
 8002ab0:	f107 0114 	add.w	r1, r7, #20
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002aba:	f7ff fc0d 	bl	80022d8 <npf_vpprintf>
 8002abe:	6238      	str	r0, [r7, #32]
  pc('\0', &bufputc_ctx);
 8002ac0:	f107 0214 	add.w	r2, r7, #20
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	2000      	movs	r0, #0
 8002aca:	4798      	blx	r3
  if (bufsz && (n >= (int)bufsz)) { buffer[0] = '\0'; }
#elif defined(NANOPRINTF_SNPRINTF_SAFE_TRIM_STRING_ON_OVERFLOW)
  if (bufsz && (n >= (int)bufsz)) { buffer[bufsz - 1] = '\0'; }
#endif

  return n;
 8002acc:	6a3b      	ldr	r3, [r7, #32]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3728      	adds	r7, #40	; 0x28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	08002259 	.word	0x08002259
 8002adc:	08002295 	.word	0x08002295

08002ae0 <myApp_init>:
volatile static uint16_t ADC_raw[adc_Channels];
volatile uint32_t guiTimer;
wakeUpSource lastWakeUpSource;

//functions
void myApp_init() {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
	startADC();
 8002ae6:	f000 fa8b 	bl	8003000 <startADC>
	//SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP); //Enable debug in stop
	//HAL_PWREx_EnableUltraLowPower();
	//HAL_PWREx_EnableFastWakeUp();

	/* Enable Power Clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <myApp_init+0x48>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	4a0e      	ldr	r2, [pc, #56]	; (8002b28 <myApp_init+0x48>)
 8002af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af4:	6593      	str	r3, [r2, #88]	; 0x58
 8002af6:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <myApp_init+0x48>)
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
	/* Ensure that MSI is wake-up system clock */
	__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <myApp_init+0x48>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4a08      	ldr	r2, [pc, #32]	; (8002b28 <myApp_init+0x48>)
 8002b08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002b0c:	6093      	str	r3, [r2, #8]

	while (ADCrunning) {
 8002b0e:	bf00      	nop
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <myApp_init+0x4c>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1fa      	bne.n	8002b10 <myApp_init+0x30>
		//wait for ADC
	}

	//LCD
	lcd_SetFont((GFXfont*) &FreeSans9pt7bMod);
 8002b1a:	4805      	ldr	r0, [pc, #20]	; (8002b30 <myApp_init+0x50>)
 8002b1c:	f006 fd66 	bl	80095ec <lcd_SetFont>
}
 8002b20:	bf00      	nop
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	20000378 	.word	0x20000378
 8002b30:	0800cec8 	.word	0x0800cec8

08002b34 <myApp_loop>:

void myApp_loop() {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
	startADC();
 8002b38:	f000 fa62 	bl	8003000 <startADC>
	GNSS_Power();
 8002b3c:	f001 f84e 	bl	8003bdc <GNSS_Power>
	if (LCD_Power() == LCD_READY) {
 8002b40:	f006 fcac 	bl	800949c <LCD_Power>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d10e      	bne.n	8002b68 <myApp_loop+0x34>
		drawHeader();
 8002b4a:	f000 f859 	bl	8002c00 <drawHeader>
		drawGNSS();
 8002b4e:	f000 f907 	bl	8002d60 <drawGNSS>
		while ((lcd_draw() == LCD_SENDING_DATA)) {
 8002b52:	e001      	b.n	8002b58 <myApp_loop+0x24>
			goToIdle(); //wait for DMA services to finish
 8002b54:	f000 f814 	bl	8002b80 <goToIdle>
		while ((lcd_draw() == LCD_SENDING_DATA)) {
 8002b58:	f006 ff84 	bl	8009a64 <lcd_draw>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d0f8      	beq.n	8002b54 <myApp_loop+0x20>
		}
	}
	while (ADCrunning) {
 8002b62:	e001      	b.n	8002b68 <myApp_loop+0x34>
		goToIdle(); //wait for ADC services to finish
 8002b64:	f000 f80c 	bl	8002b80 <goToIdle>
	while (ADCrunning) {
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <myApp_loop+0x48>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f8      	bne.n	8002b64 <myApp_loop+0x30>
	}
	goToSleep();
 8002b72:	f000 f80d 	bl	8002b90 <goToSleep>
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20000378 	.word	0x20000378

08002b80 <goToIdle>:

static void goToIdle() {
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002b84:	2101      	movs	r1, #1
 8002b86:	2000      	movs	r0, #0
 8002b88:	f003 fb58 	bl	800623c <HAL_PWR_EnterSLEEPMode>
}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <goToSleep>:

static void goToSleep() {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
	if (superCapmV < mV_OV) {
 8002b94:	4b16      	ldr	r3, [pc, #88]	; (8002bf0 <goToSleep+0x60>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d81d      	bhi.n	8002bdc <goToSleep+0x4c>
		HAL_GPIO_WritePin(SolarEN_GPIO_Port, SolarEN_Pin, GPIO_PIN_SET); //Allow charging
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002baa:	f003 fb1f 	bl	80061ec <HAL_GPIO_WritePin>
		GNSS_Prep_Stop();
 8002bae:	f000 ffe7 	bl	8003b80 <GNSS_Prep_Stop>
		HAL_SuspendTick();
 8002bb2:	f001 fb0f 	bl	80041d4 <HAL_SuspendTick>
		do {
			lastWakeUpSource = WKUP_CLEAR;
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <goToSleep+0x64>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
			HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f003 fc1d 	bl	80063fc <HAL_PWREx_EnterSTOP2Mode>
			__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <goToSleep+0x68>)
 8002bc4:	221f      	movs	r2, #31
 8002bc6:	619a      	str	r2, [r3, #24]
		} while (lastWakeUpSource == WKUP_LPUART);
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	; (8002bf4 <goToSleep+0x64>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d0f2      	beq.n	8002bb6 <goToSleep+0x26>
		LL_LPUART_DisableIT_WKUP(LPUART1);
 8002bd0:	480a      	ldr	r0, [pc, #40]	; (8002bfc <goToSleep+0x6c>)
 8002bd2:	f7fe fe12 	bl	80017fa <LL_LPUART_DisableIT_WKUP>
		HAL_ResumeTick();
 8002bd6:	f001 fb0d 	bl	80041f4 <HAL_ResumeTick>
	} else {
		//Battery is charged
		HAL_GPIO_WritePin(SolarEN_GPIO_Port, SolarEN_Pin, GPIO_PIN_RESET); //disable charging
	}
}
 8002bda:	e006      	b.n	8002bea <goToSleep+0x5a>
		HAL_GPIO_WritePin(SolarEN_GPIO_Port, SolarEN_Pin, GPIO_PIN_RESET); //disable charging
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be6:	f003 fb01 	bl	80061ec <HAL_GPIO_WritePin>
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	2000037c 	.word	0x2000037c
 8002bf4:	20000390 	.word	0x20000390
 8002bf8:	40007000 	.word	0x40007000
 8002bfc:	40008000 	.word	0x40008000

08002c00 <drawHeader>:

static void drawHeader() {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af02      	add	r7, sp, #8
	lcd_clearLines(0, LCD_row_Height * 2);
 8002c06:	2122      	movs	r1, #34	; 0x22
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f006 fe91 	bl	8009930 <lcd_clearLines>
//Date Time
	printDateTime();
 8002c0e:	f000 f863 	bl	8002cd8 <printDateTime>
//Battery
	lcd_SetCursor(80, LCD_row_Height - 2);
 8002c12:	210f      	movs	r1, #15
 8002c14:	2050      	movs	r0, #80	; 0x50
 8002c16:	f006 fccf 	bl	80095b8 <lcd_SetCursor>
	lcd_print(npf_snprintf(strbuffer, strbufferSize, "%3.2fV", (float) superCapmV / 1000.0f));
 8002c1a:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <drawHeader+0xb8>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	ee07 3a90 	vmov	s15, r3
 8002c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c26:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002cbc <drawHeader+0xbc>
 8002c2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c2e:	ee16 0a90 	vmov	r0, s13
 8002c32:	f7fd fc89 	bl	8000548 <__aeabi_f2d>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	e9cd 2300 	strd	r2, r3, [sp]
 8002c3e:	4a20      	ldr	r2, [pc, #128]	; (8002cc0 <drawHeader+0xc0>)
 8002c40:	2114      	movs	r1, #20
 8002c42:	4820      	ldr	r0, [pc, #128]	; (8002cc4 <drawHeader+0xc4>)
 8002c44:	f7ff ff08 	bl	8002a58 <npf_snprintf>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f006 fd6a 	bl	8009724 <lcd_print>
//Temp
	lcd_SetCursor(94, (LCD_row_Height * 2) - 2);
 8002c50:	2120      	movs	r1, #32
 8002c52:	205e      	movs	r0, #94	; 0x5e
 8002c54:	f006 fcb0 	bl	80095b8 <lcd_SetCursor>
	lcd_print(npf_snprintf(strbuffer, strbufferSize, "%.2dC", (int) tempC));
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <drawHeader+0xc8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ccc <drawHeader+0xcc>)
 8002c5e:	2114      	movs	r1, #20
 8002c60:	4818      	ldr	r0, [pc, #96]	; (8002cc4 <drawHeader+0xc4>)
 8002c62:	f7ff fef9 	bl	8002a58 <npf_snprintf>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f006 fd5b 	bl	8009724 <lcd_print>
	//GNSS Status
	if (GNSSlastRate == GNSS_ON) {
 8002c6e:	4b18      	ldr	r3, [pc, #96]	; (8002cd0 <drawHeader+0xd0>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d107      	bne.n	8002c88 <drawHeader+0x88>
		lcd_drawLine(0, 0, 0, 15, LCD_BLACK);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	230f      	movs	r3, #15
 8002c7e:	2200      	movs	r2, #0
 8002c80:	2100      	movs	r1, #0
 8002c82:	2000      	movs	r0, #0
 8002c84:	f006 fe12 	bl	80098ac <lcd_drawLine>
	}
	if (GNSSAlive) {
 8002c88:	4b12      	ldr	r3, [pc, #72]	; (8002cd4 <drawHeader+0xd4>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <drawHeader+0xa2>
		lcd_drawLine(0, 16, 0, 32, LCD_BLACK);
 8002c92:	2300      	movs	r3, #0
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	2320      	movs	r3, #32
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2110      	movs	r1, #16
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f006 fe05 	bl	80098ac <lcd_drawLine>
	}
//Div line
	lcd_drawLine(0, LCD_row_Height * 2, 127, LCD_row_Height * 2, LCD_BLACK);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	2322      	movs	r3, #34	; 0x22
 8002ca8:	227f      	movs	r2, #127	; 0x7f
 8002caa:	2122      	movs	r1, #34	; 0x22
 8002cac:	2000      	movs	r0, #0
 8002cae:	f006 fdfd 	bl	80098ac <lcd_drawLine>
}
 8002cb2:	bf00      	nop
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	2000037c 	.word	0x2000037c
 8002cbc:	447a0000 	.word	0x447a0000
 8002cc0:	0800c6d4 	.word	0x0800c6d4
 8002cc4:	20000d6c 	.word	0x20000d6c
 8002cc8:	20000380 	.word	0x20000380
 8002ccc:	0800c6dc 	.word	0x0800c6dc
 8002cd0:	20000398 	.word	0x20000398
 8002cd4:	200003a0 	.word	0x200003a0

08002cd8 <printDateTime>:

static void printDateTime() {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af02      	add	r7, sp, #8
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	481a      	ldr	r0, [pc, #104]	; (8002d50 <printDateTime+0x78>)
 8002ce6:	f004 fdc5 	bl	8007874 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002cea:	463b      	mov	r3, r7
 8002cec:	2200      	movs	r2, #0
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4817      	ldr	r0, [pc, #92]	; (8002d50 <printDateTime+0x78>)
 8002cf2:	f004 fea2 	bl	8007a3a <HAL_RTC_GetDate>
	lcd_SetCursor(1, LCD_row_Height - 2);
 8002cf6:	210f      	movs	r1, #15
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	f006 fc5d 	bl	80095b8 <lcd_SetCursor>
	lcd_print(npf_snprintf(strbuffer, strbufferSize, "%02d:%02d:%02d ", sTime.Hours, sTime.Minutes, sTime.Seconds));
 8002cfe:	793b      	ldrb	r3, [r7, #4]
 8002d00:	4619      	mov	r1, r3
 8002d02:	797b      	ldrb	r3, [r7, #5]
 8002d04:	79ba      	ldrb	r2, [r7, #6]
 8002d06:	9201      	str	r2, [sp, #4]
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4a11      	ldr	r2, [pc, #68]	; (8002d54 <printDateTime+0x7c>)
 8002d0e:	2114      	movs	r1, #20
 8002d10:	4811      	ldr	r0, [pc, #68]	; (8002d58 <printDateTime+0x80>)
 8002d12:	f7ff fea1 	bl	8002a58 <npf_snprintf>
 8002d16:	4603      	mov	r3, r0
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f006 fd03 	bl	8009724 <lcd_print>
	lcd_SetCursor(1, (LCD_row_Height * 2) - 2);
 8002d1e:	2120      	movs	r1, #32
 8002d20:	2001      	movs	r0, #1
 8002d22:	f006 fc49 	bl	80095b8 <lcd_SetCursor>
	lcd_print(npf_snprintf(strbuffer, strbufferSize, "%02d/%02d/%02d", sDate.Date, sDate.Month, sDate.Year));
 8002d26:	78bb      	ldrb	r3, [r7, #2]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	787b      	ldrb	r3, [r7, #1]
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	9201      	str	r2, [sp, #4]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	460b      	mov	r3, r1
 8002d34:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <printDateTime+0x84>)
 8002d36:	2114      	movs	r1, #20
 8002d38:	4807      	ldr	r0, [pc, #28]	; (8002d58 <printDateTime+0x80>)
 8002d3a:	f7ff fe8d 	bl	8002a58 <npf_snprintf>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	4618      	mov	r0, r3
 8002d42:	f006 fcef 	bl	8009724 <lcd_print>
}
 8002d46:	bf00      	nop
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	200002a8 	.word	0x200002a8
 8002d54:	0800c6e4 	.word	0x0800c6e4
 8002d58:	20000d6c 	.word	0x20000d6c
 8002d5c:	0800c6f4 	.word	0x0800c6f4

08002d60 <drawGNSS>:

static void drawGNSS() {
 8002d60:	b590      	push	{r4, r7, lr}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af02      	add	r7, sp, #8
	if (GNSSNewData) {
 8002d66:	4b82      	ldr	r3, [pc, #520]	; (8002f70 <drawGNSS+0x210>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80a3 	beq.w	8002eb8 <drawGNSS+0x158>
		lcd_clearLines((LCD_row_Height * 2) + 2, LCD_row_Height * 6);
 8002d72:	2166      	movs	r1, #102	; 0x66
 8002d74:	2024      	movs	r0, #36	; 0x24
 8002d76:	f006 fddb 	bl	8009930 <lcd_clearLines>
		lcd_SetCursor(1, LCD_row_Height * 3);
 8002d7a:	2133      	movs	r1, #51	; 0x33
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	f006 fc1b 	bl	80095b8 <lcd_SetCursor>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "%8.4f ", fabsf(getLat())));
 8002d82:	f000 fe21 	bl	80039c8 <getLat>
 8002d86:	eef0 7a40 	vmov.f32	s15, s0
 8002d8a:	eef0 7ae7 	vabs.f32	s15, s15
 8002d8e:	ee17 0a90 	vmov	r0, s15
 8002d92:	f7fd fbd9 	bl	8000548 <__aeabi_f2d>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	e9cd 2300 	strd	r2, r3, [sp]
 8002d9e:	4a75      	ldr	r2, [pc, #468]	; (8002f74 <drawGNSS+0x214>)
 8002da0:	2114      	movs	r1, #20
 8002da2:	4875      	ldr	r0, [pc, #468]	; (8002f78 <drawGNSS+0x218>)
 8002da4:	f7ff fe58 	bl	8002a58 <npf_snprintf>
 8002da8:	4603      	mov	r3, r0
 8002daa:	4618      	mov	r0, r3
 8002dac:	f006 fcba 	bl	8009724 <lcd_print>
		if (getLat() < 0) {
 8002db0:	f000 fe0a 	bl	80039c8 <getLat>
 8002db4:	eef0 7a40 	vmov.f32	s15, s0
 8002db8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc0:	d503      	bpl.n	8002dca <drawGNSS+0x6a>
			lcd_print_char('S');
 8002dc2:	2053      	movs	r0, #83	; 0x53
 8002dc4:	f006 fcdc 	bl	8009780 <lcd_print_char>
 8002dc8:	e002      	b.n	8002dd0 <drawGNSS+0x70>
		} else {
			lcd_print_char('N');
 8002dca:	204e      	movs	r0, #78	; 0x4e
 8002dcc:	f006 fcd8 	bl	8009780 <lcd_print_char>
		}
		lcd_SetCursor(1, LCD_row_Height * 4);
 8002dd0:	2144      	movs	r1, #68	; 0x44
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f006 fbf0 	bl	80095b8 <lcd_SetCursor>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "%8.4f ", fabsf(getLong())));
 8002dd8:	f000 fe1e 	bl	8003a18 <getLong>
 8002ddc:	eef0 7a40 	vmov.f32	s15, s0
 8002de0:	eef0 7ae7 	vabs.f32	s15, s15
 8002de4:	ee17 0a90 	vmov	r0, s15
 8002de8:	f7fd fbae 	bl	8000548 <__aeabi_f2d>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	e9cd 2300 	strd	r2, r3, [sp]
 8002df4:	4a5f      	ldr	r2, [pc, #380]	; (8002f74 <drawGNSS+0x214>)
 8002df6:	2114      	movs	r1, #20
 8002df8:	485f      	ldr	r0, [pc, #380]	; (8002f78 <drawGNSS+0x218>)
 8002dfa:	f7ff fe2d 	bl	8002a58 <npf_snprintf>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f006 fc8f 	bl	8009724 <lcd_print>
		if (getLong() < 0) {
 8002e06:	f000 fe07 	bl	8003a18 <getLong>
 8002e0a:	eef0 7a40 	vmov.f32	s15, s0
 8002e0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e16:	d503      	bpl.n	8002e20 <drawGNSS+0xc0>
			lcd_print_char('W');
 8002e18:	2057      	movs	r0, #87	; 0x57
 8002e1a:	f006 fcb1 	bl	8009780 <lcd_print_char>
 8002e1e:	e002      	b.n	8002e26 <drawGNSS+0xc6>
		} else {
			lcd_print_char('E');
 8002e20:	2045      	movs	r0, #69	; 0x45
 8002e22:	f006 fcad 	bl	8009780 <lcd_print_char>
		}

		lcd_SetCursor(1, LCD_row_Height * 5);
 8002e26:	2155      	movs	r1, #85	; 0x55
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f006 fbc5 	bl	80095b8 <lcd_SetCursor>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Sat:%d Acc:%2.0fm", getNumSatellites(), getHAcc() > 99.9 ? 99.9 : getHAcc()));
 8002e2e:	f000 fe7d 	bl	8003b2c <getNumSatellites>
 8002e32:	4603      	mov	r3, r0
 8002e34:	461c      	mov	r4, r3
 8002e36:	f000 fe17 	bl	8003a68 <getHAcc>
 8002e3a:	ee10 3a10 	vmov	r3, s0
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fd fb82 	bl	8000548 <__aeabi_f2d>
 8002e44:	a348      	add	r3, pc, #288	; (adr r3, 8002f68 <drawGNSS+0x208>)
 8002e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4a:	f7fd fe65 	bl	8000b18 <__aeabi_dcmpgt>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <drawGNSS+0xfc>
 8002e54:	a344      	add	r3, pc, #272	; (adr r3, 8002f68 <drawGNSS+0x208>)
 8002e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5a:	e008      	b.n	8002e6e <drawGNSS+0x10e>
 8002e5c:	f000 fe04 	bl	8003a68 <getHAcc>
 8002e60:	ee10 3a10 	vmov	r3, s0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fd fb6f 	bl	8000548 <__aeabi_f2d>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	e9cd 2300 	strd	r2, r3, [sp]
 8002e72:	4623      	mov	r3, r4
 8002e74:	4a41      	ldr	r2, [pc, #260]	; (8002f7c <drawGNSS+0x21c>)
 8002e76:	2114      	movs	r1, #20
 8002e78:	483f      	ldr	r0, [pc, #252]	; (8002f78 <drawGNSS+0x218>)
 8002e7a:	f7ff fded 	bl	8002a58 <npf_snprintf>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f006 fc4f 	bl	8009724 <lcd_print>

		lcd_SetCursor(1, LCD_row_Height * 6);
 8002e86:	2166      	movs	r1, #102	; 0x66
 8002e88:	2001      	movs	r0, #1
 8002e8a:	f006 fb95 	bl	80095b8 <lcd_SetCursor>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "%dkph HD:%d", getGroundSpeed_kph(), getMotionHeading_deg()));
 8002e8e:	f000 fe11 	bl	8003ab4 <getGroundSpeed_kph>
 8002e92:	4603      	mov	r3, r0
 8002e94:	461c      	mov	r4, r3
 8002e96:	f000 fe35 	bl	8003b04 <getMotionHeading_deg>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	9300      	str	r3, [sp, #0]
 8002e9e:	4623      	mov	r3, r4
 8002ea0:	4a37      	ldr	r2, [pc, #220]	; (8002f80 <drawGNSS+0x220>)
 8002ea2:	2114      	movs	r1, #20
 8002ea4:	4834      	ldr	r0, [pc, #208]	; (8002f78 <drawGNSS+0x218>)
 8002ea6:	f7ff fdd7 	bl	8002a58 <npf_snprintf>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f006 fc39 	bl	8009724 <lcd_print>
		GNSSNewData = false;
 8002eb2:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <drawGNSS+0x210>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
	}

	//GNSS Age
	lcd_clearLines((LCD_row_Height * 6) + 2, LCD_row_Height * 7);
 8002eb8:	2177      	movs	r1, #119	; 0x77
 8002eba:	2068      	movs	r0, #104	; 0x68
 8002ebc:	f006 fd38 	bl	8009930 <lcd_clearLines>
	lcd_SetCursor(2, LCD_row_Height * 7);
 8002ec0:	2177      	movs	r1, #119	; 0x77
 8002ec2:	2002      	movs	r0, #2
 8002ec4:	f006 fb78 	bl	80095b8 <lcd_SetCursor>
	if (GNSSlastPacketAge < 90) {
 8002ec8:	4b2e      	ldr	r3, [pc, #184]	; (8002f84 <drawGNSS+0x224>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b59      	cmp	r3, #89	; 0x59
 8002ece:	d80b      	bhi.n	8002ee8 <drawGNSS+0x188>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%lus", GNSSlastPacketAge));
 8002ed0:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <drawGNSS+0x224>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a2c      	ldr	r2, [pc, #176]	; (8002f88 <drawGNSS+0x228>)
 8002ed6:	2114      	movs	r1, #20
 8002ed8:	4827      	ldr	r0, [pc, #156]	; (8002f78 <drawGNSS+0x218>)
 8002eda:	f7ff fdbd 	bl	8002a58 <npf_snprintf>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f006 fc1f 	bl	8009724 <lcd_print>
	} else if (GNSSlastPacketAge < 3600) {
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%.1fm", (float) GNSSlastPacketAge / 60.0f));
	} else {
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%.1fh", (float) GNSSlastPacketAge / 3600.0f));
	}
}
 8002ee6:	e03b      	b.n	8002f60 <drawGNSS+0x200>
	} else if (GNSSlastPacketAge < 3600) {
 8002ee8:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <drawGNSS+0x224>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8002ef0:	d21b      	bcs.n	8002f2a <drawGNSS+0x1ca>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%.1fm", (float) GNSSlastPacketAge / 60.0f));
 8002ef2:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <drawGNSS+0x224>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efe:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002f8c <drawGNSS+0x22c>
 8002f02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f06:	ee16 0a90 	vmov	r0, s13
 8002f0a:	f7fd fb1d 	bl	8000548 <__aeabi_f2d>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	e9cd 2300 	strd	r2, r3, [sp]
 8002f16:	4a1e      	ldr	r2, [pc, #120]	; (8002f90 <drawGNSS+0x230>)
 8002f18:	2114      	movs	r1, #20
 8002f1a:	4817      	ldr	r0, [pc, #92]	; (8002f78 <drawGNSS+0x218>)
 8002f1c:	f7ff fd9c 	bl	8002a58 <npf_snprintf>
 8002f20:	4603      	mov	r3, r0
 8002f22:	4618      	mov	r0, r3
 8002f24:	f006 fbfe 	bl	8009724 <lcd_print>
}
 8002f28:	e01a      	b.n	8002f60 <drawGNSS+0x200>
		lcd_print(npf_snprintf(strbuffer, strbufferSize, "Age:%.1fh", (float) GNSSlastPacketAge / 3600.0f));
 8002f2a:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <drawGNSS+0x224>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	ee07 3a90 	vmov	s15, r3
 8002f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f36:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002f94 <drawGNSS+0x234>
 8002f3a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002f3e:	ee16 0a90 	vmov	r0, s13
 8002f42:	f7fd fb01 	bl	8000548 <__aeabi_f2d>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	e9cd 2300 	strd	r2, r3, [sp]
 8002f4e:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <drawGNSS+0x238>)
 8002f50:	2114      	movs	r1, #20
 8002f52:	4809      	ldr	r0, [pc, #36]	; (8002f78 <drawGNSS+0x218>)
 8002f54:	f7ff fd80 	bl	8002a58 <npf_snprintf>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f006 fbe2 	bl	8009724 <lcd_print>
}
 8002f60:	bf00      	nop
 8002f62:	3704      	adds	r7, #4
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd90      	pop	{r4, r7, pc}
 8002f68:	9999999a 	.word	0x9999999a
 8002f6c:	4058f999 	.word	0x4058f999
 8002f70:	20000004 	.word	0x20000004
 8002f74:	0800c704 	.word	0x0800c704
 8002f78:	20000d6c 	.word	0x20000d6c
 8002f7c:	0800c70c 	.word	0x0800c70c
 8002f80:	0800c720 	.word	0x0800c720
 8002f84:	2000039c 	.word	0x2000039c
 8002f88:	0800c72c 	.word	0x0800c72c
 8002f8c:	42700000 	.word	0x42700000
 8002f90:	0800c738 	.word	0x0800c738
 8002f94:	45610000 	.word	0x45610000
 8002f98:	0800c744 	.word	0x0800c744

08002f9c <setTimeGNSS>:

void setTimeGNSS() {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;
	sTime.Hours = GNSS_getHour();
 8002fa2:	f000 fceb 	bl	800397c <GNSS_getHour>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = GNSS_getMin();
 8002faa:	f000 fcf3 	bl	8003994 <GNSS_getMin>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = GNSS_getSec();
 8002fb2:	f000 fcfb 	bl	80039ac <GNSS_getSec>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71bb      	strb	r3, [r7, #6]
	sDate.Year = (uint8_t) (GNSS_getYear() - (uint16_t) 2000);
 8002fba:	f000 fcbb 	bl	8003934 <GNSS_getYear>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	3330      	adds	r3, #48	; 0x30
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	70fb      	strb	r3, [r7, #3]
	sDate.Month = GNSS_getMonth();
 8002fc8:	f000 fcc0 	bl	800394c <GNSS_getMonth>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	707b      	strb	r3, [r7, #1]
	sDate.Date = GNSS_getDay();
 8002fd0:	f000 fcc8 	bl	8003964 <GNSS_getDay>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	70bb      	strb	r3, [r7, #2]
	sDate.WeekDay = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	703b      	strb	r3, [r7, #0]

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	2200      	movs	r2, #0
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4806      	ldr	r0, [pc, #24]	; (8002ffc <setTimeGNSS+0x60>)
 8002fe4:	f004 fba9 	bl	800773a <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002fe8:	463b      	mov	r3, r7
 8002fea:	2200      	movs	r2, #0
 8002fec:	4619      	mov	r1, r3
 8002fee:	4803      	ldr	r0, [pc, #12]	; (8002ffc <setTimeGNSS+0x60>)
 8002ff0:	f004 fc9c 	bl	800792c <HAL_RTC_SetDate>
}
 8002ff4:	bf00      	nop
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	200002a8 	.word	0x200002a8

08003000 <startADC>:

static void startADC() {
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
	if (ADCrunning) {
 8003004:	4b09      	ldr	r3, [pc, #36]	; (800302c <startADC+0x2c>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10c      	bne.n	8003028 <startADC+0x28>
		//ADC already running
		return;
	}

	ADCrunning = true;
 800300e:	4b07      	ldr	r3, [pc, #28]	; (800302c <startADC+0x2c>)
 8003010:	2201      	movs	r2, #1
 8003012:	701a      	strb	r2, [r3, #0]
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003014:	217f      	movs	r1, #127	; 0x7f
 8003016:	4806      	ldr	r0, [pc, #24]	; (8003030 <startADC+0x30>)
 8003018:	f002 fb96 	bl	8005748 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC_raw, adc_Channels);
 800301c:	2203      	movs	r2, #3
 800301e:	4905      	ldr	r1, [pc, #20]	; (8003034 <startADC+0x34>)
 8003020:	4803      	ldr	r0, [pc, #12]	; (8003030 <startADC+0x30>)
 8003022:	f001 fc55 	bl	80048d0 <HAL_ADC_Start_DMA>
 8003026:	e000      	b.n	800302a <startADC+0x2a>
		return;
 8003028:	bf00      	nop
}
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000378 	.word	0x20000378
 8003030:	200001fc 	.word	0x200001fc
 8003034:	20000384 	.word	0x20000384

08003038 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 8003040:	4822      	ldr	r0, [pc, #136]	; (80030cc <HAL_ADC_ConvCpltCallback+0x94>)
 8003042:	f001 fcc9 	bl	80049d8 <HAL_ADC_Stop_DMA>

	uint32_t vref = __HAL_ADC_CALC_VREFANALOG_VOLTAGE(ADC_raw[2], ADC_RESOLUTION_12B);
 8003046:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <HAL_ADC_ConvCpltCallback+0x98>)
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	461a      	mov	r2, r3
 800304c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	4a1f      	ldr	r2, [pc, #124]	; (80030d4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8003056:	8892      	ldrh	r2, [r2, #4]
 8003058:	b292      	uxth	r2, r2
 800305a:	fbb3 f3f2 	udiv	r3, r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

	//solarmV = ADC_raw[0];
	superCapmV = ((uint32_t) ADC_raw[0] * vref * 2) / 4095UL;
 8003060:	4b1c      	ldr	r3, [pc, #112]	; (80030d4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	b29b      	uxth	r3, r3
 8003066:	461a      	mov	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	005a      	lsls	r2, r3, #1
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8003072:	fba3 1302 	umull	r1, r3, r3, r2
 8003076:	1ad2      	subs	r2, r2, r3
 8003078:	0852      	lsrs	r2, r2, #1
 800307a:	4413      	add	r3, r2
 800307c:	0adb      	lsrs	r3, r3, #11
 800307e:	4a17      	ldr	r2, [pc, #92]	; (80030dc <HAL_ADC_ConvCpltCallback+0xa4>)
 8003080:	6013      	str	r3, [r2, #0]

	//Temperature
	tempC = __HAL_ADC_CALC_TEMPERATURE(vref, ADC_raw[1], ADC_RESOLUTION_12B);
 8003082:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8003084:	885b      	ldrh	r3, [r3, #2]
 8003086:	b29b      	uxth	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	fb02 f303 	mul.w	r3, r2, r3
 8003090:	4a13      	ldr	r2, [pc, #76]	; (80030e0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	099b      	lsrs	r3, r3, #6
 8003098:	461a      	mov	r2, r3
 800309a:	4b12      	ldr	r3, [pc, #72]	; (80030e4 <HAL_ADC_ConvCpltCallback+0xac>)
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2264      	movs	r2, #100	; 0x64
 80030a2:	fb03 f202 	mul.w	r2, r3, r2
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <HAL_ADC_ConvCpltCallback+0xb0>)
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	4619      	mov	r1, r3
 80030ac:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <HAL_ADC_ConvCpltCallback+0xac>)
 80030ae:	881b      	ldrh	r3, [r3, #0]
 80030b0:	1acb      	subs	r3, r1, r3
 80030b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80030b6:	331e      	adds	r3, #30
 80030b8:	4a0c      	ldr	r2, [pc, #48]	; (80030ec <HAL_ADC_ConvCpltCallback+0xb4>)
 80030ba:	6013      	str	r3, [r2, #0]

	ADCrunning = false;
 80030bc:	4b0c      	ldr	r3, [pc, #48]	; (80030f0 <HAL_ADC_ConvCpltCallback+0xb8>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
}
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200001fc 	.word	0x200001fc
 80030d0:	1fff75aa 	.word	0x1fff75aa
 80030d4:	20000384 	.word	0x20000384
 80030d8:	00100101 	.word	0x00100101
 80030dc:	2000037c 	.word	0x2000037c
 80030e0:	057619f1 	.word	0x057619f1
 80030e4:	1fff75a8 	.word	0x1fff75a8
 80030e8:	1fff75ca 	.word	0x1fff75ca
 80030ec:	20000380 	.word	0x20000380
 80030f0:	20000378 	.word	0x20000378

080030f4 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc) {
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
	guiTimer++;
 80030fc:	4b07      	ldr	r3, [pc, #28]	; (800311c <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3301      	adds	r3, #1
 8003102:	4a06      	ldr	r2, [pc, #24]	; (800311c <HAL_RTCEx_WakeUpTimerEventCallback+0x28>)
 8003104:	6013      	str	r3, [r2, #0]
	GNSSlastPacketAge++;
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3301      	adds	r3, #1
 800310c:	4a04      	ldr	r2, [pc, #16]	; (8003120 <HAL_RTCEx_WakeUpTimerEventCallback+0x2c>)
 800310e:	6013      	str	r3, [r2, #0]
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	2000038c 	.word	0x2000038c
 8003120:	2000039c 	.word	0x2000039c

08003124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <HAL_MspInit+0x44>)
 800312c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312e:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <HAL_MspInit+0x44>)
 8003130:	f043 0301 	orr.w	r3, r3, #1
 8003134:	6613      	str	r3, [r2, #96]	; 0x60
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <HAL_MspInit+0x44>)
 8003138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	607b      	str	r3, [r7, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_MspInit+0x44>)
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	4a08      	ldr	r2, [pc, #32]	; (8003168 <HAL_MspInit+0x44>)
 8003148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314c:	6593      	str	r3, [r2, #88]	; 0x58
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_MspInit+0x44>)
 8003150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000

0800316c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b09e      	sub	sp, #120	; 0x78
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003174:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003184:	f107 0310 	add.w	r3, r7, #16
 8003188:	2254      	movs	r2, #84	; 0x54
 800318a:	2100      	movs	r1, #0
 800318c:	4618      	mov	r0, r3
 800318e:	f006 fd7b 	bl	8009c88 <memset>
  if(hadc->Instance==ADC1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a33      	ldr	r2, [pc, #204]	; (8003264 <HAL_ADC_MspInit+0xf8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d15f      	bne.n	800325c <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800319c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80031a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80031a2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80031a6:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031a8:	f107 0310 	add.w	r3, r7, #16
 80031ac:	4618      	mov	r0, r3
 80031ae:	f003 ff51 	bl	8007054 <HAL_RCCEx_PeriphCLKConfig>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80031b8:	f7fe fb1a 	bl	80017f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80031bc:	4b2a      	ldr	r3, [pc, #168]	; (8003268 <HAL_ADC_MspInit+0xfc>)
 80031be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c0:	4a29      	ldr	r2, [pc, #164]	; (8003268 <HAL_ADC_MspInit+0xfc>)
 80031c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031c8:	4b27      	ldr	r3, [pc, #156]	; (8003268 <HAL_ADC_MspInit+0xfc>)
 80031ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d4:	4b24      	ldr	r3, [pc, #144]	; (8003268 <HAL_ADC_MspInit+0xfc>)
 80031d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d8:	4a23      	ldr	r2, [pc, #140]	; (8003268 <HAL_ADC_MspInit+0xfc>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031e0:	4b21      	ldr	r3, [pc, #132]	; (8003268 <HAL_ADC_MspInit+0xfc>)
 80031e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	60bb      	str	r3, [r7, #8]
 80031ea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80031ec:	2302      	movs	r3, #2
 80031ee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80031f0:	230b      	movs	r3, #11
 80031f2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80031fc:	4619      	mov	r1, r3
 80031fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003202:	f002 fe89 	bl	8005f18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003206:	4b19      	ldr	r3, [pc, #100]	; (800326c <HAL_ADC_MspInit+0x100>)
 8003208:	4a19      	ldr	r2, [pc, #100]	; (8003270 <HAL_ADC_MspInit+0x104>)
 800320a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800320c:	4b17      	ldr	r3, [pc, #92]	; (800326c <HAL_ADC_MspInit+0x100>)
 800320e:	2200      	movs	r2, #0
 8003210:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003212:	4b16      	ldr	r3, [pc, #88]	; (800326c <HAL_ADC_MspInit+0x100>)
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003218:	4b14      	ldr	r3, [pc, #80]	; (800326c <HAL_ADC_MspInit+0x100>)
 800321a:	2200      	movs	r2, #0
 800321c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800321e:	4b13      	ldr	r3, [pc, #76]	; (800326c <HAL_ADC_MspInit+0x100>)
 8003220:	2280      	movs	r2, #128	; 0x80
 8003222:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003224:	4b11      	ldr	r3, [pc, #68]	; (800326c <HAL_ADC_MspInit+0x100>)
 8003226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800322a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800322c:	4b0f      	ldr	r3, [pc, #60]	; (800326c <HAL_ADC_MspInit+0x100>)
 800322e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003232:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003234:	4b0d      	ldr	r3, [pc, #52]	; (800326c <HAL_ADC_MspInit+0x100>)
 8003236:	2200      	movs	r2, #0
 8003238:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800323a:	4b0c      	ldr	r3, [pc, #48]	; (800326c <HAL_ADC_MspInit+0x100>)
 800323c:	2200      	movs	r2, #0
 800323e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003240:	480a      	ldr	r0, [pc, #40]	; (800326c <HAL_ADC_MspInit+0x100>)
 8003242:	f002 fbf3 	bl	8005a2c <HAL_DMA_Init>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 800324c:	f7fe fad0 	bl	80017f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a06      	ldr	r2, [pc, #24]	; (800326c <HAL_ADC_MspInit+0x100>)
 8003254:	64da      	str	r2, [r3, #76]	; 0x4c
 8003256:	4a05      	ldr	r2, [pc, #20]	; (800326c <HAL_ADC_MspInit+0x100>)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800325c:	bf00      	nop
 800325e:	3778      	adds	r7, #120	; 0x78
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	50040000 	.word	0x50040000
 8003268:	40021000 	.word	0x40021000
 800326c:	20000260 	.word	0x20000260
 8003270:	40020008 	.word	0x40020008

08003274 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b098      	sub	sp, #96	; 0x60
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800327c:	f107 030c 	add.w	r3, r7, #12
 8003280:	2254      	movs	r2, #84	; 0x54
 8003282:	2100      	movs	r1, #0
 8003284:	4618      	mov	r0, r3
 8003286:	f006 fcff 	bl	8009c88 <memset>
  if(hrtc->Instance==RTC)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a13      	ldr	r2, [pc, #76]	; (80032dc <HAL_RTC_MspInit+0x68>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d11f      	bne.n	80032d4 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003298:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800329a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800329e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032a0:	f107 030c 	add.w	r3, r7, #12
 80032a4:	4618      	mov	r0, r3
 80032a6:	f003 fed5 	bl	8007054 <HAL_RCCEx_PeriphCLKConfig>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d001      	beq.n	80032b4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80032b0:	f7fe fa9e 	bl	80017f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <HAL_RTC_MspInit+0x6c>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ba:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <HAL_RTC_MspInit+0x6c>)
 80032bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80032c4:	2200      	movs	r2, #0
 80032c6:	2100      	movs	r1, #0
 80032c8:	2003      	movs	r0, #3
 80032ca:	f002 fb78 	bl	80059be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80032ce:	2003      	movs	r0, #3
 80032d0:	f002 fb91 	bl	80059f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80032d4:	bf00      	nop
 80032d6:	3760      	adds	r7, #96	; 0x60
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40002800 	.word	0x40002800
 80032e0:	40021000 	.word	0x40021000

080032e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	; 0x28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ec:	f107 0314 	add.w	r3, r7, #20
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a30      	ldr	r2, [pc, #192]	; (80033c4 <HAL_SPI_MspInit+0xe0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d159      	bne.n	80033ba <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003306:	4b30      	ldr	r3, [pc, #192]	; (80033c8 <HAL_SPI_MspInit+0xe4>)
 8003308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330a:	4a2f      	ldr	r2, [pc, #188]	; (80033c8 <HAL_SPI_MspInit+0xe4>)
 800330c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003310:	6613      	str	r3, [r2, #96]	; 0x60
 8003312:	4b2d      	ldr	r3, [pc, #180]	; (80033c8 <HAL_SPI_MspInit+0xe4>)
 8003314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331e:	4b2a      	ldr	r3, [pc, #168]	; (80033c8 <HAL_SPI_MspInit+0xe4>)
 8003320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003322:	4a29      	ldr	r2, [pc, #164]	; (80033c8 <HAL_SPI_MspInit+0xe4>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800332a:	4b27      	ldr	r3, [pc, #156]	; (80033c8 <HAL_SPI_MspInit+0xe4>)
 800332c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003336:	23e0      	movs	r3, #224	; 0xe0
 8003338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333a:	2302      	movs	r3, #2
 800333c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003342:	2303      	movs	r3, #3
 8003344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003346:	2305      	movs	r3, #5
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334a:	f107 0314 	add.w	r3, r7, #20
 800334e:	4619      	mov	r1, r3
 8003350:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003354:	f002 fde0 	bl	8005f18 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8003358:	4b1c      	ldr	r3, [pc, #112]	; (80033cc <HAL_SPI_MspInit+0xe8>)
 800335a:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <HAL_SPI_MspInit+0xec>)
 800335c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 800335e:	4b1b      	ldr	r3, [pc, #108]	; (80033cc <HAL_SPI_MspInit+0xe8>)
 8003360:	2201      	movs	r2, #1
 8003362:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003364:	4b19      	ldr	r3, [pc, #100]	; (80033cc <HAL_SPI_MspInit+0xe8>)
 8003366:	2210      	movs	r2, #16
 8003368:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800336a:	4b18      	ldr	r3, [pc, #96]	; (80033cc <HAL_SPI_MspInit+0xe8>)
 800336c:	2200      	movs	r2, #0
 800336e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003370:	4b16      	ldr	r3, [pc, #88]	; (80033cc <HAL_SPI_MspInit+0xe8>)
 8003372:	2280      	movs	r2, #128	; 0x80
 8003374:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003376:	4b15      	ldr	r3, [pc, #84]	; (80033cc <HAL_SPI_MspInit+0xe8>)
 8003378:	2200      	movs	r2, #0
 800337a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800337c:	4b13      	ldr	r3, [pc, #76]	; (80033cc <HAL_SPI_MspInit+0xe8>)
 800337e:	2200      	movs	r2, #0
 8003380:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003382:	4b12      	ldr	r3, [pc, #72]	; (80033cc <HAL_SPI_MspInit+0xe8>)
 8003384:	2200      	movs	r2, #0
 8003386:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003388:	4b10      	ldr	r3, [pc, #64]	; (80033cc <HAL_SPI_MspInit+0xe8>)
 800338a:	2200      	movs	r2, #0
 800338c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800338e:	480f      	ldr	r0, [pc, #60]	; (80033cc <HAL_SPI_MspInit+0xe8>)
 8003390:	f002 fb4c 	bl	8005a2c <HAL_DMA_Init>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800339a:	f7fe fa29 	bl	80017f0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a0a      	ldr	r2, [pc, #40]	; (80033cc <HAL_SPI_MspInit+0xe8>)
 80033a2:	655a      	str	r2, [r3, #84]	; 0x54
 80033a4:	4a09      	ldr	r2, [pc, #36]	; (80033cc <HAL_SPI_MspInit+0xe8>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80033aa:	2200      	movs	r2, #0
 80033ac:	2100      	movs	r1, #0
 80033ae:	2023      	movs	r0, #35	; 0x23
 80033b0:	f002 fb05 	bl	80059be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80033b4:	2023      	movs	r0, #35	; 0x23
 80033b6:	f002 fb1e 	bl	80059f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033ba:	bf00      	nop
 80033bc:	3728      	adds	r7, #40	; 0x28
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop
 80033c4:	40013000 	.word	0x40013000
 80033c8:	40021000 	.word	0x40021000
 80033cc:	20000330 	.word	0x20000330
 80033d0:	40020030 	.word	0x40020030

080033d4 <LL_LPUART_IsActiveFlag_ORE>:
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d101      	bne.n	80033ec <LL_LPUART_IsActiveFlag_ORE+0x18>
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <LL_LPUART_IsActiveFlag_ORE+0x1a>
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	370c      	adds	r7, #12
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr

080033fa <LL_LPUART_IsActiveFlag_WKUP>:
{
 80033fa:	b480      	push	{r7}
 80033fc:	b083      	sub	sp, #12
 80033fe:	af00      	add	r7, sp, #0
 8003400:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_WUF) == (USART_ISR_WUF)) ? 1UL : 0UL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800340e:	d101      	bne.n	8003414 <LL_LPUART_IsActiveFlag_WKUP+0x1a>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <LL_LPUART_IsActiveFlag_WKUP+0x1c>
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <LL_LPUART_ClearFlag_ORE>:
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2208      	movs	r2, #8
 800342e:	621a      	str	r2, [r3, #32]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <LL_LPUART_ClearFlag_WKUP>:
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_WUCF);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800344a:	621a      	str	r2, [r3, #32]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <LL_LPUART_IsEnabledIT_WKUP>:
  * @rmtoll CR3          WUFIE         LL_LPUART_IsEnabledIT_WKUP
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_WKUP(const USART_TypeDef *LPUARTx)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR3, USART_CR3_WUFIE) == (USART_CR3_WUFIE)) ? 1UL : 0UL);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800346c:	d101      	bne.n	8003472 <LL_LPUART_IsEnabledIT_WKUP+0x1a>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <LL_LPUART_IsEnabledIT_WKUP+0x1c>
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003484:	e7fe      	b.n	8003484 <NMI_Handler+0x4>

08003486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003486:	b480      	push	{r7}
 8003488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800348a:	e7fe      	b.n	800348a <HardFault_Handler+0x4>

0800348c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003490:	e7fe      	b.n	8003490 <MemManage_Handler+0x4>

08003492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003496:	e7fe      	b.n	8003496 <BusFault_Handler+0x4>

08003498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800349c:	e7fe      	b.n	800349c <UsageFault_Handler+0x4>

0800349e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800349e:	b480      	push	{r7}
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034a2:	bf00      	nop
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ba:	b480      	push	{r7}
 80034bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034be:	bf00      	nop
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034cc:	f000 fe62 	bl	8004194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034d0:	bf00      	nop
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80034d8:	4803      	ldr	r0, [pc, #12]	; (80034e8 <RTC_WKUP_IRQHandler+0x14>)
 80034da:	f004 fc61 	bl	8007da0 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */
  lastWakeUpSource = WKUP_RTC;
 80034de:	4b03      	ldr	r3, [pc, #12]	; (80034ec <RTC_WKUP_IRQHandler+0x18>)
 80034e0:	2202      	movs	r2, #2
 80034e2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	200002a8 	.word	0x200002a8
 80034ec:	20000390 	.word	0x20000390

080034f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80034f4:	4802      	ldr	r0, [pc, #8]	; (8003500 <DMA1_Channel1_IRQHandler+0x10>)
 80034f6:	f002 fc30 	bl	8005d5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000260 	.word	0x20000260

08003504 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003508:	4802      	ldr	r0, [pc, #8]	; (8003514 <DMA1_Channel3_IRQHandler+0x10>)
 800350a:	f002 fc26 	bl	8005d5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000330 	.word	0x20000330

08003518 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800351c:	4802      	ldr	r0, [pc, #8]	; (8003528 <SPI1_IRQHandler+0x10>)
 800351e:	f004 ffab 	bl	8008478 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200002cc 	.word	0x200002cc

0800352c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  /* USER CODE BEGIN LPUART1_IRQn 1 */
	if (LL_LPUART_IsActiveFlag_WKUP(LPUART1) && LL_LPUART_IsEnabledIT_WKUP(LPUART1)) {
 8003530:	480f      	ldr	r0, [pc, #60]	; (8003570 <LPUART1_IRQHandler+0x44>)
 8003532:	f7ff ff62 	bl	80033fa <LL_LPUART_IsActiveFlag_WKUP>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00b      	beq.n	8003554 <LPUART1_IRQHandler+0x28>
 800353c:	480c      	ldr	r0, [pc, #48]	; (8003570 <LPUART1_IRQHandler+0x44>)
 800353e:	f7ff ff8b 	bl	8003458 <LL_LPUART_IsEnabledIT_WKUP>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <LPUART1_IRQHandler+0x28>
		LL_LPUART_ClearFlag_WKUP(LPUART1);
 8003548:	4809      	ldr	r0, [pc, #36]	; (8003570 <LPUART1_IRQHandler+0x44>)
 800354a:	f7ff ff77 	bl	800343c <LL_LPUART_ClearFlag_WKUP>
		lastWakeUpSource = WKUP_LPUART;
 800354e:	4b09      	ldr	r3, [pc, #36]	; (8003574 <LPUART1_IRQHandler+0x48>)
 8003550:	2201      	movs	r2, #1
 8003552:	701a      	strb	r2, [r3, #0]
	}
	if (LL_LPUART_IsActiveFlag_ORE(LPUART1)) { //If overrun has occured
 8003554:	4806      	ldr	r0, [pc, #24]	; (8003570 <LPUART1_IRQHandler+0x44>)
 8003556:	f7ff ff3d 	bl	80033d4 <LL_LPUART_IsActiveFlag_ORE>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d002      	beq.n	8003566 <LPUART1_IRQHandler+0x3a>
		LL_LPUART_ClearFlag_ORE(LPUART1);
 8003560:	4803      	ldr	r0, [pc, #12]	; (8003570 <LPUART1_IRQHandler+0x44>)
 8003562:	f7ff ff5e 	bl	8003422 <LL_LPUART_ClearFlag_ORE>
	}

	LPUART_CharReception_Callback();
 8003566:	f000 fd77 	bl	8004058 <LPUART_CharReception_Callback>
  /* USER CODE END LPUART1_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40008000 	.word	0x40008000
 8003574:	20000390 	.word	0x20000390

08003578 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return 1;
 800357c:	2301      	movs	r3, #1
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <_kill>:

int _kill(int pid, int sig)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003592:	f006 fb41 	bl	8009c18 <__errno>
 8003596:	4603      	mov	r3, r0
 8003598:	2216      	movs	r2, #22
 800359a:	601a      	str	r2, [r3, #0]
  return -1;
 800359c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <_exit>:

void _exit (int status)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035b0:	f04f 31ff 	mov.w	r1, #4294967295
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff ffe7 	bl	8003588 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035ba:	e7fe      	b.n	80035ba <_exit+0x12>

080035bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	e00a      	b.n	80035e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035ce:	f3af 8000 	nop.w
 80035d2:	4601      	mov	r1, r0
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	60ba      	str	r2, [r7, #8]
 80035da:	b2ca      	uxtb	r2, r1
 80035dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	3301      	adds	r3, #1
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	dbf0      	blt.n	80035ce <_read+0x12>
  }

  return len;
 80035ec:	687b      	ldr	r3, [r7, #4]
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e009      	b.n	800361c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	60ba      	str	r2, [r7, #8]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	3301      	adds	r3, #1
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	429a      	cmp	r2, r3
 8003622:	dbf1      	blt.n	8003608 <_write+0x12>
  }
  return len;
 8003624:	687b      	ldr	r3, [r7, #4]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <_close>:

int _close(int file)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003636:	f04f 33ff 	mov.w	r3, #4294967295
}
 800363a:	4618      	mov	r0, r3
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003656:	605a      	str	r2, [r3, #4]
  return 0;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <_isatty>:

int _isatty(int file)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800366e:	2301      	movs	r3, #1
}
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036a0:	4a14      	ldr	r2, [pc, #80]	; (80036f4 <_sbrk+0x5c>)
 80036a2:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <_sbrk+0x60>)
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036ac:	4b13      	ldr	r3, [pc, #76]	; (80036fc <_sbrk+0x64>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <_sbrk+0x64>)
 80036b6:	4a12      	ldr	r2, [pc, #72]	; (8003700 <_sbrk+0x68>)
 80036b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036ba:	4b10      	ldr	r3, [pc, #64]	; (80036fc <_sbrk+0x64>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d207      	bcs.n	80036d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036c8:	f006 faa6 	bl	8009c18 <__errno>
 80036cc:	4603      	mov	r3, r0
 80036ce:	220c      	movs	r2, #12
 80036d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295
 80036d6:	e009      	b.n	80036ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036d8:	4b08      	ldr	r3, [pc, #32]	; (80036fc <_sbrk+0x64>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036de:	4b07      	ldr	r3, [pc, #28]	; (80036fc <_sbrk+0x64>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4413      	add	r3, r2
 80036e6:	4a05      	ldr	r2, [pc, #20]	; (80036fc <_sbrk+0x64>)
 80036e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036ea:	68fb      	ldr	r3, [r7, #12]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20010000 	.word	0x20010000
 80036f8:	00000400 	.word	0x00000400
 80036fc:	20000394 	.word	0x20000394
 8003700:	20000da0 	.word	0x20000da0

08003704 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003708:	4b06      	ldr	r3, [pc, #24]	; (8003724 <SystemInit+0x20>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	4a05      	ldr	r2, [pc, #20]	; (8003724 <SystemInit+0x20>)
 8003710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003760 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800372c:	f7ff ffea 	bl	8003704 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */

  ldr r0, =_sdata
 8003730:	480c      	ldr	r0, [pc, #48]	; (8003764 <LoopForever+0x6>)
  ldr r1, =_edata
 8003732:	490d      	ldr	r1, [pc, #52]	; (8003768 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003734:	4a0d      	ldr	r2, [pc, #52]	; (800376c <LoopForever+0xe>)
  movs r3, #0
 8003736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003738:	e002      	b.n	8003740 <LoopCopyDataInit>

0800373a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800373a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800373c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800373e:	3304      	adds	r3, #4

08003740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003744:	d3f9      	bcc.n	800373a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003746:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003748:	4c0a      	ldr	r4, [pc, #40]	; (8003774 <LoopForever+0x16>)
  movs r3, #0
 800374a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800374c:	e001      	b.n	8003752 <LoopFillZerobss>

0800374e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800374e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003750:	3204      	adds	r2, #4

08003752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003754:	d3fb      	bcc.n	800374e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003756:	f006 fa65 	bl	8009c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800375a:	f7fd fd27 	bl	80011ac <main>

0800375e <LoopForever>:

LoopForever:
    b LoopForever
 800375e:	e7fe      	b.n	800375e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003760:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003768:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800376c:	0800d37c 	.word	0x0800d37c
  ldr r2, =_sbss
 8003770:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003774:	20000d9c 	.word	0x20000d9c

08003778 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003778:	e7fe      	b.n	8003778 <ADC1_IRQHandler>

0800377a <LL_LPUART_IsEnabled>:
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <LL_LPUART_IsEnabled+0x18>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <LL_LPUART_IsEnabled+0x1a>
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <LL_LPUART_EnableInStopMode>:
{
 80037a0:	b480      	push	{r7}
 80037a2:	b089      	sub	sp, #36	; 0x24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_UESM);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f043 0302 	orr.w	r3, r3, #2
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	61ba      	str	r2, [r7, #24]
 80037c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c4:	6979      	ldr	r1, [r7, #20]
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	e841 2300 	strex	r3, r2, [r1]
 80037cc:	613b      	str	r3, [r7, #16]
   return(result);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1e9      	bne.n	80037a8 <LL_LPUART_EnableInStopMode+0x8>
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
 80037d8:	3724      	adds	r7, #36	; 0x24
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <LL_LPUART_IsActiveFlag_RXNE>:
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69db      	ldr	r3, [r3, #28]
 80037ee:	f003 0320 	and.w	r3, r3, #32
 80037f2:	2b20      	cmp	r3, #32
 80037f4:	d101      	bne.n	80037fa <LL_LPUART_IsActiveFlag_RXNE+0x18>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <LL_LPUART_IsActiveFlag_RXNE+0x1a>
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	370c      	adds	r7, #12
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <LL_LPUART_IsActiveFlag_TC>:
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003818:	2b40      	cmp	r3, #64	; 0x40
 800381a:	d101      	bne.n	8003820 <LL_LPUART_IsActiveFlag_TC+0x18>
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <LL_LPUART_IsActiveFlag_TC+0x1a>
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <LL_LPUART_IsActiveFlag_TXE>:
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383e:	2b80      	cmp	r3, #128	; 0x80
 8003840:	d101      	bne.n	8003846 <LL_LPUART_IsActiveFlag_TXE+0x18>
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <LL_LPUART_IsActiveFlag_TXE+0x1a>
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <LL_LPUART_IsActiveFlag_REACK>:
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003868:	d101      	bne.n	800386e <LL_LPUART_IsActiveFlag_REACK+0x1a>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <LL_LPUART_IsActiveFlag_REACK+0x1c>
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <LL_LPUART_ClearFlag_ORE>:
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2208      	movs	r2, #8
 8003888:	621a      	str	r2, [r3, #32]
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <LL_LPUART_ClearFlag_WKUP>:
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_WUCF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80038a4:	621a      	str	r2, [r3, #32]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <LL_LPUART_EnableIT_WKUP>:
{
 80038b2:	b480      	push	{r7}
 80038b4:	b089      	sub	sp, #36	; 0x24
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_WUFIE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3308      	adds	r3, #8
 80038be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	e853 3f00 	ldrex	r3, [r3]
 80038c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038ce:	61fb      	str	r3, [r7, #28]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3308      	adds	r3, #8
 80038d4:	69fa      	ldr	r2, [r7, #28]
 80038d6:	61ba      	str	r2, [r7, #24]
 80038d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	6979      	ldr	r1, [r7, #20]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	613b      	str	r3, [r7, #16]
   return(result);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e7      	bne.n	80038ba <LL_LPUART_EnableIT_WKUP+0x8>
}
 80038ea:	bf00      	nop
 80038ec:	bf00      	nop
 80038ee:	3724      	adds	r7, #36	; 0x24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <LL_LPUART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_LPUART_ReceiveData8
  * @param  LPUARTx LPUART Instance
  * @retval Time Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_LPUART_ReceiveData8(const USART_TypeDef *LPUARTx)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003904:	b29b      	uxth	r3, r3
 8003906:	b2db      	uxtb	r3, r3
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <LL_LPUART_TransmitData8>:
  * @param  LPUARTx LPUART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_TransmitData8(USART_TypeDef *LPUARTx, uint8_t Value)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	70fb      	strb	r3, [r7, #3]
  LPUARTx->TDR = Value;
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	b29a      	uxth	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <GNSS_getYear>:
static void GNSS_Set_Power(enum GNSS_rate);
static void LPUART_Transmit(uint8_t *pData, uint16_t Size, uint32_t Timeout);

//Functions
//Time
uint16_t GNSS_getYear() {
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.year;
 8003938:	4b03      	ldr	r3, [pc, #12]	; (8003948 <GNSS_getYear+0x14>)
 800393a:	889b      	ldrh	r3, [r3, #4]
}
 800393c:	4618      	mov	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	2000040c 	.word	0x2000040c

0800394c <GNSS_getMonth>:
uint8_t GNSS_getMonth() {
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.month;
 8003950:	4b03      	ldr	r3, [pc, #12]	; (8003960 <GNSS_getMonth+0x14>)
 8003952:	799b      	ldrb	r3, [r3, #6]
}
 8003954:	4618      	mov	r0, r3
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	2000040c 	.word	0x2000040c

08003964 <GNSS_getDay>:
uint8_t GNSS_getDay() {
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.day;
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <GNSS_getDay+0x14>)
 800396a:	79db      	ldrb	r3, [r3, #7]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	2000040c 	.word	0x2000040c

0800397c <GNSS_getHour>:
uint8_t GNSS_getHour() {
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.hour;
 8003980:	4b03      	ldr	r3, [pc, #12]	; (8003990 <GNSS_getHour+0x14>)
 8003982:	7a1b      	ldrb	r3, [r3, #8]
}
 8003984:	4618      	mov	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	2000040c 	.word	0x2000040c

08003994 <GNSS_getMin>:
uint8_t GNSS_getMin() {
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.min;
 8003998:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <GNSS_getMin+0x14>)
 800399a:	7a5b      	ldrb	r3, [r3, #9]
}
 800399c:	4618      	mov	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	2000040c 	.word	0x2000040c

080039ac <GNSS_getSec>:
uint8_t GNSS_getSec() {
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.sec;
 80039b0:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <GNSS_getSec+0x14>)
 80039b2:	7a9b      	ldrb	r3, [r3, #10]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	2000040c 	.word	0x2000040c
 80039c4:	00000000 	.word	0x00000000

080039c8 <getLat>:

//Location
float getLat() {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
	return ((float) ubx_nav_pvt.lat_deg) * 1e-7;
 80039cc:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <getLat+0x48>)
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	ee07 3a90 	vmov	s15, r3
 80039d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039d8:	ee17 0a90 	vmov	r0, s15
 80039dc:	f7fc fdb4 	bl	8000548 <__aeabi_f2d>
 80039e0:	a309      	add	r3, pc, #36	; (adr r3, 8003a08 <getLat+0x40>)
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	f7fc fe07 	bl	80005f8 <__aeabi_dmul>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4610      	mov	r0, r2
 80039f0:	4619      	mov	r1, r3
 80039f2:	f7fd f8d9 	bl	8000ba8 <__aeabi_d2f>
 80039f6:	4603      	mov	r3, r0
 80039f8:	ee07 3a90 	vmov	s15, r3
}
 80039fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	f3af 8000 	nop.w
 8003a08:	9abcaf48 	.word	0x9abcaf48
 8003a0c:	3e7ad7f2 	.word	0x3e7ad7f2
 8003a10:	2000040c 	.word	0x2000040c
 8003a14:	00000000 	.word	0x00000000

08003a18 <getLong>:

float getLong() {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
	return ((float) ubx_nav_pvt.lon_deg) * 1e-7;
 8003a1c:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <getLong+0x48>)
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	ee07 3a90 	vmov	s15, r3
 8003a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a28:	ee17 0a90 	vmov	r0, s15
 8003a2c:	f7fc fd8c 	bl	8000548 <__aeabi_f2d>
 8003a30:	a309      	add	r3, pc, #36	; (adr r3, 8003a58 <getLong+0x40>)
 8003a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a36:	f7fc fddf 	bl	80005f8 <__aeabi_dmul>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4610      	mov	r0, r2
 8003a40:	4619      	mov	r1, r3
 8003a42:	f7fd f8b1 	bl	8000ba8 <__aeabi_d2f>
 8003a46:	4603      	mov	r3, r0
 8003a48:	ee07 3a90 	vmov	s15, r3
}
 8003a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	f3af 8000 	nop.w
 8003a58:	9abcaf48 	.word	0x9abcaf48
 8003a5c:	3e7ad7f2 	.word	0x3e7ad7f2
 8003a60:	2000040c 	.word	0x2000040c
 8003a64:	00000000 	.word	0x00000000

08003a68 <getHAcc>:

float getHAcc() {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
	return (float)ubx_nav_pvt.hacc * 1e-3;
 8003a6c:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <getHAcc+0x48>)
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	ee07 3a90 	vmov	s15, r3
 8003a74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a78:	ee17 0a90 	vmov	r0, s15
 8003a7c:	f7fc fd64 	bl	8000548 <__aeabi_f2d>
 8003a80:	a309      	add	r3, pc, #36	; (adr r3, 8003aa8 <getHAcc+0x40>)
 8003a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a86:	f7fc fdb7 	bl	80005f8 <__aeabi_dmul>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4610      	mov	r0, r2
 8003a90:	4619      	mov	r1, r3
 8003a92:	f7fd f889 	bl	8000ba8 <__aeabi_d2f>
 8003a96:	4603      	mov	r3, r0
 8003a98:	ee07 3a90 	vmov	s15, r3
}
 8003a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	f3af 8000 	nop.w
 8003aa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8003aac:	3f50624d 	.word	0x3f50624d
 8003ab0:	2000040c 	.word	0x2000040c

08003ab4 <getGroundSpeed_kph>:

uint8_t getGroundSpeed_kph() {
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
	uint32_t returnSpeed = ((ubx_nav_pvt.gspeed / 1000) * 3600) / 1000; // km/h
 8003aba:	4b10      	ldr	r3, [pc, #64]	; (8003afc <getGroundSpeed_kph+0x48>)
 8003abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abe:	4a10      	ldr	r2, [pc, #64]	; (8003b00 <getGroundSpeed_kph+0x4c>)
 8003ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8003ac4:	1192      	asrs	r2, r2, #6
 8003ac6:	17db      	asrs	r3, r3, #31
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8003ace:	fb02 f303 	mul.w	r3, r2, r3
 8003ad2:	4a0b      	ldr	r2, [pc, #44]	; (8003b00 <getGroundSpeed_kph+0x4c>)
 8003ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8003ad8:	1192      	asrs	r2, r2, #6
 8003ada:	17db      	asrs	r3, r3, #31
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	607b      	str	r3, [r7, #4]
	if (returnSpeed > 255) {
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2bff      	cmp	r3, #255	; 0xff
 8003ae4:	d901      	bls.n	8003aea <getGroundSpeed_kph+0x36>
		return (uint8_t) 255;
 8003ae6:	23ff      	movs	r3, #255	; 0xff
 8003ae8:	e001      	b.n	8003aee <getGroundSpeed_kph+0x3a>
	}
	return (uint8_t) (returnSpeed);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	b2db      	uxtb	r3, r3
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	2000040c 	.word	0x2000040c
 8003b00:	10624dd3 	.word	0x10624dd3

08003b04 <getMotionHeading_deg>:
uint8_t getMotionHeading_deg() {
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
	return (uint8_t) (ubx_nav_pvt.headmot / 10000UL);
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <getMotionHeading_deg+0x20>)
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <getMotionHeading_deg+0x24>)
 8003b10:	fba3 2302 	umull	r2, r3, r3, r2
 8003b14:	0b5b      	lsrs	r3, r3, #13
 8003b16:	b2db      	uxtb	r3, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	2000040c 	.word	0x2000040c
 8003b28:	d1b71759 	.word	0xd1b71759

08003b2c <getNumSatellites>:

//Status
uint8_t getNumSatellites() {
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.numsv;
 8003b30:	4b03      	ldr	r3, [pc, #12]	; (8003b40 <getNumSatellites+0x14>)
 8003b32:	7ddb      	ldrb	r3, [r3, #23]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	2000040c 	.word	0x2000040c

08003b44 <getFixType>:

enum GNSS_FixType getFixType() {
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
	return (enum GNSS_FixType) ubx_nav_pvt.fix;
 8003b48:	4b03      	ldr	r3, [pc, #12]	; (8003b58 <getFixType+0x14>)
 8003b4a:	7d1b      	ldrb	r3, [r3, #20]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	2000040c 	.word	0x2000040c

08003b5c <isTimeFullyResolved>:

bool isGnssFixOk() {
	return ubx_nav_pvt.flags & gnssFixOKmask;
}

bool isTimeFullyResolved() {
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
	return ubx_nav_pvt.valid & timeFullyResolved;
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <isTimeFullyResolved+0x20>)
 8003b62:	7adb      	ldrb	r3, [r3, #11]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	bf14      	ite	ne
 8003b6c:	2301      	movne	r3, #1
 8003b6e:	2300      	moveq	r3, #0
 8003b70:	b2db      	uxtb	r3, r3
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	2000040c 	.word	0x2000040c

08003b80 <GNSS_Prep_Stop>:

void GNSS_Prep_Stop() {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
	if (!LL_LPUART_IsEnabled(LPUART1)){
 8003b84:	4814      	ldr	r0, [pc, #80]	; (8003bd8 <GNSS_Prep_Stop+0x58>)
 8003b86:	f7ff fdf8 	bl	800377a <LL_LPUART_IsEnabled>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d021      	beq.n	8003bd4 <GNSS_Prep_Stop+0x54>
		return;
	}
	while (LL_LPUART_IsActiveFlag_RXNE(LPUART1)) { //Empty RX buffer
 8003b90:	e006      	b.n	8003ba0 <GNSS_Prep_Stop+0x20>
		parse(LL_LPUART_ReceiveData8(LPUART1));
 8003b92:	4811      	ldr	r0, [pc, #68]	; (8003bd8 <GNSS_Prep_Stop+0x58>)
 8003b94:	f7ff feb0 	bl	80038f8 <LL_LPUART_ReceiveData8>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 f920 	bl	8003de0 <parse>
	while (LL_LPUART_IsActiveFlag_RXNE(LPUART1)) { //Empty RX buffer
 8003ba0:	480d      	ldr	r0, [pc, #52]	; (8003bd8 <GNSS_Prep_Stop+0x58>)
 8003ba2:	f7ff fe1e 	bl	80037e2 <LL_LPUART_IsActiveFlag_RXNE>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1f2      	bne.n	8003b92 <GNSS_Prep_Stop+0x12>
	}
	LL_LPUART_ClearFlag_ORE(LPUART1);
 8003bac:	480a      	ldr	r0, [pc, #40]	; (8003bd8 <GNSS_Prep_Stop+0x58>)
 8003bae:	f7ff fe65 	bl	800387c <LL_LPUART_ClearFlag_ORE>
	/* Make sure that LPUART is ready to receive */
	while (LL_LPUART_IsActiveFlag_REACK(LPUART1) == 0) {
 8003bb2:	bf00      	nop
 8003bb4:	4808      	ldr	r0, [pc, #32]	; (8003bd8 <GNSS_Prep_Stop+0x58>)
 8003bb6:	f7ff fe4d 	bl	8003854 <LL_LPUART_IsActiveFlag_REACK>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f9      	beq.n	8003bb4 <GNSS_Prep_Stop+0x34>
	}
	LL_LPUART_ClearFlag_WKUP(LPUART1);
 8003bc0:	4805      	ldr	r0, [pc, #20]	; (8003bd8 <GNSS_Prep_Stop+0x58>)
 8003bc2:	f7ff fe68 	bl	8003896 <LL_LPUART_ClearFlag_WKUP>
	LL_LPUART_EnableIT_WKUP(LPUART1);
 8003bc6:	4804      	ldr	r0, [pc, #16]	; (8003bd8 <GNSS_Prep_Stop+0x58>)
 8003bc8:	f7ff fe73 	bl	80038b2 <LL_LPUART_EnableIT_WKUP>
	LL_LPUART_EnableInStopMode(LPUART1);
 8003bcc:	4802      	ldr	r0, [pc, #8]	; (8003bd8 <GNSS_Prep_Stop+0x58>)
 8003bce:	f7ff fde7 	bl	80037a0 <LL_LPUART_EnableInStopMode>
 8003bd2:	e000      	b.n	8003bd6 <GNSS_Prep_Stop+0x56>
		return;
 8003bd4:	bf00      	nop
}
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40008000 	.word	0x40008000

08003bdc <GNSS_Power>:

void GNSS_Power() {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
	switch (GNSSlastRate) {
 8003be0:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <GNSS_Power+0x78>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d014      	beq.n	8003c14 <GNSS_Power+0x38>
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	dc30      	bgt.n	8003c50 <GNSS_Power+0x74>
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d002      	beq.n	8003bf8 <GNSS_Power+0x1c>
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d004      	beq.n	8003c00 <GNSS_Power+0x24>
		if (superCapmV < mV_GNSS_OFF) {
			GNSS_Set_Power(GNSS_STOP);
		}
		break;
	}
}
 8003bf6:	e02b      	b.n	8003c50 <GNSS_Power+0x74>
		GNSS_Set_Power(GNSS_STOP);
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	f000 f831 	bl	8003c60 <GNSS_Set_Power>
		break;
 8003bfe:	e027      	b.n	8003c50 <GNSS_Power+0x74>
		if (superCapmV >= mV_GNSS_ON) {
 8003c00:	4b15      	ldr	r3, [pc, #84]	; (8003c58 <GNSS_Power+0x7c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f640 5247 	movw	r2, #3399	; 0xd47
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d91e      	bls.n	8003c4a <GNSS_Power+0x6e>
			GNSS_Set_Power(GNSS_ON);
 8003c0c:	2002      	movs	r0, #2
 8003c0e:	f000 f827 	bl	8003c60 <GNSS_Set_Power>
		break;
 8003c12:	e01a      	b.n	8003c4a <GNSS_Power+0x6e>
		if ((superCapmV < (mV_GNSS_ON - 150)) && (getFixType() >= FIX_3D) && (GNSSlastPacketAge < 2)) {
 8003c14:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <GNSS_Power+0x7c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f640 42b1 	movw	r2, #3249	; 0xcb1
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d80b      	bhi.n	8003c38 <GNSS_Power+0x5c>
 8003c20:	f7ff ff90 	bl	8003b44 <getFixType>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d906      	bls.n	8003c38 <GNSS_Power+0x5c>
 8003c2a:	4b0c      	ldr	r3, [pc, #48]	; (8003c5c <GNSS_Power+0x80>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d802      	bhi.n	8003c38 <GNSS_Power+0x5c>
			GNSS_Set_Power(GNSS_STOP);
 8003c32:	2001      	movs	r0, #1
 8003c34:	f000 f814 	bl	8003c60 <GNSS_Set_Power>
		if (superCapmV < mV_GNSS_OFF) {
 8003c38:	4b07      	ldr	r3, [pc, #28]	; (8003c58 <GNSS_Power+0x7c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8003c40:	d205      	bcs.n	8003c4e <GNSS_Power+0x72>
			GNSS_Set_Power(GNSS_STOP);
 8003c42:	2001      	movs	r0, #1
 8003c44:	f000 f80c 	bl	8003c60 <GNSS_Set_Power>
		break;
 8003c48:	e001      	b.n	8003c4e <GNSS_Power+0x72>
		break;
 8003c4a:	bf00      	nop
 8003c4c:	e000      	b.n	8003c50 <GNSS_Power+0x74>
		break;
 8003c4e:	bf00      	nop
}
 8003c50:	bf00      	nop
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	20000398 	.word	0x20000398
 8003c58:	2000037c 	.word	0x2000037c
 8003c5c:	2000039c 	.word	0x2000039c

08003c60 <GNSS_Set_Power>:

static void GNSS_Set_Power(enum GNSS_rate newRate) {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	71fb      	strb	r3, [r7, #7]
	if (newRate == GNSSlastRate) {
 8003c6a:	4b10      	ldr	r3, [pc, #64]	; (8003cac <GNSS_Set_Power+0x4c>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	79fa      	ldrb	r2, [r7, #7]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d015      	beq.n	8003ca2 <GNSS_Set_Power+0x42>
		return;
	}
	if (newRate == GNSS_ON) {
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d107      	bne.n	8003c8c <GNSS_Set_Power+0x2c>
		//Run
		USER_LPUART1_UART_Init();
 8003c7c:	f7fd fd92 	bl	80017a4 <USER_LPUART1_UART_Init>
		GNSS_Config();
 8003c80:	f000 f818 	bl	8003cb4 <GNSS_Config>
		GNSSlastRate = GNSS_ON;
 8003c84:	4b09      	ldr	r3, [pc, #36]	; (8003cac <GNSS_Set_Power+0x4c>)
 8003c86:	2202      	movs	r2, #2
 8003c88:	701a      	strb	r2, [r3, #0]
 8003c8a:	e00b      	b.n	8003ca4 <GNSS_Set_Power+0x44>
	} else {
		//Assume GNSS_STOP
		GNSSAlive = false;
 8003c8c:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <GNSS_Set_Power+0x50>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
		GNSS_Sleep();
 8003c92:	f000 f861 	bl	8003d58 <GNSS_Sleep>
		USER_LPUART1_UART_DeInit();
 8003c96:	f7fd fd8b 	bl	80017b0 <USER_LPUART1_UART_DeInit>
		GNSSlastRate = GNSS_STOP;
 8003c9a:	4b04      	ldr	r3, [pc, #16]	; (8003cac <GNSS_Set_Power+0x4c>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	701a      	strb	r2, [r3, #0]
 8003ca0:	e000      	b.n	8003ca4 <GNSS_Set_Power+0x44>
		return;
 8003ca2:	bf00      	nop
	}
}
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000398 	.word	0x20000398
 8003cb0:	200003a0 	.word	0x200003a0

08003cb4 <GNSS_Config>:

void GNSS_Config() {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
	//Wakeup
	HAL_GPIO_WritePin(GNSS_EXT_GPIO_Port, GNSS_EXT_Pin, GPIO_PIN_SET);
 8003cb8:	2201      	movs	r2, #1
 8003cba:	2110      	movs	r1, #16
 8003cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cc0:	f002 fa94 	bl	80061ec <HAL_GPIO_WritePin>
	LPUART_Transmit((uint8_t*) 0xff, 1, HAL_MAX_DELAY);
 8003cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc8:	2101      	movs	r1, #1
 8003cca:	20ff      	movs	r0, #255	; 0xff
 8003ccc:	f000 f9da 	bl	8004084 <LPUART_Transmit>
	HAL_Delay(500);
 8003cd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003cd4:	f7fd fd42 	bl	800175c <HAL_Delay>

	//Turn off a bunch of stuff
	LPUART_Transmit((uint8_t*) &UBX_NAV_GGA_OFF, sizeof(UBX_NAV_GGA_OFF), HAL_MAX_DELAY);
 8003cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cdc:	2110      	movs	r1, #16
 8003cde:	4817      	ldr	r0, [pc, #92]	; (8003d3c <GNSS_Config+0x88>)
 8003ce0:	f000 f9d0 	bl	8004084 <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_GLL_OFF, sizeof(UBX_NAV_GLL_OFF), HAL_MAX_DELAY);
 8003ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce8:	2110      	movs	r1, #16
 8003cea:	4815      	ldr	r0, [pc, #84]	; (8003d40 <GNSS_Config+0x8c>)
 8003cec:	f000 f9ca 	bl	8004084 <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_GSA_OFF, sizeof(UBX_NAV_GSA_OFF), HAL_MAX_DELAY);
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf4:	2110      	movs	r1, #16
 8003cf6:	4813      	ldr	r0, [pc, #76]	; (8003d44 <GNSS_Config+0x90>)
 8003cf8:	f000 f9c4 	bl	8004084 <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_GSV_OFF, sizeof(UBX_NAV_GSV_OFF), HAL_MAX_DELAY);
 8003cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8003d00:	2110      	movs	r1, #16
 8003d02:	4811      	ldr	r0, [pc, #68]	; (8003d48 <GNSS_Config+0x94>)
 8003d04:	f000 f9be 	bl	8004084 <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_GSV_OFF, sizeof(UBX_NAV_GSV_OFF), HAL_MAX_DELAY);
 8003d08:	f04f 32ff 	mov.w	r2, #4294967295
 8003d0c:	2110      	movs	r1, #16
 8003d0e:	480e      	ldr	r0, [pc, #56]	; (8003d48 <GNSS_Config+0x94>)
 8003d10:	f000 f9b8 	bl	8004084 <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_RMC_OFF, sizeof(UBX_NAV_RMC_OFF), HAL_MAX_DELAY);
 8003d14:	f04f 32ff 	mov.w	r2, #4294967295
 8003d18:	2110      	movs	r1, #16
 8003d1a:	480c      	ldr	r0, [pc, #48]	; (8003d4c <GNSS_Config+0x98>)
 8003d1c:	f000 f9b2 	bl	8004084 <LPUART_Transmit>
	LPUART_Transmit((uint8_t*) &UBX_NAV_VTG_OFF, sizeof(UBX_NAV_VTG_OFF), HAL_MAX_DELAY);
 8003d20:	f04f 32ff 	mov.w	r2, #4294967295
 8003d24:	2110      	movs	r1, #16
 8003d26:	480a      	ldr	r0, [pc, #40]	; (8003d50 <GNSS_Config+0x9c>)
 8003d28:	f000 f9ac 	bl	8004084 <LPUART_Transmit>
	//Enable PVT message
	LPUART_Transmit((uint8_t*) &UBX_NAV_PVT_ON, sizeof(UBX_NAV_PVT_ON), HAL_MAX_DELAY);
 8003d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d30:	2110      	movs	r1, #16
 8003d32:	4808      	ldr	r0, [pc, #32]	; (8003d54 <GNSS_Config+0xa0>)
 8003d34:	f000 f9a6 	bl	8004084 <LPUART_Transmit>
}
 8003d38:	bf00      	nop
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	0800cf20 	.word	0x0800cf20
 8003d40:	0800cf30 	.word	0x0800cf30
 8003d44:	0800cf40 	.word	0x0800cf40
 8003d48:	0800cf50 	.word	0x0800cf50
 8003d4c:	0800cf60 	.word	0x0800cf60
 8003d50:	0800cf70 	.word	0x0800cf70
 8003d54:	0800cf80 	.word	0x0800cf80

08003d58 <GNSS_Sleep>:

void GNSS_Sleep() {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GNSS_EXT_GPIO_Port, GNSS_EXT_Pin, GPIO_PIN_RESET);
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2110      	movs	r1, #16
 8003d60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d64:	f002 fa42 	bl	80061ec <HAL_GPIO_WritePin>
}
 8003d68:	bf00      	nop
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <Checksum>:

//Parsing
uint16_t Checksum(volatile uint8_t *data, uint16_t len) {
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	807b      	strh	r3, [r7, #2]
	if (!data) {
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <Checksum+0x16>
		return 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e025      	b.n	8003dce <Checksum+0x62>
	}
	uint8_t checksum_buffer[2] = { 0, 0 };
 8003d82:	2300      	movs	r3, #0
 8003d84:	813b      	strh	r3, [r7, #8]
	for (unsigned int i = 0; i < len; i++) {
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	e010      	b.n	8003dae <Checksum+0x42>
		checksum_buffer[0] += data[i];
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4413      	add	r3, r2
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	7a3b      	ldrb	r3, [r7, #8]
 8003d98:	4413      	add	r3, r2
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	723b      	strb	r3, [r7, #8]
		checksum_buffer[1] += checksum_buffer[0];
 8003d9e:	7a7a      	ldrb	r2, [r7, #9]
 8003da0:	7a3b      	ldrb	r3, [r7, #8]
 8003da2:	4413      	add	r3, r2
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	727b      	strb	r3, [r7, #9]
	for (unsigned int i = 0; i < len; i++) {
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3301      	adds	r3, #1
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	887b      	ldrh	r3, [r7, #2]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d3ea      	bcc.n	8003d8c <Checksum+0x20>
	}
	return ((uint16_t) checksum_buffer_[1]) << 8 | checksum_buffer_[0];
 8003db6:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <Checksum+0x70>)
 8003db8:	785b      	ldrb	r3, [r3, #1]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	b21a      	sxth	r2, r3
 8003dc0:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <Checksum+0x70>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	b21b      	sxth	r3, r3
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	b21b      	sxth	r3, r3
 8003dcc:	b29b      	uxth	r3, r3
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	200003a8 	.word	0x200003a8

08003de0 <parse>:

void parse(uint8_t byte_read) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	71fb      	strb	r3, [r7, #7]
	/* Identify the packet header */
	if (parser_pos_ < 2) {
 8003dea:	4b91      	ldr	r3, [pc, #580]	; (8004030 <parse+0x250>)
 8003dec:	881b      	ldrh	r3, [r3, #0]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d814      	bhi.n	8003e1e <parse+0x3e>
		if (byte_read == UBX_HEADER_[parser_pos_]) {
 8003df4:	4b8e      	ldr	r3, [pc, #568]	; (8004030 <parse+0x250>)
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4b8d      	ldr	r3, [pc, #564]	; (8004034 <parse+0x254>)
 8003dfe:	5c9b      	ldrb	r3, [r3, r2]
 8003e00:	79fa      	ldrb	r2, [r7, #7]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d107      	bne.n	8003e16 <parse+0x36>
			parser_pos_++;
 8003e06:	4b8a      	ldr	r3, [pc, #552]	; (8004030 <parse+0x250>)
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	4b87      	ldr	r3, [pc, #540]	; (8004030 <parse+0x250>)
 8003e12:	801a      	strh	r2, [r3, #0]
 8003e14:	e108      	b.n	8004028 <parse+0x248>
		} else {
			parser_pos_ = 0;
 8003e16:	4b86      	ldr	r3, [pc, #536]	; (8004030 <parse+0x250>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	801a      	strh	r2, [r3, #0]
 8003e1c:	e104      	b.n	8004028 <parse+0x248>
		}
		/* Message class */
	} else if (parser_pos_ == 2) {
 8003e1e:	4b84      	ldr	r3, [pc, #528]	; (8004030 <parse+0x250>)
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d116      	bne.n	8003e56 <parse+0x76>
		if (byte_read == UBX_NAV_CLASS_) {
 8003e28:	2201      	movs	r2, #1
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d10e      	bne.n	8003e4e <parse+0x6e>
			pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003e30:	4b7f      	ldr	r3, [pc, #508]	; (8004030 <parse+0x250>)
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b02      	subs	r3, #2
 8003e38:	497f      	ldr	r1, [pc, #508]	; (8004038 <parse+0x258>)
 8003e3a:	79fa      	ldrb	r2, [r7, #7]
 8003e3c:	54ca      	strb	r2, [r1, r3]
			parser_pos_++;
 8003e3e:	4b7c      	ldr	r3, [pc, #496]	; (8004030 <parse+0x250>)
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3301      	adds	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	4b79      	ldr	r3, [pc, #484]	; (8004030 <parse+0x250>)
 8003e4a:	801a      	strh	r2, [r3, #0]
 8003e4c:	e0ec      	b.n	8004028 <parse+0x248>
		} else {
			parser_pos_ = 0;
 8003e4e:	4b78      	ldr	r3, [pc, #480]	; (8004030 <parse+0x250>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	801a      	strh	r2, [r3, #0]
 8003e54:	e0e8      	b.n	8004028 <parse+0x248>
		}
		/* Message ID */
	} else if (parser_pos_ == 3) {
 8003e56:	4b76      	ldr	r3, [pc, #472]	; (8004030 <parse+0x250>)
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	2b03      	cmp	r3, #3
 8003e5e:	d116      	bne.n	8003e8e <parse+0xae>
		if (byte_read == UBX_NAV_PVT) {
 8003e60:	2207      	movs	r2, #7
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d10e      	bne.n	8003e86 <parse+0xa6>
			pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003e68:	4b71      	ldr	r3, [pc, #452]	; (8004030 <parse+0x250>)
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	3b02      	subs	r3, #2
 8003e70:	4971      	ldr	r1, [pc, #452]	; (8004038 <parse+0x258>)
 8003e72:	79fa      	ldrb	r2, [r7, #7]
 8003e74:	54ca      	strb	r2, [r1, r3]
			parser_pos_++;
 8003e76:	4b6e      	ldr	r3, [pc, #440]	; (8004030 <parse+0x250>)
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	4b6b      	ldr	r3, [pc, #428]	; (8004030 <parse+0x250>)
 8003e82:	801a      	strh	r2, [r3, #0]
 8003e84:	e0d0      	b.n	8004028 <parse+0x248>
		} else {
			parser_pos_ = 0;
 8003e86:	4b6a      	ldr	r3, [pc, #424]	; (8004030 <parse+0x250>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	801a      	strh	r2, [r3, #0]
 8003e8c:	e0cc      	b.n	8004028 <parse+0x248>
		}
		/* Messgae length */
	} else if (parser_pos_ == 4) {
 8003e8e:	4b68      	ldr	r3, [pc, #416]	; (8004030 <parse+0x250>)
 8003e90:	881b      	ldrh	r3, [r3, #0]
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2b04      	cmp	r3, #4
 8003e96:	d111      	bne.n	8003ebc <parse+0xdc>
		msg_len_buffer_[0] = byte_read;
 8003e98:	4a68      	ldr	r2, [pc, #416]	; (800403c <parse+0x25c>)
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	7013      	strb	r3, [r2, #0]
		pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003e9e:	4b64      	ldr	r3, [pc, #400]	; (8004030 <parse+0x250>)
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b02      	subs	r3, #2
 8003ea6:	4964      	ldr	r1, [pc, #400]	; (8004038 <parse+0x258>)
 8003ea8:	79fa      	ldrb	r2, [r7, #7]
 8003eaa:	54ca      	strb	r2, [r1, r3]
		parser_pos_++;
 8003eac:	4b60      	ldr	r3, [pc, #384]	; (8004030 <parse+0x250>)
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	4b5e      	ldr	r3, [pc, #376]	; (8004030 <parse+0x250>)
 8003eb8:	801a      	strh	r2, [r3, #0]
 8003eba:	e0b5      	b.n	8004028 <parse+0x248>
		/* Message length */
	} else if (parser_pos_ == 5) {
 8003ebc:	4b5c      	ldr	r3, [pc, #368]	; (8004030 <parse+0x250>)
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b05      	cmp	r3, #5
 8003ec4:	d12a      	bne.n	8003f1c <parse+0x13c>
		msg_len_buffer_[1] = byte_read;
 8003ec6:	4a5d      	ldr	r2, [pc, #372]	; (800403c <parse+0x25c>)
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	7053      	strb	r3, [r2, #1]
		msg_len_ = ((uint16_t) msg_len_buffer_[1]) << 8 | msg_len_buffer_[0];
 8003ecc:	4b5b      	ldr	r3, [pc, #364]	; (800403c <parse+0x25c>)
 8003ece:	785b      	ldrb	r3, [r3, #1]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	b21a      	sxth	r2, r3
 8003ed6:	4b59      	ldr	r3, [pc, #356]	; (800403c <parse+0x25c>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	b21b      	sxth	r3, r3
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	b21b      	sxth	r3, r3
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	4b56      	ldr	r3, [pc, #344]	; (8004040 <parse+0x260>)
 8003ee6:	801a      	strh	r2, [r3, #0]
		pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003ee8:	4b51      	ldr	r3, [pc, #324]	; (8004030 <parse+0x250>)
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3b02      	subs	r3, #2
 8003ef0:	4951      	ldr	r1, [pc, #324]	; (8004038 <parse+0x258>)
 8003ef2:	79fa      	ldrb	r2, [r7, #7]
 8003ef4:	54ca      	strb	r2, [r1, r3]
		if (msg_len_ == UBX_PVT_LEN_) {
 8003ef6:	235c      	movs	r3, #92	; 0x5c
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	4b51      	ldr	r3, [pc, #324]	; (8004040 <parse+0x260>)
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d107      	bne.n	8003f14 <parse+0x134>
			parser_pos_++;
 8003f04:	4b4a      	ldr	r3, [pc, #296]	; (8004030 <parse+0x250>)
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	4b48      	ldr	r3, [pc, #288]	; (8004030 <parse+0x250>)
 8003f10:	801a      	strh	r2, [r3, #0]
		} else {
			parser_pos_ = 0;
		}
		return;
 8003f12:	e089      	b.n	8004028 <parse+0x248>
			parser_pos_ = 0;
 8003f14:	4b46      	ldr	r3, [pc, #280]	; (8004030 <parse+0x250>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	801a      	strh	r2, [r3, #0]
		return;
 8003f1a:	e085      	b.n	8004028 <parse+0x248>
		/* Message payload */
	} else if (parser_pos_ < (msg_len_ + UBX_HEADER_LEN_)) {
 8003f1c:	4b44      	ldr	r3, [pc, #272]	; (8004030 <parse+0x250>)
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	4b46      	ldr	r3, [pc, #280]	; (8004040 <parse+0x260>)
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	2306      	movs	r3, #6
 8003f2e:	440b      	add	r3, r1
 8003f30:	429a      	cmp	r2, r3
 8003f32:	da0e      	bge.n	8003f52 <parse+0x172>
		pvt_buffer_[parser_pos_ - sizeof(UBX_HEADER_)] = byte_read;
 8003f34:	4b3e      	ldr	r3, [pc, #248]	; (8004030 <parse+0x250>)
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	3b02      	subs	r3, #2
 8003f3c:	493e      	ldr	r1, [pc, #248]	; (8004038 <parse+0x258>)
 8003f3e:	79fa      	ldrb	r2, [r7, #7]
 8003f40:	54ca      	strb	r2, [r1, r3]
		parser_pos_++;
 8003f42:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <parse+0x250>)
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3301      	adds	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	4b38      	ldr	r3, [pc, #224]	; (8004030 <parse+0x250>)
 8003f4e:	801a      	strh	r2, [r3, #0]
 8003f50:	e06a      	b.n	8004028 <parse+0x248>
		/* Checksum */
	} else if (parser_pos_ == (msg_len_ + UBX_HEADER_LEN_)) {
 8003f52:	4b37      	ldr	r3, [pc, #220]	; (8004030 <parse+0x250>)
 8003f54:	881b      	ldrh	r3, [r3, #0]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4b39      	ldr	r3, [pc, #228]	; (8004040 <parse+0x260>)
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	4619      	mov	r1, r3
 8003f62:	2306      	movs	r3, #6
 8003f64:	440b      	add	r3, r1
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d10a      	bne.n	8003f80 <parse+0x1a0>
		checksum_buffer_[0] = byte_read;
 8003f6a:	4a36      	ldr	r2, [pc, #216]	; (8004044 <parse+0x264>)
 8003f6c:	79fb      	ldrb	r3, [r7, #7]
 8003f6e:	7013      	strb	r3, [r2, #0]
		parser_pos_++;
 8003f70:	4b2f      	ldr	r3, [pc, #188]	; (8004030 <parse+0x250>)
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	3301      	adds	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	4b2d      	ldr	r3, [pc, #180]	; (8004030 <parse+0x250>)
 8003f7c:	801a      	strh	r2, [r3, #0]
 8003f7e:	e053      	b.n	8004028 <parse+0x248>
	} else {
		checksum_buffer_[1] = byte_read;
 8003f80:	4a30      	ldr	r2, [pc, #192]	; (8004044 <parse+0x264>)
 8003f82:	79fb      	ldrb	r3, [r7, #7]
 8003f84:	7053      	strb	r3, [r2, #1]
		uint16_t received_checksum = ((uint16_t) checksum_buffer_[1]) << 8 | checksum_buffer_[0];
 8003f86:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <parse+0x264>)
 8003f88:	785b      	ldrb	r3, [r3, #1]
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	021b      	lsls	r3, r3, #8
 8003f8e:	b21a      	sxth	r2, r3
 8003f90:	4b2c      	ldr	r3, [pc, #176]	; (8004044 <parse+0x264>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	b21b      	sxth	r3, r3
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	b21b      	sxth	r3, r3
 8003f9c:	81fb      	strh	r3, [r7, #14]
		uint16_t computed_checksum = Checksum(pvt_buffer_, msg_len_ + UBX_HEADER_LEN_);
 8003f9e:	2306      	movs	r3, #6
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	4b27      	ldr	r3, [pc, #156]	; (8004040 <parse+0x260>)
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	4413      	add	r3, r2
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	4619      	mov	r1, r3
 8003fae:	4822      	ldr	r0, [pc, #136]	; (8004038 <parse+0x258>)
 8003fb0:	f7ff fedc 	bl	8003d6c <Checksum>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	81bb      	strh	r3, [r7, #12]
		if (computed_checksum == received_checksum) {
 8003fb8:	89ba      	ldrh	r2, [r7, #12]
 8003fba:	89fb      	ldrh	r3, [r7, #14]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d130      	bne.n	8004022 <parse+0x242>
			if (pvt_buffer_[20 + UBX_PAYLOAD_OFFSET_] >= FIX_2D) {
 8003fc0:	2304      	movs	r3, #4
 8003fc2:	3314      	adds	r3, #20
 8003fc4:	4a1c      	ldr	r2, [pc, #112]	; (8004038 <parse+0x258>)
 8003fc6:	5cd3      	ldrb	r3, [r2, r3]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d915      	bls.n	8003ffa <parse+0x21a>
				memcpy(&ubx_nav_pvt, (void*)  pvt_buffer_ + UBX_PAYLOAD_OFFSET_, UBX_PVT_LEN_);
 8003fce:	2304      	movs	r3, #4
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	4b19      	ldr	r3, [pc, #100]	; (8004038 <parse+0x258>)
 8003fd4:	4413      	add	r3, r2
 8003fd6:	225c      	movs	r2, #92	; 0x5c
 8003fd8:	4619      	mov	r1, r3
 8003fda:	481b      	ldr	r0, [pc, #108]	; (8004048 <parse+0x268>)
 8003fdc:	f005 fe46 	bl	8009c6c <memcpy>
				GNSSlastPacketAge = 0;
 8003fe0:	4b1a      	ldr	r3, [pc, #104]	; (800404c <parse+0x26c>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]
				if (isTimeFullyResolved()) {
 8003fe6:	f7ff fdb9 	bl	8003b5c <isTimeFullyResolved>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <parse+0x214>
					setTimeGNSS();
 8003ff0:	f7fe ffd4 	bl	8002f9c <setTimeGNSS>
				}
				GNSSNewData = true;
 8003ff4:	4b16      	ldr	r3, [pc, #88]	; (8004050 <parse+0x270>)
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	701a      	strb	r2, [r3, #0]
			}
			GNSSAlive = !GNSSAlive;
 8003ffa:	4b16      	ldr	r3, [pc, #88]	; (8004054 <parse+0x274>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b00      	cmp	r3, #0
 8004002:	bf14      	ite	ne
 8004004:	2301      	movne	r3, #1
 8004006:	2300      	moveq	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f083 0301 	eor.w	r3, r3, #1
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	b2da      	uxtb	r2, r3
 8004016:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <parse+0x274>)
 8004018:	701a      	strb	r2, [r3, #0]
			parser_pos_ = 0;
 800401a:	4b05      	ldr	r3, [pc, #20]	; (8004030 <parse+0x250>)
 800401c:	2200      	movs	r2, #0
 800401e:	801a      	strh	r2, [r3, #0]
 8004020:	e002      	b.n	8004028 <parse+0x248>
		} else {
			parser_pos_ = 0;
 8004022:	4b03      	ldr	r3, [pc, #12]	; (8004030 <parse+0x250>)
 8004024:	2200      	movs	r2, #0
 8004026:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	200003a2 	.word	0x200003a2
 8004034:	0800cf90 	.word	0x0800cf90
 8004038:	200003ac 	.word	0x200003ac
 800403c:	200003a4 	.word	0x200003a4
 8004040:	200003a6 	.word	0x200003a6
 8004044:	200003a8 	.word	0x200003a8
 8004048:	2000040c 	.word	0x2000040c
 800404c:	2000039c 	.word	0x2000039c
 8004050:	20000004 	.word	0x20000004
 8004054:	200003a0 	.word	0x200003a0

08004058 <LPUART_CharReception_Callback>:

void LPUART_CharReception_Callback(void) {
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
	while (LL_LPUART_IsActiveFlag_RXNE(LPUART1)) {
 800405c:	e006      	b.n	800406c <LPUART_CharReception_Callback+0x14>
		parse(LL_LPUART_ReceiveData8(LPUART1));
 800405e:	4808      	ldr	r0, [pc, #32]	; (8004080 <LPUART_CharReception_Callback+0x28>)
 8004060:	f7ff fc4a 	bl	80038f8 <LL_LPUART_ReceiveData8>
 8004064:	4603      	mov	r3, r0
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff feba 	bl	8003de0 <parse>
	while (LL_LPUART_IsActiveFlag_RXNE(LPUART1)) {
 800406c:	4804      	ldr	r0, [pc, #16]	; (8004080 <LPUART_CharReception_Callback+0x28>)
 800406e:	f7ff fbb8 	bl	80037e2 <LL_LPUART_IsActiveFlag_RXNE>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f2      	bne.n	800405e <LPUART_CharReception_Callback+0x6>
	}
}
 8004078:	bf00      	nop
 800407a:	bf00      	nop
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	40008000 	.word	0x40008000

08004084 <LPUART_Transmit>:

static void LPUART_Transmit(uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	460b      	mov	r3, r1
 800408e:	607a      	str	r2, [r7, #4]
 8004090:	817b      	strh	r3, [r7, #10]
	if ((pData == NULL) || (Size == 0U)) {
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d022      	beq.n	80040de <LPUART_Transmit+0x5a>
 8004098:	897b      	ldrh	r3, [r7, #10]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d01f      	beq.n	80040de <LPUART_Transmit+0x5a>
		return;
	}

	while (Size--) {
 800409e:	e011      	b.n	80040c4 <LPUART_Transmit+0x40>
		/* Wait for TXE flag to be raised */
		while (!LL_LPUART_IsActiveFlag_TXE(LPUART1)) {
 80040a0:	bf00      	nop
 80040a2:	4811      	ldr	r0, [pc, #68]	; (80040e8 <LPUART_Transmit+0x64>)
 80040a4:	f7ff fbc3 	bl	800382e <LL_LPUART_IsActiveFlag_TXE>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f9      	beq.n	80040a2 <LPUART_Transmit+0x1e>
		}
		uint8_t sendThis = (uint8_t) (*pData);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	75fb      	strb	r3, [r7, #23]
		LL_LPUART_TransmitData8(LPUART1, sendThis);
 80040b4:	7dfb      	ldrb	r3, [r7, #23]
 80040b6:	4619      	mov	r1, r3
 80040b8:	480b      	ldr	r0, [pc, #44]	; (80040e8 <LPUART_Transmit+0x64>)
 80040ba:	f7ff fc2b 	bl	8003914 <LL_LPUART_TransmitData8>
		pData++;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	3301      	adds	r3, #1
 80040c2:	60fb      	str	r3, [r7, #12]
	while (Size--) {
 80040c4:	897b      	ldrh	r3, [r7, #10]
 80040c6:	1e5a      	subs	r2, r3, #1
 80040c8:	817a      	strh	r2, [r7, #10]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e8      	bne.n	80040a0 <LPUART_Transmit+0x1c>
	}

	/* Wait for TC flag to be raised for last char */
	while (!LL_LPUART_IsActiveFlag_TC(LPUART1)) {
 80040ce:	bf00      	nop
 80040d0:	4805      	ldr	r0, [pc, #20]	; (80040e8 <LPUART_Transmit+0x64>)
 80040d2:	f7ff fb99 	bl	8003808 <LL_LPUART_IsActiveFlag_TC>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0f9      	beq.n	80040d0 <LPUART_Transmit+0x4c>
 80040dc:	e000      	b.n	80040e0 <LPUART_Transmit+0x5c>
		return;
 80040de:	bf00      	nop
	}
}
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40008000 	.word	0x40008000

080040ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040f6:	2003      	movs	r0, #3
 80040f8:	f001 fc56 	bl	80059a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040fc:	200f      	movs	r0, #15
 80040fe:	f000 f80d 	bl	800411c <HAL_InitTick>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	71fb      	strb	r3, [r7, #7]
 800410c:	e001      	b.n	8004112 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800410e:	f7ff f809 	bl	8003124 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004112:	79fb      	ldrb	r3, [r7, #7]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3708      	adds	r7, #8
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004124:	2300      	movs	r3, #0
 8004126:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004128:	4b17      	ldr	r3, [pc, #92]	; (8004188 <HAL_InitTick+0x6c>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d023      	beq.n	8004178 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004130:	4b16      	ldr	r3, [pc, #88]	; (800418c <HAL_InitTick+0x70>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	4b14      	ldr	r3, [pc, #80]	; (8004188 <HAL_InitTick+0x6c>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	4619      	mov	r1, r3
 800413a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800413e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	4618      	mov	r0, r3
 8004148:	f001 fc63 	bl	8005a12 <HAL_SYSTICK_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10f      	bne.n	8004172 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b0f      	cmp	r3, #15
 8004156:	d809      	bhi.n	800416c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004158:	2200      	movs	r2, #0
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	f04f 30ff 	mov.w	r0, #4294967295
 8004160:	f001 fc2d 	bl	80059be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004164:	4a0a      	ldr	r2, [pc, #40]	; (8004190 <HAL_InitTick+0x74>)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	e007      	b.n	800417c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
 8004170:	e004      	b.n	800417c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	73fb      	strb	r3, [r7, #15]
 8004176:	e001      	b.n	800417c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800417c:	7bfb      	ldrb	r3, [r7, #15]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	2000000c 	.word	0x2000000c
 800418c:	20000000 	.word	0x20000000
 8004190:	20000008 	.word	0x20000008

08004194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004194:	b480      	push	{r7}
 8004196:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004198:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <HAL_IncTick+0x20>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	461a      	mov	r2, r3
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <HAL_IncTick+0x24>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4413      	add	r3, r2
 80041a4:	4a04      	ldr	r2, [pc, #16]	; (80041b8 <HAL_IncTick+0x24>)
 80041a6:	6013      	str	r3, [r2, #0]
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	2000000c 	.word	0x2000000c
 80041b8:	20000468 	.word	0x20000468

080041bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return uwTick;
 80041c0:	4b03      	ldr	r3, [pc, #12]	; (80041d0 <HAL_GetTick+0x14>)
 80041c2:	681b      	ldr	r3, [r3, #0]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	20000468 	.word	0x20000468

080041d4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80041d8:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <HAL_SuspendTick+0x1c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a04      	ldr	r2, [pc, #16]	; (80041f0 <HAL_SuspendTick+0x1c>)
 80041de:	f023 0302 	bic.w	r3, r3, #2
 80041e2:	6013      	str	r3, [r2, #0]
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	e000e010 	.word	0xe000e010

080041f4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80041f4:	b480      	push	{r7}
 80041f6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_ResumeTick+0x1c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a04      	ldr	r2, [pc, #16]	; (8004210 <HAL_ResumeTick+0x1c>)
 80041fe:	f043 0302 	orr.w	r3, r3, #2
 8004202:	6013      	str	r3, [r2, #0]
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	e000e010 	.word	0xe000e010

08004214 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	609a      	str	r2, [r3, #8]
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	609a      	str	r2, [r3, #8]
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	3360      	adds	r3, #96	; 0x60
 800428e:	461a      	mov	r2, r3
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <LL_ADC_SetOffset+0x44>)
 800429e:	4013      	ands	r3, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80042b4:	bf00      	nop
 80042b6:	371c      	adds	r7, #28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	03fff000 	.word	0x03fff000

080042c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b085      	sub	sp, #20
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3360      	adds	r3, #96	; 0x60
 80042d2:	461a      	mov	r2, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	3360      	adds	r3, #96	; 0x60
 8004300:	461a      	mov	r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	431a      	orrs	r2, r3
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004336:	2b00      	cmp	r3, #0
 8004338:	d101      	bne.n	800433e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800433a:	2301      	movs	r3, #1
 800433c:	e000      	b.n	8004340 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3330      	adds	r3, #48	; 0x30
 800435c:	461a      	mov	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	0a1b      	lsrs	r3, r3, #8
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	f003 030c 	and.w	r3, r3, #12
 8004368:	4413      	add	r3, r2
 800436a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	211f      	movs	r1, #31
 8004378:	fa01 f303 	lsl.w	r3, r1, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	401a      	ands	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	0e9b      	lsrs	r3, r3, #26
 8004384:	f003 011f 	and.w	r1, r3, #31
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	fa01 f303 	lsl.w	r3, r1, r3
 8004392:	431a      	orrs	r2, r3
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004398:	bf00      	nop
 800439a:	371c      	adds	r7, #28
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b087      	sub	sp, #28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3314      	adds	r3, #20
 80043b4:	461a      	mov	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	0e5b      	lsrs	r3, r3, #25
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	4413      	add	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	0d1b      	lsrs	r3, r3, #20
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	2107      	movs	r1, #7
 80043d2:	fa01 f303 	lsl.w	r3, r1, r3
 80043d6:	43db      	mvns	r3, r3
 80043d8:	401a      	ands	r2, r3
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	0d1b      	lsrs	r3, r3, #20
 80043de:	f003 031f 	and.w	r3, r3, #31
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	fa01 f303 	lsl.w	r3, r1, r3
 80043e8:	431a      	orrs	r2, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004414:	43db      	mvns	r3, r3
 8004416:	401a      	ands	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f003 0318 	and.w	r3, r3, #24
 800441e:	4908      	ldr	r1, [pc, #32]	; (8004440 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004420:	40d9      	lsrs	r1, r3
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	400b      	ands	r3, r1
 8004426:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800442a:	431a      	orrs	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004432:	bf00      	nop
 8004434:	3714      	adds	r7, #20
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	0007ffff 	.word	0x0007ffff

08004444 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8004454:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6093      	str	r3, [r2, #8]
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800447c:	d101      	bne.n	8004482 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800447e:	2301      	movs	r3, #1
 8004480:	e000      	b.n	8004484 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80044a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044cc:	d101      	bne.n	80044d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80044d2:	2300      	movs	r3, #0
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80044f4:	f043 0201 	orr.w	r2, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004518:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800451c:	f043 0202 	orr.w	r2, r3, #2
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <LL_ADC_IsEnabled+0x18>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <LL_ADC_IsEnabled+0x1a>
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b02      	cmp	r3, #2
 8004568:	d101      	bne.n	800456e <LL_ADC_IsDisableOngoing+0x18>
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <LL_ADC_IsDisableOngoing+0x1a>
 800456e:	2300      	movs	r3, #0
}
 8004570:	4618      	mov	r0, r3
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800458c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004590:	f043 0204 	orr.w	r2, r3, #4
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80045b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80045b8:	f043 0210 	orr.w	r2, r3, #16
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b04      	cmp	r3, #4
 80045de:	d101      	bne.n	80045e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004602:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004606:	f043 0220 	orr.w	r2, r3, #32
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800461a:	b480      	push	{r7}
 800461c:	b083      	sub	sp, #12
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 0308 	and.w	r3, r3, #8
 800462a:	2b08      	cmp	r3, #8
 800462c:	d101      	bne.n	8004632 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800462e:	2301      	movs	r3, #1
 8004630:	e000      	b.n	8004634 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800464c:	2300      	movs	r3, #0
 800464e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e12c      	b.n	80048b4 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004664:	2b00      	cmp	r3, #0
 8004666:	d109      	bne.n	800467c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7fe fd7f 	bl	800316c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fef1 	bl	8004468 <LL_ADC_IsDeepPowerDownEnabled>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d004      	beq.n	8004696 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff fed7 	bl	8004444 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff ff0c 	bl	80044b8 <LL_ADC_IsInternalRegulatorEnabled>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d115      	bne.n	80046d2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff fef0 	bl	8004490 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046b0:	4b82      	ldr	r3, [pc, #520]	; (80048bc <HAL_ADC_Init+0x27c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	099b      	lsrs	r3, r3, #6
 80046b6:	4a82      	ldr	r2, [pc, #520]	; (80048c0 <HAL_ADC_Init+0x280>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	099b      	lsrs	r3, r3, #6
 80046be:	3301      	adds	r3, #1
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046c4:	e002      	b.n	80046cc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	3b01      	subs	r3, #1
 80046ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1f9      	bne.n	80046c6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7ff feee 	bl	80044b8 <LL_ADC_IsInternalRegulatorEnabled>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10d      	bne.n	80046fe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e6:	f043 0210 	orr.w	r2, r3, #16
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f2:	f043 0201 	orr.w	r2, r3, #1
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7ff ff62 	bl	80045cc <LL_ADC_REG_IsConversionOngoing>
 8004708:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470e:	f003 0310 	and.w	r3, r3, #16
 8004712:	2b00      	cmp	r3, #0
 8004714:	f040 80c5 	bne.w	80048a2 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2b00      	cmp	r3, #0
 800471c:	f040 80c1 	bne.w	80048a2 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004724:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004728:	f043 0202 	orr.w	r2, r3, #2
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff fefb 	bl	8004530 <LL_ADC_IsEnabled>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10b      	bne.n	8004758 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004740:	4860      	ldr	r0, [pc, #384]	; (80048c4 <HAL_ADC_Init+0x284>)
 8004742:	f7ff fef5 	bl	8004530 <LL_ADC_IsEnabled>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d105      	bne.n	8004758 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	4619      	mov	r1, r3
 8004752:	485d      	ldr	r0, [pc, #372]	; (80048c8 <HAL_ADC_Init+0x288>)
 8004754:	f7ff fd5e 	bl	8004214 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	7e5b      	ldrb	r3, [r3, #25]
 800475c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004762:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8004768:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800476e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004776:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004778:	4313      	orrs	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004782:	2b01      	cmp	r3, #1
 8004784:	d106      	bne.n	8004794 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	3b01      	subs	r3, #1
 800478c:	045b      	lsls	r3, r3, #17
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	4313      	orrs	r3, r2
 8004792:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004798:	2b00      	cmp	r3, #0
 800479a:	d009      	beq.n	80047b0 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	4b45      	ldr	r3, [pc, #276]	; (80048cc <HAL_ADC_Init+0x28c>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	69b9      	ldr	r1, [r7, #24]
 80047c0:	430b      	orrs	r3, r1
 80047c2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff feff 	bl	80045cc <LL_ADC_REG_IsConversionOngoing>
 80047ce:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff ff20 	bl	800461a <LL_ADC_INJ_IsConversionOngoing>
 80047da:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d13d      	bne.n	800485e <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d13a      	bne.n	800485e <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80047ec:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80047f4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004804:	f023 0302 	bic.w	r3, r3, #2
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	69b9      	ldr	r1, [r7, #24]
 800480e:	430b      	orrs	r3, r1
 8004810:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004818:	2b01      	cmp	r3, #1
 800481a:	d118      	bne.n	800484e <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004826:	f023 0304 	bic.w	r3, r3, #4
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004832:	4311      	orrs	r1, r2
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004838:	4311      	orrs	r1, r2
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800483e:	430a      	orrs	r2, r1
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	611a      	str	r2, [r3, #16]
 800484c:	e007      	b.n	800485e <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0201 	bic.w	r2, r2, #1
 800485c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d10c      	bne.n	8004880 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	f023 010f 	bic.w	r1, r3, #15
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	1e5a      	subs	r2, r3, #1
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	631a      	str	r2, [r3, #48]	; 0x30
 800487e:	e007      	b.n	8004890 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 020f 	bic.w	r2, r2, #15
 800488e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004894:	f023 0303 	bic.w	r3, r3, #3
 8004898:	f043 0201 	orr.w	r2, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	655a      	str	r2, [r3, #84]	; 0x54
 80048a0:	e007      	b.n	80048b2 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a6:	f043 0210 	orr.w	r2, r3, #16
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80048b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3720      	adds	r7, #32
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	20000000 	.word	0x20000000
 80048c0:	053e2d63 	.word	0x053e2d63
 80048c4:	50040000 	.word	0x50040000
 80048c8:	50040300 	.word	0x50040300
 80048cc:	fff0c007 	.word	0xfff0c007

080048d0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7ff fe73 	bl	80045cc <LL_ADC_REG_IsConversionOngoing>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d167      	bne.n	80049bc <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d101      	bne.n	80048fa <HAL_ADC_Start_DMA+0x2a>
 80048f6:	2302      	movs	r3, #2
 80048f8:	e063      	b.n	80049c2 <HAL_ADC_Start_DMA+0xf2>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004902:	68f8      	ldr	r0, [r7, #12]
 8004904:	f000 fd7a 	bl	80053fc <ADC_Enable>
 8004908:	4603      	mov	r3, r0
 800490a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800490c:	7dfb      	ldrb	r3, [r7, #23]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d14f      	bne.n	80049b2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004916:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800491a:	f023 0301 	bic.w	r3, r3, #1
 800491e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d006      	beq.n	8004940 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004936:	f023 0206 	bic.w	r2, r3, #6
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	659a      	str	r2, [r3, #88]	; 0x58
 800493e:	e002      	b.n	8004946 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494a:	4a20      	ldr	r2, [pc, #128]	; (80049cc <HAL_ADC_Start_DMA+0xfc>)
 800494c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004952:	4a1f      	ldr	r2, [pc, #124]	; (80049d0 <HAL_ADC_Start_DMA+0x100>)
 8004954:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495a:	4a1e      	ldr	r2, [pc, #120]	; (80049d4 <HAL_ADC_Start_DMA+0x104>)
 800495c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	221c      	movs	r2, #28
 8004964:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685a      	ldr	r2, [r3, #4]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0210 	orr.w	r2, r2, #16
 800497c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0201 	orr.w	r2, r2, #1
 800498c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3340      	adds	r3, #64	; 0x40
 8004998:	4619      	mov	r1, r3
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f001 f8fd 	bl	8005b9c <HAL_DMA_Start_IT>
 80049a2:	4603      	mov	r3, r0
 80049a4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7ff fde6 	bl	800457c <LL_ADC_REG_StartConversion>
 80049b0:	e006      	b.n	80049c0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80049ba:	e001      	b.n	80049c0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80049bc:	2302      	movs	r3, #2
 80049be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	080055c7 	.word	0x080055c7
 80049d0:	0800569f 	.word	0x0800569f
 80049d4:	080056bb 	.word	0x080056bb

080049d8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_ADC_Stop_DMA+0x16>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e051      	b.n	8004a92 <HAL_ADC_Stop_DMA+0xba>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80049f6:	2103      	movs	r1, #3
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fc43 	bl	8005284 <ADC_ConversionStop>
 80049fe:	4603      	mov	r3, r0
 8004a00:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d13f      	bne.n	8004a88 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d10f      	bne.n	8004a46 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f001 f916 	bl	8005c5c <HAL_DMA_Abort>
 8004a30:	4603      	mov	r3, r0
 8004a32:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f022 0210 	bic.w	r2, r2, #16
 8004a54:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d105      	bne.n	8004a68 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 fd53 	bl	8005508 <ADC_Disable>
 8004a62:	4603      	mov	r3, r0
 8004a64:	73fb      	strb	r3, [r7, #15]
 8004a66:	e002      	b.n	8004a6e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fd4d 	bl	8005508 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d109      	bne.n	8004a88 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	f043 0201 	orr.w	r2, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004ab6:	bf00      	nop
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b0b6      	sub	sp, #216	; 0xd8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x22>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e3b9      	b.n	800525a <HAL_ADC_ConfigChannel+0x796>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7ff fd6a 	bl	80045cc <LL_ADC_REG_IsConversionOngoing>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f040 839e 	bne.w	800523c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2b05      	cmp	r3, #5
 8004b06:	d824      	bhi.n	8004b52 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	3b02      	subs	r3, #2
 8004b0e:	2b03      	cmp	r3, #3
 8004b10:	d81b      	bhi.n	8004b4a <HAL_ADC_ConfigChannel+0x86>
 8004b12:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <HAL_ADC_ConfigChannel+0x54>)
 8004b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b18:	08004b29 	.word	0x08004b29
 8004b1c:	08004b31 	.word	0x08004b31
 8004b20:	08004b39 	.word	0x08004b39
 8004b24:	08004b41 	.word	0x08004b41
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	220c      	movs	r2, #12
 8004b2c:	605a      	str	r2, [r3, #4]
          break;
 8004b2e:	e011      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2212      	movs	r2, #18
 8004b34:	605a      	str	r2, [r3, #4]
          break;
 8004b36:	e00d      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2218      	movs	r2, #24
 8004b3c:	605a      	str	r2, [r3, #4]
          break;
 8004b3e:	e009      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b46:	605a      	str	r2, [r3, #4]
          break;
 8004b48:	e004      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2206      	movs	r2, #6
 8004b4e:	605a      	str	r2, [r3, #4]
          break;
 8004b50:	e000      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8004b52:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	6859      	ldr	r1, [r3, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	461a      	mov	r2, r3
 8004b62:	f7ff fbf3 	bl	800434c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fd2e 	bl	80045cc <LL_ADC_REG_IsConversionOngoing>
 8004b70:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff fd4e 	bl	800461a <LL_ADC_INJ_IsConversionOngoing>
 8004b7e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f040 81a6 	bne.w	8004ed8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f040 81a1 	bne.w	8004ed8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	6819      	ldr	r1, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f7ff fbfe 	bl	80043a4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	695a      	ldr	r2, [r3, #20]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	08db      	lsrs	r3, r3, #3
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d00a      	beq.n	8004be0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6818      	ldr	r0, [r3, #0]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	6919      	ldr	r1, [r3, #16]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bda:	f7ff fb4f 	bl	800427c <LL_ADC_SetOffset>
 8004bde:	e17b      	b.n	8004ed8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2100      	movs	r1, #0
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7ff fb6c 	bl	80042c4 <LL_ADC_GetOffsetChannel>
 8004bec:	4603      	mov	r3, r0
 8004bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <HAL_ADC_ConfigChannel+0x148>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fb61 	bl	80042c4 <LL_ADC_GetOffsetChannel>
 8004c02:	4603      	mov	r3, r0
 8004c04:	0e9b      	lsrs	r3, r3, #26
 8004c06:	f003 021f 	and.w	r2, r3, #31
 8004c0a:	e01e      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x186>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2100      	movs	r1, #0
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7ff fb56 	bl	80042c4 <LL_ADC_GetOffsetChannel>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c22:	fa93 f3a3 	rbit	r3, r3
 8004c26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  return result;
 8004c2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  if (value == 0U)
 8004c32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <HAL_ADC_ConfigChannel+0x17a>
    return 32U;
 8004c3a:	2320      	movs	r3, #32
 8004c3c:	e004      	b.n	8004c48 <HAL_ADC_ConfigChannel+0x184>
  return __builtin_clz(value);
 8004c3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c42:	fab3 f383 	clz	r3, r3
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d105      	bne.n	8004c62 <HAL_ADC_ConfigChannel+0x19e>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	0e9b      	lsrs	r3, r3, #26
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	e018      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x1d0>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c6e:	fa93 f3a3 	rbit	r3, r3
 8004c72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004c7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004c86:	2320      	movs	r3, #32
 8004c88:	e004      	b.n	8004c94 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004c8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c8e:	fab3 f383 	clz	r3, r3
 8004c92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d106      	bne.n	8004ca6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2100      	movs	r1, #0
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fb25 	bl	80042f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2101      	movs	r1, #1
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff fb09 	bl	80042c4 <LL_ADC_GetOffsetChannel>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <HAL_ADC_ConfigChannel+0x20e>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fafe 	bl	80042c4 <LL_ADC_GetOffsetChannel>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	0e9b      	lsrs	r3, r3, #26
 8004ccc:	f003 021f 	and.w	r2, r3, #31
 8004cd0:	e01e      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x24c>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff faf3 	bl	80042c4 <LL_ADC_GetOffsetChannel>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004ce8:	fa93 f3a3 	rbit	r3, r3
 8004cec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004cf0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004cf8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004d00:	2320      	movs	r3, #32
 8004d02:	e004      	b.n	8004d0e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004d04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d08:	fab3 f383 	clz	r3, r3
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d105      	bne.n	8004d28 <HAL_ADC_ConfigChannel+0x264>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	0e9b      	lsrs	r3, r3, #26
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	e018      	b.n	8004d5a <HAL_ADC_ConfigChannel+0x296>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d34:	fa93 f3a3 	rbit	r3, r3
 8004d38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004d3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004d44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004d4c:	2320      	movs	r3, #32
 8004d4e:	e004      	b.n	8004d5a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d54:	fab3 f383 	clz	r3, r3
 8004d58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d106      	bne.n	8004d6c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2200      	movs	r2, #0
 8004d64:	2101      	movs	r1, #1
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fac2 	bl	80042f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2102      	movs	r1, #2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff faa6 	bl	80042c4 <LL_ADC_GetOffsetChannel>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <HAL_ADC_ConfigChannel+0x2d4>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2102      	movs	r1, #2
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fa9b 	bl	80042c4 <LL_ADC_GetOffsetChannel>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	0e9b      	lsrs	r3, r3, #26
 8004d92:	f003 021f 	and.w	r2, r3, #31
 8004d96:	e01e      	b.n	8004dd6 <HAL_ADC_ConfigChannel+0x312>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2102      	movs	r1, #2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff fa90 	bl	80042c4 <LL_ADC_GetOffsetChannel>
 8004da4:	4603      	mov	r3, r0
 8004da6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dae:	fa93 f3a3 	rbit	r3, r3
 8004db2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004db6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004dbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004dc6:	2320      	movs	r3, #32
 8004dc8:	e004      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004dca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dce:	fab3 f383 	clz	r3, r3
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d105      	bne.n	8004dee <HAL_ADC_ConfigChannel+0x32a>
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	0e9b      	lsrs	r3, r3, #26
 8004de8:	f003 031f 	and.w	r3, r3, #31
 8004dec:	e016      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x358>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dfa:	fa93 f3a3 	rbit	r3, r3
 8004dfe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004e00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004e06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004e0e:	2320      	movs	r3, #32
 8004e10:	e004      	b.n	8004e1c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8004e12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e16:	fab3 f383 	clz	r3, r3
 8004e1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d106      	bne.n	8004e2e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2200      	movs	r2, #0
 8004e26:	2102      	movs	r1, #2
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff fa61 	bl	80042f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2103      	movs	r1, #3
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fa45 	bl	80042c4 <LL_ADC_GetOffsetChannel>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d10a      	bne.n	8004e5a <HAL_ADC_ConfigChannel+0x396>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2103      	movs	r1, #3
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7ff fa3a 	bl	80042c4 <LL_ADC_GetOffsetChannel>
 8004e50:	4603      	mov	r3, r0
 8004e52:	0e9b      	lsrs	r3, r3, #26
 8004e54:	f003 021f 	and.w	r2, r3, #31
 8004e58:	e017      	b.n	8004e8a <HAL_ADC_ConfigChannel+0x3c6>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2103      	movs	r1, #3
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff fa2f 	bl	80042c4 <LL_ADC_GetOffsetChannel>
 8004e66:	4603      	mov	r3, r0
 8004e68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e6c:	fa93 f3a3 	rbit	r3, r3
 8004e70:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e74:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004e76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004e7c:	2320      	movs	r3, #32
 8004e7e:	e003      	b.n	8004e88 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004e80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e82:	fab3 f383 	clz	r3, r3
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d105      	bne.n	8004ea2 <HAL_ADC_ConfigChannel+0x3de>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	0e9b      	lsrs	r3, r3, #26
 8004e9c:	f003 031f 	and.w	r3, r3, #31
 8004ea0:	e011      	b.n	8004ec6 <HAL_ADC_ConfigChannel+0x402>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eaa:	fa93 f3a3 	rbit	r3, r3
 8004eae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004eba:	2320      	movs	r3, #32
 8004ebc:	e003      	b.n	8004ec6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec0:	fab3 f383 	clz	r3, r3
 8004ec4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d106      	bne.n	8004ed8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2103      	movs	r1, #3
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff fa0c 	bl	80042f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff fb27 	bl	8004530 <LL_ADC_IsEnabled>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f040 813f 	bne.w	8005168 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	6819      	ldr	r1, [r3, #0]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f7ff fa80 	bl	80043fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4a8e      	ldr	r2, [pc, #568]	; (800513c <HAL_ADC_ConfigChannel+0x678>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	f040 8130 	bne.w	8005168 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10b      	bne.n	8004f30 <HAL_ADC_ConfigChannel+0x46c>
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	0e9b      	lsrs	r3, r3, #26
 8004f1e:	3301      	adds	r3, #1
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	2b09      	cmp	r3, #9
 8004f26:	bf94      	ite	ls
 8004f28:	2301      	movls	r3, #1
 8004f2a:	2300      	movhi	r3, #0
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	e019      	b.n	8004f64 <HAL_ADC_ConfigChannel+0x4a0>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f38:	fa93 f3a3 	rbit	r3, r3
 8004f3c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f40:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004f42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004f48:	2320      	movs	r3, #32
 8004f4a:	e003      	b.n	8004f54 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004f4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f4e:	fab3 f383 	clz	r3, r3
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	3301      	adds	r3, #1
 8004f56:	f003 031f 	and.w	r3, r3, #31
 8004f5a:	2b09      	cmp	r3, #9
 8004f5c:	bf94      	ite	ls
 8004f5e:	2301      	movls	r3, #1
 8004f60:	2300      	movhi	r3, #0
 8004f62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d079      	beq.n	800505c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d107      	bne.n	8004f84 <HAL_ADC_ConfigChannel+0x4c0>
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	0e9b      	lsrs	r3, r3, #26
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	069b      	lsls	r3, r3, #26
 8004f7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f82:	e015      	b.n	8004fb0 <HAL_ADC_ConfigChannel+0x4ec>
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f8c:	fa93 f3a3 	rbit	r3, r3
 8004f90:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f94:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004f96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004f9c:	2320      	movs	r3, #32
 8004f9e:	e003      	b.n	8004fa8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fa2:	fab3 f383 	clz	r3, r3
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	3301      	adds	r3, #1
 8004faa:	069b      	lsls	r3, r3, #26
 8004fac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d109      	bne.n	8004fd0 <HAL_ADC_ConfigChannel+0x50c>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	0e9b      	lsrs	r3, r3, #26
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	2101      	movs	r1, #1
 8004fca:	fa01 f303 	lsl.w	r3, r1, r3
 8004fce:	e017      	b.n	8005000 <HAL_ADC_ConfigChannel+0x53c>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fd8:	fa93 f3a3 	rbit	r3, r3
 8004fdc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004fde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fe0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d101      	bne.n	8004fec <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004fe8:	2320      	movs	r3, #32
 8004fea:	e003      	b.n	8004ff4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fee:	fab3 f383 	clz	r3, r3
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8005000:	ea42 0103 	orr.w	r1, r2, r3
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10a      	bne.n	8005026 <HAL_ADC_ConfigChannel+0x562>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	0e9b      	lsrs	r3, r3, #26
 8005016:	3301      	adds	r3, #1
 8005018:	f003 021f 	and.w	r2, r3, #31
 800501c:	4613      	mov	r3, r2
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	4413      	add	r3, r2
 8005022:	051b      	lsls	r3, r3, #20
 8005024:	e018      	b.n	8005058 <HAL_ADC_ConfigChannel+0x594>
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502e:	fa93 f3a3 	rbit	r3, r3
 8005032:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005036:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800503e:	2320      	movs	r3, #32
 8005040:	e003      	b.n	800504a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8005042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005044:	fab3 f383 	clz	r3, r3
 8005048:	b2db      	uxtb	r3, r3
 800504a:	3301      	adds	r3, #1
 800504c:	f003 021f 	and.w	r2, r3, #31
 8005050:	4613      	mov	r3, r2
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	4413      	add	r3, r2
 8005056:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005058:	430b      	orrs	r3, r1
 800505a:	e080      	b.n	800515e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005064:	2b00      	cmp	r3, #0
 8005066:	d107      	bne.n	8005078 <HAL_ADC_ConfigChannel+0x5b4>
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	0e9b      	lsrs	r3, r3, #26
 800506e:	3301      	adds	r3, #1
 8005070:	069b      	lsls	r3, r3, #26
 8005072:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005076:	e015      	b.n	80050a4 <HAL_ADC_ConfigChannel+0x5e0>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005080:	fa93 f3a3 	rbit	r3, r3
 8005084:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8005090:	2320      	movs	r3, #32
 8005092:	e003      	b.n	800509c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	fab3 f383 	clz	r3, r3
 800509a:	b2db      	uxtb	r3, r3
 800509c:	3301      	adds	r3, #1
 800509e:	069b      	lsls	r3, r3, #26
 80050a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d109      	bne.n	80050c4 <HAL_ADC_ConfigChannel+0x600>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	0e9b      	lsrs	r3, r3, #26
 80050b6:	3301      	adds	r3, #1
 80050b8:	f003 031f 	and.w	r3, r3, #31
 80050bc:	2101      	movs	r1, #1
 80050be:	fa01 f303 	lsl.w	r3, r1, r3
 80050c2:	e017      	b.n	80050f4 <HAL_ADC_ConfigChannel+0x630>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ca:	6a3b      	ldr	r3, [r7, #32]
 80050cc:	fa93 f3a3 	rbit	r3, r3
 80050d0:	61fb      	str	r3, [r7, #28]
  return result;
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80050dc:	2320      	movs	r3, #32
 80050de:	e003      	b.n	80050e8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	fab3 f383 	clz	r3, r3
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	3301      	adds	r3, #1
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	2101      	movs	r1, #1
 80050f0:	fa01 f303 	lsl.w	r3, r1, r3
 80050f4:	ea42 0103 	orr.w	r1, r2, r3
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10d      	bne.n	8005120 <HAL_ADC_ConfigChannel+0x65c>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	0e9b      	lsrs	r3, r3, #26
 800510a:	3301      	adds	r3, #1
 800510c:	f003 021f 	and.w	r2, r3, #31
 8005110:	4613      	mov	r3, r2
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	4413      	add	r3, r2
 8005116:	3b1e      	subs	r3, #30
 8005118:	051b      	lsls	r3, r3, #20
 800511a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800511e:	e01d      	b.n	800515c <HAL_ADC_ConfigChannel+0x698>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	fa93 f3a3 	rbit	r3, r3
 800512c:	613b      	str	r3, [r7, #16]
  return result;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d103      	bne.n	8005140 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8005138:	2320      	movs	r3, #32
 800513a:	e005      	b.n	8005148 <HAL_ADC_ConfigChannel+0x684>
 800513c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	fab3 f383 	clz	r3, r3
 8005146:	b2db      	uxtb	r3, r3
 8005148:	3301      	adds	r3, #1
 800514a:	f003 021f 	and.w	r2, r3, #31
 800514e:	4613      	mov	r3, r2
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	4413      	add	r3, r2
 8005154:	3b1e      	subs	r3, #30
 8005156:	051b      	lsls	r3, r3, #20
 8005158:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800515c:	430b      	orrs	r3, r1
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	6892      	ldr	r2, [r2, #8]
 8005162:	4619      	mov	r1, r3
 8005164:	f7ff f91e 	bl	80043a4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	4b3d      	ldr	r3, [pc, #244]	; (8005264 <HAL_ADC_ConfigChannel+0x7a0>)
 800516e:	4013      	ands	r3, r2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d06c      	beq.n	800524e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005174:	483c      	ldr	r0, [pc, #240]	; (8005268 <HAL_ADC_ConfigChannel+0x7a4>)
 8005176:	f7ff f873 	bl	8004260 <LL_ADC_GetCommonPathInternalCh>
 800517a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a3a      	ldr	r2, [pc, #232]	; (800526c <HAL_ADC_ConfigChannel+0x7a8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d127      	bne.n	80051d8 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005188:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800518c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d121      	bne.n	80051d8 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a35      	ldr	r2, [pc, #212]	; (8005270 <HAL_ADC_ConfigChannel+0x7ac>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d157      	bne.n	800524e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800519e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051a6:	4619      	mov	r1, r3
 80051a8:	482f      	ldr	r0, [pc, #188]	; (8005268 <HAL_ADC_ConfigChannel+0x7a4>)
 80051aa:	f7ff f846 	bl	800423a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051ae:	4b31      	ldr	r3, [pc, #196]	; (8005274 <HAL_ADC_ConfigChannel+0x7b0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	099b      	lsrs	r3, r3, #6
 80051b4:	4a30      	ldr	r2, [pc, #192]	; (8005278 <HAL_ADC_ConfigChannel+0x7b4>)
 80051b6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ba:	099b      	lsrs	r3, r3, #6
 80051bc:	1c5a      	adds	r2, r3, #1
 80051be:	4613      	mov	r3, r2
 80051c0:	005b      	lsls	r3, r3, #1
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051c8:	e002      	b.n	80051d0 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f9      	bne.n	80051ca <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051d6:	e03a      	b.n	800524e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a27      	ldr	r2, [pc, #156]	; (800527c <HAL_ADC_ConfigChannel+0x7b8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d113      	bne.n	800520a <HAL_ADC_ConfigChannel+0x746>
 80051e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10d      	bne.n	800520a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a1f      	ldr	r2, [pc, #124]	; (8005270 <HAL_ADC_ConfigChannel+0x7ac>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d12a      	bne.n	800524e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005200:	4619      	mov	r1, r3
 8005202:	4819      	ldr	r0, [pc, #100]	; (8005268 <HAL_ADC_ConfigChannel+0x7a4>)
 8005204:	f7ff f819 	bl	800423a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005208:	e021      	b.n	800524e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a1c      	ldr	r2, [pc, #112]	; (8005280 <HAL_ADC_ConfigChannel+0x7bc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d11c      	bne.n	800524e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005214:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005218:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d116      	bne.n	800524e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a12      	ldr	r2, [pc, #72]	; (8005270 <HAL_ADC_ConfigChannel+0x7ac>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d111      	bne.n	800524e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800522a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800522e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005232:	4619      	mov	r1, r3
 8005234:	480c      	ldr	r0, [pc, #48]	; (8005268 <HAL_ADC_ConfigChannel+0x7a4>)
 8005236:	f7ff f800 	bl	800423a <LL_ADC_SetCommonPathInternalCh>
 800523a:	e008      	b.n	800524e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005240:	f043 0220 	orr.w	r2, r3, #32
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005256:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800525a:	4618      	mov	r0, r3
 800525c:	37d8      	adds	r7, #216	; 0xd8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	80080000 	.word	0x80080000
 8005268:	50040300 	.word	0x50040300
 800526c:	c7520000 	.word	0xc7520000
 8005270:	50040000 	.word	0x50040000
 8005274:	20000000 	.word	0x20000000
 8005278:	053e2d63 	.word	0x053e2d63
 800527c:	cb840000 	.word	0xcb840000
 8005280:	80000001 	.word	0x80000001

08005284 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b088      	sub	sp, #32
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800528e:	2300      	movs	r3, #0
 8005290:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff f996 	bl	80045cc <LL_ADC_REG_IsConversionOngoing>
 80052a0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff f9b7 	bl	800461a <LL_ADC_INJ_IsConversionOngoing>
 80052ac:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d103      	bne.n	80052bc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 8098 	beq.w	80053ec <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d02a      	beq.n	8005320 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	7e5b      	ldrb	r3, [r3, #25]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d126      	bne.n	8005320 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	7e1b      	ldrb	r3, [r3, #24]
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d122      	bne.n	8005320 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80052da:	2301      	movs	r3, #1
 80052dc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80052de:	e014      	b.n	800530a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	4a45      	ldr	r2, [pc, #276]	; (80053f8 <ADC_ConversionStop+0x174>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d90d      	bls.n	8005304 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ec:	f043 0210 	orr.w	r2, r3, #16
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f8:	f043 0201 	orr.w	r2, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e074      	b.n	80053ee <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	3301      	adds	r3, #1
 8005308:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005314:	2b40      	cmp	r3, #64	; 0x40
 8005316:	d1e3      	bne.n	80052e0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2240      	movs	r2, #64	; 0x40
 800531e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b02      	cmp	r3, #2
 8005324:	d014      	beq.n	8005350 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7ff f94e 	bl	80045cc <LL_ADC_REG_IsConversionOngoing>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00c      	beq.n	8005350 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f7ff f90b 	bl	8004556 <LL_ADC_IsDisableOngoing>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d104      	bne.n	8005350 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f7ff f92a 	bl	80045a4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d014      	beq.n	8005380 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff f95d 	bl	800461a <LL_ADC_INJ_IsConversionOngoing>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00c      	beq.n	8005380 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f7ff f8f3 	bl	8004556 <LL_ADC_IsDisableOngoing>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d104      	bne.n	8005380 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff f939 	bl	80045f2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d005      	beq.n	8005392 <ADC_ConversionStop+0x10e>
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b03      	cmp	r3, #3
 800538a:	d105      	bne.n	8005398 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800538c:	230c      	movs	r3, #12
 800538e:	617b      	str	r3, [r7, #20]
        break;
 8005390:	e005      	b.n	800539e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8005392:	2308      	movs	r3, #8
 8005394:	617b      	str	r3, [r7, #20]
        break;
 8005396:	e002      	b.n	800539e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8005398:	2304      	movs	r3, #4
 800539a:	617b      	str	r3, [r7, #20]
        break;
 800539c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800539e:	f7fe ff0d 	bl	80041bc <HAL_GetTick>
 80053a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80053a4:	e01b      	b.n	80053de <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80053a6:	f7fe ff09 	bl	80041bc <HAL_GetTick>
 80053aa:	4602      	mov	r2, r0
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	2b05      	cmp	r3, #5
 80053b2:	d914      	bls.n	80053de <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689a      	ldr	r2, [r3, #8]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	4013      	ands	r3, r2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00d      	beq.n	80053de <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c6:	f043 0210 	orr.w	r2, r3, #16
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d2:	f043 0201 	orr.w	r2, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e007      	b.n	80053ee <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	4013      	ands	r3, r2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1dc      	bne.n	80053a6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3720      	adds	r7, #32
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	a33fffff 	.word	0xa33fffff

080053fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b084      	sub	sp, #16
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005404:	2300      	movs	r3, #0
 8005406:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f7ff f88f 	bl	8004530 <LL_ADC_IsEnabled>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d169      	bne.n	80054ec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	4b36      	ldr	r3, [pc, #216]	; (80054f8 <ADC_Enable+0xfc>)
 8005420:	4013      	ands	r3, r2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00d      	beq.n	8005442 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800542a:	f043 0210 	orr.w	r2, r3, #16
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005436:	f043 0201 	orr.w	r2, r3, #1
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e055      	b.n	80054ee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff f84a 	bl	80044e0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800544c:	482b      	ldr	r0, [pc, #172]	; (80054fc <ADC_Enable+0x100>)
 800544e:	f7fe ff07 	bl	8004260 <LL_ADC_GetCommonPathInternalCh>
 8005452:	4603      	mov	r3, r0
 8005454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d013      	beq.n	8005484 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800545c:	4b28      	ldr	r3, [pc, #160]	; (8005500 <ADC_Enable+0x104>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	099b      	lsrs	r3, r3, #6
 8005462:	4a28      	ldr	r2, [pc, #160]	; (8005504 <ADC_Enable+0x108>)
 8005464:	fba2 2303 	umull	r2, r3, r2, r3
 8005468:	099b      	lsrs	r3, r3, #6
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	4613      	mov	r3, r2
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8005476:	e002      	b.n	800547e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	3b01      	subs	r3, #1
 800547c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1f9      	bne.n	8005478 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005484:	f7fe fe9a 	bl	80041bc <HAL_GetTick>
 8005488:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800548a:	e028      	b.n	80054de <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f7ff f84d 	bl	8004530 <LL_ADC_IsEnabled>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d104      	bne.n	80054a6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff f81d 	bl	80044e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80054a6:	f7fe fe89 	bl	80041bc <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d914      	bls.n	80054de <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d00d      	beq.n	80054de <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c6:	f043 0210 	orr.w	r2, r3, #16
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d2:	f043 0201 	orr.w	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e007      	b.n	80054ee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d1cf      	bne.n	800548c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3710      	adds	r7, #16
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	8000003f 	.word	0x8000003f
 80054fc:	50040300 	.word	0x50040300
 8005500:	20000000 	.word	0x20000000
 8005504:	053e2d63 	.word	0x053e2d63

08005508 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff f81e 	bl	8004556 <LL_ADC_IsDisableOngoing>
 800551a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff f805 	bl	8004530 <LL_ADC_IsEnabled>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d047      	beq.n	80055bc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d144      	bne.n	80055bc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 030d 	and.w	r3, r3, #13
 800553c:	2b01      	cmp	r3, #1
 800553e:	d10c      	bne.n	800555a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4618      	mov	r0, r3
 8005546:	f7fe ffdf 	bl	8004508 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2203      	movs	r2, #3
 8005550:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005552:	f7fe fe33 	bl	80041bc <HAL_GetTick>
 8005556:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005558:	e029      	b.n	80055ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555e:	f043 0210 	orr.w	r2, r3, #16
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556a:	f043 0201 	orr.w	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e023      	b.n	80055be <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005576:	f7fe fe21 	bl	80041bc <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d914      	bls.n	80055ae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00d      	beq.n	80055ae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005596:	f043 0210 	orr.w	r2, r3, #16
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a2:	f043 0201 	orr.w	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e007      	b.n	80055be <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1dc      	bne.n	8005576 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b084      	sub	sp, #16
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d14b      	bne.n	8005678 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0308 	and.w	r3, r3, #8
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d021      	beq.n	800563e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fe fe91 	bl	8004326 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d032      	beq.n	8005670 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d12b      	bne.n	8005670 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800562c:	2b00      	cmp	r3, #0
 800562e:	d11f      	bne.n	8005670 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005634:	f043 0201 	orr.w	r2, r3, #1
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	655a      	str	r2, [r3, #84]	; 0x54
 800563c:	e018      	b.n	8005670 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d111      	bne.n	8005670 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005650:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d105      	bne.n	8005670 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005668:	f043 0201 	orr.w	r2, r3, #1
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7fd fce1 	bl	8003038 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005676:	e00e      	b.n	8005696 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567c:	f003 0310 	and.w	r3, r3, #16
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f7ff fa12 	bl	8004aae <HAL_ADC_ErrorCallback>
}
 800568a:	e004      	b.n	8005696 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	4798      	blx	r3
}
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f7ff f9f4 	bl	8004a9a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80056b2:	bf00      	nop
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b084      	sub	sp, #16
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056cc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d8:	f043 0204 	orr.w	r2, r3, #4
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f7ff f9e4 	bl	8004aae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80056e6:	bf00      	nop
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <LL_ADC_StartCalibration>:
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
 80056f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005700:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800570a:	4313      	orrs	r3, r2
 800570c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	609a      	str	r2, [r3, #8]
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <LL_ADC_IsCalibrationOnGoing>:
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005734:	d101      	bne.n	800573a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005752:	2300      	movs	r3, #0
 8005754:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_ADCEx_Calibration_Start+0x1c>
 8005760:	2302      	movs	r3, #2
 8005762:	e04d      	b.n	8005800 <HAL_ADCEx_Calibration_Start+0xb8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff fecb 	bl	8005508 <ADC_Disable>
 8005772:	4603      	mov	r3, r0
 8005774:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005776:	7bfb      	ldrb	r3, [r7, #15]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d136      	bne.n	80057ea <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005780:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005784:	f023 0302 	bic.w	r3, r3, #2
 8005788:	f043 0202 	orr.w	r2, r3, #2
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff ffa9 	bl	80056ee <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800579c:	e014      	b.n	80057c8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	3301      	adds	r3, #1
 80057a2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80057aa:	d30d      	bcc.n	80057c8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b0:	f023 0312 	bic.w	r3, r3, #18
 80057b4:	f043 0210 	orr.w	r2, r3, #16
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e01b      	b.n	8005800 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f7ff ffa7 	bl	8005720 <LL_ADC_IsCalibrationOnGoing>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e2      	bne.n	800579e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057dc:	f023 0303 	bic.w	r3, r3, #3
 80057e0:	f043 0201 	orr.w	r2, r3, #1
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	655a      	str	r2, [r3, #84]	; 0x54
 80057e8:	e005      	b.n	80057f6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ee:	f043 0210 	orr.w	r2, r3, #16
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80057fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <__NVIC_SetPriorityGrouping>:
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f003 0307 	and.w	r3, r3, #7
 8005816:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005818:	4b0c      	ldr	r3, [pc, #48]	; (800584c <__NVIC_SetPriorityGrouping+0x44>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005824:	4013      	ands	r3, r2
 8005826:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005830:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800583a:	4a04      	ldr	r2, [pc, #16]	; (800584c <__NVIC_SetPriorityGrouping+0x44>)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	60d3      	str	r3, [r2, #12]
}
 8005840:	bf00      	nop
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	e000ed00 	.word	0xe000ed00

08005850 <__NVIC_GetPriorityGrouping>:
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005854:	4b04      	ldr	r3, [pc, #16]	; (8005868 <__NVIC_GetPriorityGrouping+0x18>)
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	0a1b      	lsrs	r3, r3, #8
 800585a:	f003 0307 	and.w	r3, r3, #7
}
 800585e:	4618      	mov	r0, r3
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	e000ed00 	.word	0xe000ed00

0800586c <__NVIC_EnableIRQ>:
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	4603      	mov	r3, r0
 8005874:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800587a:	2b00      	cmp	r3, #0
 800587c:	db0b      	blt.n	8005896 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	f003 021f 	and.w	r2, r3, #31
 8005884:	4907      	ldr	r1, [pc, #28]	; (80058a4 <__NVIC_EnableIRQ+0x38>)
 8005886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	2001      	movs	r0, #1
 800588e:	fa00 f202 	lsl.w	r2, r0, r2
 8005892:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	e000e100 	.word	0xe000e100

080058a8 <__NVIC_SetPriority>:
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	4603      	mov	r3, r0
 80058b0:	6039      	str	r1, [r7, #0]
 80058b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	db0a      	blt.n	80058d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	490c      	ldr	r1, [pc, #48]	; (80058f4 <__NVIC_SetPriority+0x4c>)
 80058c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c6:	0112      	lsls	r2, r2, #4
 80058c8:	b2d2      	uxtb	r2, r2
 80058ca:	440b      	add	r3, r1
 80058cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80058d0:	e00a      	b.n	80058e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	4908      	ldr	r1, [pc, #32]	; (80058f8 <__NVIC_SetPriority+0x50>)
 80058d8:	79fb      	ldrb	r3, [r7, #7]
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	3b04      	subs	r3, #4
 80058e0:	0112      	lsls	r2, r2, #4
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	440b      	add	r3, r1
 80058e6:	761a      	strb	r2, [r3, #24]
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	e000e100 	.word	0xe000e100
 80058f8:	e000ed00 	.word	0xe000ed00

080058fc <NVIC_EncodePriority>:
{
 80058fc:	b480      	push	{r7}
 80058fe:	b089      	sub	sp, #36	; 0x24
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f1c3 0307 	rsb	r3, r3, #7
 8005916:	2b04      	cmp	r3, #4
 8005918:	bf28      	it	cs
 800591a:	2304      	movcs	r3, #4
 800591c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	3304      	adds	r3, #4
 8005922:	2b06      	cmp	r3, #6
 8005924:	d902      	bls.n	800592c <NVIC_EncodePriority+0x30>
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	3b03      	subs	r3, #3
 800592a:	e000      	b.n	800592e <NVIC_EncodePriority+0x32>
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005930:	f04f 32ff 	mov.w	r2, #4294967295
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	fa02 f303 	lsl.w	r3, r2, r3
 800593a:	43da      	mvns	r2, r3
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	401a      	ands	r2, r3
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005944:	f04f 31ff 	mov.w	r1, #4294967295
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	fa01 f303 	lsl.w	r3, r1, r3
 800594e:	43d9      	mvns	r1, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005954:	4313      	orrs	r3, r2
}
 8005956:	4618      	mov	r0, r3
 8005958:	3724      	adds	r7, #36	; 0x24
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
	...

08005964 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	3b01      	subs	r3, #1
 8005970:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005974:	d301      	bcc.n	800597a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005976:	2301      	movs	r3, #1
 8005978:	e00f      	b.n	800599a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800597a:	4a0a      	ldr	r2, [pc, #40]	; (80059a4 <SysTick_Config+0x40>)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	3b01      	subs	r3, #1
 8005980:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005982:	210f      	movs	r1, #15
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	f7ff ff8e 	bl	80058a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800598c:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <SysTick_Config+0x40>)
 800598e:	2200      	movs	r2, #0
 8005990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005992:	4b04      	ldr	r3, [pc, #16]	; (80059a4 <SysTick_Config+0x40>)
 8005994:	2207      	movs	r2, #7
 8005996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	e000e010 	.word	0xe000e010

080059a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f7ff ff29 	bl	8005808 <__NVIC_SetPriorityGrouping>
}
 80059b6:	bf00      	nop
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b086      	sub	sp, #24
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	4603      	mov	r3, r0
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	607a      	str	r2, [r7, #4]
 80059ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80059cc:	2300      	movs	r3, #0
 80059ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80059d0:	f7ff ff3e 	bl	8005850 <__NVIC_GetPriorityGrouping>
 80059d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	68b9      	ldr	r1, [r7, #8]
 80059da:	6978      	ldr	r0, [r7, #20]
 80059dc:	f7ff ff8e 	bl	80058fc <NVIC_EncodePriority>
 80059e0:	4602      	mov	r2, r0
 80059e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059e6:	4611      	mov	r1, r2
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff ff5d 	bl	80058a8 <__NVIC_SetPriority>
}
 80059ee:	bf00      	nop
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b082      	sub	sp, #8
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	4603      	mov	r3, r0
 80059fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff ff31 	bl	800586c <__NVIC_EnableIRQ>
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff ffa2 	bl	8005964 <SysTick_Config>
 8005a20:	4603      	mov	r3, r0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e098      	b.n	8005b70 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	4b4d      	ldr	r3, [pc, #308]	; (8005b7c <HAL_DMA_Init+0x150>)
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d80f      	bhi.n	8005a6a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4b4b      	ldr	r3, [pc, #300]	; (8005b80 <HAL_DMA_Init+0x154>)
 8005a52:	4413      	add	r3, r2
 8005a54:	4a4b      	ldr	r2, [pc, #300]	; (8005b84 <HAL_DMA_Init+0x158>)
 8005a56:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5a:	091b      	lsrs	r3, r3, #4
 8005a5c:	009a      	lsls	r2, r3, #2
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a48      	ldr	r2, [pc, #288]	; (8005b88 <HAL_DMA_Init+0x15c>)
 8005a66:	641a      	str	r2, [r3, #64]	; 0x40
 8005a68:	e00e      	b.n	8005a88 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	4b46      	ldr	r3, [pc, #280]	; (8005b8c <HAL_DMA_Init+0x160>)
 8005a72:	4413      	add	r3, r2
 8005a74:	4a43      	ldr	r2, [pc, #268]	; (8005b84 <HAL_DMA_Init+0x158>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	091b      	lsrs	r3, r3, #4
 8005a7c:	009a      	lsls	r2, r3, #2
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a42      	ldr	r2, [pc, #264]	; (8005b90 <HAL_DMA_Init+0x164>)
 8005a86:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005aac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ac4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ae2:	d039      	beq.n	8005b58 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae8:	4a27      	ldr	r2, [pc, #156]	; (8005b88 <HAL_DMA_Init+0x15c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d11a      	bne.n	8005b24 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005aee:	4b29      	ldr	r3, [pc, #164]	; (8005b94 <HAL_DMA_Init+0x168>)
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af6:	f003 031c 	and.w	r3, r3, #28
 8005afa:	210f      	movs	r1, #15
 8005afc:	fa01 f303 	lsl.w	r3, r1, r3
 8005b00:	43db      	mvns	r3, r3
 8005b02:	4924      	ldr	r1, [pc, #144]	; (8005b94 <HAL_DMA_Init+0x168>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005b08:	4b22      	ldr	r3, [pc, #136]	; (8005b94 <HAL_DMA_Init+0x168>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6859      	ldr	r1, [r3, #4]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b14:	f003 031c 	and.w	r3, r3, #28
 8005b18:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1c:	491d      	ldr	r1, [pc, #116]	; (8005b94 <HAL_DMA_Init+0x168>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	600b      	str	r3, [r1, #0]
 8005b22:	e019      	b.n	8005b58 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005b24:	4b1c      	ldr	r3, [pc, #112]	; (8005b98 <HAL_DMA_Init+0x16c>)
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2c:	f003 031c 	and.w	r3, r3, #28
 8005b30:	210f      	movs	r1, #15
 8005b32:	fa01 f303 	lsl.w	r3, r1, r3
 8005b36:	43db      	mvns	r3, r3
 8005b38:	4917      	ldr	r1, [pc, #92]	; (8005b98 <HAL_DMA_Init+0x16c>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005b3e:	4b16      	ldr	r3, [pc, #88]	; (8005b98 <HAL_DMA_Init+0x16c>)
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6859      	ldr	r1, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4a:	f003 031c 	and.w	r3, r3, #28
 8005b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b52:	4911      	ldr	r1, [pc, #68]	; (8005b98 <HAL_DMA_Init+0x16c>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2201      	movs	r2, #1
 8005b62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	40020407 	.word	0x40020407
 8005b80:	bffdfff8 	.word	0xbffdfff8
 8005b84:	cccccccd 	.word	0xcccccccd
 8005b88:	40020000 	.word	0x40020000
 8005b8c:	bffdfbf8 	.word	0xbffdfbf8
 8005b90:	40020400 	.word	0x40020400
 8005b94:	400200a8 	.word	0x400200a8
 8005b98:	400204a8 	.word	0x400204a8

08005b9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_DMA_Start_IT+0x20>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e04b      	b.n	8005c54 <HAL_DMA_Start_IT+0xb8>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d13a      	bne.n	8005c46 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f022 0201 	bic.w	r2, r2, #1
 8005bec:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f000 f95f 	bl	8005eb8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d008      	beq.n	8005c14 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f042 020e 	orr.w	r2, r2, #14
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	e00f      	b.n	8005c34 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0204 	bic.w	r2, r2, #4
 8005c22:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f042 020a 	orr.w	r2, r2, #10
 8005c32:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0201 	orr.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	e005      	b.n	8005c52 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c4e:	2302      	movs	r3, #2
 8005c50:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005c52:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c64:	2300      	movs	r3, #0
 8005c66:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d008      	beq.n	8005c86 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2204      	movs	r2, #4
 8005c78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e022      	b.n	8005ccc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 020e 	bic.w	r2, r2, #14
 8005c94:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f022 0201 	bic.w	r2, r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005caa:	f003 021c 	and.w	r2, r3, #28
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8005cb8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005cca:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3714      	adds	r7, #20
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d005      	beq.n	8005cfc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2204      	movs	r2, #4
 8005cf4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	73fb      	strb	r3, [r7, #15]
 8005cfa:	e029      	b.n	8005d50 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f022 020e 	bic.w	r2, r2, #14
 8005d0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 0201 	bic.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d20:	f003 021c 	and.w	r2, r3, #28
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d28:	2101      	movs	r1, #1
 8005d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8005d2e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	4798      	blx	r3
    }
  }
  return status;
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d76:	f003 031c 	and.w	r3, r3, #28
 8005d7a:	2204      	movs	r2, #4
 8005d7c:	409a      	lsls	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4013      	ands	r3, r2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d026      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x7a>
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d021      	beq.n	8005dd4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0320 	and.w	r3, r3, #32
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d107      	bne.n	8005dae <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0204 	bic.w	r2, r2, #4
 8005dac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db2:	f003 021c 	and.w	r2, r3, #28
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	2104      	movs	r1, #4
 8005dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8005dc0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d071      	beq.n	8005eae <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005dd2:	e06c      	b.n	8005eae <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd8:	f003 031c 	and.w	r3, r3, #28
 8005ddc:	2202      	movs	r2, #2
 8005dde:	409a      	lsls	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4013      	ands	r3, r2
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d02e      	beq.n	8005e46 <HAL_DMA_IRQHandler+0xec>
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d029      	beq.n	8005e46 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10b      	bne.n	8005e18 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 020a 	bic.w	r2, r2, #10
 8005e0e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e1c:	f003 021c 	and.w	r2, r3, #28
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e24:	2102      	movs	r1, #2
 8005e26:	fa01 f202 	lsl.w	r2, r1, r2
 8005e2a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d038      	beq.n	8005eae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005e44:	e033      	b.n	8005eae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e4a:	f003 031c 	and.w	r3, r3, #28
 8005e4e:	2208      	movs	r2, #8
 8005e50:	409a      	lsls	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4013      	ands	r3, r2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d02a      	beq.n	8005eb0 <HAL_DMA_IRQHandler+0x156>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d025      	beq.n	8005eb0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 020e 	bic.w	r2, r2, #14
 8005e72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e78:	f003 021c 	and.w	r2, r3, #28
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e80:	2101      	movs	r1, #1
 8005e82:	fa01 f202 	lsl.w	r2, r1, r2
 8005e86:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d004      	beq.n	8005eb0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005eae:	bf00      	nop
 8005eb0:	bf00      	nop
}
 8005eb2:	3710      	adds	r7, #16
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eca:	f003 021c 	and.w	r2, r3, #28
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ed8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	2b10      	cmp	r3, #16
 8005ee8:	d108      	bne.n	8005efc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005efa:	e007      	b.n	8005f0c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68ba      	ldr	r2, [r7, #8]
 8005f02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	60da      	str	r2, [r3, #12]
}
 8005f0c:	bf00      	nop
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005f26:	e148      	b.n	80061ba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	fa01 f303 	lsl.w	r3, r1, r3
 8005f34:	4013      	ands	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 813a 	beq.w	80061b4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f003 0303 	and.w	r3, r3, #3
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d005      	beq.n	8005f58 <HAL_GPIO_Init+0x40>
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d130      	bne.n	8005fba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	2203      	movs	r2, #3
 8005f64:	fa02 f303 	lsl.w	r3, r2, r3
 8005f68:	43db      	mvns	r3, r3
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f8e:	2201      	movs	r2, #1
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	fa02 f303 	lsl.w	r3, r2, r3
 8005f96:	43db      	mvns	r3, r3
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	091b      	lsrs	r3, r3, #4
 8005fa4:	f003 0201 	and.w	r2, r3, #1
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	2b03      	cmp	r3, #3
 8005fc4:	d017      	beq.n	8005ff6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	2203      	movs	r2, #3
 8005fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd6:	43db      	mvns	r3, r3
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	689a      	ldr	r2, [r3, #8]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	f003 0303 	and.w	r3, r3, #3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d123      	bne.n	800604a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	08da      	lsrs	r2, r3, #3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	3208      	adds	r2, #8
 800600a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	220f      	movs	r2, #15
 800601a:	fa02 f303 	lsl.w	r3, r2, r3
 800601e:	43db      	mvns	r3, r3
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	4013      	ands	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	fa02 f303 	lsl.w	r3, r2, r3
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4313      	orrs	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	08da      	lsrs	r2, r3, #3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3208      	adds	r2, #8
 8006044:	6939      	ldr	r1, [r7, #16]
 8006046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	2203      	movs	r2, #3
 8006056:	fa02 f303 	lsl.w	r3, r2, r3
 800605a:	43db      	mvns	r3, r3
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4013      	ands	r3, r2
 8006060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f003 0203 	and.w	r2, r3, #3
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006086:	2b00      	cmp	r3, #0
 8006088:	f000 8094 	beq.w	80061b4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800608c:	4b52      	ldr	r3, [pc, #328]	; (80061d8 <HAL_GPIO_Init+0x2c0>)
 800608e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006090:	4a51      	ldr	r2, [pc, #324]	; (80061d8 <HAL_GPIO_Init+0x2c0>)
 8006092:	f043 0301 	orr.w	r3, r3, #1
 8006096:	6613      	str	r3, [r2, #96]	; 0x60
 8006098:	4b4f      	ldr	r3, [pc, #316]	; (80061d8 <HAL_GPIO_Init+0x2c0>)
 800609a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	60bb      	str	r3, [r7, #8]
 80060a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80060a4:	4a4d      	ldr	r2, [pc, #308]	; (80061dc <HAL_GPIO_Init+0x2c4>)
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	089b      	lsrs	r3, r3, #2
 80060aa:	3302      	adds	r3, #2
 80060ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	220f      	movs	r2, #15
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	43db      	mvns	r3, r3
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	4013      	ands	r3, r2
 80060c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80060ce:	d00d      	beq.n	80060ec <HAL_GPIO_Init+0x1d4>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a43      	ldr	r2, [pc, #268]	; (80061e0 <HAL_GPIO_Init+0x2c8>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d007      	beq.n	80060e8 <HAL_GPIO_Init+0x1d0>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a42      	ldr	r2, [pc, #264]	; (80061e4 <HAL_GPIO_Init+0x2cc>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d101      	bne.n	80060e4 <HAL_GPIO_Init+0x1cc>
 80060e0:	2302      	movs	r3, #2
 80060e2:	e004      	b.n	80060ee <HAL_GPIO_Init+0x1d6>
 80060e4:	2307      	movs	r3, #7
 80060e6:	e002      	b.n	80060ee <HAL_GPIO_Init+0x1d6>
 80060e8:	2301      	movs	r3, #1
 80060ea:	e000      	b.n	80060ee <HAL_GPIO_Init+0x1d6>
 80060ec:	2300      	movs	r3, #0
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	f002 0203 	and.w	r2, r2, #3
 80060f4:	0092      	lsls	r2, r2, #2
 80060f6:	4093      	lsls	r3, r2
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80060fe:	4937      	ldr	r1, [pc, #220]	; (80061dc <HAL_GPIO_Init+0x2c4>)
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	089b      	lsrs	r3, r3, #2
 8006104:	3302      	adds	r3, #2
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800610c:	4b36      	ldr	r3, [pc, #216]	; (80061e8 <HAL_GPIO_Init+0x2d0>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	43db      	mvns	r3, r3
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4013      	ands	r3, r2
 800611a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4313      	orrs	r3, r2
 800612e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006130:	4a2d      	ldr	r2, [pc, #180]	; (80061e8 <HAL_GPIO_Init+0x2d0>)
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006136:	4b2c      	ldr	r3, [pc, #176]	; (80061e8 <HAL_GPIO_Init+0x2d0>)
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	43db      	mvns	r3, r3
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	4013      	ands	r3, r2
 8006144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d003      	beq.n	800615a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800615a:	4a23      	ldr	r2, [pc, #140]	; (80061e8 <HAL_GPIO_Init+0x2d0>)
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006160:	4b21      	ldr	r3, [pc, #132]	; (80061e8 <HAL_GPIO_Init+0x2d0>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	43db      	mvns	r3, r3
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4013      	ands	r3, r2
 800616e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006184:	4a18      	ldr	r2, [pc, #96]	; (80061e8 <HAL_GPIO_Init+0x2d0>)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800618a:	4b17      	ldr	r3, [pc, #92]	; (80061e8 <HAL_GPIO_Init+0x2d0>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	43db      	mvns	r3, r3
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4013      	ands	r3, r2
 8006198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d003      	beq.n	80061ae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80061ae:	4a0e      	ldr	r2, [pc, #56]	; (80061e8 <HAL_GPIO_Init+0x2d0>)
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	3301      	adds	r3, #1
 80061b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	fa22 f303 	lsr.w	r3, r2, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f47f aeaf 	bne.w	8005f28 <HAL_GPIO_Init+0x10>
  }
}
 80061ca:	bf00      	nop
 80061cc:	bf00      	nop
 80061ce:	371c      	adds	r7, #28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	40021000 	.word	0x40021000
 80061dc:	40010000 	.word	0x40010000
 80061e0:	48000400 	.word	0x48000400
 80061e4:	48000800 	.word	0x48000800
 80061e8:	40010400 	.word	0x40010400

080061ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	460b      	mov	r3, r1
 80061f6:	807b      	strh	r3, [r7, #2]
 80061f8:	4613      	mov	r3, r2
 80061fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061fc:	787b      	ldrb	r3, [r7, #1]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d003      	beq.n	800620a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006202:	887a      	ldrh	r2, [r7, #2]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006208:	e002      	b.n	8006210 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800620a:	887a      	ldrh	r2, [r7, #2]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800621c:	b480      	push	{r7}
 800621e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006220:	4b05      	ldr	r3, [pc, #20]	; (8006238 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a04      	ldr	r2, [pc, #16]	; (8006238 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800622a:	6013      	str	r3, [r2, #0]
}
 800622c:	bf00      	nop
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop
 8006238:	40007000 	.word	0x40007000

0800623c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10c      	bne.n	8006268 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800624e:	4b13      	ldr	r3, [pc, #76]	; (800629c <HAL_PWR_EnterSLEEPMode+0x60>)
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800625a:	d10e      	bne.n	800627a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800625c:	f000 f896 	bl	800638c <HAL_PWREx_DisableLowPowerRunMode>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d009      	beq.n	800627a <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8006266:	e016      	b.n	8006296 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8006268:	4b0c      	ldr	r3, [pc, #48]	; (800629c <HAL_PWR_EnterSLEEPMode+0x60>)
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006270:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006274:	d001      	beq.n	800627a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8006276:	f000 f879 	bl	800636c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800627a:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	4a08      	ldr	r2, [pc, #32]	; (80062a0 <HAL_PWR_EnterSLEEPMode+0x64>)
 8006280:	f023 0304 	bic.w	r3, r3, #4
 8006284:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800628c:	bf30      	wfi
 800628e:	e002      	b.n	8006296 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006290:	bf40      	sev
    __WFE();
 8006292:	bf20      	wfe
    __WFE();
 8006294:	bf20      	wfe
  }

}
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40007000 	.word	0x40007000
 80062a0:	e000ed00 	.word	0xe000ed00

080062a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80062a8:	4b04      	ldr	r3, [pc, #16]	; (80062bc <HAL_PWREx_GetVoltageRange+0x18>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	40007000 	.word	0x40007000

080062c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062ce:	d130      	bne.n	8006332 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80062d0:	4b23      	ldr	r3, [pc, #140]	; (8006360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80062d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062dc:	d038      	beq.n	8006350 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80062de:	4b20      	ldr	r3, [pc, #128]	; (8006360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80062e6:	4a1e      	ldr	r2, [pc, #120]	; (8006360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80062e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80062ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80062ee:	4b1d      	ldr	r3, [pc, #116]	; (8006364 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2232      	movs	r2, #50	; 0x32
 80062f4:	fb02 f303 	mul.w	r3, r2, r3
 80062f8:	4a1b      	ldr	r2, [pc, #108]	; (8006368 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80062fa:	fba2 2303 	umull	r2, r3, r2, r3
 80062fe:	0c9b      	lsrs	r3, r3, #18
 8006300:	3301      	adds	r3, #1
 8006302:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006304:	e002      	b.n	800630c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3b01      	subs	r3, #1
 800630a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800630c:	4b14      	ldr	r3, [pc, #80]	; (8006360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006318:	d102      	bne.n	8006320 <HAL_PWREx_ControlVoltageScaling+0x60>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d1f2      	bne.n	8006306 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006320:	4b0f      	ldr	r3, [pc, #60]	; (8006360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800632c:	d110      	bne.n	8006350 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e00f      	b.n	8006352 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006332:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800633a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800633e:	d007      	beq.n	8006350 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006340:	4b07      	ldr	r3, [pc, #28]	; (8006360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006348:	4a05      	ldr	r2, [pc, #20]	; (8006360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800634a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800634e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40007000 	.word	0x40007000
 8006364:	20000000 	.word	0x20000000
 8006368:	431bde83 	.word	0x431bde83

0800636c <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006370:	4b05      	ldr	r3, [pc, #20]	; (8006388 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a04      	ldr	r2, [pc, #16]	; (8006388 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8006376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800637a:	6013      	str	r3, [r2, #0]
}
 800637c:	bf00      	nop
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	40007000 	.word	0x40007000

0800638c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8006392:	4b17      	ldr	r3, [pc, #92]	; (80063f0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a16      	ldr	r2, [pc, #88]	; (80063f0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006398:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800639c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800639e:	4b15      	ldr	r3, [pc, #84]	; (80063f4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2232      	movs	r2, #50	; 0x32
 80063a4:	fb02 f303 	mul.w	r3, r2, r3
 80063a8:	4a13      	ldr	r2, [pc, #76]	; (80063f8 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80063aa:	fba2 2303 	umull	r2, r3, r2, r3
 80063ae:	0c9b      	lsrs	r3, r3, #18
 80063b0:	3301      	adds	r3, #1
 80063b2:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80063b4:	e002      	b.n	80063bc <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80063bc:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c8:	d102      	bne.n	80063d0 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1f2      	bne.n	80063b6 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80063d0:	4b07      	ldr	r3, [pc, #28]	; (80063f0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80063d2:	695b      	ldr	r3, [r3, #20]
 80063d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063dc:	d101      	bne.n	80063e2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e000      	b.n	80063e4 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	40007000 	.word	0x40007000
 80063f4:	20000000 	.word	0x20000000
 80063f8:	431bde83 	.word	0x431bde83

080063fc <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8006406:	4b11      	ldr	r3, [pc, #68]	; (800644c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f023 0307 	bic.w	r3, r3, #7
 800640e:	4a0f      	ldr	r2, [pc, #60]	; (800644c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8006410:	f043 0302 	orr.w	r3, r3, #2
 8006414:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006416:	4b0e      	ldr	r3, [pc, #56]	; (8006450 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	4a0d      	ldr	r2, [pc, #52]	; (8006450 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800641c:	f043 0304 	orr.w	r3, r3, #4
 8006420:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8006422:	79fb      	ldrb	r3, [r7, #7]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006428:	bf30      	wfi
 800642a:	e002      	b.n	8006432 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800642c:	bf40      	sev
    __WFE();
 800642e:	bf20      	wfe
    __WFE();
 8006430:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006432:	4b07      	ldr	r3, [pc, #28]	; (8006450 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	4a06      	ldr	r2, [pc, #24]	; (8006450 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8006438:	f023 0304 	bic.w	r3, r3, #4
 800643c:	6113      	str	r3, [r2, #16]
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	40007000 	.word	0x40007000
 8006450:	e000ed00 	.word	0xe000ed00

08006454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b088      	sub	sp, #32
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d102      	bne.n	8006468 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	f000 bc02 	b.w	8006c6c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006468:	4b96      	ldr	r3, [pc, #600]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f003 030c 	and.w	r3, r3, #12
 8006470:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006472:	4b94      	ldr	r3, [pc, #592]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f003 0303 	and.w	r3, r3, #3
 800647a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 0310 	and.w	r3, r3, #16
 8006484:	2b00      	cmp	r3, #0
 8006486:	f000 80e4 	beq.w	8006652 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d007      	beq.n	80064a0 <HAL_RCC_OscConfig+0x4c>
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	2b0c      	cmp	r3, #12
 8006494:	f040 808b 	bne.w	80065ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	2b01      	cmp	r3, #1
 800649c:	f040 8087 	bne.w	80065ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80064a0:	4b88      	ldr	r3, [pc, #544]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <HAL_RCC_OscConfig+0x64>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e3d9      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a1a      	ldr	r2, [r3, #32]
 80064bc:	4b81      	ldr	r3, [pc, #516]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0308 	and.w	r3, r3, #8
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d004      	beq.n	80064d2 <HAL_RCC_OscConfig+0x7e>
 80064c8:	4b7e      	ldr	r3, [pc, #504]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064d0:	e005      	b.n	80064de <HAL_RCC_OscConfig+0x8a>
 80064d2:	4b7c      	ldr	r3, [pc, #496]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 80064d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064d8:	091b      	lsrs	r3, r3, #4
 80064da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064de:	4293      	cmp	r3, r2
 80064e0:	d223      	bcs.n	800652a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fd54 	bl	8006f94 <RCC_SetFlashLatencyFromMSIRange>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e3ba      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064f6:	4b73      	ldr	r3, [pc, #460]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a72      	ldr	r2, [pc, #456]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 80064fc:	f043 0308 	orr.w	r3, r3, #8
 8006500:	6013      	str	r3, [r2, #0]
 8006502:	4b70      	ldr	r3, [pc, #448]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a1b      	ldr	r3, [r3, #32]
 800650e:	496d      	ldr	r1, [pc, #436]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 8006510:	4313      	orrs	r3, r2
 8006512:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006514:	4b6b      	ldr	r3, [pc, #428]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	021b      	lsls	r3, r3, #8
 8006522:	4968      	ldr	r1, [pc, #416]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 8006524:	4313      	orrs	r3, r2
 8006526:	604b      	str	r3, [r1, #4]
 8006528:	e025      	b.n	8006576 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800652a:	4b66      	ldr	r3, [pc, #408]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a65      	ldr	r2, [pc, #404]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 8006530:	f043 0308 	orr.w	r3, r3, #8
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	4b63      	ldr	r3, [pc, #396]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	4960      	ldr	r1, [pc, #384]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 8006544:	4313      	orrs	r3, r2
 8006546:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006548:	4b5e      	ldr	r3, [pc, #376]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	021b      	lsls	r3, r3, #8
 8006556:	495b      	ldr	r1, [pc, #364]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 8006558:	4313      	orrs	r3, r2
 800655a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d109      	bne.n	8006576 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fd14 	bl	8006f94 <RCC_SetFlashLatencyFromMSIRange>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e37a      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006576:	f000 fc81 	bl	8006e7c <HAL_RCC_GetSysClockFreq>
 800657a:	4602      	mov	r2, r0
 800657c:	4b51      	ldr	r3, [pc, #324]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	091b      	lsrs	r3, r3, #4
 8006582:	f003 030f 	and.w	r3, r3, #15
 8006586:	4950      	ldr	r1, [pc, #320]	; (80066c8 <HAL_RCC_OscConfig+0x274>)
 8006588:	5ccb      	ldrb	r3, [r1, r3]
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	fa22 f303 	lsr.w	r3, r2, r3
 8006592:	4a4e      	ldr	r2, [pc, #312]	; (80066cc <HAL_RCC_OscConfig+0x278>)
 8006594:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006596:	4b4e      	ldr	r3, [pc, #312]	; (80066d0 <HAL_RCC_OscConfig+0x27c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4618      	mov	r0, r3
 800659c:	f7fd fdbe 	bl	800411c <HAL_InitTick>
 80065a0:	4603      	mov	r3, r0
 80065a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d052      	beq.n	8006650 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	e35e      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d032      	beq.n	800661c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80065b6:	4b43      	ldr	r3, [pc, #268]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a42      	ldr	r2, [pc, #264]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 80065bc:	f043 0301 	orr.w	r3, r3, #1
 80065c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80065c2:	f7fd fdfb 	bl	80041bc <HAL_GetTick>
 80065c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065c8:	e008      	b.n	80065dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80065ca:	f7fd fdf7 	bl	80041bc <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	2b02      	cmp	r3, #2
 80065d6:	d901      	bls.n	80065dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80065d8:	2303      	movs	r3, #3
 80065da:	e347      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80065dc:	4b39      	ldr	r3, [pc, #228]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d0f0      	beq.n	80065ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80065e8:	4b36      	ldr	r3, [pc, #216]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a35      	ldr	r2, [pc, #212]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 80065ee:	f043 0308 	orr.w	r3, r3, #8
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	4b33      	ldr	r3, [pc, #204]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a1b      	ldr	r3, [r3, #32]
 8006600:	4930      	ldr	r1, [pc, #192]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 8006602:	4313      	orrs	r3, r2
 8006604:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006606:	4b2f      	ldr	r3, [pc, #188]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	021b      	lsls	r3, r3, #8
 8006614:	492b      	ldr	r1, [pc, #172]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 8006616:	4313      	orrs	r3, r2
 8006618:	604b      	str	r3, [r1, #4]
 800661a:	e01a      	b.n	8006652 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800661c:	4b29      	ldr	r3, [pc, #164]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a28      	ldr	r2, [pc, #160]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 8006622:	f023 0301 	bic.w	r3, r3, #1
 8006626:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006628:	f7fd fdc8 	bl	80041bc <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006630:	f7fd fdc4 	bl	80041bc <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e314      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006642:	4b20      	ldr	r3, [pc, #128]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1f0      	bne.n	8006630 <HAL_RCC_OscConfig+0x1dc>
 800664e:	e000      	b.n	8006652 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006650:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d073      	beq.n	8006746 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	2b08      	cmp	r3, #8
 8006662:	d005      	beq.n	8006670 <HAL_RCC_OscConfig+0x21c>
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	2b0c      	cmp	r3, #12
 8006668:	d10e      	bne.n	8006688 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b03      	cmp	r3, #3
 800666e:	d10b      	bne.n	8006688 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006670:	4b14      	ldr	r3, [pc, #80]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006678:	2b00      	cmp	r3, #0
 800667a:	d063      	beq.n	8006744 <HAL_RCC_OscConfig+0x2f0>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d15f      	bne.n	8006744 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e2f1      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006690:	d106      	bne.n	80066a0 <HAL_RCC_OscConfig+0x24c>
 8006692:	4b0c      	ldr	r3, [pc, #48]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a0b      	ldr	r2, [pc, #44]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 8006698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	e025      	b.n	80066ec <HAL_RCC_OscConfig+0x298>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066a8:	d114      	bne.n	80066d4 <HAL_RCC_OscConfig+0x280>
 80066aa:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a05      	ldr	r2, [pc, #20]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 80066b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	4b03      	ldr	r3, [pc, #12]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a02      	ldr	r2, [pc, #8]	; (80066c4 <HAL_RCC_OscConfig+0x270>)
 80066bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	e013      	b.n	80066ec <HAL_RCC_OscConfig+0x298>
 80066c4:	40021000 	.word	0x40021000
 80066c8:	0800ced8 	.word	0x0800ced8
 80066cc:	20000000 	.word	0x20000000
 80066d0:	20000008 	.word	0x20000008
 80066d4:	4ba0      	ldr	r3, [pc, #640]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a9f      	ldr	r2, [pc, #636]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 80066da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	4b9d      	ldr	r3, [pc, #628]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a9c      	ldr	r2, [pc, #624]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 80066e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d013      	beq.n	800671c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f4:	f7fd fd62 	bl	80041bc <HAL_GetTick>
 80066f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066fa:	e008      	b.n	800670e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066fc:	f7fd fd5e 	bl	80041bc <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b64      	cmp	r3, #100	; 0x64
 8006708:	d901      	bls.n	800670e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e2ae      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800670e:	4b92      	ldr	r3, [pc, #584]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d0f0      	beq.n	80066fc <HAL_RCC_OscConfig+0x2a8>
 800671a:	e014      	b.n	8006746 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671c:	f7fd fd4e 	bl	80041bc <HAL_GetTick>
 8006720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006724:	f7fd fd4a 	bl	80041bc <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b64      	cmp	r3, #100	; 0x64
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e29a      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006736:	4b88      	ldr	r3, [pc, #544]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f0      	bne.n	8006724 <HAL_RCC_OscConfig+0x2d0>
 8006742:	e000      	b.n	8006746 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d060      	beq.n	8006814 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	2b04      	cmp	r3, #4
 8006756:	d005      	beq.n	8006764 <HAL_RCC_OscConfig+0x310>
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	2b0c      	cmp	r3, #12
 800675c:	d119      	bne.n	8006792 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b02      	cmp	r3, #2
 8006762:	d116      	bne.n	8006792 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006764:	4b7c      	ldr	r3, [pc, #496]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800676c:	2b00      	cmp	r3, #0
 800676e:	d005      	beq.n	800677c <HAL_RCC_OscConfig+0x328>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68db      	ldr	r3, [r3, #12]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d101      	bne.n	800677c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e277      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800677c:	4b76      	ldr	r3, [pc, #472]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	061b      	lsls	r3, r3, #24
 800678a:	4973      	ldr	r1, [pc, #460]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 800678c:	4313      	orrs	r3, r2
 800678e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006790:	e040      	b.n	8006814 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d023      	beq.n	80067e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800679a:	4b6f      	ldr	r3, [pc, #444]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a6e      	ldr	r2, [pc, #440]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 80067a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067a6:	f7fd fd09 	bl	80041bc <HAL_GetTick>
 80067aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067ac:	e008      	b.n	80067c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067ae:	f7fd fd05 	bl	80041bc <HAL_GetTick>
 80067b2:	4602      	mov	r2, r0
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	1ad3      	subs	r3, r2, r3
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d901      	bls.n	80067c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e255      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80067c0:	4b65      	ldr	r3, [pc, #404]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0f0      	beq.n	80067ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067cc:	4b62      	ldr	r3, [pc, #392]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	061b      	lsls	r3, r3, #24
 80067da:	495f      	ldr	r1, [pc, #380]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	604b      	str	r3, [r1, #4]
 80067e0:	e018      	b.n	8006814 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067e2:	4b5d      	ldr	r3, [pc, #372]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a5c      	ldr	r2, [pc, #368]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 80067e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ee:	f7fd fce5 	bl	80041bc <HAL_GetTick>
 80067f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80067f4:	e008      	b.n	8006808 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067f6:	f7fd fce1 	bl	80041bc <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d901      	bls.n	8006808 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e231      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006808:	4b53      	ldr	r3, [pc, #332]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006810:	2b00      	cmp	r3, #0
 8006812:	d1f0      	bne.n	80067f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0308 	and.w	r3, r3, #8
 800681c:	2b00      	cmp	r3, #0
 800681e:	d03c      	beq.n	800689a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01c      	beq.n	8006862 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006828:	4b4b      	ldr	r3, [pc, #300]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 800682a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800682e:	4a4a      	ldr	r2, [pc, #296]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 8006830:	f043 0301 	orr.w	r3, r3, #1
 8006834:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006838:	f7fd fcc0 	bl	80041bc <HAL_GetTick>
 800683c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800683e:	e008      	b.n	8006852 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006840:	f7fd fcbc 	bl	80041bc <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d901      	bls.n	8006852 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e20c      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006852:	4b41      	ldr	r3, [pc, #260]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 8006854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006858:	f003 0302 	and.w	r3, r3, #2
 800685c:	2b00      	cmp	r3, #0
 800685e:	d0ef      	beq.n	8006840 <HAL_RCC_OscConfig+0x3ec>
 8006860:	e01b      	b.n	800689a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006862:	4b3d      	ldr	r3, [pc, #244]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 8006864:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006868:	4a3b      	ldr	r2, [pc, #236]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006872:	f7fd fca3 	bl	80041bc <HAL_GetTick>
 8006876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006878:	e008      	b.n	800688c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800687a:	f7fd fc9f 	bl	80041bc <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	2b02      	cmp	r3, #2
 8006886:	d901      	bls.n	800688c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006888:	2303      	movs	r3, #3
 800688a:	e1ef      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800688c:	4b32      	ldr	r3, [pc, #200]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 800688e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1ef      	bne.n	800687a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0304 	and.w	r3, r3, #4
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 80a6 	beq.w	80069f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068a8:	2300      	movs	r3, #0
 80068aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80068ac:	4b2a      	ldr	r3, [pc, #168]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 80068ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10d      	bne.n	80068d4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068b8:	4b27      	ldr	r3, [pc, #156]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 80068ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068bc:	4a26      	ldr	r2, [pc, #152]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 80068be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068c2:	6593      	str	r3, [r2, #88]	; 0x58
 80068c4:	4b24      	ldr	r3, [pc, #144]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 80068c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068cc:	60bb      	str	r3, [r7, #8]
 80068ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068d0:	2301      	movs	r3, #1
 80068d2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068d4:	4b21      	ldr	r3, [pc, #132]	; (800695c <HAL_RCC_OscConfig+0x508>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d118      	bne.n	8006912 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068e0:	4b1e      	ldr	r3, [pc, #120]	; (800695c <HAL_RCC_OscConfig+0x508>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a1d      	ldr	r2, [pc, #116]	; (800695c <HAL_RCC_OscConfig+0x508>)
 80068e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068ec:	f7fd fc66 	bl	80041bc <HAL_GetTick>
 80068f0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80068f2:	e008      	b.n	8006906 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068f4:	f7fd fc62 	bl	80041bc <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e1b2      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006906:	4b15      	ldr	r3, [pc, #84]	; (800695c <HAL_RCC_OscConfig+0x508>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690e:	2b00      	cmp	r3, #0
 8006910:	d0f0      	beq.n	80068f4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d108      	bne.n	800692c <HAL_RCC_OscConfig+0x4d8>
 800691a:	4b0f      	ldr	r3, [pc, #60]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 800691c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006920:	4a0d      	ldr	r2, [pc, #52]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 8006922:	f043 0301 	orr.w	r3, r3, #1
 8006926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800692a:	e029      	b.n	8006980 <HAL_RCC_OscConfig+0x52c>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	2b05      	cmp	r3, #5
 8006932:	d115      	bne.n	8006960 <HAL_RCC_OscConfig+0x50c>
 8006934:	4b08      	ldr	r3, [pc, #32]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 8006936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693a:	4a07      	ldr	r2, [pc, #28]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 800693c:	f043 0304 	orr.w	r3, r3, #4
 8006940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006944:	4b04      	ldr	r3, [pc, #16]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 8006946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694a:	4a03      	ldr	r2, [pc, #12]	; (8006958 <HAL_RCC_OscConfig+0x504>)
 800694c:	f043 0301 	orr.w	r3, r3, #1
 8006950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006954:	e014      	b.n	8006980 <HAL_RCC_OscConfig+0x52c>
 8006956:	bf00      	nop
 8006958:	40021000 	.word	0x40021000
 800695c:	40007000 	.word	0x40007000
 8006960:	4b9a      	ldr	r3, [pc, #616]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006966:	4a99      	ldr	r2, [pc, #612]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006968:	f023 0301 	bic.w	r3, r3, #1
 800696c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006970:	4b96      	ldr	r3, [pc, #600]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006976:	4a95      	ldr	r2, [pc, #596]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006978:	f023 0304 	bic.w	r3, r3, #4
 800697c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d016      	beq.n	80069b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006988:	f7fd fc18 	bl	80041bc <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800698e:	e00a      	b.n	80069a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006990:	f7fd fc14 	bl	80041bc <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	f241 3288 	movw	r2, #5000	; 0x1388
 800699e:	4293      	cmp	r3, r2
 80069a0:	d901      	bls.n	80069a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e162      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069a6:	4b89      	ldr	r3, [pc, #548]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 80069a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d0ed      	beq.n	8006990 <HAL_RCC_OscConfig+0x53c>
 80069b4:	e015      	b.n	80069e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b6:	f7fd fc01 	bl	80041bc <HAL_GetTick>
 80069ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069bc:	e00a      	b.n	80069d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069be:	f7fd fbfd 	bl	80041bc <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d901      	bls.n	80069d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e14b      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80069d4:	4b7d      	ldr	r3, [pc, #500]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 80069d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1ed      	bne.n	80069be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069e2:	7ffb      	ldrb	r3, [r7, #31]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d105      	bne.n	80069f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069e8:	4b78      	ldr	r3, [pc, #480]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 80069ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ec:	4a77      	ldr	r2, [pc, #476]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 80069ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0320 	and.w	r3, r3, #32
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d03c      	beq.n	8006a7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d01c      	beq.n	8006a42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a08:	4b70      	ldr	r3, [pc, #448]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a0e:	4a6f      	ldr	r2, [pc, #444]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006a10:	f043 0301 	orr.w	r3, r3, #1
 8006a14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a18:	f7fd fbd0 	bl	80041bc <HAL_GetTick>
 8006a1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a1e:	e008      	b.n	8006a32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a20:	f7fd fbcc 	bl	80041bc <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	2b02      	cmp	r3, #2
 8006a2c:	d901      	bls.n	8006a32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e11c      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006a32:	4b66      	ldr	r3, [pc, #408]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006a34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0ef      	beq.n	8006a20 <HAL_RCC_OscConfig+0x5cc>
 8006a40:	e01b      	b.n	8006a7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a42:	4b62      	ldr	r3, [pc, #392]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006a44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a48:	4a60      	ldr	r2, [pc, #384]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006a4a:	f023 0301 	bic.w	r3, r3, #1
 8006a4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a52:	f7fd fbb3 	bl	80041bc <HAL_GetTick>
 8006a56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a58:	e008      	b.n	8006a6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a5a:	f7fd fbaf 	bl	80041bc <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d901      	bls.n	8006a6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e0ff      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006a6c:	4b57      	ldr	r3, [pc, #348]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1ef      	bne.n	8006a5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 80f3 	beq.w	8006c6a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	f040 80c9 	bne.w	8006c20 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006a8e:	4b4f      	ldr	r3, [pc, #316]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f003 0203 	and.w	r2, r3, #3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d12c      	bne.n	8006afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aac:	3b01      	subs	r3, #1
 8006aae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d123      	bne.n	8006afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006abe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d11b      	bne.n	8006afc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d113      	bne.n	8006afc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d109      	bne.n	8006afc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	085b      	lsrs	r3, r3, #1
 8006af4:	3b01      	subs	r3, #1
 8006af6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d06b      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006afc:	69bb      	ldr	r3, [r7, #24]
 8006afe:	2b0c      	cmp	r3, #12
 8006b00:	d062      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006b02:	4b32      	ldr	r3, [pc, #200]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d001      	beq.n	8006b12 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e0ac      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006b12:	4b2e      	ldr	r3, [pc, #184]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a2d      	ldr	r2, [pc, #180]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006b18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b1e:	f7fd fb4d 	bl	80041bc <HAL_GetTick>
 8006b22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b24:	e008      	b.n	8006b38 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b26:	f7fd fb49 	bl	80041bc <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d901      	bls.n	8006b38 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e099      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b38:	4b24      	ldr	r3, [pc, #144]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1f0      	bne.n	8006b26 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b44:	4b21      	ldr	r3, [pc, #132]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	4b21      	ldr	r3, [pc, #132]	; (8006bd0 <HAL_RCC_OscConfig+0x77c>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006b54:	3a01      	subs	r2, #1
 8006b56:	0112      	lsls	r2, r2, #4
 8006b58:	4311      	orrs	r1, r2
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b5e:	0212      	lsls	r2, r2, #8
 8006b60:	4311      	orrs	r1, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006b66:	0852      	lsrs	r2, r2, #1
 8006b68:	3a01      	subs	r2, #1
 8006b6a:	0552      	lsls	r2, r2, #21
 8006b6c:	4311      	orrs	r1, r2
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006b72:	0852      	lsrs	r2, r2, #1
 8006b74:	3a01      	subs	r2, #1
 8006b76:	0652      	lsls	r2, r2, #25
 8006b78:	4311      	orrs	r1, r2
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b7e:	06d2      	lsls	r2, r2, #27
 8006b80:	430a      	orrs	r2, r1
 8006b82:	4912      	ldr	r1, [pc, #72]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006b88:	4b10      	ldr	r3, [pc, #64]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a0f      	ldr	r2, [pc, #60]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006b8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006b94:	4b0d      	ldr	r3, [pc, #52]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	4a0c      	ldr	r2, [pc, #48]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ba0:	f7fd fb0c 	bl	80041bc <HAL_GetTick>
 8006ba4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ba8:	f7fd fb08 	bl	80041bc <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e058      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bba:	4b04      	ldr	r3, [pc, #16]	; (8006bcc <HAL_RCC_OscConfig+0x778>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0f0      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006bc6:	e050      	b.n	8006c6a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e04f      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
 8006bcc:	40021000 	.word	0x40021000
 8006bd0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bd4:	4b27      	ldr	r3, [pc, #156]	; (8006c74 <HAL_RCC_OscConfig+0x820>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d144      	bne.n	8006c6a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006be0:	4b24      	ldr	r3, [pc, #144]	; (8006c74 <HAL_RCC_OscConfig+0x820>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a23      	ldr	r2, [pc, #140]	; (8006c74 <HAL_RCC_OscConfig+0x820>)
 8006be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bec:	4b21      	ldr	r3, [pc, #132]	; (8006c74 <HAL_RCC_OscConfig+0x820>)
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	4a20      	ldr	r2, [pc, #128]	; (8006c74 <HAL_RCC_OscConfig+0x820>)
 8006bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006bf6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bf8:	f7fd fae0 	bl	80041bc <HAL_GetTick>
 8006bfc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bfe:	e008      	b.n	8006c12 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c00:	f7fd fadc 	bl	80041bc <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d901      	bls.n	8006c12 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e02c      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c12:	4b18      	ldr	r3, [pc, #96]	; (8006c74 <HAL_RCC_OscConfig+0x820>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0f0      	beq.n	8006c00 <HAL_RCC_OscConfig+0x7ac>
 8006c1e:	e024      	b.n	8006c6a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	2b0c      	cmp	r3, #12
 8006c24:	d01f      	beq.n	8006c66 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c26:	4b13      	ldr	r3, [pc, #76]	; (8006c74 <HAL_RCC_OscConfig+0x820>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a12      	ldr	r2, [pc, #72]	; (8006c74 <HAL_RCC_OscConfig+0x820>)
 8006c2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c32:	f7fd fac3 	bl	80041bc <HAL_GetTick>
 8006c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c38:	e008      	b.n	8006c4c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c3a:	f7fd fabf 	bl	80041bc <HAL_GetTick>
 8006c3e:	4602      	mov	r2, r0
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	1ad3      	subs	r3, r2, r3
 8006c44:	2b02      	cmp	r3, #2
 8006c46:	d901      	bls.n	8006c4c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e00f      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c4c:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <HAL_RCC_OscConfig+0x820>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1f0      	bne.n	8006c3a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8006c58:	4b06      	ldr	r3, [pc, #24]	; (8006c74 <HAL_RCC_OscConfig+0x820>)
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	4905      	ldr	r1, [pc, #20]	; (8006c74 <HAL_RCC_OscConfig+0x820>)
 8006c5e:	4b06      	ldr	r3, [pc, #24]	; (8006c78 <HAL_RCC_OscConfig+0x824>)
 8006c60:	4013      	ands	r3, r2
 8006c62:	60cb      	str	r3, [r1, #12]
 8006c64:	e001      	b.n	8006c6a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e000      	b.n	8006c6c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3720      	adds	r7, #32
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	40021000 	.word	0x40021000
 8006c78:	feeefffc 	.word	0xfeeefffc

08006c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e0e7      	b.n	8006e60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c90:	4b75      	ldr	r3, [pc, #468]	; (8006e68 <HAL_RCC_ClockConfig+0x1ec>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0307 	and.w	r3, r3, #7
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d910      	bls.n	8006cc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c9e:	4b72      	ldr	r3, [pc, #456]	; (8006e68 <HAL_RCC_ClockConfig+0x1ec>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f023 0207 	bic.w	r2, r3, #7
 8006ca6:	4970      	ldr	r1, [pc, #448]	; (8006e68 <HAL_RCC_ClockConfig+0x1ec>)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cae:	4b6e      	ldr	r3, [pc, #440]	; (8006e68 <HAL_RCC_ClockConfig+0x1ec>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d001      	beq.n	8006cc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e0cf      	b.n	8006e60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d010      	beq.n	8006cee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	4b66      	ldr	r3, [pc, #408]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d908      	bls.n	8006cee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cdc:	4b63      	ldr	r3, [pc, #396]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	4960      	ldr	r1, [pc, #384]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d04c      	beq.n	8006d94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d107      	bne.n	8006d12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d02:	4b5a      	ldr	r3, [pc, #360]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d121      	bne.n	8006d52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e0a6      	b.n	8006e60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d107      	bne.n	8006d2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d1a:	4b54      	ldr	r3, [pc, #336]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d115      	bne.n	8006d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e09a      	b.n	8006e60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d107      	bne.n	8006d42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006d32:	4b4e      	ldr	r3, [pc, #312]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d109      	bne.n	8006d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e08e      	b.n	8006e60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d42:	4b4a      	ldr	r3, [pc, #296]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d101      	bne.n	8006d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e086      	b.n	8006e60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d52:	4b46      	ldr	r3, [pc, #280]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f023 0203 	bic.w	r2, r3, #3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	4943      	ldr	r1, [pc, #268]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d64:	f7fd fa2a 	bl	80041bc <HAL_GetTick>
 8006d68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d6a:	e00a      	b.n	8006d82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d6c:	f7fd fa26 	bl	80041bc <HAL_GetTick>
 8006d70:	4602      	mov	r2, r0
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	1ad3      	subs	r3, r2, r3
 8006d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e06e      	b.n	8006e60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d82:	4b3a      	ldr	r3, [pc, #232]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f003 020c 	and.w	r2, r3, #12
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d1eb      	bne.n	8006d6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d010      	beq.n	8006dc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	4b31      	ldr	r3, [pc, #196]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d208      	bcs.n	8006dc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006db0:	4b2e      	ldr	r3, [pc, #184]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	492b      	ldr	r1, [pc, #172]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dc2:	4b29      	ldr	r3, [pc, #164]	; (8006e68 <HAL_RCC_ClockConfig+0x1ec>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0307 	and.w	r3, r3, #7
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d210      	bcs.n	8006df2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dd0:	4b25      	ldr	r3, [pc, #148]	; (8006e68 <HAL_RCC_ClockConfig+0x1ec>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f023 0207 	bic.w	r2, r3, #7
 8006dd8:	4923      	ldr	r1, [pc, #140]	; (8006e68 <HAL_RCC_ClockConfig+0x1ec>)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006de0:	4b21      	ldr	r3, [pc, #132]	; (8006e68 <HAL_RCC_ClockConfig+0x1ec>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d001      	beq.n	8006df2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e036      	b.n	8006e60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0304 	and.w	r3, r3, #4
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d008      	beq.n	8006e10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dfe:	4b1b      	ldr	r3, [pc, #108]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	4918      	ldr	r1, [pc, #96]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0308 	and.w	r3, r3, #8
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d009      	beq.n	8006e30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e1c:	4b13      	ldr	r3, [pc, #76]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	4910      	ldr	r1, [pc, #64]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e30:	f000 f824 	bl	8006e7c <HAL_RCC_GetSysClockFreq>
 8006e34:	4602      	mov	r2, r0
 8006e36:	4b0d      	ldr	r3, [pc, #52]	; (8006e6c <HAL_RCC_ClockConfig+0x1f0>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	091b      	lsrs	r3, r3, #4
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	490b      	ldr	r1, [pc, #44]	; (8006e70 <HAL_RCC_ClockConfig+0x1f4>)
 8006e42:	5ccb      	ldrb	r3, [r1, r3]
 8006e44:	f003 031f 	and.w	r3, r3, #31
 8006e48:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4c:	4a09      	ldr	r2, [pc, #36]	; (8006e74 <HAL_RCC_ClockConfig+0x1f8>)
 8006e4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006e50:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <HAL_RCC_ClockConfig+0x1fc>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fd f961 	bl	800411c <HAL_InitTick>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8006e5e:	7afb      	ldrb	r3, [r7, #11]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	40022000 	.word	0x40022000
 8006e6c:	40021000 	.word	0x40021000
 8006e70:	0800ced8 	.word	0x0800ced8
 8006e74:	20000000 	.word	0x20000000
 8006e78:	20000008 	.word	0x20000008

08006e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b089      	sub	sp, #36	; 0x24
 8006e80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	61fb      	str	r3, [r7, #28]
 8006e86:	2300      	movs	r3, #0
 8006e88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e8a:	4b3e      	ldr	r3, [pc, #248]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f003 030c 	and.w	r3, r3, #12
 8006e92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e94:	4b3b      	ldr	r3, [pc, #236]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	f003 0303 	and.w	r3, r3, #3
 8006e9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2b0c      	cmp	r3, #12
 8006ea8:	d121      	bne.n	8006eee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d11e      	bne.n	8006eee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006eb0:	4b34      	ldr	r3, [pc, #208]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0308 	and.w	r3, r3, #8
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d107      	bne.n	8006ecc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006ebc:	4b31      	ldr	r3, [pc, #196]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ec2:	0a1b      	lsrs	r3, r3, #8
 8006ec4:	f003 030f 	and.w	r3, r3, #15
 8006ec8:	61fb      	str	r3, [r7, #28]
 8006eca:	e005      	b.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006ecc:	4b2d      	ldr	r3, [pc, #180]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	091b      	lsrs	r3, r3, #4
 8006ed2:	f003 030f 	and.w	r3, r3, #15
 8006ed6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006ed8:	4a2b      	ldr	r2, [pc, #172]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ee0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d10d      	bne.n	8006f04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006eec:	e00a      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	d102      	bne.n	8006efa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006ef4:	4b25      	ldr	r3, [pc, #148]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8006ef6:	61bb      	str	r3, [r7, #24]
 8006ef8:	e004      	b.n	8006f04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d101      	bne.n	8006f04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f00:	4b23      	ldr	r3, [pc, #140]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	2b0c      	cmp	r3, #12
 8006f08:	d134      	bne.n	8006f74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006f0a:	4b1e      	ldr	r3, [pc, #120]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	f003 0303 	and.w	r3, r3, #3
 8006f12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d003      	beq.n	8006f22 <HAL_RCC_GetSysClockFreq+0xa6>
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d003      	beq.n	8006f28 <HAL_RCC_GetSysClockFreq+0xac>
 8006f20:	e005      	b.n	8006f2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006f22:	4b1a      	ldr	r3, [pc, #104]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8006f24:	617b      	str	r3, [r7, #20]
      break;
 8006f26:	e005      	b.n	8006f34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006f28:	4b19      	ldr	r3, [pc, #100]	; (8006f90 <HAL_RCC_GetSysClockFreq+0x114>)
 8006f2a:	617b      	str	r3, [r7, #20]
      break;
 8006f2c:	e002      	b.n	8006f34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	617b      	str	r3, [r7, #20]
      break;
 8006f32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f34:	4b13      	ldr	r3, [pc, #76]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	091b      	lsrs	r3, r3, #4
 8006f3a:	f003 0307 	and.w	r3, r3, #7
 8006f3e:	3301      	adds	r3, #1
 8006f40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006f42:	4b10      	ldr	r3, [pc, #64]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	0a1b      	lsrs	r3, r3, #8
 8006f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	fb03 f202 	mul.w	r2, r3, r2
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f5a:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	0e5b      	lsrs	r3, r3, #25
 8006f60:	f003 0303 	and.w	r3, r3, #3
 8006f64:	3301      	adds	r3, #1
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006f6a:	697a      	ldr	r2, [r7, #20]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006f74:	69bb      	ldr	r3, [r7, #24]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3724      	adds	r7, #36	; 0x24
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	40021000 	.word	0x40021000
 8006f88:	0800cef0 	.word	0x0800cef0
 8006f8c:	00f42400 	.word	0x00f42400
 8006f90:	007a1200 	.word	0x007a1200

08006f94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006fa0:	4b2a      	ldr	r3, [pc, #168]	; (800704c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d003      	beq.n	8006fb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006fac:	f7ff f97a 	bl	80062a4 <HAL_PWREx_GetVoltageRange>
 8006fb0:	6178      	str	r0, [r7, #20]
 8006fb2:	e014      	b.n	8006fde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006fb4:	4b25      	ldr	r3, [pc, #148]	; (800704c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb8:	4a24      	ldr	r2, [pc, #144]	; (800704c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8006fc0:	4b22      	ldr	r3, [pc, #136]	; (800704c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006fcc:	f7ff f96a 	bl	80062a4 <HAL_PWREx_GetVoltageRange>
 8006fd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006fd2:	4b1e      	ldr	r3, [pc, #120]	; (800704c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd6:	4a1d      	ldr	r2, [pc, #116]	; (800704c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fdc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe4:	d10b      	bne.n	8006ffe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b80      	cmp	r3, #128	; 0x80
 8006fea:	d919      	bls.n	8007020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2ba0      	cmp	r3, #160	; 0xa0
 8006ff0:	d902      	bls.n	8006ff8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	613b      	str	r3, [r7, #16]
 8006ff6:	e013      	b.n	8007020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	613b      	str	r3, [r7, #16]
 8006ffc:	e010      	b.n	8007020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b80      	cmp	r3, #128	; 0x80
 8007002:	d902      	bls.n	800700a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007004:	2303      	movs	r3, #3
 8007006:	613b      	str	r3, [r7, #16]
 8007008:	e00a      	b.n	8007020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2b80      	cmp	r3, #128	; 0x80
 800700e:	d102      	bne.n	8007016 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007010:	2302      	movs	r3, #2
 8007012:	613b      	str	r3, [r7, #16]
 8007014:	e004      	b.n	8007020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b70      	cmp	r3, #112	; 0x70
 800701a:	d101      	bne.n	8007020 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800701c:	2301      	movs	r3, #1
 800701e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007020:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f023 0207 	bic.w	r2, r3, #7
 8007028:	4909      	ldr	r1, [pc, #36]	; (8007050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	4313      	orrs	r3, r2
 800702e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007030:	4b07      	ldr	r3, [pc, #28]	; (8007050 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0307 	and.w	r3, r3, #7
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	429a      	cmp	r2, r3
 800703c:	d001      	beq.n	8007042 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	40021000 	.word	0x40021000
 8007050:	40022000 	.word	0x40022000

08007054 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800705c:	2300      	movs	r3, #0
 800705e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007060:	2300      	movs	r3, #0
 8007062:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800706c:	2b00      	cmp	r3, #0
 800706e:	d031      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007074:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007078:	d01a      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800707a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800707e:	d814      	bhi.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007080:	2b00      	cmp	r3, #0
 8007082:	d009      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007084:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007088:	d10f      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800708a:	4b5d      	ldr	r3, [pc, #372]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	4a5c      	ldr	r2, [pc, #368]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007094:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007096:	e00c      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	3304      	adds	r3, #4
 800709c:	2100      	movs	r1, #0
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 f9de 	bl	8007460 <RCCEx_PLLSAI1_Config>
 80070a4:	4603      	mov	r3, r0
 80070a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80070a8:	e003      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	74fb      	strb	r3, [r7, #19]
      break;
 80070ae:	e000      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80070b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070b2:	7cfb      	ldrb	r3, [r7, #19]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10b      	bne.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070b8:	4b51      	ldr	r3, [pc, #324]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c6:	494e      	ldr	r1, [pc, #312]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80070ce:	e001      	b.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d0:	7cfb      	ldrb	r3, [r7, #19]
 80070d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 809e 	beq.w	800721e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070e2:	2300      	movs	r3, #0
 80070e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80070e6:	4b46      	ldr	r3, [pc, #280]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80070f2:	2301      	movs	r3, #1
 80070f4:	e000      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80070f6:	2300      	movs	r3, #0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00d      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070fc:	4b40      	ldr	r3, [pc, #256]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80070fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007100:	4a3f      	ldr	r2, [pc, #252]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007106:	6593      	str	r3, [r2, #88]	; 0x58
 8007108:	4b3d      	ldr	r3, [pc, #244]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800710a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800710c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007110:	60bb      	str	r3, [r7, #8]
 8007112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007114:	2301      	movs	r3, #1
 8007116:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007118:	4b3a      	ldr	r3, [pc, #232]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a39      	ldr	r2, [pc, #228]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800711e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007122:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007124:	f7fd f84a 	bl	80041bc <HAL_GetTick>
 8007128:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800712a:	e009      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800712c:	f7fd f846 	bl	80041bc <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	2b02      	cmp	r3, #2
 8007138:	d902      	bls.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	74fb      	strb	r3, [r7, #19]
        break;
 800713e:	e005      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007140:	4b30      	ldr	r3, [pc, #192]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007148:	2b00      	cmp	r3, #0
 800714a:	d0ef      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800714c:	7cfb      	ldrb	r3, [r7, #19]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d15a      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007152:	4b2b      	ldr	r3, [pc, #172]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800715c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01e      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	429a      	cmp	r2, r3
 800716c:	d019      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800716e:	4b24      	ldr	r3, [pc, #144]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007178:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800717a:	4b21      	ldr	r3, [pc, #132]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800717c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007180:	4a1f      	ldr	r2, [pc, #124]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007186:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800718a:	4b1d      	ldr	r3, [pc, #116]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800718c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007190:	4a1b      	ldr	r2, [pc, #108]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007196:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800719a:	4a19      	ldr	r2, [pc, #100]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d016      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071ac:	f7fd f806 	bl	80041bc <HAL_GetTick>
 80071b0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071b2:	e00b      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071b4:	f7fd f802 	bl	80041bc <HAL_GetTick>
 80071b8:	4602      	mov	r2, r0
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	f241 3288 	movw	r2, #5000	; 0x1388
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d902      	bls.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80071c6:	2303      	movs	r3, #3
 80071c8:	74fb      	strb	r3, [r7, #19]
            break;
 80071ca:	e006      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071cc:	4b0c      	ldr	r3, [pc, #48]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071d2:	f003 0302 	and.w	r3, r3, #2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d0ec      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80071da:	7cfb      	ldrb	r3, [r7, #19]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10b      	bne.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071e0:	4b07      	ldr	r3, [pc, #28]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ee:	4904      	ldr	r1, [pc, #16]	; (8007200 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80071f0:	4313      	orrs	r3, r2
 80071f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80071f6:	e009      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071f8:	7cfb      	ldrb	r3, [r7, #19]
 80071fa:	74bb      	strb	r3, [r7, #18]
 80071fc:	e006      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80071fe:	bf00      	nop
 8007200:	40021000 	.word	0x40021000
 8007204:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007208:	7cfb      	ldrb	r3, [r7, #19]
 800720a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800720c:	7c7b      	ldrb	r3, [r7, #17]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d105      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007212:	4b8a      	ldr	r3, [pc, #552]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007216:	4a89      	ldr	r2, [pc, #548]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800721c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00a      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800722a:	4b84      	ldr	r3, [pc, #528]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800722c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007230:	f023 0203 	bic.w	r2, r3, #3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	4980      	ldr	r1, [pc, #512]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800723a:	4313      	orrs	r3, r2
 800723c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00a      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800724c:	4b7b      	ldr	r3, [pc, #492]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800724e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007252:	f023 020c 	bic.w	r2, r3, #12
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	4978      	ldr	r1, [pc, #480]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800725c:	4313      	orrs	r3, r2
 800725e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0320 	and.w	r3, r3, #32
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00a      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800726e:	4b73      	ldr	r3, [pc, #460]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007274:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727c:	496f      	ldr	r1, [pc, #444]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800727e:	4313      	orrs	r3, r2
 8007280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00a      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007290:	4b6a      	ldr	r3, [pc, #424]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007296:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729e:	4967      	ldr	r1, [pc, #412]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072a0:	4313      	orrs	r3, r2
 80072a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00a      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80072b2:	4b62      	ldr	r3, [pc, #392]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c0:	495e      	ldr	r1, [pc, #376]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072c2:	4313      	orrs	r3, r2
 80072c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00a      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072d4:	4b59      	ldr	r3, [pc, #356]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e2:	4956      	ldr	r1, [pc, #344]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00a      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80072f6:	4b51      	ldr	r3, [pc, #324]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80072f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007304:	494d      	ldr	r1, [pc, #308]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007306:	4313      	orrs	r3, r2
 8007308:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d028      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007318:	4b48      	ldr	r3, [pc, #288]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800731a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800731e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	4945      	ldr	r1, [pc, #276]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007328:	4313      	orrs	r3, r2
 800732a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007336:	d106      	bne.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007338:	4b40      	ldr	r3, [pc, #256]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	4a3f      	ldr	r2, [pc, #252]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800733e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007342:	60d3      	str	r3, [r2, #12]
 8007344:	e011      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800734e:	d10c      	bne.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	3304      	adds	r3, #4
 8007354:	2101      	movs	r1, #1
 8007356:	4618      	mov	r0, r3
 8007358:	f000 f882 	bl	8007460 <RCCEx_PLLSAI1_Config>
 800735c:	4603      	mov	r3, r0
 800735e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007360:	7cfb      	ldrb	r3, [r7, #19]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007366:	7cfb      	ldrb	r3, [r7, #19]
 8007368:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d028      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007376:	4b31      	ldr	r3, [pc, #196]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800737c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007384:	492d      	ldr	r1, [pc, #180]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007386:	4313      	orrs	r3, r2
 8007388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007394:	d106      	bne.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007396:	4b29      	ldr	r3, [pc, #164]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	4a28      	ldr	r2, [pc, #160]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800739c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073a0:	60d3      	str	r3, [r2, #12]
 80073a2:	e011      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073ac:	d10c      	bne.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	3304      	adds	r3, #4
 80073b2:	2101      	movs	r1, #1
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 f853 	bl	8007460 <RCCEx_PLLSAI1_Config>
 80073ba:	4603      	mov	r3, r0
 80073bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073be:	7cfb      	ldrb	r3, [r7, #19]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80073c4:	7cfb      	ldrb	r3, [r7, #19]
 80073c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d01c      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073d4:	4b19      	ldr	r3, [pc, #100]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073e2:	4916      	ldr	r1, [pc, #88]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073f2:	d10c      	bne.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3304      	adds	r3, #4
 80073f8:	2102      	movs	r1, #2
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 f830 	bl	8007460 <RCCEx_PLLSAI1_Config>
 8007400:	4603      	mov	r3, r0
 8007402:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007404:	7cfb      	ldrb	r3, [r7, #19]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d001      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800740a:	7cfb      	ldrb	r3, [r7, #19]
 800740c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800741a:	4b08      	ldr	r3, [pc, #32]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800741c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007420:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007428:	4904      	ldr	r1, [pc, #16]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800742a:	4313      	orrs	r3, r2
 800742c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007430:	7cbb      	ldrb	r3, [r7, #18]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	40021000 	.word	0x40021000

08007440 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007444:	4b05      	ldr	r3, [pc, #20]	; (800745c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a04      	ldr	r2, [pc, #16]	; (800745c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800744a:	f043 0304 	orr.w	r3, r3, #4
 800744e:	6013      	str	r3, [r2, #0]
}
 8007450:	bf00      	nop
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop
 800745c:	40021000 	.word	0x40021000

08007460 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800746a:	2300      	movs	r3, #0
 800746c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800746e:	4b74      	ldr	r3, [pc, #464]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	f003 0303 	and.w	r3, r3, #3
 8007476:	2b00      	cmp	r3, #0
 8007478:	d018      	beq.n	80074ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800747a:	4b71      	ldr	r3, [pc, #452]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f003 0203 	and.w	r2, r3, #3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d10d      	bne.n	80074a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
       ||
 800748e:	2b00      	cmp	r3, #0
 8007490:	d009      	beq.n	80074a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007492:	4b6b      	ldr	r3, [pc, #428]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	091b      	lsrs	r3, r3, #4
 8007498:	f003 0307 	and.w	r3, r3, #7
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
       ||
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d047      	beq.n	8007536 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	73fb      	strb	r3, [r7, #15]
 80074aa:	e044      	b.n	8007536 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d018      	beq.n	80074e6 <RCCEx_PLLSAI1_Config+0x86>
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d825      	bhi.n	8007504 <RCCEx_PLLSAI1_Config+0xa4>
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d002      	beq.n	80074c2 <RCCEx_PLLSAI1_Config+0x62>
 80074bc:	2b02      	cmp	r3, #2
 80074be:	d009      	beq.n	80074d4 <RCCEx_PLLSAI1_Config+0x74>
 80074c0:	e020      	b.n	8007504 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80074c2:	4b5f      	ldr	r3, [pc, #380]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d11d      	bne.n	800750a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074d2:	e01a      	b.n	800750a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80074d4:	4b5a      	ldr	r3, [pc, #360]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d116      	bne.n	800750e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074e4:	e013      	b.n	800750e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80074e6:	4b56      	ldr	r3, [pc, #344]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10f      	bne.n	8007512 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80074f2:	4b53      	ldr	r3, [pc, #332]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d109      	bne.n	8007512 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007502:	e006      	b.n	8007512 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	73fb      	strb	r3, [r7, #15]
      break;
 8007508:	e004      	b.n	8007514 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800750a:	bf00      	nop
 800750c:	e002      	b.n	8007514 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800750e:	bf00      	nop
 8007510:	e000      	b.n	8007514 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007512:	bf00      	nop
    }

    if(status == HAL_OK)
 8007514:	7bfb      	ldrb	r3, [r7, #15]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10d      	bne.n	8007536 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800751a:	4b49      	ldr	r3, [pc, #292]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6819      	ldr	r1, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	3b01      	subs	r3, #1
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	430b      	orrs	r3, r1
 8007530:	4943      	ldr	r1, [pc, #268]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007532:	4313      	orrs	r3, r2
 8007534:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007536:	7bfb      	ldrb	r3, [r7, #15]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d17c      	bne.n	8007636 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800753c:	4b40      	ldr	r3, [pc, #256]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a3f      	ldr	r2, [pc, #252]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007542:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007548:	f7fc fe38 	bl	80041bc <HAL_GetTick>
 800754c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800754e:	e009      	b.n	8007564 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007550:	f7fc fe34 	bl	80041bc <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b02      	cmp	r3, #2
 800755c:	d902      	bls.n	8007564 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	73fb      	strb	r3, [r7, #15]
        break;
 8007562:	e005      	b.n	8007570 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007564:	4b36      	ldr	r3, [pc, #216]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1ef      	bne.n	8007550 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d15f      	bne.n	8007636 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d110      	bne.n	800759e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800757c:	4b30      	ldr	r3, [pc, #192]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007584:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	6892      	ldr	r2, [r2, #8]
 800758c:	0211      	lsls	r1, r2, #8
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	68d2      	ldr	r2, [r2, #12]
 8007592:	06d2      	lsls	r2, r2, #27
 8007594:	430a      	orrs	r2, r1
 8007596:	492a      	ldr	r1, [pc, #168]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007598:	4313      	orrs	r3, r2
 800759a:	610b      	str	r3, [r1, #16]
 800759c:	e027      	b.n	80075ee <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d112      	bne.n	80075ca <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075a4:	4b26      	ldr	r3, [pc, #152]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80075ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6892      	ldr	r2, [r2, #8]
 80075b4:	0211      	lsls	r1, r2, #8
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	6912      	ldr	r2, [r2, #16]
 80075ba:	0852      	lsrs	r2, r2, #1
 80075bc:	3a01      	subs	r2, #1
 80075be:	0552      	lsls	r2, r2, #21
 80075c0:	430a      	orrs	r2, r1
 80075c2:	491f      	ldr	r1, [pc, #124]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	610b      	str	r3, [r1, #16]
 80075c8:	e011      	b.n	80075ee <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075ca:	4b1d      	ldr	r3, [pc, #116]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80075d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	6892      	ldr	r2, [r2, #8]
 80075da:	0211      	lsls	r1, r2, #8
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	6952      	ldr	r2, [r2, #20]
 80075e0:	0852      	lsrs	r2, r2, #1
 80075e2:	3a01      	subs	r2, #1
 80075e4:	0652      	lsls	r2, r2, #25
 80075e6:	430a      	orrs	r2, r1
 80075e8:	4915      	ldr	r1, [pc, #84]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075ea:	4313      	orrs	r3, r2
 80075ec:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80075ee:	4b14      	ldr	r3, [pc, #80]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a13      	ldr	r2, [pc, #76]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 80075f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075f8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075fa:	f7fc fddf 	bl	80041bc <HAL_GetTick>
 80075fe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007600:	e009      	b.n	8007616 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007602:	f7fc fddb 	bl	80041bc <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	2b02      	cmp	r3, #2
 800760e:	d902      	bls.n	8007616 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	73fb      	strb	r3, [r7, #15]
          break;
 8007614:	e005      	b.n	8007622 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007616:	4b0a      	ldr	r3, [pc, #40]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800761e:	2b00      	cmp	r3, #0
 8007620:	d0ef      	beq.n	8007602 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d106      	bne.n	8007636 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007628:	4b05      	ldr	r3, [pc, #20]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 800762a:	691a      	ldr	r2, [r3, #16]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	4903      	ldr	r1, [pc, #12]	; (8007640 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007632:	4313      	orrs	r3, r2
 8007634:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007636:	7bfb      	ldrb	r3, [r7, #15]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3710      	adds	r7, #16
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	40021000 	.word	0x40021000

08007644 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d06c      	beq.n	8007730 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d106      	bne.n	8007670 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7fb fe02 	bl	8003274 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2202      	movs	r2, #2
 8007674:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	22ca      	movs	r2, #202	; 0xca
 800767e:	625a      	str	r2, [r3, #36]	; 0x24
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2253      	movs	r2, #83	; 0x53
 8007686:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fa49 	bl	8007b20 <RTC_EnterInitMode>
 800768e:	4603      	mov	r3, r0
 8007690:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d14b      	bne.n	8007730 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	6812      	ldr	r2, [r2, #0]
 80076a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076aa:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6899      	ldr	r1, [r3, #8]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	431a      	orrs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	431a      	orrs	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	68d2      	ldr	r2, [r2, #12]
 80076d2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6919      	ldr	r1, [r3, #16]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	689b      	ldr	r3, [r3, #8]
 80076de:	041a      	lsls	r2, r3, #16
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	430a      	orrs	r2, r1
 80076e6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fa4d 	bl	8007b88 <RTC_ExitInitMode>
 80076ee:	4603      	mov	r3, r0
 80076f0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d11b      	bne.n	8007730 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f022 0203 	bic.w	r2, r2, #3
 8007706:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	69da      	ldr	r2, [r3, #28]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	695b      	ldr	r3, [r3, #20]
 8007716:	431a      	orrs	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	430a      	orrs	r2, r1
 800771e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	22ff      	movs	r2, #255	; 0xff
 8007726:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007730:	7bfb      	ldrb	r3, [r7, #15]
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800773a:	b590      	push	{r4, r7, lr}
 800773c:	b087      	sub	sp, #28
 800773e:	af00      	add	r7, sp, #0
 8007740:	60f8      	str	r0, [r7, #12]
 8007742:	60b9      	str	r1, [r7, #8]
 8007744:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d101      	bne.n	8007754 <HAL_RTC_SetTime+0x1a>
 8007750:	2302      	movs	r3, #2
 8007752:	e08b      	b.n	800786c <HAL_RTC_SetTime+0x132>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2202      	movs	r2, #2
 8007760:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	22ca      	movs	r2, #202	; 0xca
 800776a:	625a      	str	r2, [r3, #36]	; 0x24
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2253      	movs	r2, #83	; 0x53
 8007772:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f9d3 	bl	8007b20 <RTC_EnterInitMode>
 800777a:	4603      	mov	r3, r0
 800777c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800777e:	7cfb      	ldrb	r3, [r7, #19]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d163      	bne.n	800784c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d126      	bne.n	80077d8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007794:	2b00      	cmp	r3, #0
 8007796:	d102      	bne.n	800779e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2200      	movs	r2, #0
 800779c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	4618      	mov	r0, r3
 80077a4:	f000 fa2e 	bl	8007c04 <RTC_ByteToBcd2>
 80077a8:	4603      	mov	r3, r0
 80077aa:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	785b      	ldrb	r3, [r3, #1]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fa27 	bl	8007c04 <RTC_ByteToBcd2>
 80077b6:	4603      	mov	r3, r0
 80077b8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80077ba:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	789b      	ldrb	r3, [r3, #2]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 fa1f 	bl	8007c04 <RTC_ByteToBcd2>
 80077c6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077c8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	78db      	ldrb	r3, [r3, #3]
 80077d0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80077d2:	4313      	orrs	r3, r2
 80077d4:	617b      	str	r3, [r7, #20]
 80077d6:	e018      	b.n	800780a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d102      	bne.n	80077ec <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2200      	movs	r2, #0
 80077ea:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	785b      	ldrb	r3, [r3, #1]
 80077f6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80077f8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80077fe:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	78db      	ldrb	r3, [r3, #3]
 8007804:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007806:	4313      	orrs	r3, r2
 8007808:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007814:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007818:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007828:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6899      	ldr	r1, [r3, #8]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	68da      	ldr	r2, [r3, #12]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	431a      	orrs	r2, r3
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 f9a0 	bl	8007b88 <RTC_ExitInitMode>
 8007848:	4603      	mov	r3, r0
 800784a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	22ff      	movs	r2, #255	; 0xff
 8007852:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007854:	7cfb      	ldrb	r3, [r7, #19]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d103      	bne.n	8007862 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800786a:	7cfb      	ldrb	r3, [r7, #19]
}
 800786c:	4618      	mov	r0, r3
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	bd90      	pop	{r4, r7, pc}

08007874 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b086      	sub	sp, #24
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80078a2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80078a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	0c1b      	lsrs	r3, r3, #16
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	0a1b      	lsrs	r3, r3, #8
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c2:	b2da      	uxtb	r2, r3
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	0d9b      	lsrs	r3, r3, #22
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d11a      	bne.n	8007922 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	781b      	ldrb	r3, [r3, #0]
 80078f0:	4618      	mov	r0, r3
 80078f2:	f000 f9a7 	bl	8007c44 <RTC_Bcd2ToByte>
 80078f6:	4603      	mov	r3, r0
 80078f8:	461a      	mov	r2, r3
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	785b      	ldrb	r3, [r3, #1]
 8007902:	4618      	mov	r0, r3
 8007904:	f000 f99e 	bl	8007c44 <RTC_Bcd2ToByte>
 8007908:	4603      	mov	r3, r0
 800790a:	461a      	mov	r2, r3
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	789b      	ldrb	r3, [r3, #2]
 8007914:	4618      	mov	r0, r3
 8007916:	f000 f995 	bl	8007c44 <RTC_Bcd2ToByte>
 800791a:	4603      	mov	r3, r0
 800791c:	461a      	mov	r2, r3
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800792c:	b590      	push	{r4, r7, lr}
 800792e:	b087      	sub	sp, #28
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d101      	bne.n	8007946 <HAL_RTC_SetDate+0x1a>
 8007942:	2302      	movs	r3, #2
 8007944:	e075      	b.n	8007a32 <HAL_RTC_SetDate+0x106>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2202      	movs	r2, #2
 8007952:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10e      	bne.n	800797a <HAL_RTC_SetDate+0x4e>
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	785b      	ldrb	r3, [r3, #1]
 8007960:	f003 0310 	and.w	r3, r3, #16
 8007964:	2b00      	cmp	r3, #0
 8007966:	d008      	beq.n	800797a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	785b      	ldrb	r3, [r3, #1]
 800796c:	f023 0310 	bic.w	r3, r3, #16
 8007970:	b2db      	uxtb	r3, r3
 8007972:	330a      	adds	r3, #10
 8007974:	b2da      	uxtb	r2, r3
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d11c      	bne.n	80079ba <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	78db      	ldrb	r3, [r3, #3]
 8007984:	4618      	mov	r0, r3
 8007986:	f000 f93d 	bl	8007c04 <RTC_ByteToBcd2>
 800798a:	4603      	mov	r3, r0
 800798c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	785b      	ldrb	r3, [r3, #1]
 8007992:	4618      	mov	r0, r3
 8007994:	f000 f936 	bl	8007c04 <RTC_ByteToBcd2>
 8007998:	4603      	mov	r3, r0
 800799a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800799c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	789b      	ldrb	r3, [r3, #2]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 f92e 	bl	8007c04 <RTC_ByteToBcd2>
 80079a8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80079aa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80079b4:	4313      	orrs	r3, r2
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	e00e      	b.n	80079d8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	78db      	ldrb	r3, [r3, #3]
 80079be:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	785b      	ldrb	r3, [r3, #1]
 80079c4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80079c6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80079cc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80079d4:	4313      	orrs	r3, r2
 80079d6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	22ca      	movs	r2, #202	; 0xca
 80079de:	625a      	str	r2, [r3, #36]	; 0x24
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2253      	movs	r2, #83	; 0x53
 80079e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 f899 	bl	8007b20 <RTC_EnterInitMode>
 80079ee:	4603      	mov	r3, r0
 80079f0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80079f2:	7cfb      	ldrb	r3, [r7, #19]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10c      	bne.n	8007a12 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a02:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a06:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 f8bd 	bl	8007b88 <RTC_ExitInitMode>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	22ff      	movs	r2, #255	; 0xff
 8007a18:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007a1a:	7cfb      	ldrb	r3, [r7, #19]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d103      	bne.n	8007a28 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007a30:	7cfb      	ldrb	r3, [r7, #19]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd90      	pop	{r4, r7, pc}

08007a3a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b086      	sub	sp, #24
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	60f8      	str	r0, [r7, #12]
 8007a42:	60b9      	str	r1, [r7, #8]
 8007a44:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007a50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007a54:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	0c1b      	lsrs	r3, r3, #16
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	0a1b      	lsrs	r3, r3, #8
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	f003 031f 	and.w	r3, r3, #31
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	0b5b      	lsrs	r3, r3, #13
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	f003 0307 	and.w	r3, r3, #7
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d11a      	bne.n	8007aca <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	78db      	ldrb	r3, [r3, #3]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f000 f8d3 	bl	8007c44 <RTC_Bcd2ToByte>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	785b      	ldrb	r3, [r3, #1]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 f8ca 	bl	8007c44 <RTC_Bcd2ToByte>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	789b      	ldrb	r3, [r3, #2]
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 f8c1 	bl	8007c44 <RTC_Bcd2ToByte>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68da      	ldr	r2, [r3, #12]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007aea:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8007aec:	f7fc fb66 	bl	80041bc <HAL_GetTick>
 8007af0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007af2:	e009      	b.n	8007b08 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007af4:	f7fc fb62 	bl	80041bc <HAL_GetTick>
 8007af8:	4602      	mov	r2, r0
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b02:	d901      	bls.n	8007b08 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e007      	b.n	8007b18 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68db      	ldr	r3, [r3, #12]
 8007b0e:	f003 0320 	and.w	r3, r3, #32
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0ee      	beq.n	8007af4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d120      	bne.n	8007b7c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b42:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007b44:	f7fc fb3a 	bl	80041bc <HAL_GetTick>
 8007b48:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007b4a:	e00d      	b.n	8007b68 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007b4c:	f7fc fb36 	bl	80041bc <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b5a:	d905      	bls.n	8007b68 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2203      	movs	r2, #3
 8007b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d102      	bne.n	8007b7c <RTC_EnterInitMode+0x5c>
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d1e7      	bne.n	8007b4c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8007b94:	4b1a      	ldr	r3, [pc, #104]	; (8007c00 <RTC_ExitInitMode+0x78>)
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	4a19      	ldr	r2, [pc, #100]	; (8007c00 <RTC_ExitInitMode+0x78>)
 8007b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b9e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007ba0:	4b17      	ldr	r3, [pc, #92]	; (8007c00 <RTC_ExitInitMode+0x78>)
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f003 0320 	and.w	r3, r3, #32
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10c      	bne.n	8007bc6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7ff ff91 	bl	8007ad4 <HAL_RTC_WaitForSynchro>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01e      	beq.n	8007bf6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2203      	movs	r2, #3
 8007bbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	73fb      	strb	r3, [r7, #15]
 8007bc4:	e017      	b.n	8007bf6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007bc6:	4b0e      	ldr	r3, [pc, #56]	; (8007c00 <RTC_ExitInitMode+0x78>)
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	4a0d      	ldr	r2, [pc, #52]	; (8007c00 <RTC_ExitInitMode+0x78>)
 8007bcc:	f023 0320 	bic.w	r3, r3, #32
 8007bd0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff ff7e 	bl	8007ad4 <HAL_RTC_WaitForSynchro>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d005      	beq.n	8007bea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2203      	movs	r2, #3
 8007be2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007bea:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <RTC_ExitInitMode+0x78>)
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	4a04      	ldr	r2, [pc, #16]	; (8007c00 <RTC_ExitInitMode+0x78>)
 8007bf0:	f043 0320 	orr.w	r3, r3, #32
 8007bf4:	6093      	str	r3, [r2, #8]
  }

  return status;
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	40002800 	.word	0x40002800

08007c04 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b085      	sub	sp, #20
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8007c12:	79fb      	ldrb	r3, [r7, #7]
 8007c14:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8007c16:	e005      	b.n	8007c24 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8007c1e:	7afb      	ldrb	r3, [r7, #11]
 8007c20:	3b0a      	subs	r3, #10
 8007c22:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8007c24:	7afb      	ldrb	r3, [r7, #11]
 8007c26:	2b09      	cmp	r3, #9
 8007c28:	d8f6      	bhi.n	8007c18 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	011b      	lsls	r3, r3, #4
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	7afb      	ldrb	r3, [r7, #11]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	b2db      	uxtb	r3, r3
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8007c4e:	79fb      	ldrb	r3, [r7, #7]
 8007c50:	091b      	lsrs	r3, r3, #4
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	461a      	mov	r2, r3
 8007c56:	0092      	lsls	r2, r2, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8007c5e:	79fb      	ldrb	r3, [r7, #7]
 8007c60:	f003 030f 	and.w	r3, r3, #15
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
 8007c68:	4413      	add	r3, r2
 8007c6a:	b2db      	uxtb	r3, r3
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3714      	adds	r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d101      	bne.n	8007c92 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007c8e:	2302      	movs	r3, #2
 8007c90:	e07f      	b.n	8007d92 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	22ca      	movs	r2, #202	; 0xca
 8007ca8:	625a      	str	r2, [r3, #36]	; 0x24
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2253      	movs	r2, #83	; 0x53
 8007cb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cc0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007cd2:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d120      	bne.n	8007d24 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8007ce2:	f7fc fa6b 	bl	80041bc <HAL_GetTick>
 8007ce6:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8007ce8:	e015      	b.n	8007d16 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007cea:	f7fc fa67 	bl	80041bc <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cf8:	d90d      	bls.n	8007d16 <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	22ff      	movs	r2, #255	; 0xff
 8007d00:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2203      	movs	r2, #3
 8007d06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e03d      	b.n	8007d92 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d0e2      	beq.n	8007cea <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f023 0107 	bic.w	r1, r3, #7
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007d40:	4b16      	ldr	r3, [pc, #88]	; (8007d9c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a15      	ldr	r2, [pc, #84]	; (8007d9c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d4a:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007d4c:	4b13      	ldr	r3, [pc, #76]	; (8007d9c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	4a12      	ldr	r2, [pc, #72]	; (8007d9c <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8007d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d56:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689a      	ldr	r2, [r3, #8]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d66:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689a      	ldr	r2, [r3, #8]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d76:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	22ff      	movs	r2, #255	; 0xff
 8007d7e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007d90:	2300      	movs	r3, #0
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	40010400 	.word	0x40010400

08007da0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8007da8:	4b0f      	ldr	r3, [pc, #60]	; (8007de8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 8007daa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007dae:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00b      	beq.n	8007dd6 <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007dce:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7fb f98f 	bl	80030f4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8007dde:	bf00      	nop
 8007de0:	3708      	adds	r7, #8
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	40010400 	.word	0x40010400

08007dec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e095      	b.n	8007f2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d108      	bne.n	8007e18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e0e:	d009      	beq.n	8007e24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	61da      	str	r2, [r3, #28]
 8007e16:	e005      	b.n	8007e24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d106      	bne.n	8007e44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7fb fa50 	bl	80032e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e64:	d902      	bls.n	8007e6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007e66:	2300      	movs	r3, #0
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	e002      	b.n	8007e72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007e7a:	d007      	beq.n	8007e8c <HAL_SPI_Init+0xa0>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007e84:	d002      	beq.n	8007e8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ece:	ea42 0103 	orr.w	r1, r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	0c1b      	lsrs	r3, r3, #16
 8007ee8:	f003 0204 	and.w	r2, r3, #4
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef0:	f003 0310 	and.w	r3, r3, #16
 8007ef4:	431a      	orrs	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007efa:	f003 0308 	and.w	r3, r3, #8
 8007efe:	431a      	orrs	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007f08:	ea42 0103 	orr.w	r1, r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b088      	sub	sp, #32
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	603b      	str	r3, [r7, #0]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d101      	bne.n	8007f54 <HAL_SPI_Transmit+0x22>
 8007f50:	2302      	movs	r3, #2
 8007f52:	e158      	b.n	8008206 <HAL_SPI_Transmit+0x2d4>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f5c:	f7fc f92e 	bl	80041bc <HAL_GetTick>
 8007f60:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f62:	88fb      	ldrh	r3, [r7, #6]
 8007f64:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d002      	beq.n	8007f78 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007f72:	2302      	movs	r3, #2
 8007f74:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f76:	e13d      	b.n	80081f4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d002      	beq.n	8007f84 <HAL_SPI_Transmit+0x52>
 8007f7e:	88fb      	ldrh	r3, [r7, #6]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d102      	bne.n	8007f8a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f88:	e134      	b.n	80081f4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2203      	movs	r2, #3
 8007f8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	68ba      	ldr	r2, [r7, #8]
 8007f9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	88fa      	ldrh	r2, [r7, #6]
 8007fa2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	88fa      	ldrh	r2, [r7, #6]
 8007fa8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fd4:	d10f      	bne.n	8007ff6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fe4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ff4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008000:	2b40      	cmp	r3, #64	; 0x40
 8008002:	d007      	beq.n	8008014 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008012:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800801c:	d94b      	bls.n	80080b6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d002      	beq.n	800802c <HAL_SPI_Transmit+0xfa>
 8008026:	8afb      	ldrh	r3, [r7, #22]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d13e      	bne.n	80080aa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008030:	881a      	ldrh	r2, [r3, #0]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803c:	1c9a      	adds	r2, r3, #2
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008046:	b29b      	uxth	r3, r3
 8008048:	3b01      	subs	r3, #1
 800804a:	b29a      	uxth	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008050:	e02b      	b.n	80080aa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f003 0302 	and.w	r3, r3, #2
 800805c:	2b02      	cmp	r3, #2
 800805e:	d112      	bne.n	8008086 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008064:	881a      	ldrh	r2, [r3, #0]
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008070:	1c9a      	adds	r2, r3, #2
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800807a:	b29b      	uxth	r3, r3
 800807c:	3b01      	subs	r3, #1
 800807e:	b29a      	uxth	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008084:	e011      	b.n	80080aa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008086:	f7fc f899 	bl	80041bc <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	429a      	cmp	r2, r3
 8008094:	d803      	bhi.n	800809e <HAL_SPI_Transmit+0x16c>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809c:	d102      	bne.n	80080a4 <HAL_SPI_Transmit+0x172>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d102      	bne.n	80080aa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080a8:	e0a4      	b.n	80081f4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1ce      	bne.n	8008052 <HAL_SPI_Transmit+0x120>
 80080b4:	e07c      	b.n	80081b0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d002      	beq.n	80080c4 <HAL_SPI_Transmit+0x192>
 80080be:	8afb      	ldrh	r3, [r7, #22]
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d170      	bne.n	80081a6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d912      	bls.n	80080f4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d2:	881a      	ldrh	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080de:	1c9a      	adds	r2, r3, #2
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	3b02      	subs	r3, #2
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80080f2:	e058      	b.n	80081a6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	330c      	adds	r3, #12
 80080fe:	7812      	ldrb	r2, [r2, #0]
 8008100:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008106:	1c5a      	adds	r2, r3, #1
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008110:	b29b      	uxth	r3, r3
 8008112:	3b01      	subs	r3, #1
 8008114:	b29a      	uxth	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800811a:	e044      	b.n	80081a6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b02      	cmp	r3, #2
 8008128:	d12b      	bne.n	8008182 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800812e:	b29b      	uxth	r3, r3
 8008130:	2b01      	cmp	r3, #1
 8008132:	d912      	bls.n	800815a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008138:	881a      	ldrh	r2, [r3, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	1c9a      	adds	r2, r3, #2
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800814e:	b29b      	uxth	r3, r3
 8008150:	3b02      	subs	r3, #2
 8008152:	b29a      	uxth	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008158:	e025      	b.n	80081a6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	330c      	adds	r3, #12
 8008164:	7812      	ldrb	r2, [r2, #0]
 8008166:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008176:	b29b      	uxth	r3, r3
 8008178:	3b01      	subs	r3, #1
 800817a:	b29a      	uxth	r2, r3
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008180:	e011      	b.n	80081a6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008182:	f7fc f81b 	bl	80041bc <HAL_GetTick>
 8008186:	4602      	mov	r2, r0
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	1ad3      	subs	r3, r2, r3
 800818c:	683a      	ldr	r2, [r7, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d803      	bhi.n	800819a <HAL_SPI_Transmit+0x268>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008198:	d102      	bne.n	80081a0 <HAL_SPI_Transmit+0x26e>
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d102      	bne.n	80081a6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80081a4:	e026      	b.n	80081f4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1b5      	bne.n	800811c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 fc27 	bl	8008a08 <SPI_EndRxTxTransaction>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2220      	movs	r2, #32
 80081c4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10a      	bne.n	80081e4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081ce:	2300      	movs	r3, #0
 80081d0:	613b      	str	r3, [r7, #16]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	613b      	str	r3, [r7, #16]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	613b      	str	r3, [r7, #16]
 80081e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80081ec:	2301      	movs	r3, #1
 80081ee:	77fb      	strb	r3, [r7, #31]
 80081f0:	e000      	b.n	80081f4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80081f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008204:	7ffb      	ldrb	r3, [r7, #31]
}
 8008206:	4618      	mov	r0, r3
 8008208:	3720      	adds	r7, #32
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	4613      	mov	r3, r2
 800821c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008228:	2b01      	cmp	r3, #1
 800822a:	d101      	bne.n	8008230 <HAL_SPI_Transmit_DMA+0x20>
 800822c:	2302      	movs	r3, #2
 800822e:	e0d8      	b.n	80083e2 <HAL_SPI_Transmit_DMA+0x1d2>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800823e:	b2db      	uxtb	r3, r3
 8008240:	2b01      	cmp	r3, #1
 8008242:	d002      	beq.n	800824a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8008244:	2302      	movs	r3, #2
 8008246:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008248:	e0c6      	b.n	80083d8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <HAL_SPI_Transmit_DMA+0x46>
 8008250:	88fb      	ldrh	r3, [r7, #6]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d102      	bne.n	800825c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	75fb      	strb	r3, [r7, #23]
    goto error;
 800825a:	e0bd      	b.n	80083d8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2203      	movs	r2, #3
 8008260:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	88fa      	ldrh	r2, [r7, #6]
 8008274:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	88fa      	ldrh	r2, [r7, #6]
 800827a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2200      	movs	r2, #0
 8008286:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082a6:	d10f      	bne.n	80082c8 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082b6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80082c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082cc:	4a47      	ldr	r2, [pc, #284]	; (80083ec <HAL_SPI_Transmit_DMA+0x1dc>)
 80082ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d4:	4a46      	ldr	r2, [pc, #280]	; (80083f0 <HAL_SPI_Transmit_DMA+0x1e0>)
 80082d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082dc:	4a45      	ldr	r2, [pc, #276]	; (80083f4 <HAL_SPI_Transmit_DMA+0x1e4>)
 80082de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082e4:	2200      	movs	r2, #0
 80082e6:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	685a      	ldr	r2, [r3, #4]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80082f6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008300:	d82d      	bhi.n	800835e <HAL_SPI_Transmit_DMA+0x14e>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800830c:	d127      	bne.n	800835e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008312:	b29b      	uxth	r3, r3
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10f      	bne.n	800833c <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800832a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008330:	b29b      	uxth	r3, r3
 8008332:	085b      	lsrs	r3, r3, #1
 8008334:	b29a      	uxth	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	87da      	strh	r2, [r3, #62]	; 0x3e
 800833a:	e010      	b.n	800835e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685a      	ldr	r2, [r3, #4]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800834a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008350:	b29b      	uxth	r3, r3
 8008352:	085b      	lsrs	r3, r3, #1
 8008354:	b29b      	uxth	r3, r3
 8008356:	3301      	adds	r3, #1
 8008358:	b29a      	uxth	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008366:	4619      	mov	r1, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	330c      	adds	r3, #12
 800836e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008374:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008376:	f7fd fc11 	bl	8005b9c <HAL_DMA_Start_IT>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00c      	beq.n	800839a <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008384:	f043 0210 	orr.w	r2, r3, #16
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8008398:	e01e      	b.n	80083d8 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083a4:	2b40      	cmp	r3, #64	; 0x40
 80083a6:	d007      	beq.n	80083b8 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083b6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f042 0220 	orr.w	r2, r2, #32
 80083c6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	685a      	ldr	r2, [r3, #4]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f042 0202 	orr.w	r2, r2, #2
 80083d6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	08008747 	.word	0x08008747
 80083f0:	080086a1 	.word	0x080086a1
 80083f4:	08008763 	.word	0x08008763

080083f8 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00f      	beq.n	800842c <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008410:	4618      	mov	r0, r3
 8008412:	f7fd fc23 	bl	8005c5c <HAL_DMA_Abort>
 8008416:	4603      	mov	r3, r0
 8008418:	2b00      	cmp	r3, #0
 800841a:	d007      	beq.n	800842c <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008420:	f043 0210 	orr.w	r2, r3, #16
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00f      	beq.n	8008454 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008438:	4618      	mov	r0, r3
 800843a:	f7fd fc0f 	bl	8005c5c <HAL_DMA_Abort>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d007      	beq.n	8008454 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008448:	f043 0210 	orr.w	r2, r3, #16
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f022 0203 	bic.w	r2, r2, #3
 8008462:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 800846c:	7bfb      	ldrb	r3, [r7, #15]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
	...

08008478 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b088      	sub	sp, #32
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008490:	69bb      	ldr	r3, [r7, #24]
 8008492:	099b      	lsrs	r3, r3, #6
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10f      	bne.n	80084bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	099b      	lsrs	r3, r3, #6
 80084aa:	f003 0301 	and.w	r3, r3, #1
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d004      	beq.n	80084bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	4798      	blx	r3
    return;
 80084ba:	e0d7      	b.n	800866c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	085b      	lsrs	r3, r3, #1
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00a      	beq.n	80084de <HAL_SPI_IRQHandler+0x66>
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	09db      	lsrs	r3, r3, #7
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d004      	beq.n	80084de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	4798      	blx	r3
    return;
 80084dc:	e0c6      	b.n	800866c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	095b      	lsrs	r3, r3, #5
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10c      	bne.n	8008504 <HAL_SPI_IRQHandler+0x8c>
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	099b      	lsrs	r3, r3, #6
 80084ee:	f003 0301 	and.w	r3, r3, #1
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d106      	bne.n	8008504 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	0a1b      	lsrs	r3, r3, #8
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 80b4 	beq.w	800866c <HAL_SPI_IRQHandler+0x1f4>
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	095b      	lsrs	r3, r3, #5
 8008508:	f003 0301 	and.w	r3, r3, #1
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 80ad 	beq.w	800866c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	099b      	lsrs	r3, r3, #6
 8008516:	f003 0301 	and.w	r3, r3, #1
 800851a:	2b00      	cmp	r3, #0
 800851c:	d023      	beq.n	8008566 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b03      	cmp	r3, #3
 8008528:	d011      	beq.n	800854e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800852e:	f043 0204 	orr.w	r2, r3, #4
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008536:	2300      	movs	r3, #0
 8008538:	617b      	str	r3, [r7, #20]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	617b      	str	r3, [r7, #20]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	617b      	str	r3, [r7, #20]
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	e00b      	b.n	8008566 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800854e:	2300      	movs	r3, #0
 8008550:	613b      	str	r3, [r7, #16]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	613b      	str	r3, [r7, #16]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	613b      	str	r3, [r7, #16]
 8008562:	693b      	ldr	r3, [r7, #16]
        return;
 8008564:	e082      	b.n	800866c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	095b      	lsrs	r3, r3, #5
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b00      	cmp	r3, #0
 8008570:	d014      	beq.n	800859c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008576:	f043 0201 	orr.w	r2, r3, #1
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800857e:	2300      	movs	r3, #0
 8008580:	60fb      	str	r3, [r7, #12]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	60fb      	str	r3, [r7, #12]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	0a1b      	lsrs	r3, r3, #8
 80085a0:	f003 0301 	and.w	r3, r3, #1
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00c      	beq.n	80085c2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ac:	f043 0208 	orr.w	r2, r3, #8
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80085b4:	2300      	movs	r3, #0
 80085b6:	60bb      	str	r3, [r7, #8]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	60bb      	str	r3, [r7, #8]
 80085c0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d04f      	beq.n	800866a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80085d8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	f003 0302 	and.w	r3, r3, #2
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d104      	bne.n	80085f6 <HAL_SPI_IRQHandler+0x17e>
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d034      	beq.n	8008660 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f022 0203 	bic.w	r2, r2, #3
 8008604:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800860a:	2b00      	cmp	r3, #0
 800860c:	d011      	beq.n	8008632 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008612:	4a18      	ldr	r2, [pc, #96]	; (8008674 <HAL_SPI_IRQHandler+0x1fc>)
 8008614:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800861a:	4618      	mov	r0, r3
 800861c:	f7fd fb5c 	bl	8005cd8 <HAL_DMA_Abort_IT>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d005      	beq.n	8008632 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800862a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008636:	2b00      	cmp	r3, #0
 8008638:	d016      	beq.n	8008668 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863e:	4a0d      	ldr	r2, [pc, #52]	; (8008674 <HAL_SPI_IRQHandler+0x1fc>)
 8008640:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008646:	4618      	mov	r0, r3
 8008648:	f7fd fb46 	bl	8005cd8 <HAL_DMA_Abort_IT>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00a      	beq.n	8008668 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008656:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800865e:	e003      	b.n	8008668 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 f813 	bl	800868c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008666:	e000      	b.n	800866a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008668:	bf00      	nop
    return;
 800866a:	bf00      	nop
  }
}
 800866c:	3720      	adds	r7, #32
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	080087a3 	.word	0x080087a3

08008678 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80086ae:	f7fb fd85 	bl	80041bc <HAL_GetTick>
 80086b2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0320 	and.w	r3, r3, #32
 80086be:	2b20      	cmp	r3, #32
 80086c0:	d03b      	beq.n	800873a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f022 0220 	bic.w	r2, r2, #32
 80086d0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f022 0202 	bic.w	r2, r2, #2
 80086e0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	2164      	movs	r1, #100	; 0x64
 80086e6:	6978      	ldr	r0, [r7, #20]
 80086e8:	f000 f98e 	bl	8008a08 <SPI_EndRxTxTransaction>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d005      	beq.n	80086fe <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086f6:	f043 0220 	orr.w	r2, r3, #32
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d10a      	bne.n	800871c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008706:	2300      	movs	r3, #0
 8008708:	60fb      	str	r3, [r7, #12]
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	60fb      	str	r3, [r7, #12]
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	60fb      	str	r3, [r7, #12]
 800871a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2200      	movs	r2, #0
 8008720:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008732:	6978      	ldr	r0, [r7, #20]
 8008734:	f7ff ffaa 	bl	800868c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008738:	e002      	b.n	8008740 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800873a:	6978      	ldr	r0, [r7, #20]
 800873c:	f001 fa4a 	bl	8009bd4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008740:	3718      	adds	r7, #24
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}

08008746 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008746:	b580      	push	{r7, lr}
 8008748:	b084      	sub	sp, #16
 800874a:	af00      	add	r7, sp, #0
 800874c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008752:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f7ff ff8f 	bl	8008678 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800875a:	bf00      	nop
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008762:	b580      	push	{r7, lr}
 8008764:	b084      	sub	sp, #16
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f022 0203 	bic.w	r2, r2, #3
 800877e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008784:	f043 0210 	orr.w	r2, r3, #16
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008794:	68f8      	ldr	r0, [r7, #12]
 8008796:	f7ff ff79 	bl	800868c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800879a:	bf00      	nop
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b084      	sub	sp, #16
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ae:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	2200      	movs	r2, #0
 80087bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f7ff ff64 	bl	800868c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80087c4:	bf00      	nop
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b088      	sub	sp, #32
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	603b      	str	r3, [r7, #0]
 80087d8:	4613      	mov	r3, r2
 80087da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80087dc:	f7fb fcee 	bl	80041bc <HAL_GetTick>
 80087e0:	4602      	mov	r2, r0
 80087e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e4:	1a9b      	subs	r3, r3, r2
 80087e6:	683a      	ldr	r2, [r7, #0]
 80087e8:	4413      	add	r3, r2
 80087ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80087ec:	f7fb fce6 	bl	80041bc <HAL_GetTick>
 80087f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80087f2:	4b39      	ldr	r3, [pc, #228]	; (80088d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	015b      	lsls	r3, r3, #5
 80087f8:	0d1b      	lsrs	r3, r3, #20
 80087fa:	69fa      	ldr	r2, [r7, #28]
 80087fc:	fb02 f303 	mul.w	r3, r2, r3
 8008800:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008802:	e054      	b.n	80088ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800880a:	d050      	beq.n	80088ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800880c:	f7fb fcd6 	bl	80041bc <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	69fa      	ldr	r2, [r7, #28]
 8008818:	429a      	cmp	r2, r3
 800881a:	d902      	bls.n	8008822 <SPI_WaitFlagStateUntilTimeout+0x56>
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d13d      	bne.n	800889e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	685a      	ldr	r2, [r3, #4]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008830:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800883a:	d111      	bne.n	8008860 <SPI_WaitFlagStateUntilTimeout+0x94>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008844:	d004      	beq.n	8008850 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800884e:	d107      	bne.n	8008860 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800885e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008868:	d10f      	bne.n	800888a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008878:	601a      	str	r2, [r3, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008888:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800889a:	2303      	movs	r3, #3
 800889c:	e017      	b.n	80088ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80088a4:	2300      	movs	r3, #0
 80088a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	3b01      	subs	r3, #1
 80088ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	4013      	ands	r3, r2
 80088b8:	68ba      	ldr	r2, [r7, #8]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	bf0c      	ite	eq
 80088be:	2301      	moveq	r3, #1
 80088c0:	2300      	movne	r3, #0
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	461a      	mov	r2, r3
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d19b      	bne.n	8008804 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3720      	adds	r7, #32
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	20000000 	.word	0x20000000

080088dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08a      	sub	sp, #40	; 0x28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80088ea:	2300      	movs	r3, #0
 80088ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80088ee:	f7fb fc65 	bl	80041bc <HAL_GetTick>
 80088f2:	4602      	mov	r2, r0
 80088f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f6:	1a9b      	subs	r3, r3, r2
 80088f8:	683a      	ldr	r2, [r7, #0]
 80088fa:	4413      	add	r3, r2
 80088fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80088fe:	f7fb fc5d 	bl	80041bc <HAL_GetTick>
 8008902:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	330c      	adds	r3, #12
 800890a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800890c:	4b3d      	ldr	r3, [pc, #244]	; (8008a04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	4613      	mov	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4413      	add	r3, r2
 8008916:	00da      	lsls	r2, r3, #3
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	0d1b      	lsrs	r3, r3, #20
 800891c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800891e:	fb02 f303 	mul.w	r3, r2, r3
 8008922:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008924:	e060      	b.n	80089e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800892c:	d107      	bne.n	800893e <SPI_WaitFifoStateUntilTimeout+0x62>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d104      	bne.n	800893e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	b2db      	uxtb	r3, r3
 800893a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800893c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008944:	d050      	beq.n	80089e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008946:	f7fb fc39 	bl	80041bc <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008952:	429a      	cmp	r2, r3
 8008954:	d902      	bls.n	800895c <SPI_WaitFifoStateUntilTimeout+0x80>
 8008956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008958:	2b00      	cmp	r3, #0
 800895a:	d13d      	bne.n	80089d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800896a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008974:	d111      	bne.n	800899a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800897e:	d004      	beq.n	800898a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008988:	d107      	bne.n	800899a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008998:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089a2:	d10f      	bne.n	80089c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089b2:	601a      	str	r2, [r3, #0]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e010      	b.n	80089fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d101      	bne.n	80089e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	3b01      	subs	r3, #1
 80089e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	689a      	ldr	r2, [r3, #8]
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	4013      	ands	r3, r2
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d196      	bne.n	8008926 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3728      	adds	r7, #40	; 0x28
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20000000 	.word	0x20000000

08008a08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af02      	add	r7, sp, #8
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f7ff ff5b 	bl	80088dc <SPI_WaitFifoStateUntilTimeout>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d007      	beq.n	8008a3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a30:	f043 0220 	orr.w	r2, r3, #32
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e027      	b.n	8008a8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2200      	movs	r2, #0
 8008a44:	2180      	movs	r1, #128	; 0x80
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f7ff fec0 	bl	80087cc <SPI_WaitFlagStateUntilTimeout>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d007      	beq.n	8008a62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a56:	f043 0220 	orr.w	r2, r3, #32
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e014      	b.n	8008a8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	9300      	str	r3, [sp, #0]
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f7ff ff34 	bl	80088dc <SPI_WaitFifoStateUntilTimeout>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d007      	beq.n	8008a8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a7e:	f043 0220 	orr.w	r2, r3, #32
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e000      	b.n	8008a8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b08b      	sub	sp, #44	; 0x2c
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	fa93 f3a3 	rbit	r3, r3
 8008aae:	613b      	str	r3, [r7, #16]
  return result;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8008aba:	2320      	movs	r3, #32
 8008abc:	e003      	b.n	8008ac6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	fab3 f383 	clz	r3, r3
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	005b      	lsls	r3, r3, #1
 8008ac8:	2103      	movs	r1, #3
 8008aca:	fa01 f303 	lsl.w	r3, r1, r3
 8008ace:	43db      	mvns	r3, r3
 8008ad0:	401a      	ands	r2, r3
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ad6:	6a3b      	ldr	r3, [r7, #32]
 8008ad8:	fa93 f3a3 	rbit	r3, r3
 8008adc:	61fb      	str	r3, [r7, #28]
  return result;
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d101      	bne.n	8008aec <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008ae8:	2320      	movs	r3, #32
 8008aea:	e003      	b.n	8008af4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	fab3 f383 	clz	r3, r3
 8008af2:	b2db      	uxtb	r3, r3
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	6879      	ldr	r1, [r7, #4]
 8008af8:	fa01 f303 	lsl.w	r3, r1, r3
 8008afc:	431a      	orrs	r2, r3
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	601a      	str	r2, [r3, #0]
}
 8008b02:	bf00      	nop
 8008b04:	372c      	adds	r7, #44	; 0x2c
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr

08008b0e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8008b0e:	b480      	push	{r7}
 8008b10:	b085      	sub	sp, #20
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	43db      	mvns	r3, r3
 8008b22:	401a      	ands	r2, r3
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	6879      	ldr	r1, [r7, #4]
 8008b28:	fb01 f303 	mul.w	r3, r1, r3
 8008b2c:	431a      	orrs	r2, r3
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	605a      	str	r2, [r3, #4]
}
 8008b32:	bf00      	nop
 8008b34:	3714      	adds	r7, #20
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b08b      	sub	sp, #44	; 0x2c
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	60f8      	str	r0, [r7, #12]
 8008b46:	60b9      	str	r1, [r7, #8]
 8008b48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	689a      	ldr	r2, [r3, #8]
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	fa93 f3a3 	rbit	r3, r3
 8008b58:	613b      	str	r3, [r7, #16]
  return result;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d101      	bne.n	8008b68 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8008b64:	2320      	movs	r3, #32
 8008b66:	e003      	b.n	8008b70 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	fab3 f383 	clz	r3, r3
 8008b6e:	b2db      	uxtb	r3, r3
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	2103      	movs	r1, #3
 8008b74:	fa01 f303 	lsl.w	r3, r1, r3
 8008b78:	43db      	mvns	r3, r3
 8008b7a:	401a      	ands	r2, r3
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b80:	6a3b      	ldr	r3, [r7, #32]
 8008b82:	fa93 f3a3 	rbit	r3, r3
 8008b86:	61fb      	str	r3, [r7, #28]
  return result;
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8008b92:	2320      	movs	r3, #32
 8008b94:	e003      	b.n	8008b9e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	fab3 f383 	clz	r3, r3
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	005b      	lsls	r3, r3, #1
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8008bac:	bf00      	nop
 8008bae:	372c      	adds	r7, #44	; 0x2c
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr

08008bb8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b08b      	sub	sp, #44	; 0x2c
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	68da      	ldr	r2, [r3, #12]
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	fa93 f3a3 	rbit	r3, r3
 8008bd2:	613b      	str	r3, [r7, #16]
  return result;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8008bde:	2320      	movs	r3, #32
 8008be0:	e003      	b.n	8008bea <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	fab3 f383 	clz	r3, r3
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	005b      	lsls	r3, r3, #1
 8008bec:	2103      	movs	r1, #3
 8008bee:	fa01 f303 	lsl.w	r3, r1, r3
 8008bf2:	43db      	mvns	r3, r3
 8008bf4:	401a      	ands	r2, r3
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	fa93 f3a3 	rbit	r3, r3
 8008c00:	61fb      	str	r3, [r7, #28]
  return result;
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d101      	bne.n	8008c10 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8008c0c:	2320      	movs	r3, #32
 8008c0e:	e003      	b.n	8008c18 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c12:	fab3 f383 	clz	r3, r3
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	005b      	lsls	r3, r3, #1
 8008c1a:	6879      	ldr	r1, [r7, #4]
 8008c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8008c20:	431a      	orrs	r2, r3
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	60da      	str	r2, [r3, #12]
}
 8008c26:	bf00      	nop
 8008c28:	372c      	adds	r7, #44	; 0x2c
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b08b      	sub	sp, #44	; 0x2c
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	60f8      	str	r0, [r7, #12]
 8008c3a:	60b9      	str	r1, [r7, #8]
 8008c3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6a1a      	ldr	r2, [r3, #32]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	fa93 f3a3 	rbit	r3, r3
 8008c4c:	613b      	str	r3, [r7, #16]
  return result;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d101      	bne.n	8008c5c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8008c58:	2320      	movs	r3, #32
 8008c5a:	e003      	b.n	8008c64 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8008c5c:	69bb      	ldr	r3, [r7, #24]
 8008c5e:	fab3 f383 	clz	r3, r3
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	210f      	movs	r1, #15
 8008c68:	fa01 f303 	lsl.w	r3, r1, r3
 8008c6c:	43db      	mvns	r3, r3
 8008c6e:	401a      	ands	r2, r3
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c74:	6a3b      	ldr	r3, [r7, #32]
 8008c76:	fa93 f3a3 	rbit	r3, r3
 8008c7a:	61fb      	str	r3, [r7, #28]
  return result;
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8008c86:	2320      	movs	r3, #32
 8008c88:	e003      	b.n	8008c92 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	fab3 f383 	clz	r3, r3
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	fa01 f303 	lsl.w	r3, r1, r3
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8008ca0:	bf00      	nop
 8008ca2:	372c      	adds	r7, #44	; 0x2c
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b08b      	sub	sp, #44	; 0x2c
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	0a1b      	lsrs	r3, r3, #8
 8008cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	fa93 f3a3 	rbit	r3, r3
 8008cc8:	613b      	str	r3, [r7, #16]
  return result;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d101      	bne.n	8008cd8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8008cd4:	2320      	movs	r3, #32
 8008cd6:	e003      	b.n	8008ce0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	fab3 f383 	clz	r3, r3
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	210f      	movs	r1, #15
 8008ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce8:	43db      	mvns	r3, r3
 8008cea:	401a      	ands	r2, r3
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	0a1b      	lsrs	r3, r3, #8
 8008cf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cf2:	6a3b      	ldr	r3, [r7, #32]
 8008cf4:	fa93 f3a3 	rbit	r3, r3
 8008cf8:	61fb      	str	r3, [r7, #28]
  return result;
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8008d04:	2320      	movs	r3, #32
 8008d06:	e003      	b.n	8008d10 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0a:	fab3 f383 	clz	r3, r3
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	6879      	ldr	r1, [r7, #4]
 8008d14:	fa01 f303 	lsl.w	r3, r1, r3
 8008d18:	431a      	orrs	r2, r3
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8008d1e:	bf00      	nop
 8008d20:	372c      	adds	r7, #44	; 0x2c
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b088      	sub	sp, #32
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
 8008d32:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	fa93 f3a3 	rbit	r3, r3
 8008d40:	60fb      	str	r3, [r7, #12]
  return result;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <LL_GPIO_Init+0x26>
    return 32U;
 8008d4c:	2320      	movs	r3, #32
 8008d4e:	e003      	b.n	8008d58 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	fab3 f383 	clz	r3, r3
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8008d5a:	e048      	b.n	8008dee <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	2101      	movs	r1, #1
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	fa01 f303 	lsl.w	r3, r1, r3
 8008d68:	4013      	ands	r3, r2
 8008d6a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8008d6c:	69bb      	ldr	r3, [r7, #24]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d03a      	beq.n	8008de8 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d003      	beq.n	8008d82 <LL_GPIO_Init+0x58>
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d10e      	bne.n	8008da0 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	461a      	mov	r2, r3
 8008d88:	69b9      	ldr	r1, [r7, #24]
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7ff fed7 	bl	8008b3e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	6819      	ldr	r1, [r3, #0]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7ff feb7 	bl	8008b0e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	461a      	mov	r2, r3
 8008da6:	69b9      	ldr	r1, [r7, #24]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f7ff ff05 	bl	8008bb8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	685b      	ldr	r3, [r3, #4]
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d111      	bne.n	8008dda <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	2bff      	cmp	r3, #255	; 0xff
 8008dba:	d807      	bhi.n	8008dcc <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	69b9      	ldr	r1, [r7, #24]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f7ff ff34 	bl	8008c32 <LL_GPIO_SetAFPin_0_7>
 8008dca:	e006      	b.n	8008dda <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	695b      	ldr	r3, [r3, #20]
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	69b9      	ldr	r1, [r7, #24]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f7ff ff69 	bl	8008cac <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	461a      	mov	r2, r3
 8008de0:	69b9      	ldr	r1, [r7, #24]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7ff fe56 	bl	8008a94 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	3301      	adds	r3, #1
 8008dec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	fa22 f303 	lsr.w	r3, r2, r3
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d1af      	bne.n	8008d5c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3720      	adds	r7, #32
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <LL_LPUART_IsEnabled>:
{
 8008e06:	b480      	push	{r7}
 8008e08:	b083      	sub	sp, #12
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f003 0301 	and.w	r3, r3, #1
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d101      	bne.n	8008e1e <LL_LPUART_IsEnabled+0x18>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e000      	b.n	8008e20 <LL_LPUART_IsEnabled+0x1a>
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <LL_LPUART_SetStopBitsLength>:
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	431a      	orrs	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	605a      	str	r2, [r3, #4]
}
 8008e46:	bf00      	nop
 8008e48:	370c      	adds	r7, #12
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e50:	4770      	bx	lr

08008e52 <LL_LPUART_SetHWFlowCtrl>:
{
 8008e52:	b480      	push	{r7}
 8008e54:	b083      	sub	sp, #12
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	431a      	orrs	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	609a      	str	r2, [r3, #8]
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <LL_LPUART_SetBaudRate>:
{
 8008e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e7c:	b086      	sub	sp, #24
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6178      	str	r0, [r7, #20]
 8008e82:	6139      	str	r1, [r7, #16]
 8008e84:	60fa      	str	r2, [r7, #12]
  if (BaudRate != 0U)
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d025      	beq.n	8008ed8 <LL_LPUART_SetBaudRate+0x60>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, BaudRate);
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	461c      	mov	r4, r3
 8008e92:	4615      	mov	r5, r2
 8008e94:	f04f 0200 	mov.w	r2, #0
 8008e98:	f04f 0300 	mov.w	r3, #0
 8008e9c:	022b      	lsls	r3, r5, #8
 8008e9e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008ea2:	0222      	lsls	r2, r4, #8
 8008ea4:	68f9      	ldr	r1, [r7, #12]
 8008ea6:	0849      	lsrs	r1, r1, #1
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	4688      	mov	r8, r1
 8008eac:	4681      	mov	r9, r0
 8008eae:	eb12 0a08 	adds.w	sl, r2, r8
 8008eb2:	eb43 0b09 	adc.w	fp, r3, r9
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	603b      	str	r3, [r7, #0]
 8008ebc:	607a      	str	r2, [r7, #4]
 8008ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ec2:	4650      	mov	r0, sl
 8008ec4:	4659      	mov	r1, fp
 8008ec6:	f7f7 febf 	bl	8000c48 <__aeabi_uldivmod>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	460b      	mov	r3, r1
 8008ece:	4613      	mov	r3, r2
 8008ed0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	60da      	str	r2, [r3, #12]
}
 8008ed8:	bf00      	nop
 8008eda:	3718      	adds	r7, #24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08008ee4 <LL_APB1_GRP2_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_ForceReset(uint32_t Periphs)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8008eec:	4b05      	ldr	r3, [pc, #20]	; (8008f04 <LL_APB1_GRP2_ForceReset+0x20>)
 8008eee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ef0:	4904      	ldr	r1, [pc, #16]	; (8008f04 <LL_APB1_GRP2_ForceReset+0x20>)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr
 8008f04:	40021000 	.word	0x40021000

08008f08 <LL_APB1_GRP2_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_ReleaseReset(uint32_t Periphs)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8008f10:	4b06      	ldr	r3, [pc, #24]	; (8008f2c <LL_APB1_GRP2_ReleaseReset+0x24>)
 8008f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	43db      	mvns	r3, r3
 8008f18:	4904      	ldr	r1, [pc, #16]	; (8008f2c <LL_APB1_GRP2_ReleaseReset+0x24>)
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8008f1e:	bf00      	nop
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	40021000 	.word	0x40021000

08008f30 <LL_LPUART_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_LPUART_DeInit(const USART_TypeDef *LPUARTx)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_LPUART_INSTANCE(LPUARTx));

  if (LPUARTx == LPUART1)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a08      	ldr	r2, [pc, #32]	; (8008f60 <LL_LPUART_DeInit+0x30>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d106      	bne.n	8008f52 <LL_LPUART_DeInit+0x22>
  {
    /* Force reset of LPUART peripheral */
    LL_APB1_GRP2_ForceReset(LL_APB1_GRP2_PERIPH_LPUART1);
 8008f44:	2001      	movs	r0, #1
 8008f46:	f7ff ffcd 	bl	8008ee4 <LL_APB1_GRP2_ForceReset>

    /* Release reset of LPUART peripheral */
    LL_APB1_GRP2_ReleaseReset(LL_APB1_GRP2_PERIPH_LPUART1);
 8008f4a:	2001      	movs	r0, #1
 8008f4c:	f7ff ffdc 	bl	8008f08 <LL_APB1_GRP2_ReleaseReset>
 8008f50:	e001      	b.n	8008f56 <LL_LPUART_DeInit+0x26>
  }
  else
  {
    status = ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	40008000 	.word	0x40008000

08008f64 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7ff ff47 	bl	8008e06 <LL_LPUART_IsEnabled>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d12f      	bne.n	8008fde <LL_LPUART_Init+0x7a>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	4b19      	ldr	r3, [pc, #100]	; (8008fe8 <LL_LPUART_Init+0x84>)
 8008f84:	4013      	ands	r3, r2
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	6851      	ldr	r1, [r2, #4]
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	68d2      	ldr	r2, [r2, #12]
 8008f8e:	4311      	orrs	r1, r2
 8008f90:	683a      	ldr	r2, [r7, #0]
 8008f92:	6912      	ldr	r2, [r2, #16]
 8008f94:	430a      	orrs	r2, r1
 8008f96:	431a      	orrs	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7ff ff42 	bl	8008e2c <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	4619      	mov	r1, r3
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7ff ff4f 	bl	8008e52 <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8008fb4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008fb8:	f000 f8e2 	bl	8009180 <LL_RCC_GetLPUARTClockFreq>
 8008fbc:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00c      	beq.n	8008fde <LL_LPUART_Init+0x7a>
        && (LPUART_InitStruct->BaudRate != 0U))
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d008      	beq.n	8008fde <LL_LPUART_Init+0x7a>
    {
      status = SUCCESS;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	68b9      	ldr	r1, [r7, #8]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f7ff ff4d 	bl	8008e78 <LL_LPUART_SetBaudRate>
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }

  return (status);
 8008fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3710      	adds	r7, #16
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	efffe9f3 	.word	0xefffe9f3

08008fec <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8008fec:	b480      	push	{r7}
 8008fee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8008ff0:	4b07      	ldr	r3, [pc, #28]	; (8009010 <LL_RCC_HSI_IsReady+0x24>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ffc:	d101      	bne.n	8009002 <LL_RCC_HSI_IsReady+0x16>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e000      	b.n	8009004 <LL_RCC_HSI_IsReady+0x18>
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	40021000 	.word	0x40021000

08009014 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8009014:	b480      	push	{r7}
 8009016:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8009018:	4b07      	ldr	r3, [pc, #28]	; (8009038 <LL_RCC_LSE_IsReady+0x24>)
 800901a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800901e:	f003 0302 	and.w	r3, r3, #2
 8009022:	2b02      	cmp	r3, #2
 8009024:	d101      	bne.n	800902a <LL_RCC_LSE_IsReady+0x16>
 8009026:	2301      	movs	r3, #1
 8009028:	e000      	b.n	800902c <LL_RCC_LSE_IsReady+0x18>
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	40021000 	.word	0x40021000

0800903c <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800903c:	b480      	push	{r7}
 800903e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8009040:	4b06      	ldr	r3, [pc, #24]	; (800905c <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f003 0308 	and.w	r3, r3, #8
 8009048:	2b08      	cmp	r3, #8
 800904a:	d101      	bne.n	8009050 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800904c:	2301      	movs	r3, #1
 800904e:	e000      	b.n	8009052 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr
 800905c:	40021000 	.word	0x40021000

08009060 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8009060:	b480      	push	{r7}
 8009062:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8009064:	4b04      	ldr	r3, [pc, #16]	; (8009078 <LL_RCC_MSI_GetRange+0x18>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800906c:	4618      	mov	r0, r3
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	40021000 	.word	0x40021000

0800907c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800907c:	b480      	push	{r7}
 800907e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8009080:	4b04      	ldr	r3, [pc, #16]	; (8009094 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8009082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009086:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800908a:	4618      	mov	r0, r3
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	40021000 	.word	0x40021000

08009098 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8009098:	b480      	push	{r7}
 800909a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800909c:	4b04      	ldr	r3, [pc, #16]	; (80090b0 <LL_RCC_GetSysClkSource+0x18>)
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f003 030c 	and.w	r3, r3, #12
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	40021000 	.word	0x40021000

080090b4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80090b4:	b480      	push	{r7}
 80090b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80090b8:	4b04      	ldr	r3, [pc, #16]	; (80090cc <LL_RCC_GetAHBPrescaler+0x18>)
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	40021000 	.word	0x40021000

080090d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80090d0:	b480      	push	{r7}
 80090d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80090d4:	4b04      	ldr	r3, [pc, #16]	; (80090e8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80090dc:	4618      	mov	r0, r3
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	40021000 	.word	0x40021000

080090ec <LL_RCC_GetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
 80090ec:	b480      	push	{r7}
 80090ee:	b083      	sub	sp, #12
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80090f4:	4b05      	ldr	r3, [pc, #20]	; (800910c <LL_RCC_GetLPUARTClockSource+0x20>)
 80090f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4013      	ands	r3, r2
}
 80090fe:	4618      	mov	r0, r3
 8009100:	370c      	adds	r7, #12
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	40021000 	.word	0x40021000

08009110 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009114:	4b04      	ldr	r3, [pc, #16]	; (8009128 <LL_RCC_PLL_GetMainSource+0x18>)
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	f003 0303 	and.w	r3, r3, #3
}
 800911c:	4618      	mov	r0, r3
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
 8009126:	bf00      	nop
 8009128:	40021000 	.word	0x40021000

0800912c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 8 and 86 or 127 depending on devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800912c:	b480      	push	{r7}
 800912e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009130:	4b04      	ldr	r3, [pc, #16]	; (8009144 <LL_RCC_PLL_GetN+0x18>)
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	0a1b      	lsrs	r3, r3, #8
 8009136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800913a:	4618      	mov	r0, r3
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr
 8009144:	40021000 	.word	0x40021000

08009148 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8009148:	b480      	push	{r7}
 800914a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800914c:	4b04      	ldr	r3, [pc, #16]	; (8009160 <LL_RCC_PLL_GetR+0x18>)
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8009154:	4618      	mov	r0, r3
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	40021000 	.word	0x40021000

08009164 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_16 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8009164:	b480      	push	{r7}
 8009166:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009168:	4b04      	ldr	r3, [pc, #16]	; (800917c <LL_RCC_PLL_GetDivider+0x18>)
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8009170:	4618      	mov	r0, r3
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop
 800917c:	40021000 	.word	0x40021000

08009180 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f7ff ffad 	bl	80090ec <LL_RCC_GetLPUARTClockSource>
 8009192:	4603      	mov	r3, r0
 8009194:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009198:	d019      	beq.n	80091ce <LL_RCC_GetLPUARTClockFreq+0x4e>
 800919a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800919e:	d82b      	bhi.n	80091f8 <LL_RCC_GetLPUARTClockFreq+0x78>
 80091a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091a4:	d00b      	beq.n	80091be <LL_RCC_GetLPUARTClockFreq+0x3e>
 80091a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091aa:	d825      	bhi.n	80091f8 <LL_RCC_GetLPUARTClockFreq+0x78>
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d017      	beq.n	80091e0 <LL_RCC_GetLPUARTClockFreq+0x60>
 80091b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091b4:	d120      	bne.n	80091f8 <LL_RCC_GetLPUARTClockFreq+0x78>
  {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      lpuart_frequency = RCC_GetSystemClockFreq();
 80091b6:	f000 f82b 	bl	8009210 <RCC_GetSystemClockFreq>
 80091ba:	60f8      	str	r0, [r7, #12]
      break;
 80091bc:	e021      	b.n	8009202 <LL_RCC_GetLPUARTClockFreq+0x82>

    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() != 0U)
 80091be:	f7ff ff15 	bl	8008fec <LL_RCC_HSI_IsReady>
 80091c2:	4603      	mov	r3, r0
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d019      	beq.n	80091fc <LL_RCC_GetLPUARTClockFreq+0x7c>
      {
        lpuart_frequency = HSI_VALUE;
 80091c8:	4b10      	ldr	r3, [pc, #64]	; (800920c <LL_RCC_GetLPUARTClockFreq+0x8c>)
 80091ca:	60fb      	str	r3, [r7, #12]
      }
      break;
 80091cc:	e016      	b.n	80091fc <LL_RCC_GetLPUARTClockFreq+0x7c>

    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() != 0U)
 80091ce:	f7ff ff21 	bl	8009014 <LL_RCC_LSE_IsReady>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d013      	beq.n	8009200 <LL_RCC_GetLPUARTClockFreq+0x80>
      {
        lpuart_frequency = LSE_VALUE;
 80091d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091dc:	60fb      	str	r3, [r7, #12]
      }
      break;
 80091de:	e00f      	b.n	8009200 <LL_RCC_GetLPUARTClockFreq+0x80>

    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80091e0:	f000 f816 	bl	8009210 <RCC_GetSystemClockFreq>
 80091e4:	4603      	mov	r3, r0
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 f8a2 	bl	8009330 <RCC_GetHCLKClockFreq>
 80091ec:	4603      	mov	r3, r0
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 f8b4 	bl	800935c <RCC_GetPCLK1ClockFreq>
 80091f4:	60f8      	str	r0, [r7, #12]
      break;
 80091f6:	e004      	b.n	8009202 <LL_RCC_GetLPUARTClockFreq+0x82>

    default:
      break;
 80091f8:	bf00      	nop
 80091fa:	e002      	b.n	8009202 <LL_RCC_GetLPUARTClockFreq+0x82>
      break;
 80091fc:	bf00      	nop
 80091fe:	e000      	b.n	8009202 <LL_RCC_GetLPUARTClockFreq+0x82>
      break;
 8009200:	bf00      	nop
  }

  return lpuart_frequency;
 8009202:	68fb      	ldr	r3, [r7, #12]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	00f42400 	.word	0x00f42400

08009210 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8009216:	f7ff ff3f 	bl	8009098 <LL_RCC_GetSysClkSource>
 800921a:	4603      	mov	r3, r0
 800921c:	2b0c      	cmp	r3, #12
 800921e:	d851      	bhi.n	80092c4 <RCC_GetSystemClockFreq+0xb4>
 8009220:	a201      	add	r2, pc, #4	; (adr r2, 8009228 <RCC_GetSystemClockFreq+0x18>)
 8009222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009226:	bf00      	nop
 8009228:	0800925d 	.word	0x0800925d
 800922c:	080092c5 	.word	0x080092c5
 8009230:	080092c5 	.word	0x080092c5
 8009234:	080092c5 	.word	0x080092c5
 8009238:	080092b1 	.word	0x080092b1
 800923c:	080092c5 	.word	0x080092c5
 8009240:	080092c5 	.word	0x080092c5
 8009244:	080092c5 	.word	0x080092c5
 8009248:	080092b7 	.word	0x080092b7
 800924c:	080092c5 	.word	0x080092c5
 8009250:	080092c5 	.word	0x080092c5
 8009254:	080092c5 	.word	0x080092c5
 8009258:	080092bd 	.word	0x080092bd
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800925c:	f7ff feee 	bl	800903c <LL_RCC_MSI_IsEnabledRangeSelect>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d111      	bne.n	800928a <RCC_GetSystemClockFreq+0x7a>
 8009266:	f7ff fee9 	bl	800903c <LL_RCC_MSI_IsEnabledRangeSelect>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d004      	beq.n	800927a <RCC_GetSystemClockFreq+0x6a>
 8009270:	f7ff fef6 	bl	8009060 <LL_RCC_MSI_GetRange>
 8009274:	4603      	mov	r3, r0
 8009276:	0a1b      	lsrs	r3, r3, #8
 8009278:	e003      	b.n	8009282 <RCC_GetSystemClockFreq+0x72>
 800927a:	f7ff feff 	bl	800907c <LL_RCC_MSI_GetRangeAfterStandby>
 800927e:	4603      	mov	r3, r0
 8009280:	0a1b      	lsrs	r3, r3, #8
 8009282:	4a28      	ldr	r2, [pc, #160]	; (8009324 <RCC_GetSystemClockFreq+0x114>)
 8009284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009288:	e010      	b.n	80092ac <RCC_GetSystemClockFreq+0x9c>
 800928a:	f7ff fed7 	bl	800903c <LL_RCC_MSI_IsEnabledRangeSelect>
 800928e:	4603      	mov	r3, r0
 8009290:	2b00      	cmp	r3, #0
 8009292:	d004      	beq.n	800929e <RCC_GetSystemClockFreq+0x8e>
 8009294:	f7ff fee4 	bl	8009060 <LL_RCC_MSI_GetRange>
 8009298:	4603      	mov	r3, r0
 800929a:	091b      	lsrs	r3, r3, #4
 800929c:	e003      	b.n	80092a6 <RCC_GetSystemClockFreq+0x96>
 800929e:	f7ff feed 	bl	800907c <LL_RCC_MSI_GetRangeAfterStandby>
 80092a2:	4603      	mov	r3, r0
 80092a4:	091b      	lsrs	r3, r3, #4
 80092a6:	4a1f      	ldr	r2, [pc, #124]	; (8009324 <RCC_GetSystemClockFreq+0x114>)
 80092a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092ac:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80092ae:	e033      	b.n	8009318 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80092b0:	4b1d      	ldr	r3, [pc, #116]	; (8009328 <RCC_GetSystemClockFreq+0x118>)
 80092b2:	607b      	str	r3, [r7, #4]
      break;
 80092b4:	e030      	b.n	8009318 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80092b6:	4b1d      	ldr	r3, [pc, #116]	; (800932c <RCC_GetSystemClockFreq+0x11c>)
 80092b8:	607b      	str	r3, [r7, #4]
      break;
 80092ba:	e02d      	b.n	8009318 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80092bc:	f000 f862 	bl	8009384 <RCC_PLL_GetFreqDomain_SYS>
 80092c0:	6078      	str	r0, [r7, #4]
      break;
 80092c2:	e029      	b.n	8009318 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80092c4:	f7ff feba 	bl	800903c <LL_RCC_MSI_IsEnabledRangeSelect>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d111      	bne.n	80092f2 <RCC_GetSystemClockFreq+0xe2>
 80092ce:	f7ff feb5 	bl	800903c <LL_RCC_MSI_IsEnabledRangeSelect>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d004      	beq.n	80092e2 <RCC_GetSystemClockFreq+0xd2>
 80092d8:	f7ff fec2 	bl	8009060 <LL_RCC_MSI_GetRange>
 80092dc:	4603      	mov	r3, r0
 80092de:	0a1b      	lsrs	r3, r3, #8
 80092e0:	e003      	b.n	80092ea <RCC_GetSystemClockFreq+0xda>
 80092e2:	f7ff fecb 	bl	800907c <LL_RCC_MSI_GetRangeAfterStandby>
 80092e6:	4603      	mov	r3, r0
 80092e8:	0a1b      	lsrs	r3, r3, #8
 80092ea:	4a0e      	ldr	r2, [pc, #56]	; (8009324 <RCC_GetSystemClockFreq+0x114>)
 80092ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092f0:	e010      	b.n	8009314 <RCC_GetSystemClockFreq+0x104>
 80092f2:	f7ff fea3 	bl	800903c <LL_RCC_MSI_IsEnabledRangeSelect>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d004      	beq.n	8009306 <RCC_GetSystemClockFreq+0xf6>
 80092fc:	f7ff feb0 	bl	8009060 <LL_RCC_MSI_GetRange>
 8009300:	4603      	mov	r3, r0
 8009302:	091b      	lsrs	r3, r3, #4
 8009304:	e003      	b.n	800930e <RCC_GetSystemClockFreq+0xfe>
 8009306:	f7ff feb9 	bl	800907c <LL_RCC_MSI_GetRangeAfterStandby>
 800930a:	4603      	mov	r3, r0
 800930c:	091b      	lsrs	r3, r3, #4
 800930e:	4a05      	ldr	r2, [pc, #20]	; (8009324 <RCC_GetSystemClockFreq+0x114>)
 8009310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009314:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8009316:	bf00      	nop
  }

  return frequency;
 8009318:	687b      	ldr	r3, [r7, #4]
}
 800931a:	4618      	mov	r0, r3
 800931c:	3708      	adds	r7, #8
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	0800cef0 	.word	0x0800cef0
 8009328:	00f42400 	.word	0x00f42400
 800932c:	007a1200 	.word	0x007a1200

08009330 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8009338:	f7ff febc 	bl	80090b4 <LL_RCC_GetAHBPrescaler>
 800933c:	4603      	mov	r3, r0
 800933e:	091b      	lsrs	r3, r3, #4
 8009340:	f003 030f 	and.w	r3, r3, #15
 8009344:	4a04      	ldr	r2, [pc, #16]	; (8009358 <RCC_GetHCLKClockFreq+0x28>)
 8009346:	5cd3      	ldrb	r3, [r2, r3]
 8009348:	461a      	mov	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	40d3      	lsrs	r3, r2
}
 800934e:	4618      	mov	r0, r3
 8009350:	3708      	adds	r7, #8
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	0800ced8 	.word	0x0800ced8

0800935c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b082      	sub	sp, #8
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8009364:	f7ff feb4 	bl	80090d0 <LL_RCC_GetAPB1Prescaler>
 8009368:	4603      	mov	r3, r0
 800936a:	0a1b      	lsrs	r3, r3, #8
 800936c:	4a04      	ldr	r2, [pc, #16]	; (8009380 <RCC_GetPCLK1ClockFreq+0x24>)
 800936e:	5cd3      	ldrb	r3, [r2, r3]
 8009370:	461a      	mov	r2, r3
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	40d3      	lsrs	r3, r2
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	0800cee8 	.word	0x0800cee8

08009384 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8009384:	b590      	push	{r4, r7, lr}
 8009386:	b083      	sub	sp, #12
 8009388:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800938a:	f7ff fec1 	bl	8009110 <LL_RCC_PLL_GetMainSource>
 800938e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	2b03      	cmp	r3, #3
 8009394:	d036      	beq.n	8009404 <RCC_PLL_GetFreqDomain_SYS+0x80>
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	2b03      	cmp	r3, #3
 800939a:	d836      	bhi.n	800940a <RCC_PLL_GetFreqDomain_SYS+0x86>
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d003      	beq.n	80093aa <RCC_PLL_GetFreqDomain_SYS+0x26>
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d02a      	beq.n	80093fe <RCC_PLL_GetFreqDomain_SYS+0x7a>
 80093a8:	e02f      	b.n	800940a <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80093aa:	f7ff fe47 	bl	800903c <LL_RCC_MSI_IsEnabledRangeSelect>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d111      	bne.n	80093d8 <RCC_PLL_GetFreqDomain_SYS+0x54>
 80093b4:	f7ff fe42 	bl	800903c <LL_RCC_MSI_IsEnabledRangeSelect>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d004      	beq.n	80093c8 <RCC_PLL_GetFreqDomain_SYS+0x44>
 80093be:	f7ff fe4f 	bl	8009060 <LL_RCC_MSI_GetRange>
 80093c2:	4603      	mov	r3, r0
 80093c4:	0a1b      	lsrs	r3, r3, #8
 80093c6:	e003      	b.n	80093d0 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80093c8:	f7ff fe58 	bl	800907c <LL_RCC_MSI_GetRangeAfterStandby>
 80093cc:	4603      	mov	r3, r0
 80093ce:	0a1b      	lsrs	r3, r3, #8
 80093d0:	4a2f      	ldr	r2, [pc, #188]	; (8009490 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80093d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093d6:	e010      	b.n	80093fa <RCC_PLL_GetFreqDomain_SYS+0x76>
 80093d8:	f7ff fe30 	bl	800903c <LL_RCC_MSI_IsEnabledRangeSelect>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d004      	beq.n	80093ec <RCC_PLL_GetFreqDomain_SYS+0x68>
 80093e2:	f7ff fe3d 	bl	8009060 <LL_RCC_MSI_GetRange>
 80093e6:	4603      	mov	r3, r0
 80093e8:	091b      	lsrs	r3, r3, #4
 80093ea:	e003      	b.n	80093f4 <RCC_PLL_GetFreqDomain_SYS+0x70>
 80093ec:	f7ff fe46 	bl	800907c <LL_RCC_MSI_GetRangeAfterStandby>
 80093f0:	4603      	mov	r3, r0
 80093f2:	091b      	lsrs	r3, r3, #4
 80093f4:	4a26      	ldr	r2, [pc, #152]	; (8009490 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80093f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093fa:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80093fc:	e02f      	b.n	800945e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80093fe:	4b25      	ldr	r3, [pc, #148]	; (8009494 <RCC_PLL_GetFreqDomain_SYS+0x110>)
 8009400:	607b      	str	r3, [r7, #4]
      break;
 8009402:	e02c      	b.n	800945e <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8009404:	4b24      	ldr	r3, [pc, #144]	; (8009498 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 8009406:	607b      	str	r3, [r7, #4]
      break;
 8009408:	e029      	b.n	800945e <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800940a:	f7ff fe17 	bl	800903c <LL_RCC_MSI_IsEnabledRangeSelect>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d111      	bne.n	8009438 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 8009414:	f7ff fe12 	bl	800903c <LL_RCC_MSI_IsEnabledRangeSelect>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d004      	beq.n	8009428 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 800941e:	f7ff fe1f 	bl	8009060 <LL_RCC_MSI_GetRange>
 8009422:	4603      	mov	r3, r0
 8009424:	0a1b      	lsrs	r3, r3, #8
 8009426:	e003      	b.n	8009430 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8009428:	f7ff fe28 	bl	800907c <LL_RCC_MSI_GetRangeAfterStandby>
 800942c:	4603      	mov	r3, r0
 800942e:	0a1b      	lsrs	r3, r3, #8
 8009430:	4a17      	ldr	r2, [pc, #92]	; (8009490 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8009432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009436:	e010      	b.n	800945a <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8009438:	f7ff fe00 	bl	800903c <LL_RCC_MSI_IsEnabledRangeSelect>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d004      	beq.n	800944c <RCC_PLL_GetFreqDomain_SYS+0xc8>
 8009442:	f7ff fe0d 	bl	8009060 <LL_RCC_MSI_GetRange>
 8009446:	4603      	mov	r3, r0
 8009448:	091b      	lsrs	r3, r3, #4
 800944a:	e003      	b.n	8009454 <RCC_PLL_GetFreqDomain_SYS+0xd0>
 800944c:	f7ff fe16 	bl	800907c <LL_RCC_MSI_GetRangeAfterStandby>
 8009450:	4603      	mov	r3, r0
 8009452:	091b      	lsrs	r3, r3, #4
 8009454:	4a0e      	ldr	r2, [pc, #56]	; (8009490 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 8009456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800945a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800945c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800945e:	f7ff fe81 	bl	8009164 <LL_RCC_PLL_GetDivider>
 8009462:	4603      	mov	r3, r0
 8009464:	091b      	lsrs	r3, r3, #4
 8009466:	3301      	adds	r3, #1
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	fbb2 f4f3 	udiv	r4, r2, r3
 800946e:	f7ff fe5d 	bl	800912c <LL_RCC_PLL_GetN>
 8009472:	4603      	mov	r3, r0
 8009474:	fb03 f404 	mul.w	r4, r3, r4
 8009478:	f7ff fe66 	bl	8009148 <LL_RCC_PLL_GetR>
 800947c:	4603      	mov	r3, r0
 800947e:	0e5b      	lsrs	r3, r3, #25
 8009480:	3301      	adds	r3, #1
 8009482:	005b      	lsls	r3, r3, #1
 8009484:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8009488:	4618      	mov	r0, r3
 800948a:	370c      	adds	r7, #12
 800948c:	46bd      	mov	sp, r7
 800948e:	bd90      	pop	{r4, r7, pc}
 8009490:	0800cef0 	.word	0x0800cef0
 8009494:	00f42400 	.word	0x00f42400
 8009498:	007a1200 	.word	0x007a1200

0800949c <LCD_Power>:
static void lcd_clear(void); 			//Clear Display
static bool lcd_hasData();
static uint8_t lcd_writeChar(uint8_t x, uint8_t y, uint8_t c);

//Functions
lcd_State_enum LCD_Power() {
 800949c:	b580      	push	{r7, lr}
 800949e:	af00      	add	r7, sp, #0
	switch (lcd_state) {
 80094a0:	4b41      	ldr	r3, [pc, #260]	; (80095a8 <LCD_Power+0x10c>)
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b04      	cmp	r3, #4
 80094a8:	d878      	bhi.n	800959c <LCD_Power+0x100>
 80094aa:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <LCD_Power+0x14>)
 80094ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b0:	080094c5 	.word	0x080094c5
 80094b4:	080094e9 	.word	0x080094e9
 80094b8:	08009549 	.word	0x08009549
 80094bc:	0800956b 	.word	0x0800956b
 80094c0:	0800956b 	.word	0x0800956b
	case LCD_OFF:
		if (superCapmV >= mV_LCD_SLOW) {
 80094c4:	4b39      	ldr	r3, [pc, #228]	; (80095ac <LCD_Power+0x110>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80094cc:	d361      	bcc.n	8009592 <LCD_Power+0xf6>
			//Turn on LCD
			lcd_state = LCD_READY;
 80094ce:	4b36      	ldr	r3, [pc, #216]	; (80095a8 <LCD_Power+0x10c>)
 80094d0:	2202      	movs	r2, #2
 80094d2:	701a      	strb	r2, [r3, #0]
			//HAL_LPTIM_PWM_Start(&hlptim1, 2047, 1023); //32768 DIV16 DIV2048 1HZ
			HAL_GPIO_WritePin(DISP_EN_GPIO_Port, DISP_EN_Pin, GPIO_PIN_SET);
 80094d4:	2201      	movs	r2, #1
 80094d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80094da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80094de:	f7fc fe85 	bl	80061ec <HAL_GPIO_WritePin>
			lcd_clear();
 80094e2:	f000 fa5d 	bl	80099a0 <lcd_clear>
		}
		break;
 80094e6:	e054      	b.n	8009592 <LCD_Power+0xf6>
	case LCD_TIMER:
		if (superCapmV < mV_LCD_OFF) {
 80094e8:	4b30      	ldr	r3, [pc, #192]	; (80095ac <LCD_Power+0x110>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f640 0297 	movw	r2, #2199	; 0x897
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d80a      	bhi.n	800950a <LCD_Power+0x6e>
			lcd_state = LCD_OFF;
 80094f4:	4b2c      	ldr	r3, [pc, #176]	; (80095a8 <LCD_Power+0x10c>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DISP_EN_GPIO_Port, DISP_EN_Pin, GPIO_PIN_RESET);
 80094fa:	2200      	movs	r2, #0
 80094fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009500:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009504:	f7fc fe72 	bl	80061ec <HAL_GPIO_WritePin>
		} else if ((superCapmV > mV_LCD_FAST) && (guiTimer >= LCD_RATE_FAST)) {
			lcd_state = LCD_READY;
		} else if (guiTimer >= LCD_RATE_SLOW) {
			lcd_state = LCD_READY;
		}
		break;
 8009508:	e045      	b.n	8009596 <LCD_Power+0xfa>
		} else if (superCapmV > mV_OV) {
 800950a:	4b28      	ldr	r3, [pc, #160]	; (80095ac <LCD_Power+0x110>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f241 0204 	movw	r2, #4100	; 0x1004
 8009512:	4293      	cmp	r3, r2
 8009514:	d903      	bls.n	800951e <LCD_Power+0x82>
			lcd_state = LCD_READY;
 8009516:	4b24      	ldr	r3, [pc, #144]	; (80095a8 <LCD_Power+0x10c>)
 8009518:	2202      	movs	r2, #2
 800951a:	701a      	strb	r2, [r3, #0]
		break;
 800951c:	e03b      	b.n	8009596 <LCD_Power+0xfa>
		} else if ((superCapmV > mV_LCD_FAST) && (guiTimer >= LCD_RATE_FAST)) {
 800951e:	4b23      	ldr	r3, [pc, #140]	; (80095ac <LCD_Power+0x110>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8009526:	d907      	bls.n	8009538 <LCD_Power+0x9c>
 8009528:	4b21      	ldr	r3, [pc, #132]	; (80095b0 <LCD_Power+0x114>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d003      	beq.n	8009538 <LCD_Power+0x9c>
			lcd_state = LCD_READY;
 8009530:	4b1d      	ldr	r3, [pc, #116]	; (80095a8 <LCD_Power+0x10c>)
 8009532:	2202      	movs	r2, #2
 8009534:	701a      	strb	r2, [r3, #0]
		break;
 8009536:	e02e      	b.n	8009596 <LCD_Power+0xfa>
		} else if (guiTimer >= LCD_RATE_SLOW) {
 8009538:	4b1d      	ldr	r3, [pc, #116]	; (80095b0 <LCD_Power+0x114>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b0e      	cmp	r3, #14
 800953e:	d92a      	bls.n	8009596 <LCD_Power+0xfa>
			lcd_state = LCD_READY;
 8009540:	4b19      	ldr	r3, [pc, #100]	; (80095a8 <LCD_Power+0x10c>)
 8009542:	2202      	movs	r2, #2
 8009544:	701a      	strb	r2, [r3, #0]
		break;
 8009546:	e026      	b.n	8009596 <LCD_Power+0xfa>
	case LCD_READY:
		if (superCapmV < mV_LCD_OFF) {
 8009548:	4b18      	ldr	r3, [pc, #96]	; (80095ac <LCD_Power+0x110>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f640 0297 	movw	r2, #2199	; 0x897
 8009550:	4293      	cmp	r3, r2
 8009552:	d822      	bhi.n	800959a <LCD_Power+0xfe>
			lcd_state = LCD_OFF;
 8009554:	4b14      	ldr	r3, [pc, #80]	; (80095a8 <LCD_Power+0x10c>)
 8009556:	2200      	movs	r2, #0
 8009558:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DISP_EN_GPIO_Port, DISP_EN_Pin, GPIO_PIN_RESET);
 800955a:	2200      	movs	r2, #0
 800955c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009564:	f7fc fe42 	bl	80061ec <HAL_GPIO_WritePin>
		}
		break;
 8009568:	e017      	b.n	800959a <LCD_Power+0xfe>
	case LCD_SENDING_DATA:
	case LCD_SENDING_CLR:
		if (superCapmV < mV_LCD_OFF) {
 800956a:	4b10      	ldr	r3, [pc, #64]	; (80095ac <LCD_Power+0x110>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f640 0297 	movw	r2, #2199	; 0x897
 8009572:	4293      	cmp	r3, r2
 8009574:	d812      	bhi.n	800959c <LCD_Power+0x100>
			HAL_SPI_DMAStop(&hspi1);
 8009576:	480f      	ldr	r0, [pc, #60]	; (80095b4 <LCD_Power+0x118>)
 8009578:	f7fe ff3e 	bl	80083f8 <HAL_SPI_DMAStop>
			lcd_state = LCD_OFF;
 800957c:	4b0a      	ldr	r3, [pc, #40]	; (80095a8 <LCD_Power+0x10c>)
 800957e:	2200      	movs	r2, #0
 8009580:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(DISP_EN_GPIO_Port, DISP_EN_Pin, GPIO_PIN_RESET);
 8009582:	2200      	movs	r2, #0
 8009584:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800958c:	f7fc fe2e 	bl	80061ec <HAL_GPIO_WritePin>
 8009590:	e004      	b.n	800959c <LCD_Power+0x100>
		break;
 8009592:	bf00      	nop
 8009594:	e002      	b.n	800959c <LCD_Power+0x100>
		break;
 8009596:	bf00      	nop
 8009598:	e000      	b.n	800959c <LCD_Power+0x100>
		break;
 800959a:	bf00      	nop
		}
	}
	return lcd_state;
 800959c:	4b02      	ldr	r3, [pc, #8]	; (80095a8 <LCD_Power+0x10c>)
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	b2db      	uxtb	r3, r3
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	20000d88 	.word	0x20000d88
 80095ac:	2000037c 	.word	0x2000037c
 80095b0:	2000038c 	.word	0x2000038c
 80095b4:	200002cc 	.word	0x200002cc

080095b8 <lcd_SetCursor>:

void lcd_SetCursor(uint8_t x, uint8_t y) {
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	460a      	mov	r2, r1
 80095c2:	71fb      	strb	r3, [r7, #7]
 80095c4:	4613      	mov	r3, r2
 80095c6:	71bb      	strb	r3, [r7, #6]
	cursor_x = x;
 80095c8:	79fb      	ldrb	r3, [r7, #7]
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	4b05      	ldr	r3, [pc, #20]	; (80095e4 <lcd_SetCursor+0x2c>)
 80095ce:	801a      	strh	r2, [r3, #0]
	cursor_y = y;
 80095d0:	79bb      	ldrb	r3, [r7, #6]
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	4b04      	ldr	r3, [pc, #16]	; (80095e8 <lcd_SetCursor+0x30>)
 80095d6:	801a      	strh	r2, [r3, #0]
}
 80095d8:	bf00      	nop
 80095da:	370c      	adds	r7, #12
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr
 80095e4:	20000d82 	.word	0x20000d82
 80095e8:	20000d80 	.word	0x20000d80

080095ec <lcd_SetFont>:

void lcd_SetFont(GFXfont *f) {
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
	gfxFontPtr = (GFXfont*) f;
 80095f4:	4a04      	ldr	r2, [pc, #16]	; (8009608 <lcd_SetFont+0x1c>)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6013      	str	r3, [r2, #0]
}
 80095fa:	bf00      	nop
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	20000d84 	.word	0x20000d84

0800960c <lcd_writeChar>:

uint8_t lcd_writeChar(uint8_t x, uint8_t y, uint8_t c) {
 800960c:	b580      	push	{r7, lr}
 800960e:	b088      	sub	sp, #32
 8009610:	af00      	add	r7, sp, #0
 8009612:	4603      	mov	r3, r0
 8009614:	71fb      	strb	r3, [r7, #7]
 8009616:	460b      	mov	r3, r1
 8009618:	71bb      	strb	r3, [r7, #6]
 800961a:	4613      	mov	r3, r2
 800961c:	717b      	strb	r3, [r7, #5]
	if (c >= (uint8_t) gfxFontPtr->first && c <= (uint8_t) gfxFontPtr->last) { //Char present in this font?
 800961e:	4b40      	ldr	r3, [pc, #256]	; (8009720 <lcd_writeChar+0x114>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	891b      	ldrh	r3, [r3, #8]
 8009624:	b2db      	uxtb	r3, r3
 8009626:	797a      	ldrb	r2, [r7, #5]
 8009628:	429a      	cmp	r2, r3
 800962a:	d374      	bcc.n	8009716 <lcd_writeChar+0x10a>
 800962c:	4b3c      	ldr	r3, [pc, #240]	; (8009720 <lcd_writeChar+0x114>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	895b      	ldrh	r3, [r3, #10]
 8009632:	b2db      	uxtb	r3, r3
 8009634:	797a      	ldrb	r2, [r7, #5]
 8009636:	429a      	cmp	r2, r3
 8009638:	d86d      	bhi.n	8009716 <lcd_writeChar+0x10a>
		c -= (uint8_t) (gfxFontPtr->first);
 800963a:	4b39      	ldr	r3, [pc, #228]	; (8009720 <lcd_writeChar+0x114>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	891b      	ldrh	r3, [r3, #8]
 8009640:	b2db      	uxtb	r3, r3
 8009642:	797a      	ldrb	r2, [r7, #5]
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	717b      	strb	r3, [r7, #5]
		GFXglyph glyph = gfxFontPtr->glyph[c];
 8009648:	4b35      	ldr	r3, [pc, #212]	; (8009720 <lcd_writeChar+0x114>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	685a      	ldr	r2, [r3, #4]
 800964e:	797b      	ldrb	r3, [r7, #5]
 8009650:	00db      	lsls	r3, r3, #3
 8009652:	441a      	add	r2, r3
 8009654:	f107 0308 	add.w	r3, r7, #8
 8009658:	6810      	ldr	r0, [r2, #0]
 800965a:	6851      	ldr	r1, [r2, #4]
 800965c:	c303      	stmia	r3!, {r0, r1}
		uint8_t *bitmap = gfxFontPtr->bitmap;
 800965e:	4b30      	ldr	r3, [pc, #192]	; (8009720 <lcd_writeChar+0x114>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	617b      	str	r3, [r7, #20]

		uint16_t bo = glyph.bitmapOffset;
 8009666:	893b      	ldrh	r3, [r7, #8]
 8009668:	83fb      	strh	r3, [r7, #30]
		uint8_t w = glyph.width, h = glyph.height;
 800966a:	7abb      	ldrb	r3, [r7, #10]
 800966c:	74fb      	strb	r3, [r7, #19]
 800966e:	7afb      	ldrb	r3, [r7, #11]
 8009670:	74bb      	strb	r3, [r7, #18]
		int8_t xo = glyph.xOffset, yo = glyph.yOffset;
 8009672:	7b7b      	ldrb	r3, [r7, #13]
 8009674:	747b      	strb	r3, [r7, #17]
 8009676:	7bbb      	ldrb	r3, [r7, #14]
 8009678:	743b      	strb	r3, [r7, #16]
		uint8_t xx, yy, bits = 0, bit = 0;
 800967a:	2300      	movs	r3, #0
 800967c:	76fb      	strb	r3, [r7, #27]
 800967e:	2300      	movs	r3, #0
 8009680:	76bb      	strb	r3, [r7, #26]

		for (yy = 0; yy < h; yy++) {
 8009682:	2300      	movs	r3, #0
 8009684:	773b      	strb	r3, [r7, #28]
 8009686:	e040      	b.n	800970a <lcd_writeChar+0xfe>
			for (xx = 0; xx < w; xx++) {
 8009688:	2300      	movs	r3, #0
 800968a:	777b      	strb	r3, [r7, #29]
 800968c:	e036      	b.n	80096fc <lcd_writeChar+0xf0>
				if (!(bit++ & 7)) {
 800968e:	7ebb      	ldrb	r3, [r7, #26]
 8009690:	1c5a      	adds	r2, r3, #1
 8009692:	76ba      	strb	r2, [r7, #26]
 8009694:	f003 0307 	and.w	r3, r3, #7
 8009698:	2b00      	cmp	r3, #0
 800969a:	d107      	bne.n	80096ac <lcd_writeChar+0xa0>
					bits = bitmap[bo++];
 800969c:	8bfb      	ldrh	r3, [r7, #30]
 800969e:	1c5a      	adds	r2, r3, #1
 80096a0:	83fa      	strh	r2, [r7, #30]
 80096a2:	461a      	mov	r2, r3
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	4413      	add	r3, r2
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	76fb      	strb	r3, [r7, #27]
				}
				if (bits & 0x80) {
 80096ac:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	da1d      	bge.n	80096f0 <lcd_writeChar+0xe4>
					lcd_drawPixel(x + xo + xx, y + yo + yy, LCD_BLACK);
 80096b4:	79fb      	ldrb	r3, [r7, #7]
 80096b6:	b21a      	sxth	r2, r3
 80096b8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80096bc:	b21b      	sxth	r3, r3
 80096be:	4413      	add	r3, r2
 80096c0:	b21b      	sxth	r3, r3
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	7f7b      	ldrb	r3, [r7, #29]
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	4413      	add	r3, r2
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	b218      	sxth	r0, r3
 80096ce:	79bb      	ldrb	r3, [r7, #6]
 80096d0:	b21a      	sxth	r2, r3
 80096d2:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80096d6:	b21b      	sxth	r3, r3
 80096d8:	4413      	add	r3, r2
 80096da:	b21b      	sxth	r3, r3
 80096dc:	b29a      	uxth	r2, r3
 80096de:	7f3b      	ldrb	r3, [r7, #28]
 80096e0:	b29b      	uxth	r3, r3
 80096e2:	4413      	add	r3, r2
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	b21b      	sxth	r3, r3
 80096e8:	2200      	movs	r2, #0
 80096ea:	4619      	mov	r1, r3
 80096ec:	f000 f868 	bl	80097c0 <lcd_drawPixel>
				}
				bits <<= 1;
 80096f0:	7efb      	ldrb	r3, [r7, #27]
 80096f2:	005b      	lsls	r3, r3, #1
 80096f4:	76fb      	strb	r3, [r7, #27]
			for (xx = 0; xx < w; xx++) {
 80096f6:	7f7b      	ldrb	r3, [r7, #29]
 80096f8:	3301      	adds	r3, #1
 80096fa:	777b      	strb	r3, [r7, #29]
 80096fc:	7f7a      	ldrb	r2, [r7, #29]
 80096fe:	7cfb      	ldrb	r3, [r7, #19]
 8009700:	429a      	cmp	r2, r3
 8009702:	d3c4      	bcc.n	800968e <lcd_writeChar+0x82>
		for (yy = 0; yy < h; yy++) {
 8009704:	7f3b      	ldrb	r3, [r7, #28]
 8009706:	3301      	adds	r3, #1
 8009708:	773b      	strb	r3, [r7, #28]
 800970a:	7f3a      	ldrb	r2, [r7, #28]
 800970c:	7cbb      	ldrb	r3, [r7, #18]
 800970e:	429a      	cmp	r2, r3
 8009710:	d3ba      	bcc.n	8009688 <lcd_writeChar+0x7c>
			}
		}
		return (uint8_t) glyph.xAdvance; //Advance cursor
 8009712:	7b3b      	ldrb	r3, [r7, #12]
 8009714:	e000      	b.n	8009718 <lcd_writeChar+0x10c>
	}
	return 0;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3720      	adds	r7, #32
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	20000d84 	.word	0x20000d84

08009724 <lcd_print>:

void lcd_print(int n) {
 8009724:	b580      	push	{r7, lr}
 8009726:	b084      	sub	sp, #16
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
	uint8_t bufPointer = 0;
 800972c:	2300      	movs	r3, #0
 800972e:	73fb      	strb	r3, [r7, #15]
	while (bufPointer < n) {
 8009730:	e016      	b.n	8009760 <lcd_print+0x3c>
		cursor_x += lcd_writeChar(cursor_x, cursor_y, strbuffer[bufPointer++]);
 8009732:	4b10      	ldr	r3, [pc, #64]	; (8009774 <lcd_print+0x50>)
 8009734:	881b      	ldrh	r3, [r3, #0]
 8009736:	b2d8      	uxtb	r0, r3
 8009738:	4b0f      	ldr	r3, [pc, #60]	; (8009778 <lcd_print+0x54>)
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	b2d9      	uxtb	r1, r3
 800973e:	7bfb      	ldrb	r3, [r7, #15]
 8009740:	1c5a      	adds	r2, r3, #1
 8009742:	73fa      	strb	r2, [r7, #15]
 8009744:	461a      	mov	r2, r3
 8009746:	4b0d      	ldr	r3, [pc, #52]	; (800977c <lcd_print+0x58>)
 8009748:	5c9b      	ldrb	r3, [r3, r2]
 800974a:	461a      	mov	r2, r3
 800974c:	f7ff ff5e 	bl	800960c <lcd_writeChar>
 8009750:	4603      	mov	r3, r0
 8009752:	b29a      	uxth	r2, r3
 8009754:	4b07      	ldr	r3, [pc, #28]	; (8009774 <lcd_print+0x50>)
 8009756:	881b      	ldrh	r3, [r3, #0]
 8009758:	4413      	add	r3, r2
 800975a:	b29a      	uxth	r2, r3
 800975c:	4b05      	ldr	r3, [pc, #20]	; (8009774 <lcd_print+0x50>)
 800975e:	801a      	strh	r2, [r3, #0]
	while (bufPointer < n) {
 8009760:	7bfb      	ldrb	r3, [r7, #15]
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	429a      	cmp	r2, r3
 8009766:	dce4      	bgt.n	8009732 <lcd_print+0xe>
	}
}
 8009768:	bf00      	nop
 800976a:	bf00      	nop
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	20000d82 	.word	0x20000d82
 8009778:	20000d80 	.word	0x20000d80
 800977c:	20000d6c 	.word	0x20000d6c

08009780 <lcd_print_char>:

void lcd_print_char(uint8_t theChar) {
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	71fb      	strb	r3, [r7, #7]
	cursor_x += lcd_writeChar(cursor_x, cursor_y, theChar);
 800978a:	4b0b      	ldr	r3, [pc, #44]	; (80097b8 <lcd_print_char+0x38>)
 800978c:	881b      	ldrh	r3, [r3, #0]
 800978e:	b2db      	uxtb	r3, r3
 8009790:	4a0a      	ldr	r2, [pc, #40]	; (80097bc <lcd_print_char+0x3c>)
 8009792:	8812      	ldrh	r2, [r2, #0]
 8009794:	b2d1      	uxtb	r1, r2
 8009796:	79fa      	ldrb	r2, [r7, #7]
 8009798:	4618      	mov	r0, r3
 800979a:	f7ff ff37 	bl	800960c <lcd_writeChar>
 800979e:	4603      	mov	r3, r0
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	4b05      	ldr	r3, [pc, #20]	; (80097b8 <lcd_print_char+0x38>)
 80097a4:	881b      	ldrh	r3, [r3, #0]
 80097a6:	4413      	add	r3, r2
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	4b03      	ldr	r3, [pc, #12]	; (80097b8 <lcd_print_char+0x38>)
 80097ac:	801a      	strh	r2, [r3, #0]
}
 80097ae:	bf00      	nop
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	20000d82 	.word	0x20000d82
 80097bc:	20000d80 	.word	0x20000d80

080097c0 <lcd_drawPixel>:

void lcd_drawPixel(int16_t x, int16_t y, uint8_t bDraw) {
 80097c0:	b490      	push	{r4, r7}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	4603      	mov	r3, r0
 80097c8:	80fb      	strh	r3, [r7, #6]
 80097ca:	460b      	mov	r3, r1
 80097cc:	80bb      	strh	r3, [r7, #4]
 80097ce:	4613      	mov	r3, r2
 80097d0:	70fb      	strb	r3, [r7, #3]
	if (x < 0 || y < 0 || x >= LCD_RES_PX_X || y >= LCD_RES_PX_Y)
 80097d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	db61      	blt.n	800989e <lcd_drawPixel+0xde>
 80097da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	db5d      	blt.n	800989e <lcd_drawPixel+0xde>
 80097e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097e6:	2b7f      	cmp	r3, #127	; 0x7f
 80097e8:	dc59      	bgt.n	800989e <lcd_drawPixel+0xde>
 80097ea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80097ee:	2b7f      	cmp	r3, #127	; 0x7f
 80097f0:	dc55      	bgt.n	800989e <lcd_drawPixel+0xde>
		return;

	uint8_t XbitInByte = (0x01 << (x % 8));
 80097f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80097f6:	425a      	negs	r2, r3
 80097f8:	f003 0307 	and.w	r3, r3, #7
 80097fc:	f002 0207 	and.w	r2, r2, #7
 8009800:	bf58      	it	pl
 8009802:	4253      	negpl	r3, r2
 8009804:	b21b      	sxth	r3, r3
 8009806:	461a      	mov	r2, r3
 8009808:	2301      	movs	r3, #1
 800980a:	4093      	lsls	r3, r2
 800980c:	73fb      	strb	r3, [r7, #15]
	uint8_t xx = (x / 8) + 1; //X byte in array
 800980e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009812:	2b00      	cmp	r3, #0
 8009814:	da00      	bge.n	8009818 <lcd_drawPixel+0x58>
 8009816:	3307      	adds	r3, #7
 8009818:	10db      	asrs	r3, r3, #3
 800981a:	b21b      	sxth	r3, r3
 800981c:	b2db      	uxtb	r3, r3
 800981e:	3301      	adds	r3, #1
 8009820:	73bb      	strb	r3, [r7, #14]
	if (bDraw == LCD_WHITE) { //Set bit
 8009822:	78fb      	ldrb	r3, [r7, #3]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d11a      	bne.n	800985e <lcd_drawPixel+0x9e>
		LCD_BUFFER[y][xx] |= XbitInByte; 	//set bit
 8009828:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800982c:	7bb9      	ldrb	r1, [r7, #14]
 800982e:	481e      	ldr	r0, [pc, #120]	; (80098a8 <lcd_drawPixel+0xe8>)
 8009830:	4613      	mov	r3, r2
 8009832:	00db      	lsls	r3, r3, #3
 8009834:	4413      	add	r3, r2
 8009836:	005b      	lsls	r3, r3, #1
 8009838:	4403      	add	r3, r0
 800983a:	440b      	add	r3, r1
 800983c:	7818      	ldrb	r0, [r3, #0]
 800983e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009842:	7bb9      	ldrb	r1, [r7, #14]
 8009844:	7bfb      	ldrb	r3, [r7, #15]
 8009846:	4303      	orrs	r3, r0
 8009848:	b2dc      	uxtb	r4, r3
 800984a:	4817      	ldr	r0, [pc, #92]	; (80098a8 <lcd_drawPixel+0xe8>)
 800984c:	4613      	mov	r3, r2
 800984e:	00db      	lsls	r3, r3, #3
 8009850:	4413      	add	r3, r2
 8009852:	005b      	lsls	r3, r3, #1
 8009854:	4403      	add	r3, r0
 8009856:	440b      	add	r3, r1
 8009858:	4622      	mov	r2, r4
 800985a:	701a      	strb	r2, [r3, #0]
 800985c:	e020      	b.n	80098a0 <lcd_drawPixel+0xe0>
	} else {
		LCD_BUFFER[y][xx] &= ~XbitInByte; //clear bit
 800985e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009862:	7bb9      	ldrb	r1, [r7, #14]
 8009864:	4810      	ldr	r0, [pc, #64]	; (80098a8 <lcd_drawPixel+0xe8>)
 8009866:	4613      	mov	r3, r2
 8009868:	00db      	lsls	r3, r3, #3
 800986a:	4413      	add	r3, r2
 800986c:	005b      	lsls	r3, r3, #1
 800986e:	4403      	add	r3, r0
 8009870:	440b      	add	r3, r1
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	b25a      	sxtb	r2, r3
 8009876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800987a:	43db      	mvns	r3, r3
 800987c:	b25b      	sxtb	r3, r3
 800987e:	4013      	ands	r3, r2
 8009880:	b25b      	sxtb	r3, r3
 8009882:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009886:	7bb9      	ldrb	r1, [r7, #14]
 8009888:	b2dc      	uxtb	r4, r3
 800988a:	4807      	ldr	r0, [pc, #28]	; (80098a8 <lcd_drawPixel+0xe8>)
 800988c:	4613      	mov	r3, r2
 800988e:	00db      	lsls	r3, r3, #3
 8009890:	4413      	add	r3, r2
 8009892:	005b      	lsls	r3, r3, #1
 8009894:	4403      	add	r3, r0
 8009896:	440b      	add	r3, r1
 8009898:	4622      	mov	r2, r4
 800989a:	701a      	strb	r2, [r3, #0]
 800989c:	e000      	b.n	80098a0 <lcd_drawPixel+0xe0>
		return;
 800989e:	bf00      	nop
	}
}
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bc90      	pop	{r4, r7}
 80098a6:	4770      	bx	lr
 80098a8:	2000046c 	.word	0x2000046c

080098ac <lcd_drawLine>:

void lcd_drawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
 80098ac:	b590      	push	{r4, r7, lr}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	4604      	mov	r4, r0
 80098b4:	4608      	mov	r0, r1
 80098b6:	4611      	mov	r1, r2
 80098b8:	461a      	mov	r2, r3
 80098ba:	4623      	mov	r3, r4
 80098bc:	71fb      	strb	r3, [r7, #7]
 80098be:	4603      	mov	r3, r0
 80098c0:	71bb      	strb	r3, [r7, #6]
 80098c2:	460b      	mov	r3, r1
 80098c4:	717b      	strb	r3, [r7, #5]
 80098c6:	4613      	mov	r3, r2
 80098c8:	713b      	strb	r3, [r7, #4]
	if (x0 == x1) {
 80098ca:	79fa      	ldrb	r2, [r7, #7]
 80098cc:	797b      	ldrb	r3, [r7, #5]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d113      	bne.n	80098fa <lcd_drawLine+0x4e>
		//Vertical Line
		for (uint8_t i = y0; i <= y1; i++) {
 80098d2:	79bb      	ldrb	r3, [r7, #6]
 80098d4:	73fb      	strb	r3, [r7, #15]
 80098d6:	e00b      	b.n	80098f0 <lcd_drawLine+0x44>
			lcd_drawPixel(x0, i, color);
 80098d8:	79fb      	ldrb	r3, [r7, #7]
 80098da:	b21b      	sxth	r3, r3
 80098dc:	7bfa      	ldrb	r2, [r7, #15]
 80098de:	b211      	sxth	r1, r2
 80098e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80098e4:	4618      	mov	r0, r3
 80098e6:	f7ff ff6b 	bl	80097c0 <lcd_drawPixel>
		for (uint8_t i = y0; i <= y1; i++) {
 80098ea:	7bfb      	ldrb	r3, [r7, #15]
 80098ec:	3301      	adds	r3, #1
 80098ee:	73fb      	strb	r3, [r7, #15]
 80098f0:	7bfa      	ldrb	r2, [r7, #15]
 80098f2:	793b      	ldrb	r3, [r7, #4]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d9ef      	bls.n	80098d8 <lcd_drawLine+0x2c>
			lcd_drawPixel(i, y0, color);
		}
	} else {
		//Angled line
	}
}
 80098f8:	e016      	b.n	8009928 <lcd_drawLine+0x7c>
	} else if (y0 == y1) {
 80098fa:	79ba      	ldrb	r2, [r7, #6]
 80098fc:	793b      	ldrb	r3, [r7, #4]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d112      	bne.n	8009928 <lcd_drawLine+0x7c>
		for (uint8_t i = x0; i <= x1; i++) {
 8009902:	79fb      	ldrb	r3, [r7, #7]
 8009904:	73bb      	strb	r3, [r7, #14]
 8009906:	e00b      	b.n	8009920 <lcd_drawLine+0x74>
			lcd_drawPixel(i, y0, color);
 8009908:	7bbb      	ldrb	r3, [r7, #14]
 800990a:	b21b      	sxth	r3, r3
 800990c:	79ba      	ldrb	r2, [r7, #6]
 800990e:	b211      	sxth	r1, r2
 8009910:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009914:	4618      	mov	r0, r3
 8009916:	f7ff ff53 	bl	80097c0 <lcd_drawPixel>
		for (uint8_t i = x0; i <= x1; i++) {
 800991a:	7bbb      	ldrb	r3, [r7, #14]
 800991c:	3301      	adds	r3, #1
 800991e:	73bb      	strb	r3, [r7, #14]
 8009920:	7bba      	ldrb	r2, [r7, #14]
 8009922:	797b      	ldrb	r3, [r7, #5]
 8009924:	429a      	cmp	r2, r3
 8009926:	d9ef      	bls.n	8009908 <lcd_drawLine+0x5c>
}
 8009928:	bf00      	nop
 800992a:	3714      	adds	r7, #20
 800992c:	46bd      	mov	sp, r7
 800992e:	bd90      	pop	{r4, r7, pc}

08009930 <lcd_clearLines>:
	for (uint8_t i = 0; i < h; i++) {
		lcd_drawLine(x, y + i, x + w, y + i, color);
	}
}

void lcd_clearLines(uint8_t y0, uint8_t y1) {
 8009930:	b480      	push	{r7}
 8009932:	b085      	sub	sp, #20
 8009934:	af00      	add	r7, sp, #0
 8009936:	4603      	mov	r3, r0
 8009938:	460a      	mov	r2, r1
 800993a:	71fb      	strb	r3, [r7, #7]
 800993c:	4613      	mov	r3, r2
 800993e:	71bb      	strb	r3, [r7, #6]
	//Clear lines for writing
	while (y0 <= y1) {
 8009940:	e020      	b.n	8009984 <lcd_clearLines+0x54>
		for (uint8_t xByte = 1; xByte < (LCD_RES_PX_X_b - 1); xByte++) {
 8009942:	2301      	movs	r3, #1
 8009944:	73fb      	strb	r3, [r7, #15]
 8009946:	e00d      	b.n	8009964 <lcd_clearLines+0x34>
			LCD_BUFFER[y0][xByte] = 0xff; 	//Clear line
 8009948:	79fa      	ldrb	r2, [r7, #7]
 800994a:	7bf9      	ldrb	r1, [r7, #15]
 800994c:	4813      	ldr	r0, [pc, #76]	; (800999c <lcd_clearLines+0x6c>)
 800994e:	4613      	mov	r3, r2
 8009950:	00db      	lsls	r3, r3, #3
 8009952:	4413      	add	r3, r2
 8009954:	005b      	lsls	r3, r3, #1
 8009956:	4403      	add	r3, r0
 8009958:	440b      	add	r3, r1
 800995a:	22ff      	movs	r2, #255	; 0xff
 800995c:	701a      	strb	r2, [r3, #0]
		for (uint8_t xByte = 1; xByte < (LCD_RES_PX_X_b - 1); xByte++) {
 800995e:	7bfb      	ldrb	r3, [r7, #15]
 8009960:	3301      	adds	r3, #1
 8009962:	73fb      	strb	r3, [r7, #15]
 8009964:	7bfb      	ldrb	r3, [r7, #15]
 8009966:	2b10      	cmp	r3, #16
 8009968:	d9ee      	bls.n	8009948 <lcd_clearLines+0x18>
		}
		LCD_BUFFER[y0][LCD_RES_PX_X_b - 1] = 0x00; 		//transmit this line
 800996a:	79fa      	ldrb	r2, [r7, #7]
 800996c:	490b      	ldr	r1, [pc, #44]	; (800999c <lcd_clearLines+0x6c>)
 800996e:	4613      	mov	r3, r2
 8009970:	00db      	lsls	r3, r3, #3
 8009972:	4413      	add	r3, r2
 8009974:	005b      	lsls	r3, r3, #1
 8009976:	440b      	add	r3, r1
 8009978:	3311      	adds	r3, #17
 800997a:	2200      	movs	r2, #0
 800997c:	701a      	strb	r2, [r3, #0]
		y0++;
 800997e:	79fb      	ldrb	r3, [r7, #7]
 8009980:	3301      	adds	r3, #1
 8009982:	71fb      	strb	r3, [r7, #7]
	while (y0 <= y1) {
 8009984:	79fa      	ldrb	r2, [r7, #7]
 8009986:	79bb      	ldrb	r3, [r7, #6]
 8009988:	429a      	cmp	r2, r3
 800998a:	d9da      	bls.n	8009942 <lcd_clearLines+0x12>
	}
}
 800998c:	bf00      	nop
 800998e:	bf00      	nop
 8009990:	3714      	adds	r7, #20
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	2000046c 	.word	0x2000046c

080099a0 <lcd_clear>:
void lcd_setRotation(uint8_t newRot) {
	if (rotation <= 3)
		rotation = newRot;
}

void lcd_clear(void) {
 80099a0:	b590      	push	{r4, r7, lr}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
	uint8_t clearBuffer[] = { MLCD_CM, MLCD_TR };
 80099a6:	2304      	movs	r3, #4
 80099a8:	713b      	strb	r3, [r7, #4]
 80099aa:	2300      	movs	r3, #0
 80099ac:	717b      	strb	r3, [r7, #5]
	lcd_state = LCD_SENDING_CLR;
 80099ae:	4b2a      	ldr	r3, [pc, #168]	; (8009a58 <lcd_clear+0xb8>)
 80099b0:	2204      	movs	r2, #4
 80099b2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_SET);
 80099b4:	2201      	movs	r2, #1
 80099b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80099ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80099be:	f7fc fc15 	bl	80061ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*) &clearBuffer, sizeof(clearBuffer));
 80099c2:	1d3b      	adds	r3, r7, #4
 80099c4:	2202      	movs	r2, #2
 80099c6:	4619      	mov	r1, r3
 80099c8:	4824      	ldr	r0, [pc, #144]	; (8009a5c <lcd_clear+0xbc>)
 80099ca:	f7fe fc21 	bl	8008210 <HAL_SPI_Transmit_DMA>

	//Clear buffer
	for (uint8_t y = 0; y < LCD_RES_PX_Y; y++) {
 80099ce:	2300      	movs	r3, #0
 80099d0:	71fb      	strb	r3, [r7, #7]
 80099d2:	e037      	b.n	8009a44 <lcd_clear+0xa4>
		for (uint8_t x = 0; x < LCD_RES_PX_X_b; x++) {
 80099d4:	2300      	movs	r3, #0
 80099d6:	71bb      	strb	r3, [r7, #6]
 80099d8:	e02e      	b.n	8009a38 <lcd_clear+0x98>
			if (x == 0) {
 80099da:	79bb      	ldrb	r3, [r7, #6]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10e      	bne.n	80099fe <lcd_clear+0x5e>
				LCD_BUFFER[y][x] = y + 1; //assign line number
 80099e0:	79fa      	ldrb	r2, [r7, #7]
 80099e2:	79b9      	ldrb	r1, [r7, #6]
 80099e4:	79fb      	ldrb	r3, [r7, #7]
 80099e6:	3301      	adds	r3, #1
 80099e8:	b2dc      	uxtb	r4, r3
 80099ea:	481d      	ldr	r0, [pc, #116]	; (8009a60 <lcd_clear+0xc0>)
 80099ec:	4613      	mov	r3, r2
 80099ee:	00db      	lsls	r3, r3, #3
 80099f0:	4413      	add	r3, r2
 80099f2:	005b      	lsls	r3, r3, #1
 80099f4:	4403      	add	r3, r0
 80099f6:	440b      	add	r3, r1
 80099f8:	4622      	mov	r2, r4
 80099fa:	701a      	strb	r2, [r3, #0]
 80099fc:	e019      	b.n	8009a32 <lcd_clear+0x92>
			} else if (x == (LCD_RES_PX_X_b - 1)) {
 80099fe:	79bb      	ldrb	r3, [r7, #6]
 8009a00:	2b11      	cmp	r3, #17
 8009a02:	d10b      	bne.n	8009a1c <lcd_clear+0x7c>
				LCD_BUFFER[y][x] = 0x00; //trailer with transmit flag
 8009a04:	79fa      	ldrb	r2, [r7, #7]
 8009a06:	79b9      	ldrb	r1, [r7, #6]
 8009a08:	4815      	ldr	r0, [pc, #84]	; (8009a60 <lcd_clear+0xc0>)
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	00db      	lsls	r3, r3, #3
 8009a0e:	4413      	add	r3, r2
 8009a10:	005b      	lsls	r3, r3, #1
 8009a12:	4403      	add	r3, r0
 8009a14:	440b      	add	r3, r1
 8009a16:	2200      	movs	r2, #0
 8009a18:	701a      	strb	r2, [r3, #0]
 8009a1a:	e00a      	b.n	8009a32 <lcd_clear+0x92>
			} else {
				LCD_BUFFER[y][x] = 0xff; //white data
 8009a1c:	79fa      	ldrb	r2, [r7, #7]
 8009a1e:	79b9      	ldrb	r1, [r7, #6]
 8009a20:	480f      	ldr	r0, [pc, #60]	; (8009a60 <lcd_clear+0xc0>)
 8009a22:	4613      	mov	r3, r2
 8009a24:	00db      	lsls	r3, r3, #3
 8009a26:	4413      	add	r3, r2
 8009a28:	005b      	lsls	r3, r3, #1
 8009a2a:	4403      	add	r3, r0
 8009a2c:	440b      	add	r3, r1
 8009a2e:	22ff      	movs	r2, #255	; 0xff
 8009a30:	701a      	strb	r2, [r3, #0]
		for (uint8_t x = 0; x < LCD_RES_PX_X_b; x++) {
 8009a32:	79bb      	ldrb	r3, [r7, #6]
 8009a34:	3301      	adds	r3, #1
 8009a36:	71bb      	strb	r3, [r7, #6]
 8009a38:	79bb      	ldrb	r3, [r7, #6]
 8009a3a:	2b11      	cmp	r3, #17
 8009a3c:	d9cd      	bls.n	80099da <lcd_clear+0x3a>
	for (uint8_t y = 0; y < LCD_RES_PX_Y; y++) {
 8009a3e:	79fb      	ldrb	r3, [r7, #7]
 8009a40:	3301      	adds	r3, #1
 8009a42:	71fb      	strb	r3, [r7, #7]
 8009a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	dac3      	bge.n	80099d4 <lcd_clear+0x34>
			}
		}
	}
}
 8009a4c:	bf00      	nop
 8009a4e:	bf00      	nop
 8009a50:	370c      	adds	r7, #12
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd90      	pop	{r4, r7, pc}
 8009a56:	bf00      	nop
 8009a58:	20000d88 	.word	0x20000d88
 8009a5c:	200002cc 	.word	0x200002cc
 8009a60:	2000046c 	.word	0x2000046c

08009a64 <lcd_draw>:

lcd_State_enum lcd_draw(void) {
 8009a64:	b580      	push	{r7, lr}
 8009a66:	af00      	add	r7, sp, #0
	if (lcd_state == LCD_OFF) {
 8009a68:	4b15      	ldr	r3, [pc, #84]	; (8009ac0 <lcd_draw+0x5c>)
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d103      	bne.n	8009a7a <lcd_draw+0x16>
		return lcd_state;
 8009a72:	4b13      	ldr	r3, [pc, #76]	; (8009ac0 <lcd_draw+0x5c>)
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	e01f      	b.n	8009aba <lcd_draw+0x56>
	}
	if (lcd_state == LCD_READY && lcd_hasData()) {
 8009a7a:	4b11      	ldr	r3, [pc, #68]	; (8009ac0 <lcd_draw+0x5c>)
 8009a7c:	781b      	ldrb	r3, [r3, #0]
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	d117      	bne.n	8009ab4 <lcd_draw+0x50>
 8009a84:	f000 f822 	bl	8009acc <lcd_hasData>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d012      	beq.n	8009ab4 <lcd_draw+0x50>
		//start new transfer
		lcd_state = LCD_SENDING_DATA;
 8009a8e:	4b0c      	ldr	r3, [pc, #48]	; (8009ac0 <lcd_draw+0x5c>)
 8009a90:	2203      	movs	r2, #3
 8009a92:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_SET);
 8009a94:	2201      	movs	r2, #1
 8009a96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009a9e:	f7fc fba5 	bl	80061ec <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t*) &MLCD_WR, sizeof(MLCD_WR), HAL_MAX_DELAY);
 8009aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	4906      	ldr	r1, [pc, #24]	; (8009ac4 <lcd_draw+0x60>)
 8009aaa:	4807      	ldr	r0, [pc, #28]	; (8009ac8 <lcd_draw+0x64>)
 8009aac:	f7fe fa41 	bl	8007f32 <HAL_SPI_Transmit>
		lcd_DoTX();
 8009ab0:	f000 f830 	bl	8009b14 <lcd_DoTX>
	}
	return lcd_state;
 8009ab4:	4b02      	ldr	r3, [pc, #8]	; (8009ac0 <lcd_draw+0x5c>)
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	b2db      	uxtb	r3, r3
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	20000d88 	.word	0x20000d88
 8009ac4:	0800cf92 	.word	0x0800cf92
 8009ac8:	200002cc 	.word	0x200002cc

08009acc <lcd_hasData>:

static bool lcd_hasData() {
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y < LCD_RES_PX_Y; y++) {
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	71fb      	strb	r3, [r7, #7]
 8009ad6:	e00f      	b.n	8009af8 <lcd_hasData+0x2c>
		if (LCD_BUFFER[y][LCD_RES_PX_X_b - 1] == 0x00) {
 8009ad8:	79fa      	ldrb	r2, [r7, #7]
 8009ada:	490d      	ldr	r1, [pc, #52]	; (8009b10 <lcd_hasData+0x44>)
 8009adc:	4613      	mov	r3, r2
 8009ade:	00db      	lsls	r3, r3, #3
 8009ae0:	4413      	add	r3, r2
 8009ae2:	005b      	lsls	r3, r3, #1
 8009ae4:	440b      	add	r3, r1
 8009ae6:	3311      	adds	r3, #17
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d101      	bne.n	8009af2 <lcd_hasData+0x26>
			//we have some data to send
			return true;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e007      	b.n	8009b02 <lcd_hasData+0x36>
	for (uint8_t y = 0; y < LCD_RES_PX_Y; y++) {
 8009af2:	79fb      	ldrb	r3, [r7, #7]
 8009af4:	3301      	adds	r3, #1
 8009af6:	71fb      	strb	r3, [r7, #7]
 8009af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	daeb      	bge.n	8009ad8 <lcd_hasData+0xc>
		}
	}
	return false;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	370c      	adds	r7, #12
 8009b06:	46bd      	mov	sp, r7
 8009b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	2000046c 	.word	0x2000046c

08009b14 <lcd_DoTX>:

static void lcd_DoTX() {
 8009b14:	b580      	push	{r7, lr}
 8009b16:	af00      	add	r7, sp, #0
	static uint8_t linePointer = 0;
	if (lcd_hasData()) {
 8009b18:	f7ff ffd8 	bl	8009acc <lcd_hasData>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d036      	beq.n	8009b90 <lcd_DoTX+0x7c>
		//start next transfer
		while (1) {
			if (LCD_BUFFER[linePointer][LCD_RES_PX_X_b - 1] == 0x00) {
 8009b22:	4b26      	ldr	r3, [pc, #152]	; (8009bbc <lcd_DoTX+0xa8>)
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	4619      	mov	r1, r3
 8009b28:	4a25      	ldr	r2, [pc, #148]	; (8009bc0 <lcd_DoTX+0xac>)
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	00db      	lsls	r3, r3, #3
 8009b2e:	440b      	add	r3, r1
 8009b30:	005b      	lsls	r3, r3, #1
 8009b32:	4413      	add	r3, r2
 8009b34:	3311      	adds	r3, #17
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d11a      	bne.n	8009b72 <lcd_DoTX+0x5e>
				//Send the line
				HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*) &LCD_BUFFER[linePointer][0], LCD_RES_PX_X_b);
 8009b3c:	4b1f      	ldr	r3, [pc, #124]	; (8009bbc <lcd_DoTX+0xa8>)
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	461a      	mov	r2, r3
 8009b42:	4613      	mov	r3, r2
 8009b44:	00db      	lsls	r3, r3, #3
 8009b46:	4413      	add	r3, r2
 8009b48:	005b      	lsls	r3, r3, #1
 8009b4a:	4a1d      	ldr	r2, [pc, #116]	; (8009bc0 <lcd_DoTX+0xac>)
 8009b4c:	4413      	add	r3, r2
 8009b4e:	2212      	movs	r2, #18
 8009b50:	4619      	mov	r1, r3
 8009b52:	481c      	ldr	r0, [pc, #112]	; (8009bc4 <lcd_DoTX+0xb0>)
 8009b54:	f7fe fb5c 	bl	8008210 <HAL_SPI_Transmit_DMA>
				LCD_BUFFER[linePointer][LCD_RES_PX_X_b - 1] = 0x01; //Line Sent
 8009b58:	4b18      	ldr	r3, [pc, #96]	; (8009bbc <lcd_DoTX+0xa8>)
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	4a18      	ldr	r2, [pc, #96]	; (8009bc0 <lcd_DoTX+0xac>)
 8009b60:	460b      	mov	r3, r1
 8009b62:	00db      	lsls	r3, r3, #3
 8009b64:	440b      	add	r3, r1
 8009b66:	005b      	lsls	r3, r3, #1
 8009b68:	4413      	add	r3, r2
 8009b6a:	3311      	adds	r3, #17
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	701a      	strb	r2, [r3, #0]
				return;
 8009b70:	e022      	b.n	8009bb8 <lcd_DoTX+0xa4>
			}
			if (++linePointer >= LCD_RES_PX_Y) {
 8009b72:	4b12      	ldr	r3, [pc, #72]	; (8009bbc <lcd_DoTX+0xa8>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	3301      	adds	r3, #1
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	4b10      	ldr	r3, [pc, #64]	; (8009bbc <lcd_DoTX+0xa8>)
 8009b7c:	701a      	strb	r2, [r3, #0]
 8009b7e:	4b0f      	ldr	r3, [pc, #60]	; (8009bbc <lcd_DoTX+0xa8>)
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	b25b      	sxtb	r3, r3
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	dacc      	bge.n	8009b22 <lcd_DoTX+0xe>
				linePointer = 0;
 8009b88:	4b0c      	ldr	r3, [pc, #48]	; (8009bbc <lcd_DoTX+0xa8>)
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	701a      	strb	r2, [r3, #0]
			if (LCD_BUFFER[linePointer][LCD_RES_PX_X_b - 1] == 0x00) {
 8009b8e:	e7c8      	b.n	8009b22 <lcd_DoTX+0xe>
			}
		}
	} else {
		//Done
		HAL_SPI_Transmit(&hspi1, (uint8_t*) &MLCD_TR, sizeof(MLCD_TR), HAL_MAX_DELAY); //send Trailer command
 8009b90:	f04f 33ff 	mov.w	r3, #4294967295
 8009b94:	2201      	movs	r2, #1
 8009b96:	490c      	ldr	r1, [pc, #48]	; (8009bc8 <lcd_DoTX+0xb4>)
 8009b98:	480a      	ldr	r0, [pc, #40]	; (8009bc4 <lcd_DoTX+0xb0>)
 8009b9a:	f7fe f9ca 	bl	8007f32 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009ba8:	f7fc fb20 	bl	80061ec <HAL_GPIO_WritePin>
		guiTimer = 0; //drawing done
 8009bac:	4b07      	ldr	r3, [pc, #28]	; (8009bcc <lcd_DoTX+0xb8>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	601a      	str	r2, [r3, #0]
		lcd_state = LCD_TIMER; //Enter timer mode for power() to clear
 8009bb2:	4b07      	ldr	r3, [pc, #28]	; (8009bd0 <lcd_DoTX+0xbc>)
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	701a      	strb	r2, [r3, #0]
	}
}
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	20000d89 	.word	0x20000d89
 8009bc0:	2000046c 	.word	0x2000046c
 8009bc4:	200002cc 	.word	0x200002cc
 8009bc8:	0800cf93 	.word	0x0800cf93
 8009bcc:	2000038c 	.word	0x2000038c
 8009bd0:	20000d88 	.word	0x20000d88

08009bd4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
	if (lcd_state == LCD_SENDING_DATA) {
 8009bdc:	4b0d      	ldr	r3, [pc, #52]	; (8009c14 <HAL_SPI_TxCpltCallback+0x40>)
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d102      	bne.n	8009bec <HAL_SPI_TxCpltCallback+0x18>
		lcd_DoTX();
 8009be6:	f7ff ff95 	bl	8009b14 <lcd_DoTX>
	} else if (lcd_state == LCD_SENDING_CLR) {
		HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
		lcd_state = LCD_READY;
	}
}
 8009bea:	e00e      	b.n	8009c0a <HAL_SPI_TxCpltCallback+0x36>
	} else if (lcd_state == LCD_SENDING_CLR) {
 8009bec:	4b09      	ldr	r3, [pc, #36]	; (8009c14 <HAL_SPI_TxCpltCallback+0x40>)
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b04      	cmp	r3, #4
 8009bf4:	d109      	bne.n	8009c0a <HAL_SPI_TxCpltCallback+0x36>
		HAL_GPIO_WritePin(DISP_CS_GPIO_Port, DISP_CS_Pin, GPIO_PIN_RESET);
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c00:	f7fc faf4 	bl	80061ec <HAL_GPIO_WritePin>
		lcd_state = LCD_READY;
 8009c04:	4b03      	ldr	r3, [pc, #12]	; (8009c14 <HAL_SPI_TxCpltCallback+0x40>)
 8009c06:	2202      	movs	r2, #2
 8009c08:	701a      	strb	r2, [r3, #0]
}
 8009c0a:	bf00      	nop
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	20000d88 	.word	0x20000d88

08009c18 <__errno>:
 8009c18:	4b01      	ldr	r3, [pc, #4]	; (8009c20 <__errno+0x8>)
 8009c1a:	6818      	ldr	r0, [r3, #0]
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	20000010 	.word	0x20000010

08009c24 <__libc_init_array>:
 8009c24:	b570      	push	{r4, r5, r6, lr}
 8009c26:	4d0d      	ldr	r5, [pc, #52]	; (8009c5c <__libc_init_array+0x38>)
 8009c28:	4c0d      	ldr	r4, [pc, #52]	; (8009c60 <__libc_init_array+0x3c>)
 8009c2a:	1b64      	subs	r4, r4, r5
 8009c2c:	10a4      	asrs	r4, r4, #2
 8009c2e:	2600      	movs	r6, #0
 8009c30:	42a6      	cmp	r6, r4
 8009c32:	d109      	bne.n	8009c48 <__libc_init_array+0x24>
 8009c34:	4d0b      	ldr	r5, [pc, #44]	; (8009c64 <__libc_init_array+0x40>)
 8009c36:	4c0c      	ldr	r4, [pc, #48]	; (8009c68 <__libc_init_array+0x44>)
 8009c38:	f002 fd38 	bl	800c6ac <_init>
 8009c3c:	1b64      	subs	r4, r4, r5
 8009c3e:	10a4      	asrs	r4, r4, #2
 8009c40:	2600      	movs	r6, #0
 8009c42:	42a6      	cmp	r6, r4
 8009c44:	d105      	bne.n	8009c52 <__libc_init_array+0x2e>
 8009c46:	bd70      	pop	{r4, r5, r6, pc}
 8009c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c4c:	4798      	blx	r3
 8009c4e:	3601      	adds	r6, #1
 8009c50:	e7ee      	b.n	8009c30 <__libc_init_array+0xc>
 8009c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c56:	4798      	blx	r3
 8009c58:	3601      	adds	r6, #1
 8009c5a:	e7f2      	b.n	8009c42 <__libc_init_array+0x1e>
 8009c5c:	0800d374 	.word	0x0800d374
 8009c60:	0800d374 	.word	0x0800d374
 8009c64:	0800d374 	.word	0x0800d374
 8009c68:	0800d378 	.word	0x0800d378

08009c6c <memcpy>:
 8009c6c:	440a      	add	r2, r1
 8009c6e:	4291      	cmp	r1, r2
 8009c70:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c74:	d100      	bne.n	8009c78 <memcpy+0xc>
 8009c76:	4770      	bx	lr
 8009c78:	b510      	push	{r4, lr}
 8009c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c82:	4291      	cmp	r1, r2
 8009c84:	d1f9      	bne.n	8009c7a <memcpy+0xe>
 8009c86:	bd10      	pop	{r4, pc}

08009c88 <memset>:
 8009c88:	4402      	add	r2, r0
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d100      	bne.n	8009c92 <memset+0xa>
 8009c90:	4770      	bx	lr
 8009c92:	f803 1b01 	strb.w	r1, [r3], #1
 8009c96:	e7f9      	b.n	8009c8c <memset+0x4>

08009c98 <__cvt>:
 8009c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c9c:	ec55 4b10 	vmov	r4, r5, d0
 8009ca0:	2d00      	cmp	r5, #0
 8009ca2:	460e      	mov	r6, r1
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	462b      	mov	r3, r5
 8009ca8:	bfbb      	ittet	lt
 8009caa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009cae:	461d      	movlt	r5, r3
 8009cb0:	2300      	movge	r3, #0
 8009cb2:	232d      	movlt	r3, #45	; 0x2d
 8009cb4:	700b      	strb	r3, [r1, #0]
 8009cb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cb8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009cbc:	4691      	mov	r9, r2
 8009cbe:	f023 0820 	bic.w	r8, r3, #32
 8009cc2:	bfbc      	itt	lt
 8009cc4:	4622      	movlt	r2, r4
 8009cc6:	4614      	movlt	r4, r2
 8009cc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ccc:	d005      	beq.n	8009cda <__cvt+0x42>
 8009cce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009cd2:	d100      	bne.n	8009cd6 <__cvt+0x3e>
 8009cd4:	3601      	adds	r6, #1
 8009cd6:	2102      	movs	r1, #2
 8009cd8:	e000      	b.n	8009cdc <__cvt+0x44>
 8009cda:	2103      	movs	r1, #3
 8009cdc:	ab03      	add	r3, sp, #12
 8009cde:	9301      	str	r3, [sp, #4]
 8009ce0:	ab02      	add	r3, sp, #8
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	ec45 4b10 	vmov	d0, r4, r5
 8009ce8:	4653      	mov	r3, sl
 8009cea:	4632      	mov	r2, r6
 8009cec:	f000 fccc 	bl	800a688 <_dtoa_r>
 8009cf0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009cf4:	4607      	mov	r7, r0
 8009cf6:	d102      	bne.n	8009cfe <__cvt+0x66>
 8009cf8:	f019 0f01 	tst.w	r9, #1
 8009cfc:	d022      	beq.n	8009d44 <__cvt+0xac>
 8009cfe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009d02:	eb07 0906 	add.w	r9, r7, r6
 8009d06:	d110      	bne.n	8009d2a <__cvt+0x92>
 8009d08:	783b      	ldrb	r3, [r7, #0]
 8009d0a:	2b30      	cmp	r3, #48	; 0x30
 8009d0c:	d10a      	bne.n	8009d24 <__cvt+0x8c>
 8009d0e:	2200      	movs	r2, #0
 8009d10:	2300      	movs	r3, #0
 8009d12:	4620      	mov	r0, r4
 8009d14:	4629      	mov	r1, r5
 8009d16:	f7f6 fed7 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d1a:	b918      	cbnz	r0, 8009d24 <__cvt+0x8c>
 8009d1c:	f1c6 0601 	rsb	r6, r6, #1
 8009d20:	f8ca 6000 	str.w	r6, [sl]
 8009d24:	f8da 3000 	ldr.w	r3, [sl]
 8009d28:	4499      	add	r9, r3
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	4620      	mov	r0, r4
 8009d30:	4629      	mov	r1, r5
 8009d32:	f7f6 fec9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d36:	b108      	cbz	r0, 8009d3c <__cvt+0xa4>
 8009d38:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d3c:	2230      	movs	r2, #48	; 0x30
 8009d3e:	9b03      	ldr	r3, [sp, #12]
 8009d40:	454b      	cmp	r3, r9
 8009d42:	d307      	bcc.n	8009d54 <__cvt+0xbc>
 8009d44:	9b03      	ldr	r3, [sp, #12]
 8009d46:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d48:	1bdb      	subs	r3, r3, r7
 8009d4a:	4638      	mov	r0, r7
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	b004      	add	sp, #16
 8009d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d54:	1c59      	adds	r1, r3, #1
 8009d56:	9103      	str	r1, [sp, #12]
 8009d58:	701a      	strb	r2, [r3, #0]
 8009d5a:	e7f0      	b.n	8009d3e <__cvt+0xa6>

08009d5c <__exponent>:
 8009d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2900      	cmp	r1, #0
 8009d62:	bfb8      	it	lt
 8009d64:	4249      	neglt	r1, r1
 8009d66:	f803 2b02 	strb.w	r2, [r3], #2
 8009d6a:	bfb4      	ite	lt
 8009d6c:	222d      	movlt	r2, #45	; 0x2d
 8009d6e:	222b      	movge	r2, #43	; 0x2b
 8009d70:	2909      	cmp	r1, #9
 8009d72:	7042      	strb	r2, [r0, #1]
 8009d74:	dd2a      	ble.n	8009dcc <__exponent+0x70>
 8009d76:	f10d 0407 	add.w	r4, sp, #7
 8009d7a:	46a4      	mov	ip, r4
 8009d7c:	270a      	movs	r7, #10
 8009d7e:	46a6      	mov	lr, r4
 8009d80:	460a      	mov	r2, r1
 8009d82:	fb91 f6f7 	sdiv	r6, r1, r7
 8009d86:	fb07 1516 	mls	r5, r7, r6, r1
 8009d8a:	3530      	adds	r5, #48	; 0x30
 8009d8c:	2a63      	cmp	r2, #99	; 0x63
 8009d8e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009d92:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009d96:	4631      	mov	r1, r6
 8009d98:	dcf1      	bgt.n	8009d7e <__exponent+0x22>
 8009d9a:	3130      	adds	r1, #48	; 0x30
 8009d9c:	f1ae 0502 	sub.w	r5, lr, #2
 8009da0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009da4:	1c44      	adds	r4, r0, #1
 8009da6:	4629      	mov	r1, r5
 8009da8:	4561      	cmp	r1, ip
 8009daa:	d30a      	bcc.n	8009dc2 <__exponent+0x66>
 8009dac:	f10d 0209 	add.w	r2, sp, #9
 8009db0:	eba2 020e 	sub.w	r2, r2, lr
 8009db4:	4565      	cmp	r5, ip
 8009db6:	bf88      	it	hi
 8009db8:	2200      	movhi	r2, #0
 8009dba:	4413      	add	r3, r2
 8009dbc:	1a18      	subs	r0, r3, r0
 8009dbe:	b003      	add	sp, #12
 8009dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dc6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009dca:	e7ed      	b.n	8009da8 <__exponent+0x4c>
 8009dcc:	2330      	movs	r3, #48	; 0x30
 8009dce:	3130      	adds	r1, #48	; 0x30
 8009dd0:	7083      	strb	r3, [r0, #2]
 8009dd2:	70c1      	strb	r1, [r0, #3]
 8009dd4:	1d03      	adds	r3, r0, #4
 8009dd6:	e7f1      	b.n	8009dbc <__exponent+0x60>

08009dd8 <_printf_float>:
 8009dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ddc:	ed2d 8b02 	vpush	{d8}
 8009de0:	b08d      	sub	sp, #52	; 0x34
 8009de2:	460c      	mov	r4, r1
 8009de4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009de8:	4616      	mov	r6, r2
 8009dea:	461f      	mov	r7, r3
 8009dec:	4605      	mov	r5, r0
 8009dee:	f001 fa39 	bl	800b264 <_localeconv_r>
 8009df2:	f8d0 a000 	ldr.w	sl, [r0]
 8009df6:	4650      	mov	r0, sl
 8009df8:	f7f6 f9ea 	bl	80001d0 <strlen>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	930a      	str	r3, [sp, #40]	; 0x28
 8009e00:	6823      	ldr	r3, [r4, #0]
 8009e02:	9305      	str	r3, [sp, #20]
 8009e04:	f8d8 3000 	ldr.w	r3, [r8]
 8009e08:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009e0c:	3307      	adds	r3, #7
 8009e0e:	f023 0307 	bic.w	r3, r3, #7
 8009e12:	f103 0208 	add.w	r2, r3, #8
 8009e16:	f8c8 2000 	str.w	r2, [r8]
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009e22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009e26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009e2a:	9307      	str	r3, [sp, #28]
 8009e2c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e30:	ee08 0a10 	vmov	s16, r0
 8009e34:	4b9f      	ldr	r3, [pc, #636]	; (800a0b4 <_printf_float+0x2dc>)
 8009e36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e3e:	f7f6 fe75 	bl	8000b2c <__aeabi_dcmpun>
 8009e42:	bb88      	cbnz	r0, 8009ea8 <_printf_float+0xd0>
 8009e44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e48:	4b9a      	ldr	r3, [pc, #616]	; (800a0b4 <_printf_float+0x2dc>)
 8009e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e4e:	f7f6 fe4f 	bl	8000af0 <__aeabi_dcmple>
 8009e52:	bb48      	cbnz	r0, 8009ea8 <_printf_float+0xd0>
 8009e54:	2200      	movs	r2, #0
 8009e56:	2300      	movs	r3, #0
 8009e58:	4640      	mov	r0, r8
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	f7f6 fe3e 	bl	8000adc <__aeabi_dcmplt>
 8009e60:	b110      	cbz	r0, 8009e68 <_printf_float+0x90>
 8009e62:	232d      	movs	r3, #45	; 0x2d
 8009e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e68:	4b93      	ldr	r3, [pc, #588]	; (800a0b8 <_printf_float+0x2e0>)
 8009e6a:	4894      	ldr	r0, [pc, #592]	; (800a0bc <_printf_float+0x2e4>)
 8009e6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009e70:	bf94      	ite	ls
 8009e72:	4698      	movls	r8, r3
 8009e74:	4680      	movhi	r8, r0
 8009e76:	2303      	movs	r3, #3
 8009e78:	6123      	str	r3, [r4, #16]
 8009e7a:	9b05      	ldr	r3, [sp, #20]
 8009e7c:	f023 0204 	bic.w	r2, r3, #4
 8009e80:	6022      	str	r2, [r4, #0]
 8009e82:	f04f 0900 	mov.w	r9, #0
 8009e86:	9700      	str	r7, [sp, #0]
 8009e88:	4633      	mov	r3, r6
 8009e8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8009e8c:	4621      	mov	r1, r4
 8009e8e:	4628      	mov	r0, r5
 8009e90:	f000 f9d8 	bl	800a244 <_printf_common>
 8009e94:	3001      	adds	r0, #1
 8009e96:	f040 8090 	bne.w	8009fba <_printf_float+0x1e2>
 8009e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e9e:	b00d      	add	sp, #52	; 0x34
 8009ea0:	ecbd 8b02 	vpop	{d8}
 8009ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ea8:	4642      	mov	r2, r8
 8009eaa:	464b      	mov	r3, r9
 8009eac:	4640      	mov	r0, r8
 8009eae:	4649      	mov	r1, r9
 8009eb0:	f7f6 fe3c 	bl	8000b2c <__aeabi_dcmpun>
 8009eb4:	b140      	cbz	r0, 8009ec8 <_printf_float+0xf0>
 8009eb6:	464b      	mov	r3, r9
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	bfbc      	itt	lt
 8009ebc:	232d      	movlt	r3, #45	; 0x2d
 8009ebe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009ec2:	487f      	ldr	r0, [pc, #508]	; (800a0c0 <_printf_float+0x2e8>)
 8009ec4:	4b7f      	ldr	r3, [pc, #508]	; (800a0c4 <_printf_float+0x2ec>)
 8009ec6:	e7d1      	b.n	8009e6c <_printf_float+0x94>
 8009ec8:	6863      	ldr	r3, [r4, #4]
 8009eca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009ece:	9206      	str	r2, [sp, #24]
 8009ed0:	1c5a      	adds	r2, r3, #1
 8009ed2:	d13f      	bne.n	8009f54 <_printf_float+0x17c>
 8009ed4:	2306      	movs	r3, #6
 8009ed6:	6063      	str	r3, [r4, #4]
 8009ed8:	9b05      	ldr	r3, [sp, #20]
 8009eda:	6861      	ldr	r1, [r4, #4]
 8009edc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	9303      	str	r3, [sp, #12]
 8009ee4:	ab0a      	add	r3, sp, #40	; 0x28
 8009ee6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009eea:	ab09      	add	r3, sp, #36	; 0x24
 8009eec:	ec49 8b10 	vmov	d0, r8, r9
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	6022      	str	r2, [r4, #0]
 8009ef4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ef8:	4628      	mov	r0, r5
 8009efa:	f7ff fecd 	bl	8009c98 <__cvt>
 8009efe:	9b06      	ldr	r3, [sp, #24]
 8009f00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f02:	2b47      	cmp	r3, #71	; 0x47
 8009f04:	4680      	mov	r8, r0
 8009f06:	d108      	bne.n	8009f1a <_printf_float+0x142>
 8009f08:	1cc8      	adds	r0, r1, #3
 8009f0a:	db02      	blt.n	8009f12 <_printf_float+0x13a>
 8009f0c:	6863      	ldr	r3, [r4, #4]
 8009f0e:	4299      	cmp	r1, r3
 8009f10:	dd41      	ble.n	8009f96 <_printf_float+0x1be>
 8009f12:	f1ab 0b02 	sub.w	fp, fp, #2
 8009f16:	fa5f fb8b 	uxtb.w	fp, fp
 8009f1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009f1e:	d820      	bhi.n	8009f62 <_printf_float+0x18a>
 8009f20:	3901      	subs	r1, #1
 8009f22:	465a      	mov	r2, fp
 8009f24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009f28:	9109      	str	r1, [sp, #36]	; 0x24
 8009f2a:	f7ff ff17 	bl	8009d5c <__exponent>
 8009f2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009f30:	1813      	adds	r3, r2, r0
 8009f32:	2a01      	cmp	r2, #1
 8009f34:	4681      	mov	r9, r0
 8009f36:	6123      	str	r3, [r4, #16]
 8009f38:	dc02      	bgt.n	8009f40 <_printf_float+0x168>
 8009f3a:	6822      	ldr	r2, [r4, #0]
 8009f3c:	07d2      	lsls	r2, r2, #31
 8009f3e:	d501      	bpl.n	8009f44 <_printf_float+0x16c>
 8009f40:	3301      	adds	r3, #1
 8009f42:	6123      	str	r3, [r4, #16]
 8009f44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d09c      	beq.n	8009e86 <_printf_float+0xae>
 8009f4c:	232d      	movs	r3, #45	; 0x2d
 8009f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f52:	e798      	b.n	8009e86 <_printf_float+0xae>
 8009f54:	9a06      	ldr	r2, [sp, #24]
 8009f56:	2a47      	cmp	r2, #71	; 0x47
 8009f58:	d1be      	bne.n	8009ed8 <_printf_float+0x100>
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1bc      	bne.n	8009ed8 <_printf_float+0x100>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e7b9      	b.n	8009ed6 <_printf_float+0xfe>
 8009f62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009f66:	d118      	bne.n	8009f9a <_printf_float+0x1c2>
 8009f68:	2900      	cmp	r1, #0
 8009f6a:	6863      	ldr	r3, [r4, #4]
 8009f6c:	dd0b      	ble.n	8009f86 <_printf_float+0x1ae>
 8009f6e:	6121      	str	r1, [r4, #16]
 8009f70:	b913      	cbnz	r3, 8009f78 <_printf_float+0x1a0>
 8009f72:	6822      	ldr	r2, [r4, #0]
 8009f74:	07d0      	lsls	r0, r2, #31
 8009f76:	d502      	bpl.n	8009f7e <_printf_float+0x1a6>
 8009f78:	3301      	adds	r3, #1
 8009f7a:	440b      	add	r3, r1
 8009f7c:	6123      	str	r3, [r4, #16]
 8009f7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009f80:	f04f 0900 	mov.w	r9, #0
 8009f84:	e7de      	b.n	8009f44 <_printf_float+0x16c>
 8009f86:	b913      	cbnz	r3, 8009f8e <_printf_float+0x1b6>
 8009f88:	6822      	ldr	r2, [r4, #0]
 8009f8a:	07d2      	lsls	r2, r2, #31
 8009f8c:	d501      	bpl.n	8009f92 <_printf_float+0x1ba>
 8009f8e:	3302      	adds	r3, #2
 8009f90:	e7f4      	b.n	8009f7c <_printf_float+0x1a4>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e7f2      	b.n	8009f7c <_printf_float+0x1a4>
 8009f96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f9c:	4299      	cmp	r1, r3
 8009f9e:	db05      	blt.n	8009fac <_printf_float+0x1d4>
 8009fa0:	6823      	ldr	r3, [r4, #0]
 8009fa2:	6121      	str	r1, [r4, #16]
 8009fa4:	07d8      	lsls	r0, r3, #31
 8009fa6:	d5ea      	bpl.n	8009f7e <_printf_float+0x1a6>
 8009fa8:	1c4b      	adds	r3, r1, #1
 8009faa:	e7e7      	b.n	8009f7c <_printf_float+0x1a4>
 8009fac:	2900      	cmp	r1, #0
 8009fae:	bfd4      	ite	le
 8009fb0:	f1c1 0202 	rsble	r2, r1, #2
 8009fb4:	2201      	movgt	r2, #1
 8009fb6:	4413      	add	r3, r2
 8009fb8:	e7e0      	b.n	8009f7c <_printf_float+0x1a4>
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	055a      	lsls	r2, r3, #21
 8009fbe:	d407      	bmi.n	8009fd0 <_printf_float+0x1f8>
 8009fc0:	6923      	ldr	r3, [r4, #16]
 8009fc2:	4642      	mov	r2, r8
 8009fc4:	4631      	mov	r1, r6
 8009fc6:	4628      	mov	r0, r5
 8009fc8:	47b8      	blx	r7
 8009fca:	3001      	adds	r0, #1
 8009fcc:	d12c      	bne.n	800a028 <_printf_float+0x250>
 8009fce:	e764      	b.n	8009e9a <_printf_float+0xc2>
 8009fd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009fd4:	f240 80e0 	bls.w	800a198 <_printf_float+0x3c0>
 8009fd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009fdc:	2200      	movs	r2, #0
 8009fde:	2300      	movs	r3, #0
 8009fe0:	f7f6 fd72 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	d034      	beq.n	800a052 <_printf_float+0x27a>
 8009fe8:	4a37      	ldr	r2, [pc, #220]	; (800a0c8 <_printf_float+0x2f0>)
 8009fea:	2301      	movs	r3, #1
 8009fec:	4631      	mov	r1, r6
 8009fee:	4628      	mov	r0, r5
 8009ff0:	47b8      	blx	r7
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	f43f af51 	beq.w	8009e9a <_printf_float+0xc2>
 8009ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	db02      	blt.n	800a006 <_printf_float+0x22e>
 800a000:	6823      	ldr	r3, [r4, #0]
 800a002:	07d8      	lsls	r0, r3, #31
 800a004:	d510      	bpl.n	800a028 <_printf_float+0x250>
 800a006:	ee18 3a10 	vmov	r3, s16
 800a00a:	4652      	mov	r2, sl
 800a00c:	4631      	mov	r1, r6
 800a00e:	4628      	mov	r0, r5
 800a010:	47b8      	blx	r7
 800a012:	3001      	adds	r0, #1
 800a014:	f43f af41 	beq.w	8009e9a <_printf_float+0xc2>
 800a018:	f04f 0800 	mov.w	r8, #0
 800a01c:	f104 091a 	add.w	r9, r4, #26
 800a020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a022:	3b01      	subs	r3, #1
 800a024:	4543      	cmp	r3, r8
 800a026:	dc09      	bgt.n	800a03c <_printf_float+0x264>
 800a028:	6823      	ldr	r3, [r4, #0]
 800a02a:	079b      	lsls	r3, r3, #30
 800a02c:	f100 8105 	bmi.w	800a23a <_printf_float+0x462>
 800a030:	68e0      	ldr	r0, [r4, #12]
 800a032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a034:	4298      	cmp	r0, r3
 800a036:	bfb8      	it	lt
 800a038:	4618      	movlt	r0, r3
 800a03a:	e730      	b.n	8009e9e <_printf_float+0xc6>
 800a03c:	2301      	movs	r3, #1
 800a03e:	464a      	mov	r2, r9
 800a040:	4631      	mov	r1, r6
 800a042:	4628      	mov	r0, r5
 800a044:	47b8      	blx	r7
 800a046:	3001      	adds	r0, #1
 800a048:	f43f af27 	beq.w	8009e9a <_printf_float+0xc2>
 800a04c:	f108 0801 	add.w	r8, r8, #1
 800a050:	e7e6      	b.n	800a020 <_printf_float+0x248>
 800a052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a054:	2b00      	cmp	r3, #0
 800a056:	dc39      	bgt.n	800a0cc <_printf_float+0x2f4>
 800a058:	4a1b      	ldr	r2, [pc, #108]	; (800a0c8 <_printf_float+0x2f0>)
 800a05a:	2301      	movs	r3, #1
 800a05c:	4631      	mov	r1, r6
 800a05e:	4628      	mov	r0, r5
 800a060:	47b8      	blx	r7
 800a062:	3001      	adds	r0, #1
 800a064:	f43f af19 	beq.w	8009e9a <_printf_float+0xc2>
 800a068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a06c:	4313      	orrs	r3, r2
 800a06e:	d102      	bne.n	800a076 <_printf_float+0x29e>
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	07d9      	lsls	r1, r3, #31
 800a074:	d5d8      	bpl.n	800a028 <_printf_float+0x250>
 800a076:	ee18 3a10 	vmov	r3, s16
 800a07a:	4652      	mov	r2, sl
 800a07c:	4631      	mov	r1, r6
 800a07e:	4628      	mov	r0, r5
 800a080:	47b8      	blx	r7
 800a082:	3001      	adds	r0, #1
 800a084:	f43f af09 	beq.w	8009e9a <_printf_float+0xc2>
 800a088:	f04f 0900 	mov.w	r9, #0
 800a08c:	f104 0a1a 	add.w	sl, r4, #26
 800a090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a092:	425b      	negs	r3, r3
 800a094:	454b      	cmp	r3, r9
 800a096:	dc01      	bgt.n	800a09c <_printf_float+0x2c4>
 800a098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a09a:	e792      	b.n	8009fc2 <_printf_float+0x1ea>
 800a09c:	2301      	movs	r3, #1
 800a09e:	4652      	mov	r2, sl
 800a0a0:	4631      	mov	r1, r6
 800a0a2:	4628      	mov	r0, r5
 800a0a4:	47b8      	blx	r7
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	f43f aef7 	beq.w	8009e9a <_printf_float+0xc2>
 800a0ac:	f109 0901 	add.w	r9, r9, #1
 800a0b0:	e7ee      	b.n	800a090 <_printf_float+0x2b8>
 800a0b2:	bf00      	nop
 800a0b4:	7fefffff 	.word	0x7fefffff
 800a0b8:	0800cf98 	.word	0x0800cf98
 800a0bc:	0800cf9c 	.word	0x0800cf9c
 800a0c0:	0800cfa4 	.word	0x0800cfa4
 800a0c4:	0800cfa0 	.word	0x0800cfa0
 800a0c8:	0800cfa8 	.word	0x0800cfa8
 800a0cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	bfa8      	it	ge
 800a0d4:	461a      	movge	r2, r3
 800a0d6:	2a00      	cmp	r2, #0
 800a0d8:	4691      	mov	r9, r2
 800a0da:	dc37      	bgt.n	800a14c <_printf_float+0x374>
 800a0dc:	f04f 0b00 	mov.w	fp, #0
 800a0e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0e4:	f104 021a 	add.w	r2, r4, #26
 800a0e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a0ea:	9305      	str	r3, [sp, #20]
 800a0ec:	eba3 0309 	sub.w	r3, r3, r9
 800a0f0:	455b      	cmp	r3, fp
 800a0f2:	dc33      	bgt.n	800a15c <_printf_float+0x384>
 800a0f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	db3b      	blt.n	800a174 <_printf_float+0x39c>
 800a0fc:	6823      	ldr	r3, [r4, #0]
 800a0fe:	07da      	lsls	r2, r3, #31
 800a100:	d438      	bmi.n	800a174 <_printf_float+0x39c>
 800a102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a104:	9a05      	ldr	r2, [sp, #20]
 800a106:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a108:	1a9a      	subs	r2, r3, r2
 800a10a:	eba3 0901 	sub.w	r9, r3, r1
 800a10e:	4591      	cmp	r9, r2
 800a110:	bfa8      	it	ge
 800a112:	4691      	movge	r9, r2
 800a114:	f1b9 0f00 	cmp.w	r9, #0
 800a118:	dc35      	bgt.n	800a186 <_printf_float+0x3ae>
 800a11a:	f04f 0800 	mov.w	r8, #0
 800a11e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a122:	f104 0a1a 	add.w	sl, r4, #26
 800a126:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a12a:	1a9b      	subs	r3, r3, r2
 800a12c:	eba3 0309 	sub.w	r3, r3, r9
 800a130:	4543      	cmp	r3, r8
 800a132:	f77f af79 	ble.w	800a028 <_printf_float+0x250>
 800a136:	2301      	movs	r3, #1
 800a138:	4652      	mov	r2, sl
 800a13a:	4631      	mov	r1, r6
 800a13c:	4628      	mov	r0, r5
 800a13e:	47b8      	blx	r7
 800a140:	3001      	adds	r0, #1
 800a142:	f43f aeaa 	beq.w	8009e9a <_printf_float+0xc2>
 800a146:	f108 0801 	add.w	r8, r8, #1
 800a14a:	e7ec      	b.n	800a126 <_printf_float+0x34e>
 800a14c:	4613      	mov	r3, r2
 800a14e:	4631      	mov	r1, r6
 800a150:	4642      	mov	r2, r8
 800a152:	4628      	mov	r0, r5
 800a154:	47b8      	blx	r7
 800a156:	3001      	adds	r0, #1
 800a158:	d1c0      	bne.n	800a0dc <_printf_float+0x304>
 800a15a:	e69e      	b.n	8009e9a <_printf_float+0xc2>
 800a15c:	2301      	movs	r3, #1
 800a15e:	4631      	mov	r1, r6
 800a160:	4628      	mov	r0, r5
 800a162:	9205      	str	r2, [sp, #20]
 800a164:	47b8      	blx	r7
 800a166:	3001      	adds	r0, #1
 800a168:	f43f ae97 	beq.w	8009e9a <_printf_float+0xc2>
 800a16c:	9a05      	ldr	r2, [sp, #20]
 800a16e:	f10b 0b01 	add.w	fp, fp, #1
 800a172:	e7b9      	b.n	800a0e8 <_printf_float+0x310>
 800a174:	ee18 3a10 	vmov	r3, s16
 800a178:	4652      	mov	r2, sl
 800a17a:	4631      	mov	r1, r6
 800a17c:	4628      	mov	r0, r5
 800a17e:	47b8      	blx	r7
 800a180:	3001      	adds	r0, #1
 800a182:	d1be      	bne.n	800a102 <_printf_float+0x32a>
 800a184:	e689      	b.n	8009e9a <_printf_float+0xc2>
 800a186:	9a05      	ldr	r2, [sp, #20]
 800a188:	464b      	mov	r3, r9
 800a18a:	4442      	add	r2, r8
 800a18c:	4631      	mov	r1, r6
 800a18e:	4628      	mov	r0, r5
 800a190:	47b8      	blx	r7
 800a192:	3001      	adds	r0, #1
 800a194:	d1c1      	bne.n	800a11a <_printf_float+0x342>
 800a196:	e680      	b.n	8009e9a <_printf_float+0xc2>
 800a198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a19a:	2a01      	cmp	r2, #1
 800a19c:	dc01      	bgt.n	800a1a2 <_printf_float+0x3ca>
 800a19e:	07db      	lsls	r3, r3, #31
 800a1a0:	d538      	bpl.n	800a214 <_printf_float+0x43c>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	4642      	mov	r2, r8
 800a1a6:	4631      	mov	r1, r6
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	47b8      	blx	r7
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	f43f ae74 	beq.w	8009e9a <_printf_float+0xc2>
 800a1b2:	ee18 3a10 	vmov	r3, s16
 800a1b6:	4652      	mov	r2, sl
 800a1b8:	4631      	mov	r1, r6
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	47b8      	blx	r7
 800a1be:	3001      	adds	r0, #1
 800a1c0:	f43f ae6b 	beq.w	8009e9a <_printf_float+0xc2>
 800a1c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	f7f6 fc7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1d0:	b9d8      	cbnz	r0, 800a20a <_printf_float+0x432>
 800a1d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1d4:	f108 0201 	add.w	r2, r8, #1
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	4631      	mov	r1, r6
 800a1dc:	4628      	mov	r0, r5
 800a1de:	47b8      	blx	r7
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	d10e      	bne.n	800a202 <_printf_float+0x42a>
 800a1e4:	e659      	b.n	8009e9a <_printf_float+0xc2>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	4652      	mov	r2, sl
 800a1ea:	4631      	mov	r1, r6
 800a1ec:	4628      	mov	r0, r5
 800a1ee:	47b8      	blx	r7
 800a1f0:	3001      	adds	r0, #1
 800a1f2:	f43f ae52 	beq.w	8009e9a <_printf_float+0xc2>
 800a1f6:	f108 0801 	add.w	r8, r8, #1
 800a1fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	4543      	cmp	r3, r8
 800a200:	dcf1      	bgt.n	800a1e6 <_printf_float+0x40e>
 800a202:	464b      	mov	r3, r9
 800a204:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a208:	e6dc      	b.n	8009fc4 <_printf_float+0x1ec>
 800a20a:	f04f 0800 	mov.w	r8, #0
 800a20e:	f104 0a1a 	add.w	sl, r4, #26
 800a212:	e7f2      	b.n	800a1fa <_printf_float+0x422>
 800a214:	2301      	movs	r3, #1
 800a216:	4642      	mov	r2, r8
 800a218:	e7df      	b.n	800a1da <_printf_float+0x402>
 800a21a:	2301      	movs	r3, #1
 800a21c:	464a      	mov	r2, r9
 800a21e:	4631      	mov	r1, r6
 800a220:	4628      	mov	r0, r5
 800a222:	47b8      	blx	r7
 800a224:	3001      	adds	r0, #1
 800a226:	f43f ae38 	beq.w	8009e9a <_printf_float+0xc2>
 800a22a:	f108 0801 	add.w	r8, r8, #1
 800a22e:	68e3      	ldr	r3, [r4, #12]
 800a230:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a232:	1a5b      	subs	r3, r3, r1
 800a234:	4543      	cmp	r3, r8
 800a236:	dcf0      	bgt.n	800a21a <_printf_float+0x442>
 800a238:	e6fa      	b.n	800a030 <_printf_float+0x258>
 800a23a:	f04f 0800 	mov.w	r8, #0
 800a23e:	f104 0919 	add.w	r9, r4, #25
 800a242:	e7f4      	b.n	800a22e <_printf_float+0x456>

0800a244 <_printf_common>:
 800a244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a248:	4616      	mov	r6, r2
 800a24a:	4699      	mov	r9, r3
 800a24c:	688a      	ldr	r2, [r1, #8]
 800a24e:	690b      	ldr	r3, [r1, #16]
 800a250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a254:	4293      	cmp	r3, r2
 800a256:	bfb8      	it	lt
 800a258:	4613      	movlt	r3, r2
 800a25a:	6033      	str	r3, [r6, #0]
 800a25c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a260:	4607      	mov	r7, r0
 800a262:	460c      	mov	r4, r1
 800a264:	b10a      	cbz	r2, 800a26a <_printf_common+0x26>
 800a266:	3301      	adds	r3, #1
 800a268:	6033      	str	r3, [r6, #0]
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	0699      	lsls	r1, r3, #26
 800a26e:	bf42      	ittt	mi
 800a270:	6833      	ldrmi	r3, [r6, #0]
 800a272:	3302      	addmi	r3, #2
 800a274:	6033      	strmi	r3, [r6, #0]
 800a276:	6825      	ldr	r5, [r4, #0]
 800a278:	f015 0506 	ands.w	r5, r5, #6
 800a27c:	d106      	bne.n	800a28c <_printf_common+0x48>
 800a27e:	f104 0a19 	add.w	sl, r4, #25
 800a282:	68e3      	ldr	r3, [r4, #12]
 800a284:	6832      	ldr	r2, [r6, #0]
 800a286:	1a9b      	subs	r3, r3, r2
 800a288:	42ab      	cmp	r3, r5
 800a28a:	dc26      	bgt.n	800a2da <_printf_common+0x96>
 800a28c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a290:	1e13      	subs	r3, r2, #0
 800a292:	6822      	ldr	r2, [r4, #0]
 800a294:	bf18      	it	ne
 800a296:	2301      	movne	r3, #1
 800a298:	0692      	lsls	r2, r2, #26
 800a29a:	d42b      	bmi.n	800a2f4 <_printf_common+0xb0>
 800a29c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2a0:	4649      	mov	r1, r9
 800a2a2:	4638      	mov	r0, r7
 800a2a4:	47c0      	blx	r8
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	d01e      	beq.n	800a2e8 <_printf_common+0xa4>
 800a2aa:	6823      	ldr	r3, [r4, #0]
 800a2ac:	68e5      	ldr	r5, [r4, #12]
 800a2ae:	6832      	ldr	r2, [r6, #0]
 800a2b0:	f003 0306 	and.w	r3, r3, #6
 800a2b4:	2b04      	cmp	r3, #4
 800a2b6:	bf08      	it	eq
 800a2b8:	1aad      	subeq	r5, r5, r2
 800a2ba:	68a3      	ldr	r3, [r4, #8]
 800a2bc:	6922      	ldr	r2, [r4, #16]
 800a2be:	bf0c      	ite	eq
 800a2c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2c4:	2500      	movne	r5, #0
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	bfc4      	itt	gt
 800a2ca:	1a9b      	subgt	r3, r3, r2
 800a2cc:	18ed      	addgt	r5, r5, r3
 800a2ce:	2600      	movs	r6, #0
 800a2d0:	341a      	adds	r4, #26
 800a2d2:	42b5      	cmp	r5, r6
 800a2d4:	d11a      	bne.n	800a30c <_printf_common+0xc8>
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	e008      	b.n	800a2ec <_printf_common+0xa8>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	4652      	mov	r2, sl
 800a2de:	4649      	mov	r1, r9
 800a2e0:	4638      	mov	r0, r7
 800a2e2:	47c0      	blx	r8
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	d103      	bne.n	800a2f0 <_printf_common+0xac>
 800a2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f0:	3501      	adds	r5, #1
 800a2f2:	e7c6      	b.n	800a282 <_printf_common+0x3e>
 800a2f4:	18e1      	adds	r1, r4, r3
 800a2f6:	1c5a      	adds	r2, r3, #1
 800a2f8:	2030      	movs	r0, #48	; 0x30
 800a2fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2fe:	4422      	add	r2, r4
 800a300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a308:	3302      	adds	r3, #2
 800a30a:	e7c7      	b.n	800a29c <_printf_common+0x58>
 800a30c:	2301      	movs	r3, #1
 800a30e:	4622      	mov	r2, r4
 800a310:	4649      	mov	r1, r9
 800a312:	4638      	mov	r0, r7
 800a314:	47c0      	blx	r8
 800a316:	3001      	adds	r0, #1
 800a318:	d0e6      	beq.n	800a2e8 <_printf_common+0xa4>
 800a31a:	3601      	adds	r6, #1
 800a31c:	e7d9      	b.n	800a2d2 <_printf_common+0x8e>
	...

0800a320 <_printf_i>:
 800a320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a324:	7e0f      	ldrb	r7, [r1, #24]
 800a326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a328:	2f78      	cmp	r7, #120	; 0x78
 800a32a:	4691      	mov	r9, r2
 800a32c:	4680      	mov	r8, r0
 800a32e:	460c      	mov	r4, r1
 800a330:	469a      	mov	sl, r3
 800a332:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a336:	d807      	bhi.n	800a348 <_printf_i+0x28>
 800a338:	2f62      	cmp	r7, #98	; 0x62
 800a33a:	d80a      	bhi.n	800a352 <_printf_i+0x32>
 800a33c:	2f00      	cmp	r7, #0
 800a33e:	f000 80d8 	beq.w	800a4f2 <_printf_i+0x1d2>
 800a342:	2f58      	cmp	r7, #88	; 0x58
 800a344:	f000 80a3 	beq.w	800a48e <_printf_i+0x16e>
 800a348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a34c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a350:	e03a      	b.n	800a3c8 <_printf_i+0xa8>
 800a352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a356:	2b15      	cmp	r3, #21
 800a358:	d8f6      	bhi.n	800a348 <_printf_i+0x28>
 800a35a:	a101      	add	r1, pc, #4	; (adr r1, 800a360 <_printf_i+0x40>)
 800a35c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a360:	0800a3b9 	.word	0x0800a3b9
 800a364:	0800a3cd 	.word	0x0800a3cd
 800a368:	0800a349 	.word	0x0800a349
 800a36c:	0800a349 	.word	0x0800a349
 800a370:	0800a349 	.word	0x0800a349
 800a374:	0800a349 	.word	0x0800a349
 800a378:	0800a3cd 	.word	0x0800a3cd
 800a37c:	0800a349 	.word	0x0800a349
 800a380:	0800a349 	.word	0x0800a349
 800a384:	0800a349 	.word	0x0800a349
 800a388:	0800a349 	.word	0x0800a349
 800a38c:	0800a4d9 	.word	0x0800a4d9
 800a390:	0800a3fd 	.word	0x0800a3fd
 800a394:	0800a4bb 	.word	0x0800a4bb
 800a398:	0800a349 	.word	0x0800a349
 800a39c:	0800a349 	.word	0x0800a349
 800a3a0:	0800a4fb 	.word	0x0800a4fb
 800a3a4:	0800a349 	.word	0x0800a349
 800a3a8:	0800a3fd 	.word	0x0800a3fd
 800a3ac:	0800a349 	.word	0x0800a349
 800a3b0:	0800a349 	.word	0x0800a349
 800a3b4:	0800a4c3 	.word	0x0800a4c3
 800a3b8:	682b      	ldr	r3, [r5, #0]
 800a3ba:	1d1a      	adds	r2, r3, #4
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	602a      	str	r2, [r5, #0]
 800a3c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e0a3      	b.n	800a514 <_printf_i+0x1f4>
 800a3cc:	6820      	ldr	r0, [r4, #0]
 800a3ce:	6829      	ldr	r1, [r5, #0]
 800a3d0:	0606      	lsls	r6, r0, #24
 800a3d2:	f101 0304 	add.w	r3, r1, #4
 800a3d6:	d50a      	bpl.n	800a3ee <_printf_i+0xce>
 800a3d8:	680e      	ldr	r6, [r1, #0]
 800a3da:	602b      	str	r3, [r5, #0]
 800a3dc:	2e00      	cmp	r6, #0
 800a3de:	da03      	bge.n	800a3e8 <_printf_i+0xc8>
 800a3e0:	232d      	movs	r3, #45	; 0x2d
 800a3e2:	4276      	negs	r6, r6
 800a3e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3e8:	485e      	ldr	r0, [pc, #376]	; (800a564 <_printf_i+0x244>)
 800a3ea:	230a      	movs	r3, #10
 800a3ec:	e019      	b.n	800a422 <_printf_i+0x102>
 800a3ee:	680e      	ldr	r6, [r1, #0]
 800a3f0:	602b      	str	r3, [r5, #0]
 800a3f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3f6:	bf18      	it	ne
 800a3f8:	b236      	sxthne	r6, r6
 800a3fa:	e7ef      	b.n	800a3dc <_printf_i+0xbc>
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	6820      	ldr	r0, [r4, #0]
 800a400:	1d19      	adds	r1, r3, #4
 800a402:	6029      	str	r1, [r5, #0]
 800a404:	0601      	lsls	r1, r0, #24
 800a406:	d501      	bpl.n	800a40c <_printf_i+0xec>
 800a408:	681e      	ldr	r6, [r3, #0]
 800a40a:	e002      	b.n	800a412 <_printf_i+0xf2>
 800a40c:	0646      	lsls	r6, r0, #25
 800a40e:	d5fb      	bpl.n	800a408 <_printf_i+0xe8>
 800a410:	881e      	ldrh	r6, [r3, #0]
 800a412:	4854      	ldr	r0, [pc, #336]	; (800a564 <_printf_i+0x244>)
 800a414:	2f6f      	cmp	r7, #111	; 0x6f
 800a416:	bf0c      	ite	eq
 800a418:	2308      	moveq	r3, #8
 800a41a:	230a      	movne	r3, #10
 800a41c:	2100      	movs	r1, #0
 800a41e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a422:	6865      	ldr	r5, [r4, #4]
 800a424:	60a5      	str	r5, [r4, #8]
 800a426:	2d00      	cmp	r5, #0
 800a428:	bfa2      	ittt	ge
 800a42a:	6821      	ldrge	r1, [r4, #0]
 800a42c:	f021 0104 	bicge.w	r1, r1, #4
 800a430:	6021      	strge	r1, [r4, #0]
 800a432:	b90e      	cbnz	r6, 800a438 <_printf_i+0x118>
 800a434:	2d00      	cmp	r5, #0
 800a436:	d04d      	beq.n	800a4d4 <_printf_i+0x1b4>
 800a438:	4615      	mov	r5, r2
 800a43a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a43e:	fb03 6711 	mls	r7, r3, r1, r6
 800a442:	5dc7      	ldrb	r7, [r0, r7]
 800a444:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a448:	4637      	mov	r7, r6
 800a44a:	42bb      	cmp	r3, r7
 800a44c:	460e      	mov	r6, r1
 800a44e:	d9f4      	bls.n	800a43a <_printf_i+0x11a>
 800a450:	2b08      	cmp	r3, #8
 800a452:	d10b      	bne.n	800a46c <_printf_i+0x14c>
 800a454:	6823      	ldr	r3, [r4, #0]
 800a456:	07de      	lsls	r6, r3, #31
 800a458:	d508      	bpl.n	800a46c <_printf_i+0x14c>
 800a45a:	6923      	ldr	r3, [r4, #16]
 800a45c:	6861      	ldr	r1, [r4, #4]
 800a45e:	4299      	cmp	r1, r3
 800a460:	bfde      	ittt	le
 800a462:	2330      	movle	r3, #48	; 0x30
 800a464:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a468:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a46c:	1b52      	subs	r2, r2, r5
 800a46e:	6122      	str	r2, [r4, #16]
 800a470:	f8cd a000 	str.w	sl, [sp]
 800a474:	464b      	mov	r3, r9
 800a476:	aa03      	add	r2, sp, #12
 800a478:	4621      	mov	r1, r4
 800a47a:	4640      	mov	r0, r8
 800a47c:	f7ff fee2 	bl	800a244 <_printf_common>
 800a480:	3001      	adds	r0, #1
 800a482:	d14c      	bne.n	800a51e <_printf_i+0x1fe>
 800a484:	f04f 30ff 	mov.w	r0, #4294967295
 800a488:	b004      	add	sp, #16
 800a48a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a48e:	4835      	ldr	r0, [pc, #212]	; (800a564 <_printf_i+0x244>)
 800a490:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a494:	6829      	ldr	r1, [r5, #0]
 800a496:	6823      	ldr	r3, [r4, #0]
 800a498:	f851 6b04 	ldr.w	r6, [r1], #4
 800a49c:	6029      	str	r1, [r5, #0]
 800a49e:	061d      	lsls	r5, r3, #24
 800a4a0:	d514      	bpl.n	800a4cc <_printf_i+0x1ac>
 800a4a2:	07df      	lsls	r7, r3, #31
 800a4a4:	bf44      	itt	mi
 800a4a6:	f043 0320 	orrmi.w	r3, r3, #32
 800a4aa:	6023      	strmi	r3, [r4, #0]
 800a4ac:	b91e      	cbnz	r6, 800a4b6 <_printf_i+0x196>
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	f023 0320 	bic.w	r3, r3, #32
 800a4b4:	6023      	str	r3, [r4, #0]
 800a4b6:	2310      	movs	r3, #16
 800a4b8:	e7b0      	b.n	800a41c <_printf_i+0xfc>
 800a4ba:	6823      	ldr	r3, [r4, #0]
 800a4bc:	f043 0320 	orr.w	r3, r3, #32
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	2378      	movs	r3, #120	; 0x78
 800a4c4:	4828      	ldr	r0, [pc, #160]	; (800a568 <_printf_i+0x248>)
 800a4c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4ca:	e7e3      	b.n	800a494 <_printf_i+0x174>
 800a4cc:	0659      	lsls	r1, r3, #25
 800a4ce:	bf48      	it	mi
 800a4d0:	b2b6      	uxthmi	r6, r6
 800a4d2:	e7e6      	b.n	800a4a2 <_printf_i+0x182>
 800a4d4:	4615      	mov	r5, r2
 800a4d6:	e7bb      	b.n	800a450 <_printf_i+0x130>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	6826      	ldr	r6, [r4, #0]
 800a4dc:	6961      	ldr	r1, [r4, #20]
 800a4de:	1d18      	adds	r0, r3, #4
 800a4e0:	6028      	str	r0, [r5, #0]
 800a4e2:	0635      	lsls	r5, r6, #24
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	d501      	bpl.n	800a4ec <_printf_i+0x1cc>
 800a4e8:	6019      	str	r1, [r3, #0]
 800a4ea:	e002      	b.n	800a4f2 <_printf_i+0x1d2>
 800a4ec:	0670      	lsls	r0, r6, #25
 800a4ee:	d5fb      	bpl.n	800a4e8 <_printf_i+0x1c8>
 800a4f0:	8019      	strh	r1, [r3, #0]
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	6123      	str	r3, [r4, #16]
 800a4f6:	4615      	mov	r5, r2
 800a4f8:	e7ba      	b.n	800a470 <_printf_i+0x150>
 800a4fa:	682b      	ldr	r3, [r5, #0]
 800a4fc:	1d1a      	adds	r2, r3, #4
 800a4fe:	602a      	str	r2, [r5, #0]
 800a500:	681d      	ldr	r5, [r3, #0]
 800a502:	6862      	ldr	r2, [r4, #4]
 800a504:	2100      	movs	r1, #0
 800a506:	4628      	mov	r0, r5
 800a508:	f7f5 fe6a 	bl	80001e0 <memchr>
 800a50c:	b108      	cbz	r0, 800a512 <_printf_i+0x1f2>
 800a50e:	1b40      	subs	r0, r0, r5
 800a510:	6060      	str	r0, [r4, #4]
 800a512:	6863      	ldr	r3, [r4, #4]
 800a514:	6123      	str	r3, [r4, #16]
 800a516:	2300      	movs	r3, #0
 800a518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a51c:	e7a8      	b.n	800a470 <_printf_i+0x150>
 800a51e:	6923      	ldr	r3, [r4, #16]
 800a520:	462a      	mov	r2, r5
 800a522:	4649      	mov	r1, r9
 800a524:	4640      	mov	r0, r8
 800a526:	47d0      	blx	sl
 800a528:	3001      	adds	r0, #1
 800a52a:	d0ab      	beq.n	800a484 <_printf_i+0x164>
 800a52c:	6823      	ldr	r3, [r4, #0]
 800a52e:	079b      	lsls	r3, r3, #30
 800a530:	d413      	bmi.n	800a55a <_printf_i+0x23a>
 800a532:	68e0      	ldr	r0, [r4, #12]
 800a534:	9b03      	ldr	r3, [sp, #12]
 800a536:	4298      	cmp	r0, r3
 800a538:	bfb8      	it	lt
 800a53a:	4618      	movlt	r0, r3
 800a53c:	e7a4      	b.n	800a488 <_printf_i+0x168>
 800a53e:	2301      	movs	r3, #1
 800a540:	4632      	mov	r2, r6
 800a542:	4649      	mov	r1, r9
 800a544:	4640      	mov	r0, r8
 800a546:	47d0      	blx	sl
 800a548:	3001      	adds	r0, #1
 800a54a:	d09b      	beq.n	800a484 <_printf_i+0x164>
 800a54c:	3501      	adds	r5, #1
 800a54e:	68e3      	ldr	r3, [r4, #12]
 800a550:	9903      	ldr	r1, [sp, #12]
 800a552:	1a5b      	subs	r3, r3, r1
 800a554:	42ab      	cmp	r3, r5
 800a556:	dcf2      	bgt.n	800a53e <_printf_i+0x21e>
 800a558:	e7eb      	b.n	800a532 <_printf_i+0x212>
 800a55a:	2500      	movs	r5, #0
 800a55c:	f104 0619 	add.w	r6, r4, #25
 800a560:	e7f5      	b.n	800a54e <_printf_i+0x22e>
 800a562:	bf00      	nop
 800a564:	0800cfaa 	.word	0x0800cfaa
 800a568:	0800cfbb 	.word	0x0800cfbb

0800a56c <quorem>:
 800a56c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a570:	6903      	ldr	r3, [r0, #16]
 800a572:	690c      	ldr	r4, [r1, #16]
 800a574:	42a3      	cmp	r3, r4
 800a576:	4607      	mov	r7, r0
 800a578:	f2c0 8081 	blt.w	800a67e <quorem+0x112>
 800a57c:	3c01      	subs	r4, #1
 800a57e:	f101 0814 	add.w	r8, r1, #20
 800a582:	f100 0514 	add.w	r5, r0, #20
 800a586:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a58a:	9301      	str	r3, [sp, #4]
 800a58c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a590:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a594:	3301      	adds	r3, #1
 800a596:	429a      	cmp	r2, r3
 800a598:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a59c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5a0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5a4:	d331      	bcc.n	800a60a <quorem+0x9e>
 800a5a6:	f04f 0e00 	mov.w	lr, #0
 800a5aa:	4640      	mov	r0, r8
 800a5ac:	46ac      	mov	ip, r5
 800a5ae:	46f2      	mov	sl, lr
 800a5b0:	f850 2b04 	ldr.w	r2, [r0], #4
 800a5b4:	b293      	uxth	r3, r2
 800a5b6:	fb06 e303 	mla	r3, r6, r3, lr
 800a5ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	ebaa 0303 	sub.w	r3, sl, r3
 800a5c4:	f8dc a000 	ldr.w	sl, [ip]
 800a5c8:	0c12      	lsrs	r2, r2, #16
 800a5ca:	fa13 f38a 	uxtah	r3, r3, sl
 800a5ce:	fb06 e202 	mla	r2, r6, r2, lr
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	9b00      	ldr	r3, [sp, #0]
 800a5d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a5da:	b292      	uxth	r2, r2
 800a5dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a5e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a5e4:	f8bd 3000 	ldrh.w	r3, [sp]
 800a5e8:	4581      	cmp	r9, r0
 800a5ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5ee:	f84c 3b04 	str.w	r3, [ip], #4
 800a5f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a5f6:	d2db      	bcs.n	800a5b0 <quorem+0x44>
 800a5f8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a5fc:	b92b      	cbnz	r3, 800a60a <quorem+0x9e>
 800a5fe:	9b01      	ldr	r3, [sp, #4]
 800a600:	3b04      	subs	r3, #4
 800a602:	429d      	cmp	r5, r3
 800a604:	461a      	mov	r2, r3
 800a606:	d32e      	bcc.n	800a666 <quorem+0xfa>
 800a608:	613c      	str	r4, [r7, #16]
 800a60a:	4638      	mov	r0, r7
 800a60c:	f001 f8b8 	bl	800b780 <__mcmp>
 800a610:	2800      	cmp	r0, #0
 800a612:	db24      	blt.n	800a65e <quorem+0xf2>
 800a614:	3601      	adds	r6, #1
 800a616:	4628      	mov	r0, r5
 800a618:	f04f 0c00 	mov.w	ip, #0
 800a61c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a620:	f8d0 e000 	ldr.w	lr, [r0]
 800a624:	b293      	uxth	r3, r2
 800a626:	ebac 0303 	sub.w	r3, ip, r3
 800a62a:	0c12      	lsrs	r2, r2, #16
 800a62c:	fa13 f38e 	uxtah	r3, r3, lr
 800a630:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a634:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a638:	b29b      	uxth	r3, r3
 800a63a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a63e:	45c1      	cmp	r9, r8
 800a640:	f840 3b04 	str.w	r3, [r0], #4
 800a644:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a648:	d2e8      	bcs.n	800a61c <quorem+0xb0>
 800a64a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a64e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a652:	b922      	cbnz	r2, 800a65e <quorem+0xf2>
 800a654:	3b04      	subs	r3, #4
 800a656:	429d      	cmp	r5, r3
 800a658:	461a      	mov	r2, r3
 800a65a:	d30a      	bcc.n	800a672 <quorem+0x106>
 800a65c:	613c      	str	r4, [r7, #16]
 800a65e:	4630      	mov	r0, r6
 800a660:	b003      	add	sp, #12
 800a662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a666:	6812      	ldr	r2, [r2, #0]
 800a668:	3b04      	subs	r3, #4
 800a66a:	2a00      	cmp	r2, #0
 800a66c:	d1cc      	bne.n	800a608 <quorem+0x9c>
 800a66e:	3c01      	subs	r4, #1
 800a670:	e7c7      	b.n	800a602 <quorem+0x96>
 800a672:	6812      	ldr	r2, [r2, #0]
 800a674:	3b04      	subs	r3, #4
 800a676:	2a00      	cmp	r2, #0
 800a678:	d1f0      	bne.n	800a65c <quorem+0xf0>
 800a67a:	3c01      	subs	r4, #1
 800a67c:	e7eb      	b.n	800a656 <quorem+0xea>
 800a67e:	2000      	movs	r0, #0
 800a680:	e7ee      	b.n	800a660 <quorem+0xf4>
 800a682:	0000      	movs	r0, r0
 800a684:	0000      	movs	r0, r0
	...

0800a688 <_dtoa_r>:
 800a688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68c:	ed2d 8b04 	vpush	{d8-d9}
 800a690:	ec57 6b10 	vmov	r6, r7, d0
 800a694:	b093      	sub	sp, #76	; 0x4c
 800a696:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a698:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a69c:	9106      	str	r1, [sp, #24]
 800a69e:	ee10 aa10 	vmov	sl, s0
 800a6a2:	4604      	mov	r4, r0
 800a6a4:	9209      	str	r2, [sp, #36]	; 0x24
 800a6a6:	930c      	str	r3, [sp, #48]	; 0x30
 800a6a8:	46bb      	mov	fp, r7
 800a6aa:	b975      	cbnz	r5, 800a6ca <_dtoa_r+0x42>
 800a6ac:	2010      	movs	r0, #16
 800a6ae:	f000 fddd 	bl	800b26c <malloc>
 800a6b2:	4602      	mov	r2, r0
 800a6b4:	6260      	str	r0, [r4, #36]	; 0x24
 800a6b6:	b920      	cbnz	r0, 800a6c2 <_dtoa_r+0x3a>
 800a6b8:	4ba7      	ldr	r3, [pc, #668]	; (800a958 <_dtoa_r+0x2d0>)
 800a6ba:	21ea      	movs	r1, #234	; 0xea
 800a6bc:	48a7      	ldr	r0, [pc, #668]	; (800a95c <_dtoa_r+0x2d4>)
 800a6be:	f001 fa67 	bl	800bb90 <__assert_func>
 800a6c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a6c6:	6005      	str	r5, [r0, #0]
 800a6c8:	60c5      	str	r5, [r0, #12]
 800a6ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6cc:	6819      	ldr	r1, [r3, #0]
 800a6ce:	b151      	cbz	r1, 800a6e6 <_dtoa_r+0x5e>
 800a6d0:	685a      	ldr	r2, [r3, #4]
 800a6d2:	604a      	str	r2, [r1, #4]
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	4093      	lsls	r3, r2
 800a6d8:	608b      	str	r3, [r1, #8]
 800a6da:	4620      	mov	r0, r4
 800a6dc:	f000 fe0e 	bl	800b2fc <_Bfree>
 800a6e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	601a      	str	r2, [r3, #0]
 800a6e6:	1e3b      	subs	r3, r7, #0
 800a6e8:	bfaa      	itet	ge
 800a6ea:	2300      	movge	r3, #0
 800a6ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a6f0:	f8c8 3000 	strge.w	r3, [r8]
 800a6f4:	4b9a      	ldr	r3, [pc, #616]	; (800a960 <_dtoa_r+0x2d8>)
 800a6f6:	bfbc      	itt	lt
 800a6f8:	2201      	movlt	r2, #1
 800a6fa:	f8c8 2000 	strlt.w	r2, [r8]
 800a6fe:	ea33 030b 	bics.w	r3, r3, fp
 800a702:	d11b      	bne.n	800a73c <_dtoa_r+0xb4>
 800a704:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a706:	f242 730f 	movw	r3, #9999	; 0x270f
 800a70a:	6013      	str	r3, [r2, #0]
 800a70c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a710:	4333      	orrs	r3, r6
 800a712:	f000 8592 	beq.w	800b23a <_dtoa_r+0xbb2>
 800a716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a718:	b963      	cbnz	r3, 800a734 <_dtoa_r+0xac>
 800a71a:	4b92      	ldr	r3, [pc, #584]	; (800a964 <_dtoa_r+0x2dc>)
 800a71c:	e022      	b.n	800a764 <_dtoa_r+0xdc>
 800a71e:	4b92      	ldr	r3, [pc, #584]	; (800a968 <_dtoa_r+0x2e0>)
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	3308      	adds	r3, #8
 800a724:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a726:	6013      	str	r3, [r2, #0]
 800a728:	9801      	ldr	r0, [sp, #4]
 800a72a:	b013      	add	sp, #76	; 0x4c
 800a72c:	ecbd 8b04 	vpop	{d8-d9}
 800a730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a734:	4b8b      	ldr	r3, [pc, #556]	; (800a964 <_dtoa_r+0x2dc>)
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	3303      	adds	r3, #3
 800a73a:	e7f3      	b.n	800a724 <_dtoa_r+0x9c>
 800a73c:	2200      	movs	r2, #0
 800a73e:	2300      	movs	r3, #0
 800a740:	4650      	mov	r0, sl
 800a742:	4659      	mov	r1, fp
 800a744:	f7f6 f9c0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a748:	ec4b ab19 	vmov	d9, sl, fp
 800a74c:	4680      	mov	r8, r0
 800a74e:	b158      	cbz	r0, 800a768 <_dtoa_r+0xe0>
 800a750:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a752:	2301      	movs	r3, #1
 800a754:	6013      	str	r3, [r2, #0]
 800a756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 856b 	beq.w	800b234 <_dtoa_r+0xbac>
 800a75e:	4883      	ldr	r0, [pc, #524]	; (800a96c <_dtoa_r+0x2e4>)
 800a760:	6018      	str	r0, [r3, #0]
 800a762:	1e43      	subs	r3, r0, #1
 800a764:	9301      	str	r3, [sp, #4]
 800a766:	e7df      	b.n	800a728 <_dtoa_r+0xa0>
 800a768:	ec4b ab10 	vmov	d0, sl, fp
 800a76c:	aa10      	add	r2, sp, #64	; 0x40
 800a76e:	a911      	add	r1, sp, #68	; 0x44
 800a770:	4620      	mov	r0, r4
 800a772:	f001 f8ab 	bl	800b8cc <__d2b>
 800a776:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a77a:	ee08 0a10 	vmov	s16, r0
 800a77e:	2d00      	cmp	r5, #0
 800a780:	f000 8084 	beq.w	800a88c <_dtoa_r+0x204>
 800a784:	ee19 3a90 	vmov	r3, s19
 800a788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a78c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a790:	4656      	mov	r6, sl
 800a792:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a796:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a79a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a79e:	4b74      	ldr	r3, [pc, #464]	; (800a970 <_dtoa_r+0x2e8>)
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	4630      	mov	r0, r6
 800a7a4:	4639      	mov	r1, r7
 800a7a6:	f7f5 fd6f 	bl	8000288 <__aeabi_dsub>
 800a7aa:	a365      	add	r3, pc, #404	; (adr r3, 800a940 <_dtoa_r+0x2b8>)
 800a7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b0:	f7f5 ff22 	bl	80005f8 <__aeabi_dmul>
 800a7b4:	a364      	add	r3, pc, #400	; (adr r3, 800a948 <_dtoa_r+0x2c0>)
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	f7f5 fd67 	bl	800028c <__adddf3>
 800a7be:	4606      	mov	r6, r0
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	460f      	mov	r7, r1
 800a7c4:	f7f5 feae 	bl	8000524 <__aeabi_i2d>
 800a7c8:	a361      	add	r3, pc, #388	; (adr r3, 800a950 <_dtoa_r+0x2c8>)
 800a7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ce:	f7f5 ff13 	bl	80005f8 <__aeabi_dmul>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	4639      	mov	r1, r7
 800a7da:	f7f5 fd57 	bl	800028c <__adddf3>
 800a7de:	4606      	mov	r6, r0
 800a7e0:	460f      	mov	r7, r1
 800a7e2:	f7f6 f9b9 	bl	8000b58 <__aeabi_d2iz>
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	9000      	str	r0, [sp, #0]
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	4639      	mov	r1, r7
 800a7f0:	f7f6 f974 	bl	8000adc <__aeabi_dcmplt>
 800a7f4:	b150      	cbz	r0, 800a80c <_dtoa_r+0x184>
 800a7f6:	9800      	ldr	r0, [sp, #0]
 800a7f8:	f7f5 fe94 	bl	8000524 <__aeabi_i2d>
 800a7fc:	4632      	mov	r2, r6
 800a7fe:	463b      	mov	r3, r7
 800a800:	f7f6 f962 	bl	8000ac8 <__aeabi_dcmpeq>
 800a804:	b910      	cbnz	r0, 800a80c <_dtoa_r+0x184>
 800a806:	9b00      	ldr	r3, [sp, #0]
 800a808:	3b01      	subs	r3, #1
 800a80a:	9300      	str	r3, [sp, #0]
 800a80c:	9b00      	ldr	r3, [sp, #0]
 800a80e:	2b16      	cmp	r3, #22
 800a810:	d85a      	bhi.n	800a8c8 <_dtoa_r+0x240>
 800a812:	9a00      	ldr	r2, [sp, #0]
 800a814:	4b57      	ldr	r3, [pc, #348]	; (800a974 <_dtoa_r+0x2ec>)
 800a816:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	ec51 0b19 	vmov	r0, r1, d9
 800a822:	f7f6 f95b 	bl	8000adc <__aeabi_dcmplt>
 800a826:	2800      	cmp	r0, #0
 800a828:	d050      	beq.n	800a8cc <_dtoa_r+0x244>
 800a82a:	9b00      	ldr	r3, [sp, #0]
 800a82c:	3b01      	subs	r3, #1
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	2300      	movs	r3, #0
 800a832:	930b      	str	r3, [sp, #44]	; 0x2c
 800a834:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a836:	1b5d      	subs	r5, r3, r5
 800a838:	1e6b      	subs	r3, r5, #1
 800a83a:	9305      	str	r3, [sp, #20]
 800a83c:	bf45      	ittet	mi
 800a83e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a842:	9304      	strmi	r3, [sp, #16]
 800a844:	2300      	movpl	r3, #0
 800a846:	2300      	movmi	r3, #0
 800a848:	bf4c      	ite	mi
 800a84a:	9305      	strmi	r3, [sp, #20]
 800a84c:	9304      	strpl	r3, [sp, #16]
 800a84e:	9b00      	ldr	r3, [sp, #0]
 800a850:	2b00      	cmp	r3, #0
 800a852:	db3d      	blt.n	800a8d0 <_dtoa_r+0x248>
 800a854:	9b05      	ldr	r3, [sp, #20]
 800a856:	9a00      	ldr	r2, [sp, #0]
 800a858:	920a      	str	r2, [sp, #40]	; 0x28
 800a85a:	4413      	add	r3, r2
 800a85c:	9305      	str	r3, [sp, #20]
 800a85e:	2300      	movs	r3, #0
 800a860:	9307      	str	r3, [sp, #28]
 800a862:	9b06      	ldr	r3, [sp, #24]
 800a864:	2b09      	cmp	r3, #9
 800a866:	f200 8089 	bhi.w	800a97c <_dtoa_r+0x2f4>
 800a86a:	2b05      	cmp	r3, #5
 800a86c:	bfc4      	itt	gt
 800a86e:	3b04      	subgt	r3, #4
 800a870:	9306      	strgt	r3, [sp, #24]
 800a872:	9b06      	ldr	r3, [sp, #24]
 800a874:	f1a3 0302 	sub.w	r3, r3, #2
 800a878:	bfcc      	ite	gt
 800a87a:	2500      	movgt	r5, #0
 800a87c:	2501      	movle	r5, #1
 800a87e:	2b03      	cmp	r3, #3
 800a880:	f200 8087 	bhi.w	800a992 <_dtoa_r+0x30a>
 800a884:	e8df f003 	tbb	[pc, r3]
 800a888:	59383a2d 	.word	0x59383a2d
 800a88c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a890:	441d      	add	r5, r3
 800a892:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a896:	2b20      	cmp	r3, #32
 800a898:	bfc1      	itttt	gt
 800a89a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a89e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a8a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800a8a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a8aa:	bfda      	itte	le
 800a8ac:	f1c3 0320 	rsble	r3, r3, #32
 800a8b0:	fa06 f003 	lslle.w	r0, r6, r3
 800a8b4:	4318      	orrgt	r0, r3
 800a8b6:	f7f5 fe25 	bl	8000504 <__aeabi_ui2d>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	4606      	mov	r6, r0
 800a8be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a8c2:	3d01      	subs	r5, #1
 800a8c4:	930e      	str	r3, [sp, #56]	; 0x38
 800a8c6:	e76a      	b.n	800a79e <_dtoa_r+0x116>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e7b2      	b.n	800a832 <_dtoa_r+0x1aa>
 800a8cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a8ce:	e7b1      	b.n	800a834 <_dtoa_r+0x1ac>
 800a8d0:	9b04      	ldr	r3, [sp, #16]
 800a8d2:	9a00      	ldr	r2, [sp, #0]
 800a8d4:	1a9b      	subs	r3, r3, r2
 800a8d6:	9304      	str	r3, [sp, #16]
 800a8d8:	4253      	negs	r3, r2
 800a8da:	9307      	str	r3, [sp, #28]
 800a8dc:	2300      	movs	r3, #0
 800a8de:	930a      	str	r3, [sp, #40]	; 0x28
 800a8e0:	e7bf      	b.n	800a862 <_dtoa_r+0x1da>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	9308      	str	r3, [sp, #32]
 800a8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	dc55      	bgt.n	800a998 <_dtoa_r+0x310>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	9209      	str	r2, [sp, #36]	; 0x24
 800a8f6:	e00c      	b.n	800a912 <_dtoa_r+0x28a>
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	e7f3      	b.n	800a8e4 <_dtoa_r+0x25c>
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a900:	9308      	str	r3, [sp, #32]
 800a902:	9b00      	ldr	r3, [sp, #0]
 800a904:	4413      	add	r3, r2
 800a906:	9302      	str	r3, [sp, #8]
 800a908:	3301      	adds	r3, #1
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	9303      	str	r3, [sp, #12]
 800a90e:	bfb8      	it	lt
 800a910:	2301      	movlt	r3, #1
 800a912:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a914:	2200      	movs	r2, #0
 800a916:	6042      	str	r2, [r0, #4]
 800a918:	2204      	movs	r2, #4
 800a91a:	f102 0614 	add.w	r6, r2, #20
 800a91e:	429e      	cmp	r6, r3
 800a920:	6841      	ldr	r1, [r0, #4]
 800a922:	d93d      	bls.n	800a9a0 <_dtoa_r+0x318>
 800a924:	4620      	mov	r0, r4
 800a926:	f000 fca9 	bl	800b27c <_Balloc>
 800a92a:	9001      	str	r0, [sp, #4]
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d13b      	bne.n	800a9a8 <_dtoa_r+0x320>
 800a930:	4b11      	ldr	r3, [pc, #68]	; (800a978 <_dtoa_r+0x2f0>)
 800a932:	4602      	mov	r2, r0
 800a934:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a938:	e6c0      	b.n	800a6bc <_dtoa_r+0x34>
 800a93a:	2301      	movs	r3, #1
 800a93c:	e7df      	b.n	800a8fe <_dtoa_r+0x276>
 800a93e:	bf00      	nop
 800a940:	636f4361 	.word	0x636f4361
 800a944:	3fd287a7 	.word	0x3fd287a7
 800a948:	8b60c8b3 	.word	0x8b60c8b3
 800a94c:	3fc68a28 	.word	0x3fc68a28
 800a950:	509f79fb 	.word	0x509f79fb
 800a954:	3fd34413 	.word	0x3fd34413
 800a958:	0800cfd9 	.word	0x0800cfd9
 800a95c:	0800cff0 	.word	0x0800cff0
 800a960:	7ff00000 	.word	0x7ff00000
 800a964:	0800cfd5 	.word	0x0800cfd5
 800a968:	0800cfcc 	.word	0x0800cfcc
 800a96c:	0800cfa9 	.word	0x0800cfa9
 800a970:	3ff80000 	.word	0x3ff80000
 800a974:	0800d0e0 	.word	0x0800d0e0
 800a978:	0800d04b 	.word	0x0800d04b
 800a97c:	2501      	movs	r5, #1
 800a97e:	2300      	movs	r3, #0
 800a980:	9306      	str	r3, [sp, #24]
 800a982:	9508      	str	r5, [sp, #32]
 800a984:	f04f 33ff 	mov.w	r3, #4294967295
 800a988:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a98c:	2200      	movs	r2, #0
 800a98e:	2312      	movs	r3, #18
 800a990:	e7b0      	b.n	800a8f4 <_dtoa_r+0x26c>
 800a992:	2301      	movs	r3, #1
 800a994:	9308      	str	r3, [sp, #32]
 800a996:	e7f5      	b.n	800a984 <_dtoa_r+0x2fc>
 800a998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a99a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a99e:	e7b8      	b.n	800a912 <_dtoa_r+0x28a>
 800a9a0:	3101      	adds	r1, #1
 800a9a2:	6041      	str	r1, [r0, #4]
 800a9a4:	0052      	lsls	r2, r2, #1
 800a9a6:	e7b8      	b.n	800a91a <_dtoa_r+0x292>
 800a9a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9aa:	9a01      	ldr	r2, [sp, #4]
 800a9ac:	601a      	str	r2, [r3, #0]
 800a9ae:	9b03      	ldr	r3, [sp, #12]
 800a9b0:	2b0e      	cmp	r3, #14
 800a9b2:	f200 809d 	bhi.w	800aaf0 <_dtoa_r+0x468>
 800a9b6:	2d00      	cmp	r5, #0
 800a9b8:	f000 809a 	beq.w	800aaf0 <_dtoa_r+0x468>
 800a9bc:	9b00      	ldr	r3, [sp, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	dd32      	ble.n	800aa28 <_dtoa_r+0x3a0>
 800a9c2:	4ab7      	ldr	r2, [pc, #732]	; (800aca0 <_dtoa_r+0x618>)
 800a9c4:	f003 030f 	and.w	r3, r3, #15
 800a9c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a9cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a9d0:	9b00      	ldr	r3, [sp, #0]
 800a9d2:	05d8      	lsls	r0, r3, #23
 800a9d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a9d8:	d516      	bpl.n	800aa08 <_dtoa_r+0x380>
 800a9da:	4bb2      	ldr	r3, [pc, #712]	; (800aca4 <_dtoa_r+0x61c>)
 800a9dc:	ec51 0b19 	vmov	r0, r1, d9
 800a9e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a9e4:	f7f5 ff32 	bl	800084c <__aeabi_ddiv>
 800a9e8:	f007 070f 	and.w	r7, r7, #15
 800a9ec:	4682      	mov	sl, r0
 800a9ee:	468b      	mov	fp, r1
 800a9f0:	2503      	movs	r5, #3
 800a9f2:	4eac      	ldr	r6, [pc, #688]	; (800aca4 <_dtoa_r+0x61c>)
 800a9f4:	b957      	cbnz	r7, 800aa0c <_dtoa_r+0x384>
 800a9f6:	4642      	mov	r2, r8
 800a9f8:	464b      	mov	r3, r9
 800a9fa:	4650      	mov	r0, sl
 800a9fc:	4659      	mov	r1, fp
 800a9fe:	f7f5 ff25 	bl	800084c <__aeabi_ddiv>
 800aa02:	4682      	mov	sl, r0
 800aa04:	468b      	mov	fp, r1
 800aa06:	e028      	b.n	800aa5a <_dtoa_r+0x3d2>
 800aa08:	2502      	movs	r5, #2
 800aa0a:	e7f2      	b.n	800a9f2 <_dtoa_r+0x36a>
 800aa0c:	07f9      	lsls	r1, r7, #31
 800aa0e:	d508      	bpl.n	800aa22 <_dtoa_r+0x39a>
 800aa10:	4640      	mov	r0, r8
 800aa12:	4649      	mov	r1, r9
 800aa14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa18:	f7f5 fdee 	bl	80005f8 <__aeabi_dmul>
 800aa1c:	3501      	adds	r5, #1
 800aa1e:	4680      	mov	r8, r0
 800aa20:	4689      	mov	r9, r1
 800aa22:	107f      	asrs	r7, r7, #1
 800aa24:	3608      	adds	r6, #8
 800aa26:	e7e5      	b.n	800a9f4 <_dtoa_r+0x36c>
 800aa28:	f000 809b 	beq.w	800ab62 <_dtoa_r+0x4da>
 800aa2c:	9b00      	ldr	r3, [sp, #0]
 800aa2e:	4f9d      	ldr	r7, [pc, #628]	; (800aca4 <_dtoa_r+0x61c>)
 800aa30:	425e      	negs	r6, r3
 800aa32:	4b9b      	ldr	r3, [pc, #620]	; (800aca0 <_dtoa_r+0x618>)
 800aa34:	f006 020f 	and.w	r2, r6, #15
 800aa38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	ec51 0b19 	vmov	r0, r1, d9
 800aa44:	f7f5 fdd8 	bl	80005f8 <__aeabi_dmul>
 800aa48:	1136      	asrs	r6, r6, #4
 800aa4a:	4682      	mov	sl, r0
 800aa4c:	468b      	mov	fp, r1
 800aa4e:	2300      	movs	r3, #0
 800aa50:	2502      	movs	r5, #2
 800aa52:	2e00      	cmp	r6, #0
 800aa54:	d17a      	bne.n	800ab4c <_dtoa_r+0x4c4>
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1d3      	bne.n	800aa02 <_dtoa_r+0x37a>
 800aa5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 8082 	beq.w	800ab66 <_dtoa_r+0x4de>
 800aa62:	4b91      	ldr	r3, [pc, #580]	; (800aca8 <_dtoa_r+0x620>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	4650      	mov	r0, sl
 800aa68:	4659      	mov	r1, fp
 800aa6a:	f7f6 f837 	bl	8000adc <__aeabi_dcmplt>
 800aa6e:	2800      	cmp	r0, #0
 800aa70:	d079      	beq.n	800ab66 <_dtoa_r+0x4de>
 800aa72:	9b03      	ldr	r3, [sp, #12]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d076      	beq.n	800ab66 <_dtoa_r+0x4de>
 800aa78:	9b02      	ldr	r3, [sp, #8]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	dd36      	ble.n	800aaec <_dtoa_r+0x464>
 800aa7e:	9b00      	ldr	r3, [sp, #0]
 800aa80:	4650      	mov	r0, sl
 800aa82:	4659      	mov	r1, fp
 800aa84:	1e5f      	subs	r7, r3, #1
 800aa86:	2200      	movs	r2, #0
 800aa88:	4b88      	ldr	r3, [pc, #544]	; (800acac <_dtoa_r+0x624>)
 800aa8a:	f7f5 fdb5 	bl	80005f8 <__aeabi_dmul>
 800aa8e:	9e02      	ldr	r6, [sp, #8]
 800aa90:	4682      	mov	sl, r0
 800aa92:	468b      	mov	fp, r1
 800aa94:	3501      	adds	r5, #1
 800aa96:	4628      	mov	r0, r5
 800aa98:	f7f5 fd44 	bl	8000524 <__aeabi_i2d>
 800aa9c:	4652      	mov	r2, sl
 800aa9e:	465b      	mov	r3, fp
 800aaa0:	f7f5 fdaa 	bl	80005f8 <__aeabi_dmul>
 800aaa4:	4b82      	ldr	r3, [pc, #520]	; (800acb0 <_dtoa_r+0x628>)
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	f7f5 fbf0 	bl	800028c <__adddf3>
 800aaac:	46d0      	mov	r8, sl
 800aaae:	46d9      	mov	r9, fp
 800aab0:	4682      	mov	sl, r0
 800aab2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aab6:	2e00      	cmp	r6, #0
 800aab8:	d158      	bne.n	800ab6c <_dtoa_r+0x4e4>
 800aaba:	4b7e      	ldr	r3, [pc, #504]	; (800acb4 <_dtoa_r+0x62c>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	4640      	mov	r0, r8
 800aac0:	4649      	mov	r1, r9
 800aac2:	f7f5 fbe1 	bl	8000288 <__aeabi_dsub>
 800aac6:	4652      	mov	r2, sl
 800aac8:	465b      	mov	r3, fp
 800aaca:	4680      	mov	r8, r0
 800aacc:	4689      	mov	r9, r1
 800aace:	f7f6 f823 	bl	8000b18 <__aeabi_dcmpgt>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	f040 8295 	bne.w	800b002 <_dtoa_r+0x97a>
 800aad8:	4652      	mov	r2, sl
 800aada:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aade:	4640      	mov	r0, r8
 800aae0:	4649      	mov	r1, r9
 800aae2:	f7f5 fffb 	bl	8000adc <__aeabi_dcmplt>
 800aae6:	2800      	cmp	r0, #0
 800aae8:	f040 8289 	bne.w	800affe <_dtoa_r+0x976>
 800aaec:	ec5b ab19 	vmov	sl, fp, d9
 800aaf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f2c0 8148 	blt.w	800ad88 <_dtoa_r+0x700>
 800aaf8:	9a00      	ldr	r2, [sp, #0]
 800aafa:	2a0e      	cmp	r2, #14
 800aafc:	f300 8144 	bgt.w	800ad88 <_dtoa_r+0x700>
 800ab00:	4b67      	ldr	r3, [pc, #412]	; (800aca0 <_dtoa_r+0x618>)
 800ab02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab06:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f280 80d5 	bge.w	800acbc <_dtoa_r+0x634>
 800ab12:	9b03      	ldr	r3, [sp, #12]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f300 80d1 	bgt.w	800acbc <_dtoa_r+0x634>
 800ab1a:	f040 826f 	bne.w	800affc <_dtoa_r+0x974>
 800ab1e:	4b65      	ldr	r3, [pc, #404]	; (800acb4 <_dtoa_r+0x62c>)
 800ab20:	2200      	movs	r2, #0
 800ab22:	4640      	mov	r0, r8
 800ab24:	4649      	mov	r1, r9
 800ab26:	f7f5 fd67 	bl	80005f8 <__aeabi_dmul>
 800ab2a:	4652      	mov	r2, sl
 800ab2c:	465b      	mov	r3, fp
 800ab2e:	f7f5 ffe9 	bl	8000b04 <__aeabi_dcmpge>
 800ab32:	9e03      	ldr	r6, [sp, #12]
 800ab34:	4637      	mov	r7, r6
 800ab36:	2800      	cmp	r0, #0
 800ab38:	f040 8245 	bne.w	800afc6 <_dtoa_r+0x93e>
 800ab3c:	9d01      	ldr	r5, [sp, #4]
 800ab3e:	2331      	movs	r3, #49	; 0x31
 800ab40:	f805 3b01 	strb.w	r3, [r5], #1
 800ab44:	9b00      	ldr	r3, [sp, #0]
 800ab46:	3301      	adds	r3, #1
 800ab48:	9300      	str	r3, [sp, #0]
 800ab4a:	e240      	b.n	800afce <_dtoa_r+0x946>
 800ab4c:	07f2      	lsls	r2, r6, #31
 800ab4e:	d505      	bpl.n	800ab5c <_dtoa_r+0x4d4>
 800ab50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab54:	f7f5 fd50 	bl	80005f8 <__aeabi_dmul>
 800ab58:	3501      	adds	r5, #1
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	1076      	asrs	r6, r6, #1
 800ab5e:	3708      	adds	r7, #8
 800ab60:	e777      	b.n	800aa52 <_dtoa_r+0x3ca>
 800ab62:	2502      	movs	r5, #2
 800ab64:	e779      	b.n	800aa5a <_dtoa_r+0x3d2>
 800ab66:	9f00      	ldr	r7, [sp, #0]
 800ab68:	9e03      	ldr	r6, [sp, #12]
 800ab6a:	e794      	b.n	800aa96 <_dtoa_r+0x40e>
 800ab6c:	9901      	ldr	r1, [sp, #4]
 800ab6e:	4b4c      	ldr	r3, [pc, #304]	; (800aca0 <_dtoa_r+0x618>)
 800ab70:	4431      	add	r1, r6
 800ab72:	910d      	str	r1, [sp, #52]	; 0x34
 800ab74:	9908      	ldr	r1, [sp, #32]
 800ab76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ab7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ab7e:	2900      	cmp	r1, #0
 800ab80:	d043      	beq.n	800ac0a <_dtoa_r+0x582>
 800ab82:	494d      	ldr	r1, [pc, #308]	; (800acb8 <_dtoa_r+0x630>)
 800ab84:	2000      	movs	r0, #0
 800ab86:	f7f5 fe61 	bl	800084c <__aeabi_ddiv>
 800ab8a:	4652      	mov	r2, sl
 800ab8c:	465b      	mov	r3, fp
 800ab8e:	f7f5 fb7b 	bl	8000288 <__aeabi_dsub>
 800ab92:	9d01      	ldr	r5, [sp, #4]
 800ab94:	4682      	mov	sl, r0
 800ab96:	468b      	mov	fp, r1
 800ab98:	4649      	mov	r1, r9
 800ab9a:	4640      	mov	r0, r8
 800ab9c:	f7f5 ffdc 	bl	8000b58 <__aeabi_d2iz>
 800aba0:	4606      	mov	r6, r0
 800aba2:	f7f5 fcbf 	bl	8000524 <__aeabi_i2d>
 800aba6:	4602      	mov	r2, r0
 800aba8:	460b      	mov	r3, r1
 800abaa:	4640      	mov	r0, r8
 800abac:	4649      	mov	r1, r9
 800abae:	f7f5 fb6b 	bl	8000288 <__aeabi_dsub>
 800abb2:	3630      	adds	r6, #48	; 0x30
 800abb4:	f805 6b01 	strb.w	r6, [r5], #1
 800abb8:	4652      	mov	r2, sl
 800abba:	465b      	mov	r3, fp
 800abbc:	4680      	mov	r8, r0
 800abbe:	4689      	mov	r9, r1
 800abc0:	f7f5 ff8c 	bl	8000adc <__aeabi_dcmplt>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	d163      	bne.n	800ac90 <_dtoa_r+0x608>
 800abc8:	4642      	mov	r2, r8
 800abca:	464b      	mov	r3, r9
 800abcc:	4936      	ldr	r1, [pc, #216]	; (800aca8 <_dtoa_r+0x620>)
 800abce:	2000      	movs	r0, #0
 800abd0:	f7f5 fb5a 	bl	8000288 <__aeabi_dsub>
 800abd4:	4652      	mov	r2, sl
 800abd6:	465b      	mov	r3, fp
 800abd8:	f7f5 ff80 	bl	8000adc <__aeabi_dcmplt>
 800abdc:	2800      	cmp	r0, #0
 800abde:	f040 80b5 	bne.w	800ad4c <_dtoa_r+0x6c4>
 800abe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abe4:	429d      	cmp	r5, r3
 800abe6:	d081      	beq.n	800aaec <_dtoa_r+0x464>
 800abe8:	4b30      	ldr	r3, [pc, #192]	; (800acac <_dtoa_r+0x624>)
 800abea:	2200      	movs	r2, #0
 800abec:	4650      	mov	r0, sl
 800abee:	4659      	mov	r1, fp
 800abf0:	f7f5 fd02 	bl	80005f8 <__aeabi_dmul>
 800abf4:	4b2d      	ldr	r3, [pc, #180]	; (800acac <_dtoa_r+0x624>)
 800abf6:	4682      	mov	sl, r0
 800abf8:	468b      	mov	fp, r1
 800abfa:	4640      	mov	r0, r8
 800abfc:	4649      	mov	r1, r9
 800abfe:	2200      	movs	r2, #0
 800ac00:	f7f5 fcfa 	bl	80005f8 <__aeabi_dmul>
 800ac04:	4680      	mov	r8, r0
 800ac06:	4689      	mov	r9, r1
 800ac08:	e7c6      	b.n	800ab98 <_dtoa_r+0x510>
 800ac0a:	4650      	mov	r0, sl
 800ac0c:	4659      	mov	r1, fp
 800ac0e:	f7f5 fcf3 	bl	80005f8 <__aeabi_dmul>
 800ac12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac14:	9d01      	ldr	r5, [sp, #4]
 800ac16:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac18:	4682      	mov	sl, r0
 800ac1a:	468b      	mov	fp, r1
 800ac1c:	4649      	mov	r1, r9
 800ac1e:	4640      	mov	r0, r8
 800ac20:	f7f5 ff9a 	bl	8000b58 <__aeabi_d2iz>
 800ac24:	4606      	mov	r6, r0
 800ac26:	f7f5 fc7d 	bl	8000524 <__aeabi_i2d>
 800ac2a:	3630      	adds	r6, #48	; 0x30
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4640      	mov	r0, r8
 800ac32:	4649      	mov	r1, r9
 800ac34:	f7f5 fb28 	bl	8000288 <__aeabi_dsub>
 800ac38:	f805 6b01 	strb.w	r6, [r5], #1
 800ac3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac3e:	429d      	cmp	r5, r3
 800ac40:	4680      	mov	r8, r0
 800ac42:	4689      	mov	r9, r1
 800ac44:	f04f 0200 	mov.w	r2, #0
 800ac48:	d124      	bne.n	800ac94 <_dtoa_r+0x60c>
 800ac4a:	4b1b      	ldr	r3, [pc, #108]	; (800acb8 <_dtoa_r+0x630>)
 800ac4c:	4650      	mov	r0, sl
 800ac4e:	4659      	mov	r1, fp
 800ac50:	f7f5 fb1c 	bl	800028c <__adddf3>
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	4640      	mov	r0, r8
 800ac5a:	4649      	mov	r1, r9
 800ac5c:	f7f5 ff5c 	bl	8000b18 <__aeabi_dcmpgt>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d173      	bne.n	800ad4c <_dtoa_r+0x6c4>
 800ac64:	4652      	mov	r2, sl
 800ac66:	465b      	mov	r3, fp
 800ac68:	4913      	ldr	r1, [pc, #76]	; (800acb8 <_dtoa_r+0x630>)
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	f7f5 fb0c 	bl	8000288 <__aeabi_dsub>
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	4640      	mov	r0, r8
 800ac76:	4649      	mov	r1, r9
 800ac78:	f7f5 ff30 	bl	8000adc <__aeabi_dcmplt>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	f43f af35 	beq.w	800aaec <_dtoa_r+0x464>
 800ac82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ac84:	1e6b      	subs	r3, r5, #1
 800ac86:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ac8c:	2b30      	cmp	r3, #48	; 0x30
 800ac8e:	d0f8      	beq.n	800ac82 <_dtoa_r+0x5fa>
 800ac90:	9700      	str	r7, [sp, #0]
 800ac92:	e049      	b.n	800ad28 <_dtoa_r+0x6a0>
 800ac94:	4b05      	ldr	r3, [pc, #20]	; (800acac <_dtoa_r+0x624>)
 800ac96:	f7f5 fcaf 	bl	80005f8 <__aeabi_dmul>
 800ac9a:	4680      	mov	r8, r0
 800ac9c:	4689      	mov	r9, r1
 800ac9e:	e7bd      	b.n	800ac1c <_dtoa_r+0x594>
 800aca0:	0800d0e0 	.word	0x0800d0e0
 800aca4:	0800d0b8 	.word	0x0800d0b8
 800aca8:	3ff00000 	.word	0x3ff00000
 800acac:	40240000 	.word	0x40240000
 800acb0:	401c0000 	.word	0x401c0000
 800acb4:	40140000 	.word	0x40140000
 800acb8:	3fe00000 	.word	0x3fe00000
 800acbc:	9d01      	ldr	r5, [sp, #4]
 800acbe:	4656      	mov	r6, sl
 800acc0:	465f      	mov	r7, fp
 800acc2:	4642      	mov	r2, r8
 800acc4:	464b      	mov	r3, r9
 800acc6:	4630      	mov	r0, r6
 800acc8:	4639      	mov	r1, r7
 800acca:	f7f5 fdbf 	bl	800084c <__aeabi_ddiv>
 800acce:	f7f5 ff43 	bl	8000b58 <__aeabi_d2iz>
 800acd2:	4682      	mov	sl, r0
 800acd4:	f7f5 fc26 	bl	8000524 <__aeabi_i2d>
 800acd8:	4642      	mov	r2, r8
 800acda:	464b      	mov	r3, r9
 800acdc:	f7f5 fc8c 	bl	80005f8 <__aeabi_dmul>
 800ace0:	4602      	mov	r2, r0
 800ace2:	460b      	mov	r3, r1
 800ace4:	4630      	mov	r0, r6
 800ace6:	4639      	mov	r1, r7
 800ace8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800acec:	f7f5 facc 	bl	8000288 <__aeabi_dsub>
 800acf0:	f805 6b01 	strb.w	r6, [r5], #1
 800acf4:	9e01      	ldr	r6, [sp, #4]
 800acf6:	9f03      	ldr	r7, [sp, #12]
 800acf8:	1bae      	subs	r6, r5, r6
 800acfa:	42b7      	cmp	r7, r6
 800acfc:	4602      	mov	r2, r0
 800acfe:	460b      	mov	r3, r1
 800ad00:	d135      	bne.n	800ad6e <_dtoa_r+0x6e6>
 800ad02:	f7f5 fac3 	bl	800028c <__adddf3>
 800ad06:	4642      	mov	r2, r8
 800ad08:	464b      	mov	r3, r9
 800ad0a:	4606      	mov	r6, r0
 800ad0c:	460f      	mov	r7, r1
 800ad0e:	f7f5 ff03 	bl	8000b18 <__aeabi_dcmpgt>
 800ad12:	b9d0      	cbnz	r0, 800ad4a <_dtoa_r+0x6c2>
 800ad14:	4642      	mov	r2, r8
 800ad16:	464b      	mov	r3, r9
 800ad18:	4630      	mov	r0, r6
 800ad1a:	4639      	mov	r1, r7
 800ad1c:	f7f5 fed4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad20:	b110      	cbz	r0, 800ad28 <_dtoa_r+0x6a0>
 800ad22:	f01a 0f01 	tst.w	sl, #1
 800ad26:	d110      	bne.n	800ad4a <_dtoa_r+0x6c2>
 800ad28:	4620      	mov	r0, r4
 800ad2a:	ee18 1a10 	vmov	r1, s16
 800ad2e:	f000 fae5 	bl	800b2fc <_Bfree>
 800ad32:	2300      	movs	r3, #0
 800ad34:	9800      	ldr	r0, [sp, #0]
 800ad36:	702b      	strb	r3, [r5, #0]
 800ad38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad3a:	3001      	adds	r0, #1
 800ad3c:	6018      	str	r0, [r3, #0]
 800ad3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	f43f acf1 	beq.w	800a728 <_dtoa_r+0xa0>
 800ad46:	601d      	str	r5, [r3, #0]
 800ad48:	e4ee      	b.n	800a728 <_dtoa_r+0xa0>
 800ad4a:	9f00      	ldr	r7, [sp, #0]
 800ad4c:	462b      	mov	r3, r5
 800ad4e:	461d      	mov	r5, r3
 800ad50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad54:	2a39      	cmp	r2, #57	; 0x39
 800ad56:	d106      	bne.n	800ad66 <_dtoa_r+0x6de>
 800ad58:	9a01      	ldr	r2, [sp, #4]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d1f7      	bne.n	800ad4e <_dtoa_r+0x6c6>
 800ad5e:	9901      	ldr	r1, [sp, #4]
 800ad60:	2230      	movs	r2, #48	; 0x30
 800ad62:	3701      	adds	r7, #1
 800ad64:	700a      	strb	r2, [r1, #0]
 800ad66:	781a      	ldrb	r2, [r3, #0]
 800ad68:	3201      	adds	r2, #1
 800ad6a:	701a      	strb	r2, [r3, #0]
 800ad6c:	e790      	b.n	800ac90 <_dtoa_r+0x608>
 800ad6e:	4ba6      	ldr	r3, [pc, #664]	; (800b008 <_dtoa_r+0x980>)
 800ad70:	2200      	movs	r2, #0
 800ad72:	f7f5 fc41 	bl	80005f8 <__aeabi_dmul>
 800ad76:	2200      	movs	r2, #0
 800ad78:	2300      	movs	r3, #0
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	460f      	mov	r7, r1
 800ad7e:	f7f5 fea3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad82:	2800      	cmp	r0, #0
 800ad84:	d09d      	beq.n	800acc2 <_dtoa_r+0x63a>
 800ad86:	e7cf      	b.n	800ad28 <_dtoa_r+0x6a0>
 800ad88:	9a08      	ldr	r2, [sp, #32]
 800ad8a:	2a00      	cmp	r2, #0
 800ad8c:	f000 80d7 	beq.w	800af3e <_dtoa_r+0x8b6>
 800ad90:	9a06      	ldr	r2, [sp, #24]
 800ad92:	2a01      	cmp	r2, #1
 800ad94:	f300 80ba 	bgt.w	800af0c <_dtoa_r+0x884>
 800ad98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad9a:	2a00      	cmp	r2, #0
 800ad9c:	f000 80b2 	beq.w	800af04 <_dtoa_r+0x87c>
 800ada0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ada4:	9e07      	ldr	r6, [sp, #28]
 800ada6:	9d04      	ldr	r5, [sp, #16]
 800ada8:	9a04      	ldr	r2, [sp, #16]
 800adaa:	441a      	add	r2, r3
 800adac:	9204      	str	r2, [sp, #16]
 800adae:	9a05      	ldr	r2, [sp, #20]
 800adb0:	2101      	movs	r1, #1
 800adb2:	441a      	add	r2, r3
 800adb4:	4620      	mov	r0, r4
 800adb6:	9205      	str	r2, [sp, #20]
 800adb8:	f000 fb58 	bl	800b46c <__i2b>
 800adbc:	4607      	mov	r7, r0
 800adbe:	2d00      	cmp	r5, #0
 800adc0:	dd0c      	ble.n	800addc <_dtoa_r+0x754>
 800adc2:	9b05      	ldr	r3, [sp, #20]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	dd09      	ble.n	800addc <_dtoa_r+0x754>
 800adc8:	42ab      	cmp	r3, r5
 800adca:	9a04      	ldr	r2, [sp, #16]
 800adcc:	bfa8      	it	ge
 800adce:	462b      	movge	r3, r5
 800add0:	1ad2      	subs	r2, r2, r3
 800add2:	9204      	str	r2, [sp, #16]
 800add4:	9a05      	ldr	r2, [sp, #20]
 800add6:	1aed      	subs	r5, r5, r3
 800add8:	1ad3      	subs	r3, r2, r3
 800adda:	9305      	str	r3, [sp, #20]
 800addc:	9b07      	ldr	r3, [sp, #28]
 800adde:	b31b      	cbz	r3, 800ae28 <_dtoa_r+0x7a0>
 800ade0:	9b08      	ldr	r3, [sp, #32]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f000 80af 	beq.w	800af46 <_dtoa_r+0x8be>
 800ade8:	2e00      	cmp	r6, #0
 800adea:	dd13      	ble.n	800ae14 <_dtoa_r+0x78c>
 800adec:	4639      	mov	r1, r7
 800adee:	4632      	mov	r2, r6
 800adf0:	4620      	mov	r0, r4
 800adf2:	f000 fbfb 	bl	800b5ec <__pow5mult>
 800adf6:	ee18 2a10 	vmov	r2, s16
 800adfa:	4601      	mov	r1, r0
 800adfc:	4607      	mov	r7, r0
 800adfe:	4620      	mov	r0, r4
 800ae00:	f000 fb4a 	bl	800b498 <__multiply>
 800ae04:	ee18 1a10 	vmov	r1, s16
 800ae08:	4680      	mov	r8, r0
 800ae0a:	4620      	mov	r0, r4
 800ae0c:	f000 fa76 	bl	800b2fc <_Bfree>
 800ae10:	ee08 8a10 	vmov	s16, r8
 800ae14:	9b07      	ldr	r3, [sp, #28]
 800ae16:	1b9a      	subs	r2, r3, r6
 800ae18:	d006      	beq.n	800ae28 <_dtoa_r+0x7a0>
 800ae1a:	ee18 1a10 	vmov	r1, s16
 800ae1e:	4620      	mov	r0, r4
 800ae20:	f000 fbe4 	bl	800b5ec <__pow5mult>
 800ae24:	ee08 0a10 	vmov	s16, r0
 800ae28:	2101      	movs	r1, #1
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f000 fb1e 	bl	800b46c <__i2b>
 800ae30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	4606      	mov	r6, r0
 800ae36:	f340 8088 	ble.w	800af4a <_dtoa_r+0x8c2>
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	4601      	mov	r1, r0
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f000 fbd4 	bl	800b5ec <__pow5mult>
 800ae44:	9b06      	ldr	r3, [sp, #24]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	4606      	mov	r6, r0
 800ae4a:	f340 8081 	ble.w	800af50 <_dtoa_r+0x8c8>
 800ae4e:	f04f 0800 	mov.w	r8, #0
 800ae52:	6933      	ldr	r3, [r6, #16]
 800ae54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ae58:	6918      	ldr	r0, [r3, #16]
 800ae5a:	f000 fab7 	bl	800b3cc <__hi0bits>
 800ae5e:	f1c0 0020 	rsb	r0, r0, #32
 800ae62:	9b05      	ldr	r3, [sp, #20]
 800ae64:	4418      	add	r0, r3
 800ae66:	f010 001f 	ands.w	r0, r0, #31
 800ae6a:	f000 8092 	beq.w	800af92 <_dtoa_r+0x90a>
 800ae6e:	f1c0 0320 	rsb	r3, r0, #32
 800ae72:	2b04      	cmp	r3, #4
 800ae74:	f340 808a 	ble.w	800af8c <_dtoa_r+0x904>
 800ae78:	f1c0 001c 	rsb	r0, r0, #28
 800ae7c:	9b04      	ldr	r3, [sp, #16]
 800ae7e:	4403      	add	r3, r0
 800ae80:	9304      	str	r3, [sp, #16]
 800ae82:	9b05      	ldr	r3, [sp, #20]
 800ae84:	4403      	add	r3, r0
 800ae86:	4405      	add	r5, r0
 800ae88:	9305      	str	r3, [sp, #20]
 800ae8a:	9b04      	ldr	r3, [sp, #16]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	dd07      	ble.n	800aea0 <_dtoa_r+0x818>
 800ae90:	ee18 1a10 	vmov	r1, s16
 800ae94:	461a      	mov	r2, r3
 800ae96:	4620      	mov	r0, r4
 800ae98:	f000 fc02 	bl	800b6a0 <__lshift>
 800ae9c:	ee08 0a10 	vmov	s16, r0
 800aea0:	9b05      	ldr	r3, [sp, #20]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	dd05      	ble.n	800aeb2 <_dtoa_r+0x82a>
 800aea6:	4631      	mov	r1, r6
 800aea8:	461a      	mov	r2, r3
 800aeaa:	4620      	mov	r0, r4
 800aeac:	f000 fbf8 	bl	800b6a0 <__lshift>
 800aeb0:	4606      	mov	r6, r0
 800aeb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d06e      	beq.n	800af96 <_dtoa_r+0x90e>
 800aeb8:	ee18 0a10 	vmov	r0, s16
 800aebc:	4631      	mov	r1, r6
 800aebe:	f000 fc5f 	bl	800b780 <__mcmp>
 800aec2:	2800      	cmp	r0, #0
 800aec4:	da67      	bge.n	800af96 <_dtoa_r+0x90e>
 800aec6:	9b00      	ldr	r3, [sp, #0]
 800aec8:	3b01      	subs	r3, #1
 800aeca:	ee18 1a10 	vmov	r1, s16
 800aece:	9300      	str	r3, [sp, #0]
 800aed0:	220a      	movs	r2, #10
 800aed2:	2300      	movs	r3, #0
 800aed4:	4620      	mov	r0, r4
 800aed6:	f000 fa33 	bl	800b340 <__multadd>
 800aeda:	9b08      	ldr	r3, [sp, #32]
 800aedc:	ee08 0a10 	vmov	s16, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f000 81b1 	beq.w	800b248 <_dtoa_r+0xbc0>
 800aee6:	2300      	movs	r3, #0
 800aee8:	4639      	mov	r1, r7
 800aeea:	220a      	movs	r2, #10
 800aeec:	4620      	mov	r0, r4
 800aeee:	f000 fa27 	bl	800b340 <__multadd>
 800aef2:	9b02      	ldr	r3, [sp, #8]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	4607      	mov	r7, r0
 800aef8:	f300 808e 	bgt.w	800b018 <_dtoa_r+0x990>
 800aefc:	9b06      	ldr	r3, [sp, #24]
 800aefe:	2b02      	cmp	r3, #2
 800af00:	dc51      	bgt.n	800afa6 <_dtoa_r+0x91e>
 800af02:	e089      	b.n	800b018 <_dtoa_r+0x990>
 800af04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af0a:	e74b      	b.n	800ada4 <_dtoa_r+0x71c>
 800af0c:	9b03      	ldr	r3, [sp, #12]
 800af0e:	1e5e      	subs	r6, r3, #1
 800af10:	9b07      	ldr	r3, [sp, #28]
 800af12:	42b3      	cmp	r3, r6
 800af14:	bfbf      	itttt	lt
 800af16:	9b07      	ldrlt	r3, [sp, #28]
 800af18:	9607      	strlt	r6, [sp, #28]
 800af1a:	1af2      	sublt	r2, r6, r3
 800af1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800af1e:	bfb6      	itet	lt
 800af20:	189b      	addlt	r3, r3, r2
 800af22:	1b9e      	subge	r6, r3, r6
 800af24:	930a      	strlt	r3, [sp, #40]	; 0x28
 800af26:	9b03      	ldr	r3, [sp, #12]
 800af28:	bfb8      	it	lt
 800af2a:	2600      	movlt	r6, #0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	bfb7      	itett	lt
 800af30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800af34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800af38:	1a9d      	sublt	r5, r3, r2
 800af3a:	2300      	movlt	r3, #0
 800af3c:	e734      	b.n	800ada8 <_dtoa_r+0x720>
 800af3e:	9e07      	ldr	r6, [sp, #28]
 800af40:	9d04      	ldr	r5, [sp, #16]
 800af42:	9f08      	ldr	r7, [sp, #32]
 800af44:	e73b      	b.n	800adbe <_dtoa_r+0x736>
 800af46:	9a07      	ldr	r2, [sp, #28]
 800af48:	e767      	b.n	800ae1a <_dtoa_r+0x792>
 800af4a:	9b06      	ldr	r3, [sp, #24]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	dc18      	bgt.n	800af82 <_dtoa_r+0x8fa>
 800af50:	f1ba 0f00 	cmp.w	sl, #0
 800af54:	d115      	bne.n	800af82 <_dtoa_r+0x8fa>
 800af56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af5a:	b993      	cbnz	r3, 800af82 <_dtoa_r+0x8fa>
 800af5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800af60:	0d1b      	lsrs	r3, r3, #20
 800af62:	051b      	lsls	r3, r3, #20
 800af64:	b183      	cbz	r3, 800af88 <_dtoa_r+0x900>
 800af66:	9b04      	ldr	r3, [sp, #16]
 800af68:	3301      	adds	r3, #1
 800af6a:	9304      	str	r3, [sp, #16]
 800af6c:	9b05      	ldr	r3, [sp, #20]
 800af6e:	3301      	adds	r3, #1
 800af70:	9305      	str	r3, [sp, #20]
 800af72:	f04f 0801 	mov.w	r8, #1
 800af76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af78:	2b00      	cmp	r3, #0
 800af7a:	f47f af6a 	bne.w	800ae52 <_dtoa_r+0x7ca>
 800af7e:	2001      	movs	r0, #1
 800af80:	e76f      	b.n	800ae62 <_dtoa_r+0x7da>
 800af82:	f04f 0800 	mov.w	r8, #0
 800af86:	e7f6      	b.n	800af76 <_dtoa_r+0x8ee>
 800af88:	4698      	mov	r8, r3
 800af8a:	e7f4      	b.n	800af76 <_dtoa_r+0x8ee>
 800af8c:	f43f af7d 	beq.w	800ae8a <_dtoa_r+0x802>
 800af90:	4618      	mov	r0, r3
 800af92:	301c      	adds	r0, #28
 800af94:	e772      	b.n	800ae7c <_dtoa_r+0x7f4>
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	dc37      	bgt.n	800b00c <_dtoa_r+0x984>
 800af9c:	9b06      	ldr	r3, [sp, #24]
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	dd34      	ble.n	800b00c <_dtoa_r+0x984>
 800afa2:	9b03      	ldr	r3, [sp, #12]
 800afa4:	9302      	str	r3, [sp, #8]
 800afa6:	9b02      	ldr	r3, [sp, #8]
 800afa8:	b96b      	cbnz	r3, 800afc6 <_dtoa_r+0x93e>
 800afaa:	4631      	mov	r1, r6
 800afac:	2205      	movs	r2, #5
 800afae:	4620      	mov	r0, r4
 800afb0:	f000 f9c6 	bl	800b340 <__multadd>
 800afb4:	4601      	mov	r1, r0
 800afb6:	4606      	mov	r6, r0
 800afb8:	ee18 0a10 	vmov	r0, s16
 800afbc:	f000 fbe0 	bl	800b780 <__mcmp>
 800afc0:	2800      	cmp	r0, #0
 800afc2:	f73f adbb 	bgt.w	800ab3c <_dtoa_r+0x4b4>
 800afc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afc8:	9d01      	ldr	r5, [sp, #4]
 800afca:	43db      	mvns	r3, r3
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	f04f 0800 	mov.w	r8, #0
 800afd2:	4631      	mov	r1, r6
 800afd4:	4620      	mov	r0, r4
 800afd6:	f000 f991 	bl	800b2fc <_Bfree>
 800afda:	2f00      	cmp	r7, #0
 800afdc:	f43f aea4 	beq.w	800ad28 <_dtoa_r+0x6a0>
 800afe0:	f1b8 0f00 	cmp.w	r8, #0
 800afe4:	d005      	beq.n	800aff2 <_dtoa_r+0x96a>
 800afe6:	45b8      	cmp	r8, r7
 800afe8:	d003      	beq.n	800aff2 <_dtoa_r+0x96a>
 800afea:	4641      	mov	r1, r8
 800afec:	4620      	mov	r0, r4
 800afee:	f000 f985 	bl	800b2fc <_Bfree>
 800aff2:	4639      	mov	r1, r7
 800aff4:	4620      	mov	r0, r4
 800aff6:	f000 f981 	bl	800b2fc <_Bfree>
 800affa:	e695      	b.n	800ad28 <_dtoa_r+0x6a0>
 800affc:	2600      	movs	r6, #0
 800affe:	4637      	mov	r7, r6
 800b000:	e7e1      	b.n	800afc6 <_dtoa_r+0x93e>
 800b002:	9700      	str	r7, [sp, #0]
 800b004:	4637      	mov	r7, r6
 800b006:	e599      	b.n	800ab3c <_dtoa_r+0x4b4>
 800b008:	40240000 	.word	0x40240000
 800b00c:	9b08      	ldr	r3, [sp, #32]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f000 80ca 	beq.w	800b1a8 <_dtoa_r+0xb20>
 800b014:	9b03      	ldr	r3, [sp, #12]
 800b016:	9302      	str	r3, [sp, #8]
 800b018:	2d00      	cmp	r5, #0
 800b01a:	dd05      	ble.n	800b028 <_dtoa_r+0x9a0>
 800b01c:	4639      	mov	r1, r7
 800b01e:	462a      	mov	r2, r5
 800b020:	4620      	mov	r0, r4
 800b022:	f000 fb3d 	bl	800b6a0 <__lshift>
 800b026:	4607      	mov	r7, r0
 800b028:	f1b8 0f00 	cmp.w	r8, #0
 800b02c:	d05b      	beq.n	800b0e6 <_dtoa_r+0xa5e>
 800b02e:	6879      	ldr	r1, [r7, #4]
 800b030:	4620      	mov	r0, r4
 800b032:	f000 f923 	bl	800b27c <_Balloc>
 800b036:	4605      	mov	r5, r0
 800b038:	b928      	cbnz	r0, 800b046 <_dtoa_r+0x9be>
 800b03a:	4b87      	ldr	r3, [pc, #540]	; (800b258 <_dtoa_r+0xbd0>)
 800b03c:	4602      	mov	r2, r0
 800b03e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b042:	f7ff bb3b 	b.w	800a6bc <_dtoa_r+0x34>
 800b046:	693a      	ldr	r2, [r7, #16]
 800b048:	3202      	adds	r2, #2
 800b04a:	0092      	lsls	r2, r2, #2
 800b04c:	f107 010c 	add.w	r1, r7, #12
 800b050:	300c      	adds	r0, #12
 800b052:	f7fe fe0b 	bl	8009c6c <memcpy>
 800b056:	2201      	movs	r2, #1
 800b058:	4629      	mov	r1, r5
 800b05a:	4620      	mov	r0, r4
 800b05c:	f000 fb20 	bl	800b6a0 <__lshift>
 800b060:	9b01      	ldr	r3, [sp, #4]
 800b062:	f103 0901 	add.w	r9, r3, #1
 800b066:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b06a:	4413      	add	r3, r2
 800b06c:	9305      	str	r3, [sp, #20]
 800b06e:	f00a 0301 	and.w	r3, sl, #1
 800b072:	46b8      	mov	r8, r7
 800b074:	9304      	str	r3, [sp, #16]
 800b076:	4607      	mov	r7, r0
 800b078:	4631      	mov	r1, r6
 800b07a:	ee18 0a10 	vmov	r0, s16
 800b07e:	f7ff fa75 	bl	800a56c <quorem>
 800b082:	4641      	mov	r1, r8
 800b084:	9002      	str	r0, [sp, #8]
 800b086:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b08a:	ee18 0a10 	vmov	r0, s16
 800b08e:	f000 fb77 	bl	800b780 <__mcmp>
 800b092:	463a      	mov	r2, r7
 800b094:	9003      	str	r0, [sp, #12]
 800b096:	4631      	mov	r1, r6
 800b098:	4620      	mov	r0, r4
 800b09a:	f000 fb8d 	bl	800b7b8 <__mdiff>
 800b09e:	68c2      	ldr	r2, [r0, #12]
 800b0a0:	f109 3bff 	add.w	fp, r9, #4294967295
 800b0a4:	4605      	mov	r5, r0
 800b0a6:	bb02      	cbnz	r2, 800b0ea <_dtoa_r+0xa62>
 800b0a8:	4601      	mov	r1, r0
 800b0aa:	ee18 0a10 	vmov	r0, s16
 800b0ae:	f000 fb67 	bl	800b780 <__mcmp>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	4629      	mov	r1, r5
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	9207      	str	r2, [sp, #28]
 800b0ba:	f000 f91f 	bl	800b2fc <_Bfree>
 800b0be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b0c2:	ea43 0102 	orr.w	r1, r3, r2
 800b0c6:	9b04      	ldr	r3, [sp, #16]
 800b0c8:	430b      	orrs	r3, r1
 800b0ca:	464d      	mov	r5, r9
 800b0cc:	d10f      	bne.n	800b0ee <_dtoa_r+0xa66>
 800b0ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b0d2:	d02a      	beq.n	800b12a <_dtoa_r+0xaa2>
 800b0d4:	9b03      	ldr	r3, [sp, #12]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	dd02      	ble.n	800b0e0 <_dtoa_r+0xa58>
 800b0da:	9b02      	ldr	r3, [sp, #8]
 800b0dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b0e0:	f88b a000 	strb.w	sl, [fp]
 800b0e4:	e775      	b.n	800afd2 <_dtoa_r+0x94a>
 800b0e6:	4638      	mov	r0, r7
 800b0e8:	e7ba      	b.n	800b060 <_dtoa_r+0x9d8>
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	e7e2      	b.n	800b0b4 <_dtoa_r+0xa2c>
 800b0ee:	9b03      	ldr	r3, [sp, #12]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	db04      	blt.n	800b0fe <_dtoa_r+0xa76>
 800b0f4:	9906      	ldr	r1, [sp, #24]
 800b0f6:	430b      	orrs	r3, r1
 800b0f8:	9904      	ldr	r1, [sp, #16]
 800b0fa:	430b      	orrs	r3, r1
 800b0fc:	d122      	bne.n	800b144 <_dtoa_r+0xabc>
 800b0fe:	2a00      	cmp	r2, #0
 800b100:	ddee      	ble.n	800b0e0 <_dtoa_r+0xa58>
 800b102:	ee18 1a10 	vmov	r1, s16
 800b106:	2201      	movs	r2, #1
 800b108:	4620      	mov	r0, r4
 800b10a:	f000 fac9 	bl	800b6a0 <__lshift>
 800b10e:	4631      	mov	r1, r6
 800b110:	ee08 0a10 	vmov	s16, r0
 800b114:	f000 fb34 	bl	800b780 <__mcmp>
 800b118:	2800      	cmp	r0, #0
 800b11a:	dc03      	bgt.n	800b124 <_dtoa_r+0xa9c>
 800b11c:	d1e0      	bne.n	800b0e0 <_dtoa_r+0xa58>
 800b11e:	f01a 0f01 	tst.w	sl, #1
 800b122:	d0dd      	beq.n	800b0e0 <_dtoa_r+0xa58>
 800b124:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b128:	d1d7      	bne.n	800b0da <_dtoa_r+0xa52>
 800b12a:	2339      	movs	r3, #57	; 0x39
 800b12c:	f88b 3000 	strb.w	r3, [fp]
 800b130:	462b      	mov	r3, r5
 800b132:	461d      	mov	r5, r3
 800b134:	3b01      	subs	r3, #1
 800b136:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b13a:	2a39      	cmp	r2, #57	; 0x39
 800b13c:	d071      	beq.n	800b222 <_dtoa_r+0xb9a>
 800b13e:	3201      	adds	r2, #1
 800b140:	701a      	strb	r2, [r3, #0]
 800b142:	e746      	b.n	800afd2 <_dtoa_r+0x94a>
 800b144:	2a00      	cmp	r2, #0
 800b146:	dd07      	ble.n	800b158 <_dtoa_r+0xad0>
 800b148:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b14c:	d0ed      	beq.n	800b12a <_dtoa_r+0xaa2>
 800b14e:	f10a 0301 	add.w	r3, sl, #1
 800b152:	f88b 3000 	strb.w	r3, [fp]
 800b156:	e73c      	b.n	800afd2 <_dtoa_r+0x94a>
 800b158:	9b05      	ldr	r3, [sp, #20]
 800b15a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b15e:	4599      	cmp	r9, r3
 800b160:	d047      	beq.n	800b1f2 <_dtoa_r+0xb6a>
 800b162:	ee18 1a10 	vmov	r1, s16
 800b166:	2300      	movs	r3, #0
 800b168:	220a      	movs	r2, #10
 800b16a:	4620      	mov	r0, r4
 800b16c:	f000 f8e8 	bl	800b340 <__multadd>
 800b170:	45b8      	cmp	r8, r7
 800b172:	ee08 0a10 	vmov	s16, r0
 800b176:	f04f 0300 	mov.w	r3, #0
 800b17a:	f04f 020a 	mov.w	r2, #10
 800b17e:	4641      	mov	r1, r8
 800b180:	4620      	mov	r0, r4
 800b182:	d106      	bne.n	800b192 <_dtoa_r+0xb0a>
 800b184:	f000 f8dc 	bl	800b340 <__multadd>
 800b188:	4680      	mov	r8, r0
 800b18a:	4607      	mov	r7, r0
 800b18c:	f109 0901 	add.w	r9, r9, #1
 800b190:	e772      	b.n	800b078 <_dtoa_r+0x9f0>
 800b192:	f000 f8d5 	bl	800b340 <__multadd>
 800b196:	4639      	mov	r1, r7
 800b198:	4680      	mov	r8, r0
 800b19a:	2300      	movs	r3, #0
 800b19c:	220a      	movs	r2, #10
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f000 f8ce 	bl	800b340 <__multadd>
 800b1a4:	4607      	mov	r7, r0
 800b1a6:	e7f1      	b.n	800b18c <_dtoa_r+0xb04>
 800b1a8:	9b03      	ldr	r3, [sp, #12]
 800b1aa:	9302      	str	r3, [sp, #8]
 800b1ac:	9d01      	ldr	r5, [sp, #4]
 800b1ae:	ee18 0a10 	vmov	r0, s16
 800b1b2:	4631      	mov	r1, r6
 800b1b4:	f7ff f9da 	bl	800a56c <quorem>
 800b1b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b1bc:	9b01      	ldr	r3, [sp, #4]
 800b1be:	f805 ab01 	strb.w	sl, [r5], #1
 800b1c2:	1aea      	subs	r2, r5, r3
 800b1c4:	9b02      	ldr	r3, [sp, #8]
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	dd09      	ble.n	800b1de <_dtoa_r+0xb56>
 800b1ca:	ee18 1a10 	vmov	r1, s16
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	220a      	movs	r2, #10
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f000 f8b4 	bl	800b340 <__multadd>
 800b1d8:	ee08 0a10 	vmov	s16, r0
 800b1dc:	e7e7      	b.n	800b1ae <_dtoa_r+0xb26>
 800b1de:	9b02      	ldr	r3, [sp, #8]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	bfc8      	it	gt
 800b1e4:	461d      	movgt	r5, r3
 800b1e6:	9b01      	ldr	r3, [sp, #4]
 800b1e8:	bfd8      	it	le
 800b1ea:	2501      	movle	r5, #1
 800b1ec:	441d      	add	r5, r3
 800b1ee:	f04f 0800 	mov.w	r8, #0
 800b1f2:	ee18 1a10 	vmov	r1, s16
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	f000 fa51 	bl	800b6a0 <__lshift>
 800b1fe:	4631      	mov	r1, r6
 800b200:	ee08 0a10 	vmov	s16, r0
 800b204:	f000 fabc 	bl	800b780 <__mcmp>
 800b208:	2800      	cmp	r0, #0
 800b20a:	dc91      	bgt.n	800b130 <_dtoa_r+0xaa8>
 800b20c:	d102      	bne.n	800b214 <_dtoa_r+0xb8c>
 800b20e:	f01a 0f01 	tst.w	sl, #1
 800b212:	d18d      	bne.n	800b130 <_dtoa_r+0xaa8>
 800b214:	462b      	mov	r3, r5
 800b216:	461d      	mov	r5, r3
 800b218:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b21c:	2a30      	cmp	r2, #48	; 0x30
 800b21e:	d0fa      	beq.n	800b216 <_dtoa_r+0xb8e>
 800b220:	e6d7      	b.n	800afd2 <_dtoa_r+0x94a>
 800b222:	9a01      	ldr	r2, [sp, #4]
 800b224:	429a      	cmp	r2, r3
 800b226:	d184      	bne.n	800b132 <_dtoa_r+0xaaa>
 800b228:	9b00      	ldr	r3, [sp, #0]
 800b22a:	3301      	adds	r3, #1
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	2331      	movs	r3, #49	; 0x31
 800b230:	7013      	strb	r3, [r2, #0]
 800b232:	e6ce      	b.n	800afd2 <_dtoa_r+0x94a>
 800b234:	4b09      	ldr	r3, [pc, #36]	; (800b25c <_dtoa_r+0xbd4>)
 800b236:	f7ff ba95 	b.w	800a764 <_dtoa_r+0xdc>
 800b23a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f47f aa6e 	bne.w	800a71e <_dtoa_r+0x96>
 800b242:	4b07      	ldr	r3, [pc, #28]	; (800b260 <_dtoa_r+0xbd8>)
 800b244:	f7ff ba8e 	b.w	800a764 <_dtoa_r+0xdc>
 800b248:	9b02      	ldr	r3, [sp, #8]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	dcae      	bgt.n	800b1ac <_dtoa_r+0xb24>
 800b24e:	9b06      	ldr	r3, [sp, #24]
 800b250:	2b02      	cmp	r3, #2
 800b252:	f73f aea8 	bgt.w	800afa6 <_dtoa_r+0x91e>
 800b256:	e7a9      	b.n	800b1ac <_dtoa_r+0xb24>
 800b258:	0800d04b 	.word	0x0800d04b
 800b25c:	0800cfa8 	.word	0x0800cfa8
 800b260:	0800cfcc 	.word	0x0800cfcc

0800b264 <_localeconv_r>:
 800b264:	4800      	ldr	r0, [pc, #0]	; (800b268 <_localeconv_r+0x4>)
 800b266:	4770      	bx	lr
 800b268:	20000164 	.word	0x20000164

0800b26c <malloc>:
 800b26c:	4b02      	ldr	r3, [pc, #8]	; (800b278 <malloc+0xc>)
 800b26e:	4601      	mov	r1, r0
 800b270:	6818      	ldr	r0, [r3, #0]
 800b272:	f000 bc09 	b.w	800ba88 <_malloc_r>
 800b276:	bf00      	nop
 800b278:	20000010 	.word	0x20000010

0800b27c <_Balloc>:
 800b27c:	b570      	push	{r4, r5, r6, lr}
 800b27e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b280:	4604      	mov	r4, r0
 800b282:	460d      	mov	r5, r1
 800b284:	b976      	cbnz	r6, 800b2a4 <_Balloc+0x28>
 800b286:	2010      	movs	r0, #16
 800b288:	f7ff fff0 	bl	800b26c <malloc>
 800b28c:	4602      	mov	r2, r0
 800b28e:	6260      	str	r0, [r4, #36]	; 0x24
 800b290:	b920      	cbnz	r0, 800b29c <_Balloc+0x20>
 800b292:	4b18      	ldr	r3, [pc, #96]	; (800b2f4 <_Balloc+0x78>)
 800b294:	4818      	ldr	r0, [pc, #96]	; (800b2f8 <_Balloc+0x7c>)
 800b296:	2166      	movs	r1, #102	; 0x66
 800b298:	f000 fc7a 	bl	800bb90 <__assert_func>
 800b29c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2a0:	6006      	str	r6, [r0, #0]
 800b2a2:	60c6      	str	r6, [r0, #12]
 800b2a4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b2a6:	68f3      	ldr	r3, [r6, #12]
 800b2a8:	b183      	cbz	r3, 800b2cc <_Balloc+0x50>
 800b2aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2ac:	68db      	ldr	r3, [r3, #12]
 800b2ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2b2:	b9b8      	cbnz	r0, 800b2e4 <_Balloc+0x68>
 800b2b4:	2101      	movs	r1, #1
 800b2b6:	fa01 f605 	lsl.w	r6, r1, r5
 800b2ba:	1d72      	adds	r2, r6, #5
 800b2bc:	0092      	lsls	r2, r2, #2
 800b2be:	4620      	mov	r0, r4
 800b2c0:	f000 fb60 	bl	800b984 <_calloc_r>
 800b2c4:	b160      	cbz	r0, 800b2e0 <_Balloc+0x64>
 800b2c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2ca:	e00e      	b.n	800b2ea <_Balloc+0x6e>
 800b2cc:	2221      	movs	r2, #33	; 0x21
 800b2ce:	2104      	movs	r1, #4
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f000 fb57 	bl	800b984 <_calloc_r>
 800b2d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2d8:	60f0      	str	r0, [r6, #12]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1e4      	bne.n	800b2aa <_Balloc+0x2e>
 800b2e0:	2000      	movs	r0, #0
 800b2e2:	bd70      	pop	{r4, r5, r6, pc}
 800b2e4:	6802      	ldr	r2, [r0, #0]
 800b2e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b2f0:	e7f7      	b.n	800b2e2 <_Balloc+0x66>
 800b2f2:	bf00      	nop
 800b2f4:	0800cfd9 	.word	0x0800cfd9
 800b2f8:	0800d05c 	.word	0x0800d05c

0800b2fc <_Bfree>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b300:	4605      	mov	r5, r0
 800b302:	460c      	mov	r4, r1
 800b304:	b976      	cbnz	r6, 800b324 <_Bfree+0x28>
 800b306:	2010      	movs	r0, #16
 800b308:	f7ff ffb0 	bl	800b26c <malloc>
 800b30c:	4602      	mov	r2, r0
 800b30e:	6268      	str	r0, [r5, #36]	; 0x24
 800b310:	b920      	cbnz	r0, 800b31c <_Bfree+0x20>
 800b312:	4b09      	ldr	r3, [pc, #36]	; (800b338 <_Bfree+0x3c>)
 800b314:	4809      	ldr	r0, [pc, #36]	; (800b33c <_Bfree+0x40>)
 800b316:	218a      	movs	r1, #138	; 0x8a
 800b318:	f000 fc3a 	bl	800bb90 <__assert_func>
 800b31c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b320:	6006      	str	r6, [r0, #0]
 800b322:	60c6      	str	r6, [r0, #12]
 800b324:	b13c      	cbz	r4, 800b336 <_Bfree+0x3a>
 800b326:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b328:	6862      	ldr	r2, [r4, #4]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b330:	6021      	str	r1, [r4, #0]
 800b332:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b336:	bd70      	pop	{r4, r5, r6, pc}
 800b338:	0800cfd9 	.word	0x0800cfd9
 800b33c:	0800d05c 	.word	0x0800d05c

0800b340 <__multadd>:
 800b340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b344:	690d      	ldr	r5, [r1, #16]
 800b346:	4607      	mov	r7, r0
 800b348:	460c      	mov	r4, r1
 800b34a:	461e      	mov	r6, r3
 800b34c:	f101 0c14 	add.w	ip, r1, #20
 800b350:	2000      	movs	r0, #0
 800b352:	f8dc 3000 	ldr.w	r3, [ip]
 800b356:	b299      	uxth	r1, r3
 800b358:	fb02 6101 	mla	r1, r2, r1, r6
 800b35c:	0c1e      	lsrs	r6, r3, #16
 800b35e:	0c0b      	lsrs	r3, r1, #16
 800b360:	fb02 3306 	mla	r3, r2, r6, r3
 800b364:	b289      	uxth	r1, r1
 800b366:	3001      	adds	r0, #1
 800b368:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b36c:	4285      	cmp	r5, r0
 800b36e:	f84c 1b04 	str.w	r1, [ip], #4
 800b372:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b376:	dcec      	bgt.n	800b352 <__multadd+0x12>
 800b378:	b30e      	cbz	r6, 800b3be <__multadd+0x7e>
 800b37a:	68a3      	ldr	r3, [r4, #8]
 800b37c:	42ab      	cmp	r3, r5
 800b37e:	dc19      	bgt.n	800b3b4 <__multadd+0x74>
 800b380:	6861      	ldr	r1, [r4, #4]
 800b382:	4638      	mov	r0, r7
 800b384:	3101      	adds	r1, #1
 800b386:	f7ff ff79 	bl	800b27c <_Balloc>
 800b38a:	4680      	mov	r8, r0
 800b38c:	b928      	cbnz	r0, 800b39a <__multadd+0x5a>
 800b38e:	4602      	mov	r2, r0
 800b390:	4b0c      	ldr	r3, [pc, #48]	; (800b3c4 <__multadd+0x84>)
 800b392:	480d      	ldr	r0, [pc, #52]	; (800b3c8 <__multadd+0x88>)
 800b394:	21b5      	movs	r1, #181	; 0xb5
 800b396:	f000 fbfb 	bl	800bb90 <__assert_func>
 800b39a:	6922      	ldr	r2, [r4, #16]
 800b39c:	3202      	adds	r2, #2
 800b39e:	f104 010c 	add.w	r1, r4, #12
 800b3a2:	0092      	lsls	r2, r2, #2
 800b3a4:	300c      	adds	r0, #12
 800b3a6:	f7fe fc61 	bl	8009c6c <memcpy>
 800b3aa:	4621      	mov	r1, r4
 800b3ac:	4638      	mov	r0, r7
 800b3ae:	f7ff ffa5 	bl	800b2fc <_Bfree>
 800b3b2:	4644      	mov	r4, r8
 800b3b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3b8:	3501      	adds	r5, #1
 800b3ba:	615e      	str	r6, [r3, #20]
 800b3bc:	6125      	str	r5, [r4, #16]
 800b3be:	4620      	mov	r0, r4
 800b3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c4:	0800d04b 	.word	0x0800d04b
 800b3c8:	0800d05c 	.word	0x0800d05c

0800b3cc <__hi0bits>:
 800b3cc:	0c03      	lsrs	r3, r0, #16
 800b3ce:	041b      	lsls	r3, r3, #16
 800b3d0:	b9d3      	cbnz	r3, 800b408 <__hi0bits+0x3c>
 800b3d2:	0400      	lsls	r0, r0, #16
 800b3d4:	2310      	movs	r3, #16
 800b3d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b3da:	bf04      	itt	eq
 800b3dc:	0200      	lsleq	r0, r0, #8
 800b3de:	3308      	addeq	r3, #8
 800b3e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3e4:	bf04      	itt	eq
 800b3e6:	0100      	lsleq	r0, r0, #4
 800b3e8:	3304      	addeq	r3, #4
 800b3ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b3ee:	bf04      	itt	eq
 800b3f0:	0080      	lsleq	r0, r0, #2
 800b3f2:	3302      	addeq	r3, #2
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	db05      	blt.n	800b404 <__hi0bits+0x38>
 800b3f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b3fc:	f103 0301 	add.w	r3, r3, #1
 800b400:	bf08      	it	eq
 800b402:	2320      	moveq	r3, #32
 800b404:	4618      	mov	r0, r3
 800b406:	4770      	bx	lr
 800b408:	2300      	movs	r3, #0
 800b40a:	e7e4      	b.n	800b3d6 <__hi0bits+0xa>

0800b40c <__lo0bits>:
 800b40c:	6803      	ldr	r3, [r0, #0]
 800b40e:	f013 0207 	ands.w	r2, r3, #7
 800b412:	4601      	mov	r1, r0
 800b414:	d00b      	beq.n	800b42e <__lo0bits+0x22>
 800b416:	07da      	lsls	r2, r3, #31
 800b418:	d423      	bmi.n	800b462 <__lo0bits+0x56>
 800b41a:	0798      	lsls	r0, r3, #30
 800b41c:	bf49      	itett	mi
 800b41e:	085b      	lsrmi	r3, r3, #1
 800b420:	089b      	lsrpl	r3, r3, #2
 800b422:	2001      	movmi	r0, #1
 800b424:	600b      	strmi	r3, [r1, #0]
 800b426:	bf5c      	itt	pl
 800b428:	600b      	strpl	r3, [r1, #0]
 800b42a:	2002      	movpl	r0, #2
 800b42c:	4770      	bx	lr
 800b42e:	b298      	uxth	r0, r3
 800b430:	b9a8      	cbnz	r0, 800b45e <__lo0bits+0x52>
 800b432:	0c1b      	lsrs	r3, r3, #16
 800b434:	2010      	movs	r0, #16
 800b436:	b2da      	uxtb	r2, r3
 800b438:	b90a      	cbnz	r2, 800b43e <__lo0bits+0x32>
 800b43a:	3008      	adds	r0, #8
 800b43c:	0a1b      	lsrs	r3, r3, #8
 800b43e:	071a      	lsls	r2, r3, #28
 800b440:	bf04      	itt	eq
 800b442:	091b      	lsreq	r3, r3, #4
 800b444:	3004      	addeq	r0, #4
 800b446:	079a      	lsls	r2, r3, #30
 800b448:	bf04      	itt	eq
 800b44a:	089b      	lsreq	r3, r3, #2
 800b44c:	3002      	addeq	r0, #2
 800b44e:	07da      	lsls	r2, r3, #31
 800b450:	d403      	bmi.n	800b45a <__lo0bits+0x4e>
 800b452:	085b      	lsrs	r3, r3, #1
 800b454:	f100 0001 	add.w	r0, r0, #1
 800b458:	d005      	beq.n	800b466 <__lo0bits+0x5a>
 800b45a:	600b      	str	r3, [r1, #0]
 800b45c:	4770      	bx	lr
 800b45e:	4610      	mov	r0, r2
 800b460:	e7e9      	b.n	800b436 <__lo0bits+0x2a>
 800b462:	2000      	movs	r0, #0
 800b464:	4770      	bx	lr
 800b466:	2020      	movs	r0, #32
 800b468:	4770      	bx	lr
	...

0800b46c <__i2b>:
 800b46c:	b510      	push	{r4, lr}
 800b46e:	460c      	mov	r4, r1
 800b470:	2101      	movs	r1, #1
 800b472:	f7ff ff03 	bl	800b27c <_Balloc>
 800b476:	4602      	mov	r2, r0
 800b478:	b928      	cbnz	r0, 800b486 <__i2b+0x1a>
 800b47a:	4b05      	ldr	r3, [pc, #20]	; (800b490 <__i2b+0x24>)
 800b47c:	4805      	ldr	r0, [pc, #20]	; (800b494 <__i2b+0x28>)
 800b47e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b482:	f000 fb85 	bl	800bb90 <__assert_func>
 800b486:	2301      	movs	r3, #1
 800b488:	6144      	str	r4, [r0, #20]
 800b48a:	6103      	str	r3, [r0, #16]
 800b48c:	bd10      	pop	{r4, pc}
 800b48e:	bf00      	nop
 800b490:	0800d04b 	.word	0x0800d04b
 800b494:	0800d05c 	.word	0x0800d05c

0800b498 <__multiply>:
 800b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	4691      	mov	r9, r2
 800b49e:	690a      	ldr	r2, [r1, #16]
 800b4a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	bfb8      	it	lt
 800b4a8:	460b      	movlt	r3, r1
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	bfbc      	itt	lt
 800b4ae:	464c      	movlt	r4, r9
 800b4b0:	4699      	movlt	r9, r3
 800b4b2:	6927      	ldr	r7, [r4, #16]
 800b4b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b4b8:	68a3      	ldr	r3, [r4, #8]
 800b4ba:	6861      	ldr	r1, [r4, #4]
 800b4bc:	eb07 060a 	add.w	r6, r7, sl
 800b4c0:	42b3      	cmp	r3, r6
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	bfb8      	it	lt
 800b4c6:	3101      	addlt	r1, #1
 800b4c8:	f7ff fed8 	bl	800b27c <_Balloc>
 800b4cc:	b930      	cbnz	r0, 800b4dc <__multiply+0x44>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	4b44      	ldr	r3, [pc, #272]	; (800b5e4 <__multiply+0x14c>)
 800b4d2:	4845      	ldr	r0, [pc, #276]	; (800b5e8 <__multiply+0x150>)
 800b4d4:	f240 115d 	movw	r1, #349	; 0x15d
 800b4d8:	f000 fb5a 	bl	800bb90 <__assert_func>
 800b4dc:	f100 0514 	add.w	r5, r0, #20
 800b4e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4e4:	462b      	mov	r3, r5
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	4543      	cmp	r3, r8
 800b4ea:	d321      	bcc.n	800b530 <__multiply+0x98>
 800b4ec:	f104 0314 	add.w	r3, r4, #20
 800b4f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b4f4:	f109 0314 	add.w	r3, r9, #20
 800b4f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b4fc:	9202      	str	r2, [sp, #8]
 800b4fe:	1b3a      	subs	r2, r7, r4
 800b500:	3a15      	subs	r2, #21
 800b502:	f022 0203 	bic.w	r2, r2, #3
 800b506:	3204      	adds	r2, #4
 800b508:	f104 0115 	add.w	r1, r4, #21
 800b50c:	428f      	cmp	r7, r1
 800b50e:	bf38      	it	cc
 800b510:	2204      	movcc	r2, #4
 800b512:	9201      	str	r2, [sp, #4]
 800b514:	9a02      	ldr	r2, [sp, #8]
 800b516:	9303      	str	r3, [sp, #12]
 800b518:	429a      	cmp	r2, r3
 800b51a:	d80c      	bhi.n	800b536 <__multiply+0x9e>
 800b51c:	2e00      	cmp	r6, #0
 800b51e:	dd03      	ble.n	800b528 <__multiply+0x90>
 800b520:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b524:	2b00      	cmp	r3, #0
 800b526:	d05a      	beq.n	800b5de <__multiply+0x146>
 800b528:	6106      	str	r6, [r0, #16]
 800b52a:	b005      	add	sp, #20
 800b52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b530:	f843 2b04 	str.w	r2, [r3], #4
 800b534:	e7d8      	b.n	800b4e8 <__multiply+0x50>
 800b536:	f8b3 a000 	ldrh.w	sl, [r3]
 800b53a:	f1ba 0f00 	cmp.w	sl, #0
 800b53e:	d024      	beq.n	800b58a <__multiply+0xf2>
 800b540:	f104 0e14 	add.w	lr, r4, #20
 800b544:	46a9      	mov	r9, r5
 800b546:	f04f 0c00 	mov.w	ip, #0
 800b54a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b54e:	f8d9 1000 	ldr.w	r1, [r9]
 800b552:	fa1f fb82 	uxth.w	fp, r2
 800b556:	b289      	uxth	r1, r1
 800b558:	fb0a 110b 	mla	r1, sl, fp, r1
 800b55c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b560:	f8d9 2000 	ldr.w	r2, [r9]
 800b564:	4461      	add	r1, ip
 800b566:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b56a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b56e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b572:	b289      	uxth	r1, r1
 800b574:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b578:	4577      	cmp	r7, lr
 800b57a:	f849 1b04 	str.w	r1, [r9], #4
 800b57e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b582:	d8e2      	bhi.n	800b54a <__multiply+0xb2>
 800b584:	9a01      	ldr	r2, [sp, #4]
 800b586:	f845 c002 	str.w	ip, [r5, r2]
 800b58a:	9a03      	ldr	r2, [sp, #12]
 800b58c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b590:	3304      	adds	r3, #4
 800b592:	f1b9 0f00 	cmp.w	r9, #0
 800b596:	d020      	beq.n	800b5da <__multiply+0x142>
 800b598:	6829      	ldr	r1, [r5, #0]
 800b59a:	f104 0c14 	add.w	ip, r4, #20
 800b59e:	46ae      	mov	lr, r5
 800b5a0:	f04f 0a00 	mov.w	sl, #0
 800b5a4:	f8bc b000 	ldrh.w	fp, [ip]
 800b5a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b5ac:	fb09 220b 	mla	r2, r9, fp, r2
 800b5b0:	4492      	add	sl, r2
 800b5b2:	b289      	uxth	r1, r1
 800b5b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b5b8:	f84e 1b04 	str.w	r1, [lr], #4
 800b5bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b5c0:	f8be 1000 	ldrh.w	r1, [lr]
 800b5c4:	0c12      	lsrs	r2, r2, #16
 800b5c6:	fb09 1102 	mla	r1, r9, r2, r1
 800b5ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b5ce:	4567      	cmp	r7, ip
 800b5d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b5d4:	d8e6      	bhi.n	800b5a4 <__multiply+0x10c>
 800b5d6:	9a01      	ldr	r2, [sp, #4]
 800b5d8:	50a9      	str	r1, [r5, r2]
 800b5da:	3504      	adds	r5, #4
 800b5dc:	e79a      	b.n	800b514 <__multiply+0x7c>
 800b5de:	3e01      	subs	r6, #1
 800b5e0:	e79c      	b.n	800b51c <__multiply+0x84>
 800b5e2:	bf00      	nop
 800b5e4:	0800d04b 	.word	0x0800d04b
 800b5e8:	0800d05c 	.word	0x0800d05c

0800b5ec <__pow5mult>:
 800b5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f0:	4615      	mov	r5, r2
 800b5f2:	f012 0203 	ands.w	r2, r2, #3
 800b5f6:	4606      	mov	r6, r0
 800b5f8:	460f      	mov	r7, r1
 800b5fa:	d007      	beq.n	800b60c <__pow5mult+0x20>
 800b5fc:	4c25      	ldr	r4, [pc, #148]	; (800b694 <__pow5mult+0xa8>)
 800b5fe:	3a01      	subs	r2, #1
 800b600:	2300      	movs	r3, #0
 800b602:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b606:	f7ff fe9b 	bl	800b340 <__multadd>
 800b60a:	4607      	mov	r7, r0
 800b60c:	10ad      	asrs	r5, r5, #2
 800b60e:	d03d      	beq.n	800b68c <__pow5mult+0xa0>
 800b610:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b612:	b97c      	cbnz	r4, 800b634 <__pow5mult+0x48>
 800b614:	2010      	movs	r0, #16
 800b616:	f7ff fe29 	bl	800b26c <malloc>
 800b61a:	4602      	mov	r2, r0
 800b61c:	6270      	str	r0, [r6, #36]	; 0x24
 800b61e:	b928      	cbnz	r0, 800b62c <__pow5mult+0x40>
 800b620:	4b1d      	ldr	r3, [pc, #116]	; (800b698 <__pow5mult+0xac>)
 800b622:	481e      	ldr	r0, [pc, #120]	; (800b69c <__pow5mult+0xb0>)
 800b624:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b628:	f000 fab2 	bl	800bb90 <__assert_func>
 800b62c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b630:	6004      	str	r4, [r0, #0]
 800b632:	60c4      	str	r4, [r0, #12]
 800b634:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b638:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b63c:	b94c      	cbnz	r4, 800b652 <__pow5mult+0x66>
 800b63e:	f240 2171 	movw	r1, #625	; 0x271
 800b642:	4630      	mov	r0, r6
 800b644:	f7ff ff12 	bl	800b46c <__i2b>
 800b648:	2300      	movs	r3, #0
 800b64a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b64e:	4604      	mov	r4, r0
 800b650:	6003      	str	r3, [r0, #0]
 800b652:	f04f 0900 	mov.w	r9, #0
 800b656:	07eb      	lsls	r3, r5, #31
 800b658:	d50a      	bpl.n	800b670 <__pow5mult+0x84>
 800b65a:	4639      	mov	r1, r7
 800b65c:	4622      	mov	r2, r4
 800b65e:	4630      	mov	r0, r6
 800b660:	f7ff ff1a 	bl	800b498 <__multiply>
 800b664:	4639      	mov	r1, r7
 800b666:	4680      	mov	r8, r0
 800b668:	4630      	mov	r0, r6
 800b66a:	f7ff fe47 	bl	800b2fc <_Bfree>
 800b66e:	4647      	mov	r7, r8
 800b670:	106d      	asrs	r5, r5, #1
 800b672:	d00b      	beq.n	800b68c <__pow5mult+0xa0>
 800b674:	6820      	ldr	r0, [r4, #0]
 800b676:	b938      	cbnz	r0, 800b688 <__pow5mult+0x9c>
 800b678:	4622      	mov	r2, r4
 800b67a:	4621      	mov	r1, r4
 800b67c:	4630      	mov	r0, r6
 800b67e:	f7ff ff0b 	bl	800b498 <__multiply>
 800b682:	6020      	str	r0, [r4, #0]
 800b684:	f8c0 9000 	str.w	r9, [r0]
 800b688:	4604      	mov	r4, r0
 800b68a:	e7e4      	b.n	800b656 <__pow5mult+0x6a>
 800b68c:	4638      	mov	r0, r7
 800b68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b692:	bf00      	nop
 800b694:	0800d1a8 	.word	0x0800d1a8
 800b698:	0800cfd9 	.word	0x0800cfd9
 800b69c:	0800d05c 	.word	0x0800d05c

0800b6a0 <__lshift>:
 800b6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a4:	460c      	mov	r4, r1
 800b6a6:	6849      	ldr	r1, [r1, #4]
 800b6a8:	6923      	ldr	r3, [r4, #16]
 800b6aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6ae:	68a3      	ldr	r3, [r4, #8]
 800b6b0:	4607      	mov	r7, r0
 800b6b2:	4691      	mov	r9, r2
 800b6b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6b8:	f108 0601 	add.w	r6, r8, #1
 800b6bc:	42b3      	cmp	r3, r6
 800b6be:	db0b      	blt.n	800b6d8 <__lshift+0x38>
 800b6c0:	4638      	mov	r0, r7
 800b6c2:	f7ff fddb 	bl	800b27c <_Balloc>
 800b6c6:	4605      	mov	r5, r0
 800b6c8:	b948      	cbnz	r0, 800b6de <__lshift+0x3e>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	4b2a      	ldr	r3, [pc, #168]	; (800b778 <__lshift+0xd8>)
 800b6ce:	482b      	ldr	r0, [pc, #172]	; (800b77c <__lshift+0xdc>)
 800b6d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b6d4:	f000 fa5c 	bl	800bb90 <__assert_func>
 800b6d8:	3101      	adds	r1, #1
 800b6da:	005b      	lsls	r3, r3, #1
 800b6dc:	e7ee      	b.n	800b6bc <__lshift+0x1c>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	f100 0114 	add.w	r1, r0, #20
 800b6e4:	f100 0210 	add.w	r2, r0, #16
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	4553      	cmp	r3, sl
 800b6ec:	db37      	blt.n	800b75e <__lshift+0xbe>
 800b6ee:	6920      	ldr	r0, [r4, #16]
 800b6f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6f4:	f104 0314 	add.w	r3, r4, #20
 800b6f8:	f019 091f 	ands.w	r9, r9, #31
 800b6fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b700:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b704:	d02f      	beq.n	800b766 <__lshift+0xc6>
 800b706:	f1c9 0e20 	rsb	lr, r9, #32
 800b70a:	468a      	mov	sl, r1
 800b70c:	f04f 0c00 	mov.w	ip, #0
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	fa02 f209 	lsl.w	r2, r2, r9
 800b716:	ea42 020c 	orr.w	r2, r2, ip
 800b71a:	f84a 2b04 	str.w	r2, [sl], #4
 800b71e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b722:	4298      	cmp	r0, r3
 800b724:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b728:	d8f2      	bhi.n	800b710 <__lshift+0x70>
 800b72a:	1b03      	subs	r3, r0, r4
 800b72c:	3b15      	subs	r3, #21
 800b72e:	f023 0303 	bic.w	r3, r3, #3
 800b732:	3304      	adds	r3, #4
 800b734:	f104 0215 	add.w	r2, r4, #21
 800b738:	4290      	cmp	r0, r2
 800b73a:	bf38      	it	cc
 800b73c:	2304      	movcc	r3, #4
 800b73e:	f841 c003 	str.w	ip, [r1, r3]
 800b742:	f1bc 0f00 	cmp.w	ip, #0
 800b746:	d001      	beq.n	800b74c <__lshift+0xac>
 800b748:	f108 0602 	add.w	r6, r8, #2
 800b74c:	3e01      	subs	r6, #1
 800b74e:	4638      	mov	r0, r7
 800b750:	612e      	str	r6, [r5, #16]
 800b752:	4621      	mov	r1, r4
 800b754:	f7ff fdd2 	bl	800b2fc <_Bfree>
 800b758:	4628      	mov	r0, r5
 800b75a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b75e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b762:	3301      	adds	r3, #1
 800b764:	e7c1      	b.n	800b6ea <__lshift+0x4a>
 800b766:	3904      	subs	r1, #4
 800b768:	f853 2b04 	ldr.w	r2, [r3], #4
 800b76c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b770:	4298      	cmp	r0, r3
 800b772:	d8f9      	bhi.n	800b768 <__lshift+0xc8>
 800b774:	e7ea      	b.n	800b74c <__lshift+0xac>
 800b776:	bf00      	nop
 800b778:	0800d04b 	.word	0x0800d04b
 800b77c:	0800d05c 	.word	0x0800d05c

0800b780 <__mcmp>:
 800b780:	b530      	push	{r4, r5, lr}
 800b782:	6902      	ldr	r2, [r0, #16]
 800b784:	690c      	ldr	r4, [r1, #16]
 800b786:	1b12      	subs	r2, r2, r4
 800b788:	d10e      	bne.n	800b7a8 <__mcmp+0x28>
 800b78a:	f100 0314 	add.w	r3, r0, #20
 800b78e:	3114      	adds	r1, #20
 800b790:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b794:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b798:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b79c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b7a0:	42a5      	cmp	r5, r4
 800b7a2:	d003      	beq.n	800b7ac <__mcmp+0x2c>
 800b7a4:	d305      	bcc.n	800b7b2 <__mcmp+0x32>
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	4610      	mov	r0, r2
 800b7aa:	bd30      	pop	{r4, r5, pc}
 800b7ac:	4283      	cmp	r3, r0
 800b7ae:	d3f3      	bcc.n	800b798 <__mcmp+0x18>
 800b7b0:	e7fa      	b.n	800b7a8 <__mcmp+0x28>
 800b7b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b6:	e7f7      	b.n	800b7a8 <__mcmp+0x28>

0800b7b8 <__mdiff>:
 800b7b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	460c      	mov	r4, r1
 800b7be:	4606      	mov	r6, r0
 800b7c0:	4611      	mov	r1, r2
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	4690      	mov	r8, r2
 800b7c6:	f7ff ffdb 	bl	800b780 <__mcmp>
 800b7ca:	1e05      	subs	r5, r0, #0
 800b7cc:	d110      	bne.n	800b7f0 <__mdiff+0x38>
 800b7ce:	4629      	mov	r1, r5
 800b7d0:	4630      	mov	r0, r6
 800b7d2:	f7ff fd53 	bl	800b27c <_Balloc>
 800b7d6:	b930      	cbnz	r0, 800b7e6 <__mdiff+0x2e>
 800b7d8:	4b3a      	ldr	r3, [pc, #232]	; (800b8c4 <__mdiff+0x10c>)
 800b7da:	4602      	mov	r2, r0
 800b7dc:	f240 2132 	movw	r1, #562	; 0x232
 800b7e0:	4839      	ldr	r0, [pc, #228]	; (800b8c8 <__mdiff+0x110>)
 800b7e2:	f000 f9d5 	bl	800bb90 <__assert_func>
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f0:	bfa4      	itt	ge
 800b7f2:	4643      	movge	r3, r8
 800b7f4:	46a0      	movge	r8, r4
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b7fc:	bfa6      	itte	ge
 800b7fe:	461c      	movge	r4, r3
 800b800:	2500      	movge	r5, #0
 800b802:	2501      	movlt	r5, #1
 800b804:	f7ff fd3a 	bl	800b27c <_Balloc>
 800b808:	b920      	cbnz	r0, 800b814 <__mdiff+0x5c>
 800b80a:	4b2e      	ldr	r3, [pc, #184]	; (800b8c4 <__mdiff+0x10c>)
 800b80c:	4602      	mov	r2, r0
 800b80e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b812:	e7e5      	b.n	800b7e0 <__mdiff+0x28>
 800b814:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b818:	6926      	ldr	r6, [r4, #16]
 800b81a:	60c5      	str	r5, [r0, #12]
 800b81c:	f104 0914 	add.w	r9, r4, #20
 800b820:	f108 0514 	add.w	r5, r8, #20
 800b824:	f100 0e14 	add.w	lr, r0, #20
 800b828:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b82c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b830:	f108 0210 	add.w	r2, r8, #16
 800b834:	46f2      	mov	sl, lr
 800b836:	2100      	movs	r1, #0
 800b838:	f859 3b04 	ldr.w	r3, [r9], #4
 800b83c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b840:	fa1f f883 	uxth.w	r8, r3
 800b844:	fa11 f18b 	uxtah	r1, r1, fp
 800b848:	0c1b      	lsrs	r3, r3, #16
 800b84a:	eba1 0808 	sub.w	r8, r1, r8
 800b84e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b852:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b856:	fa1f f888 	uxth.w	r8, r8
 800b85a:	1419      	asrs	r1, r3, #16
 800b85c:	454e      	cmp	r6, r9
 800b85e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b862:	f84a 3b04 	str.w	r3, [sl], #4
 800b866:	d8e7      	bhi.n	800b838 <__mdiff+0x80>
 800b868:	1b33      	subs	r3, r6, r4
 800b86a:	3b15      	subs	r3, #21
 800b86c:	f023 0303 	bic.w	r3, r3, #3
 800b870:	3304      	adds	r3, #4
 800b872:	3415      	adds	r4, #21
 800b874:	42a6      	cmp	r6, r4
 800b876:	bf38      	it	cc
 800b878:	2304      	movcc	r3, #4
 800b87a:	441d      	add	r5, r3
 800b87c:	4473      	add	r3, lr
 800b87e:	469e      	mov	lr, r3
 800b880:	462e      	mov	r6, r5
 800b882:	4566      	cmp	r6, ip
 800b884:	d30e      	bcc.n	800b8a4 <__mdiff+0xec>
 800b886:	f10c 0203 	add.w	r2, ip, #3
 800b88a:	1b52      	subs	r2, r2, r5
 800b88c:	f022 0203 	bic.w	r2, r2, #3
 800b890:	3d03      	subs	r5, #3
 800b892:	45ac      	cmp	ip, r5
 800b894:	bf38      	it	cc
 800b896:	2200      	movcc	r2, #0
 800b898:	441a      	add	r2, r3
 800b89a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b89e:	b17b      	cbz	r3, 800b8c0 <__mdiff+0x108>
 800b8a0:	6107      	str	r7, [r0, #16]
 800b8a2:	e7a3      	b.n	800b7ec <__mdiff+0x34>
 800b8a4:	f856 8b04 	ldr.w	r8, [r6], #4
 800b8a8:	fa11 f288 	uxtah	r2, r1, r8
 800b8ac:	1414      	asrs	r4, r2, #16
 800b8ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b8b2:	b292      	uxth	r2, r2
 800b8b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b8b8:	f84e 2b04 	str.w	r2, [lr], #4
 800b8bc:	1421      	asrs	r1, r4, #16
 800b8be:	e7e0      	b.n	800b882 <__mdiff+0xca>
 800b8c0:	3f01      	subs	r7, #1
 800b8c2:	e7ea      	b.n	800b89a <__mdiff+0xe2>
 800b8c4:	0800d04b 	.word	0x0800d04b
 800b8c8:	0800d05c 	.word	0x0800d05c

0800b8cc <__d2b>:
 800b8cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8d0:	4689      	mov	r9, r1
 800b8d2:	2101      	movs	r1, #1
 800b8d4:	ec57 6b10 	vmov	r6, r7, d0
 800b8d8:	4690      	mov	r8, r2
 800b8da:	f7ff fccf 	bl	800b27c <_Balloc>
 800b8de:	4604      	mov	r4, r0
 800b8e0:	b930      	cbnz	r0, 800b8f0 <__d2b+0x24>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	4b25      	ldr	r3, [pc, #148]	; (800b97c <__d2b+0xb0>)
 800b8e6:	4826      	ldr	r0, [pc, #152]	; (800b980 <__d2b+0xb4>)
 800b8e8:	f240 310a 	movw	r1, #778	; 0x30a
 800b8ec:	f000 f950 	bl	800bb90 <__assert_func>
 800b8f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b8f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b8f8:	bb35      	cbnz	r5, 800b948 <__d2b+0x7c>
 800b8fa:	2e00      	cmp	r6, #0
 800b8fc:	9301      	str	r3, [sp, #4]
 800b8fe:	d028      	beq.n	800b952 <__d2b+0x86>
 800b900:	4668      	mov	r0, sp
 800b902:	9600      	str	r6, [sp, #0]
 800b904:	f7ff fd82 	bl	800b40c <__lo0bits>
 800b908:	9900      	ldr	r1, [sp, #0]
 800b90a:	b300      	cbz	r0, 800b94e <__d2b+0x82>
 800b90c:	9a01      	ldr	r2, [sp, #4]
 800b90e:	f1c0 0320 	rsb	r3, r0, #32
 800b912:	fa02 f303 	lsl.w	r3, r2, r3
 800b916:	430b      	orrs	r3, r1
 800b918:	40c2      	lsrs	r2, r0
 800b91a:	6163      	str	r3, [r4, #20]
 800b91c:	9201      	str	r2, [sp, #4]
 800b91e:	9b01      	ldr	r3, [sp, #4]
 800b920:	61a3      	str	r3, [r4, #24]
 800b922:	2b00      	cmp	r3, #0
 800b924:	bf14      	ite	ne
 800b926:	2202      	movne	r2, #2
 800b928:	2201      	moveq	r2, #1
 800b92a:	6122      	str	r2, [r4, #16]
 800b92c:	b1d5      	cbz	r5, 800b964 <__d2b+0x98>
 800b92e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b932:	4405      	add	r5, r0
 800b934:	f8c9 5000 	str.w	r5, [r9]
 800b938:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b93c:	f8c8 0000 	str.w	r0, [r8]
 800b940:	4620      	mov	r0, r4
 800b942:	b003      	add	sp, #12
 800b944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b948:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b94c:	e7d5      	b.n	800b8fa <__d2b+0x2e>
 800b94e:	6161      	str	r1, [r4, #20]
 800b950:	e7e5      	b.n	800b91e <__d2b+0x52>
 800b952:	a801      	add	r0, sp, #4
 800b954:	f7ff fd5a 	bl	800b40c <__lo0bits>
 800b958:	9b01      	ldr	r3, [sp, #4]
 800b95a:	6163      	str	r3, [r4, #20]
 800b95c:	2201      	movs	r2, #1
 800b95e:	6122      	str	r2, [r4, #16]
 800b960:	3020      	adds	r0, #32
 800b962:	e7e3      	b.n	800b92c <__d2b+0x60>
 800b964:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b968:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b96c:	f8c9 0000 	str.w	r0, [r9]
 800b970:	6918      	ldr	r0, [r3, #16]
 800b972:	f7ff fd2b 	bl	800b3cc <__hi0bits>
 800b976:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b97a:	e7df      	b.n	800b93c <__d2b+0x70>
 800b97c:	0800d04b 	.word	0x0800d04b
 800b980:	0800d05c 	.word	0x0800d05c

0800b984 <_calloc_r>:
 800b984:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b986:	fba1 2402 	umull	r2, r4, r1, r2
 800b98a:	b94c      	cbnz	r4, 800b9a0 <_calloc_r+0x1c>
 800b98c:	4611      	mov	r1, r2
 800b98e:	9201      	str	r2, [sp, #4]
 800b990:	f000 f87a 	bl	800ba88 <_malloc_r>
 800b994:	9a01      	ldr	r2, [sp, #4]
 800b996:	4605      	mov	r5, r0
 800b998:	b930      	cbnz	r0, 800b9a8 <_calloc_r+0x24>
 800b99a:	4628      	mov	r0, r5
 800b99c:	b003      	add	sp, #12
 800b99e:	bd30      	pop	{r4, r5, pc}
 800b9a0:	220c      	movs	r2, #12
 800b9a2:	6002      	str	r2, [r0, #0]
 800b9a4:	2500      	movs	r5, #0
 800b9a6:	e7f8      	b.n	800b99a <_calloc_r+0x16>
 800b9a8:	4621      	mov	r1, r4
 800b9aa:	f7fe f96d 	bl	8009c88 <memset>
 800b9ae:	e7f4      	b.n	800b99a <_calloc_r+0x16>

0800b9b0 <_free_r>:
 800b9b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9b2:	2900      	cmp	r1, #0
 800b9b4:	d044      	beq.n	800ba40 <_free_r+0x90>
 800b9b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9ba:	9001      	str	r0, [sp, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f1a1 0404 	sub.w	r4, r1, #4
 800b9c2:	bfb8      	it	lt
 800b9c4:	18e4      	addlt	r4, r4, r3
 800b9c6:	f000 f925 	bl	800bc14 <__malloc_lock>
 800b9ca:	4a1e      	ldr	r2, [pc, #120]	; (800ba44 <_free_r+0x94>)
 800b9cc:	9801      	ldr	r0, [sp, #4]
 800b9ce:	6813      	ldr	r3, [r2, #0]
 800b9d0:	b933      	cbnz	r3, 800b9e0 <_free_r+0x30>
 800b9d2:	6063      	str	r3, [r4, #4]
 800b9d4:	6014      	str	r4, [r2, #0]
 800b9d6:	b003      	add	sp, #12
 800b9d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9dc:	f000 b920 	b.w	800bc20 <__malloc_unlock>
 800b9e0:	42a3      	cmp	r3, r4
 800b9e2:	d908      	bls.n	800b9f6 <_free_r+0x46>
 800b9e4:	6825      	ldr	r5, [r4, #0]
 800b9e6:	1961      	adds	r1, r4, r5
 800b9e8:	428b      	cmp	r3, r1
 800b9ea:	bf01      	itttt	eq
 800b9ec:	6819      	ldreq	r1, [r3, #0]
 800b9ee:	685b      	ldreq	r3, [r3, #4]
 800b9f0:	1949      	addeq	r1, r1, r5
 800b9f2:	6021      	streq	r1, [r4, #0]
 800b9f4:	e7ed      	b.n	800b9d2 <_free_r+0x22>
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	b10b      	cbz	r3, 800ba00 <_free_r+0x50>
 800b9fc:	42a3      	cmp	r3, r4
 800b9fe:	d9fa      	bls.n	800b9f6 <_free_r+0x46>
 800ba00:	6811      	ldr	r1, [r2, #0]
 800ba02:	1855      	adds	r5, r2, r1
 800ba04:	42a5      	cmp	r5, r4
 800ba06:	d10b      	bne.n	800ba20 <_free_r+0x70>
 800ba08:	6824      	ldr	r4, [r4, #0]
 800ba0a:	4421      	add	r1, r4
 800ba0c:	1854      	adds	r4, r2, r1
 800ba0e:	42a3      	cmp	r3, r4
 800ba10:	6011      	str	r1, [r2, #0]
 800ba12:	d1e0      	bne.n	800b9d6 <_free_r+0x26>
 800ba14:	681c      	ldr	r4, [r3, #0]
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	6053      	str	r3, [r2, #4]
 800ba1a:	4421      	add	r1, r4
 800ba1c:	6011      	str	r1, [r2, #0]
 800ba1e:	e7da      	b.n	800b9d6 <_free_r+0x26>
 800ba20:	d902      	bls.n	800ba28 <_free_r+0x78>
 800ba22:	230c      	movs	r3, #12
 800ba24:	6003      	str	r3, [r0, #0]
 800ba26:	e7d6      	b.n	800b9d6 <_free_r+0x26>
 800ba28:	6825      	ldr	r5, [r4, #0]
 800ba2a:	1961      	adds	r1, r4, r5
 800ba2c:	428b      	cmp	r3, r1
 800ba2e:	bf04      	itt	eq
 800ba30:	6819      	ldreq	r1, [r3, #0]
 800ba32:	685b      	ldreq	r3, [r3, #4]
 800ba34:	6063      	str	r3, [r4, #4]
 800ba36:	bf04      	itt	eq
 800ba38:	1949      	addeq	r1, r1, r5
 800ba3a:	6021      	streq	r1, [r4, #0]
 800ba3c:	6054      	str	r4, [r2, #4]
 800ba3e:	e7ca      	b.n	800b9d6 <_free_r+0x26>
 800ba40:	b003      	add	sp, #12
 800ba42:	bd30      	pop	{r4, r5, pc}
 800ba44:	20000d8c 	.word	0x20000d8c

0800ba48 <sbrk_aligned>:
 800ba48:	b570      	push	{r4, r5, r6, lr}
 800ba4a:	4e0e      	ldr	r6, [pc, #56]	; (800ba84 <sbrk_aligned+0x3c>)
 800ba4c:	460c      	mov	r4, r1
 800ba4e:	6831      	ldr	r1, [r6, #0]
 800ba50:	4605      	mov	r5, r0
 800ba52:	b911      	cbnz	r1, 800ba5a <sbrk_aligned+0x12>
 800ba54:	f000 f88c 	bl	800bb70 <_sbrk_r>
 800ba58:	6030      	str	r0, [r6, #0]
 800ba5a:	4621      	mov	r1, r4
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	f000 f887 	bl	800bb70 <_sbrk_r>
 800ba62:	1c43      	adds	r3, r0, #1
 800ba64:	d00a      	beq.n	800ba7c <sbrk_aligned+0x34>
 800ba66:	1cc4      	adds	r4, r0, #3
 800ba68:	f024 0403 	bic.w	r4, r4, #3
 800ba6c:	42a0      	cmp	r0, r4
 800ba6e:	d007      	beq.n	800ba80 <sbrk_aligned+0x38>
 800ba70:	1a21      	subs	r1, r4, r0
 800ba72:	4628      	mov	r0, r5
 800ba74:	f000 f87c 	bl	800bb70 <_sbrk_r>
 800ba78:	3001      	adds	r0, #1
 800ba7a:	d101      	bne.n	800ba80 <sbrk_aligned+0x38>
 800ba7c:	f04f 34ff 	mov.w	r4, #4294967295
 800ba80:	4620      	mov	r0, r4
 800ba82:	bd70      	pop	{r4, r5, r6, pc}
 800ba84:	20000d90 	.word	0x20000d90

0800ba88 <_malloc_r>:
 800ba88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba8c:	1ccd      	adds	r5, r1, #3
 800ba8e:	f025 0503 	bic.w	r5, r5, #3
 800ba92:	3508      	adds	r5, #8
 800ba94:	2d0c      	cmp	r5, #12
 800ba96:	bf38      	it	cc
 800ba98:	250c      	movcc	r5, #12
 800ba9a:	2d00      	cmp	r5, #0
 800ba9c:	4607      	mov	r7, r0
 800ba9e:	db01      	blt.n	800baa4 <_malloc_r+0x1c>
 800baa0:	42a9      	cmp	r1, r5
 800baa2:	d905      	bls.n	800bab0 <_malloc_r+0x28>
 800baa4:	230c      	movs	r3, #12
 800baa6:	603b      	str	r3, [r7, #0]
 800baa8:	2600      	movs	r6, #0
 800baaa:	4630      	mov	r0, r6
 800baac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bab0:	4e2e      	ldr	r6, [pc, #184]	; (800bb6c <_malloc_r+0xe4>)
 800bab2:	f000 f8af 	bl	800bc14 <__malloc_lock>
 800bab6:	6833      	ldr	r3, [r6, #0]
 800bab8:	461c      	mov	r4, r3
 800baba:	bb34      	cbnz	r4, 800bb0a <_malloc_r+0x82>
 800babc:	4629      	mov	r1, r5
 800babe:	4638      	mov	r0, r7
 800bac0:	f7ff ffc2 	bl	800ba48 <sbrk_aligned>
 800bac4:	1c43      	adds	r3, r0, #1
 800bac6:	4604      	mov	r4, r0
 800bac8:	d14d      	bne.n	800bb66 <_malloc_r+0xde>
 800baca:	6834      	ldr	r4, [r6, #0]
 800bacc:	4626      	mov	r6, r4
 800bace:	2e00      	cmp	r6, #0
 800bad0:	d140      	bne.n	800bb54 <_malloc_r+0xcc>
 800bad2:	6823      	ldr	r3, [r4, #0]
 800bad4:	4631      	mov	r1, r6
 800bad6:	4638      	mov	r0, r7
 800bad8:	eb04 0803 	add.w	r8, r4, r3
 800badc:	f000 f848 	bl	800bb70 <_sbrk_r>
 800bae0:	4580      	cmp	r8, r0
 800bae2:	d13a      	bne.n	800bb5a <_malloc_r+0xd2>
 800bae4:	6821      	ldr	r1, [r4, #0]
 800bae6:	3503      	adds	r5, #3
 800bae8:	1a6d      	subs	r5, r5, r1
 800baea:	f025 0503 	bic.w	r5, r5, #3
 800baee:	3508      	adds	r5, #8
 800baf0:	2d0c      	cmp	r5, #12
 800baf2:	bf38      	it	cc
 800baf4:	250c      	movcc	r5, #12
 800baf6:	4629      	mov	r1, r5
 800baf8:	4638      	mov	r0, r7
 800bafa:	f7ff ffa5 	bl	800ba48 <sbrk_aligned>
 800bafe:	3001      	adds	r0, #1
 800bb00:	d02b      	beq.n	800bb5a <_malloc_r+0xd2>
 800bb02:	6823      	ldr	r3, [r4, #0]
 800bb04:	442b      	add	r3, r5
 800bb06:	6023      	str	r3, [r4, #0]
 800bb08:	e00e      	b.n	800bb28 <_malloc_r+0xa0>
 800bb0a:	6822      	ldr	r2, [r4, #0]
 800bb0c:	1b52      	subs	r2, r2, r5
 800bb0e:	d41e      	bmi.n	800bb4e <_malloc_r+0xc6>
 800bb10:	2a0b      	cmp	r2, #11
 800bb12:	d916      	bls.n	800bb42 <_malloc_r+0xba>
 800bb14:	1961      	adds	r1, r4, r5
 800bb16:	42a3      	cmp	r3, r4
 800bb18:	6025      	str	r5, [r4, #0]
 800bb1a:	bf18      	it	ne
 800bb1c:	6059      	strne	r1, [r3, #4]
 800bb1e:	6863      	ldr	r3, [r4, #4]
 800bb20:	bf08      	it	eq
 800bb22:	6031      	streq	r1, [r6, #0]
 800bb24:	5162      	str	r2, [r4, r5]
 800bb26:	604b      	str	r3, [r1, #4]
 800bb28:	4638      	mov	r0, r7
 800bb2a:	f104 060b 	add.w	r6, r4, #11
 800bb2e:	f000 f877 	bl	800bc20 <__malloc_unlock>
 800bb32:	f026 0607 	bic.w	r6, r6, #7
 800bb36:	1d23      	adds	r3, r4, #4
 800bb38:	1af2      	subs	r2, r6, r3
 800bb3a:	d0b6      	beq.n	800baaa <_malloc_r+0x22>
 800bb3c:	1b9b      	subs	r3, r3, r6
 800bb3e:	50a3      	str	r3, [r4, r2]
 800bb40:	e7b3      	b.n	800baaa <_malloc_r+0x22>
 800bb42:	6862      	ldr	r2, [r4, #4]
 800bb44:	42a3      	cmp	r3, r4
 800bb46:	bf0c      	ite	eq
 800bb48:	6032      	streq	r2, [r6, #0]
 800bb4a:	605a      	strne	r2, [r3, #4]
 800bb4c:	e7ec      	b.n	800bb28 <_malloc_r+0xa0>
 800bb4e:	4623      	mov	r3, r4
 800bb50:	6864      	ldr	r4, [r4, #4]
 800bb52:	e7b2      	b.n	800baba <_malloc_r+0x32>
 800bb54:	4634      	mov	r4, r6
 800bb56:	6876      	ldr	r6, [r6, #4]
 800bb58:	e7b9      	b.n	800bace <_malloc_r+0x46>
 800bb5a:	230c      	movs	r3, #12
 800bb5c:	603b      	str	r3, [r7, #0]
 800bb5e:	4638      	mov	r0, r7
 800bb60:	f000 f85e 	bl	800bc20 <__malloc_unlock>
 800bb64:	e7a1      	b.n	800baaa <_malloc_r+0x22>
 800bb66:	6025      	str	r5, [r4, #0]
 800bb68:	e7de      	b.n	800bb28 <_malloc_r+0xa0>
 800bb6a:	bf00      	nop
 800bb6c:	20000d8c 	.word	0x20000d8c

0800bb70 <_sbrk_r>:
 800bb70:	b538      	push	{r3, r4, r5, lr}
 800bb72:	4d06      	ldr	r5, [pc, #24]	; (800bb8c <_sbrk_r+0x1c>)
 800bb74:	2300      	movs	r3, #0
 800bb76:	4604      	mov	r4, r0
 800bb78:	4608      	mov	r0, r1
 800bb7a:	602b      	str	r3, [r5, #0]
 800bb7c:	f7f7 fd8c 	bl	8003698 <_sbrk>
 800bb80:	1c43      	adds	r3, r0, #1
 800bb82:	d102      	bne.n	800bb8a <_sbrk_r+0x1a>
 800bb84:	682b      	ldr	r3, [r5, #0]
 800bb86:	b103      	cbz	r3, 800bb8a <_sbrk_r+0x1a>
 800bb88:	6023      	str	r3, [r4, #0]
 800bb8a:	bd38      	pop	{r3, r4, r5, pc}
 800bb8c:	20000d94 	.word	0x20000d94

0800bb90 <__assert_func>:
 800bb90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb92:	4614      	mov	r4, r2
 800bb94:	461a      	mov	r2, r3
 800bb96:	4b09      	ldr	r3, [pc, #36]	; (800bbbc <__assert_func+0x2c>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4605      	mov	r5, r0
 800bb9c:	68d8      	ldr	r0, [r3, #12]
 800bb9e:	b14c      	cbz	r4, 800bbb4 <__assert_func+0x24>
 800bba0:	4b07      	ldr	r3, [pc, #28]	; (800bbc0 <__assert_func+0x30>)
 800bba2:	9100      	str	r1, [sp, #0]
 800bba4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bba8:	4906      	ldr	r1, [pc, #24]	; (800bbc4 <__assert_func+0x34>)
 800bbaa:	462b      	mov	r3, r5
 800bbac:	f000 f80e 	bl	800bbcc <fiprintf>
 800bbb0:	f000 fa64 	bl	800c07c <abort>
 800bbb4:	4b04      	ldr	r3, [pc, #16]	; (800bbc8 <__assert_func+0x38>)
 800bbb6:	461c      	mov	r4, r3
 800bbb8:	e7f3      	b.n	800bba2 <__assert_func+0x12>
 800bbba:	bf00      	nop
 800bbbc:	20000010 	.word	0x20000010
 800bbc0:	0800d1b4 	.word	0x0800d1b4
 800bbc4:	0800d1c1 	.word	0x0800d1c1
 800bbc8:	0800d1ef 	.word	0x0800d1ef

0800bbcc <fiprintf>:
 800bbcc:	b40e      	push	{r1, r2, r3}
 800bbce:	b503      	push	{r0, r1, lr}
 800bbd0:	4601      	mov	r1, r0
 800bbd2:	ab03      	add	r3, sp, #12
 800bbd4:	4805      	ldr	r0, [pc, #20]	; (800bbec <fiprintf+0x20>)
 800bbd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbda:	6800      	ldr	r0, [r0, #0]
 800bbdc:	9301      	str	r3, [sp, #4]
 800bbde:	f000 f84f 	bl	800bc80 <_vfiprintf_r>
 800bbe2:	b002      	add	sp, #8
 800bbe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbe8:	b003      	add	sp, #12
 800bbea:	4770      	bx	lr
 800bbec:	20000010 	.word	0x20000010

0800bbf0 <__ascii_mbtowc>:
 800bbf0:	b082      	sub	sp, #8
 800bbf2:	b901      	cbnz	r1, 800bbf6 <__ascii_mbtowc+0x6>
 800bbf4:	a901      	add	r1, sp, #4
 800bbf6:	b142      	cbz	r2, 800bc0a <__ascii_mbtowc+0x1a>
 800bbf8:	b14b      	cbz	r3, 800bc0e <__ascii_mbtowc+0x1e>
 800bbfa:	7813      	ldrb	r3, [r2, #0]
 800bbfc:	600b      	str	r3, [r1, #0]
 800bbfe:	7812      	ldrb	r2, [r2, #0]
 800bc00:	1e10      	subs	r0, r2, #0
 800bc02:	bf18      	it	ne
 800bc04:	2001      	movne	r0, #1
 800bc06:	b002      	add	sp, #8
 800bc08:	4770      	bx	lr
 800bc0a:	4610      	mov	r0, r2
 800bc0c:	e7fb      	b.n	800bc06 <__ascii_mbtowc+0x16>
 800bc0e:	f06f 0001 	mvn.w	r0, #1
 800bc12:	e7f8      	b.n	800bc06 <__ascii_mbtowc+0x16>

0800bc14 <__malloc_lock>:
 800bc14:	4801      	ldr	r0, [pc, #4]	; (800bc1c <__malloc_lock+0x8>)
 800bc16:	f000 bbf1 	b.w	800c3fc <__retarget_lock_acquire_recursive>
 800bc1a:	bf00      	nop
 800bc1c:	20000d98 	.word	0x20000d98

0800bc20 <__malloc_unlock>:
 800bc20:	4801      	ldr	r0, [pc, #4]	; (800bc28 <__malloc_unlock+0x8>)
 800bc22:	f000 bbec 	b.w	800c3fe <__retarget_lock_release_recursive>
 800bc26:	bf00      	nop
 800bc28:	20000d98 	.word	0x20000d98

0800bc2c <__sfputc_r>:
 800bc2c:	6893      	ldr	r3, [r2, #8]
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	b410      	push	{r4}
 800bc34:	6093      	str	r3, [r2, #8]
 800bc36:	da08      	bge.n	800bc4a <__sfputc_r+0x1e>
 800bc38:	6994      	ldr	r4, [r2, #24]
 800bc3a:	42a3      	cmp	r3, r4
 800bc3c:	db01      	blt.n	800bc42 <__sfputc_r+0x16>
 800bc3e:	290a      	cmp	r1, #10
 800bc40:	d103      	bne.n	800bc4a <__sfputc_r+0x1e>
 800bc42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc46:	f000 b94b 	b.w	800bee0 <__swbuf_r>
 800bc4a:	6813      	ldr	r3, [r2, #0]
 800bc4c:	1c58      	adds	r0, r3, #1
 800bc4e:	6010      	str	r0, [r2, #0]
 800bc50:	7019      	strb	r1, [r3, #0]
 800bc52:	4608      	mov	r0, r1
 800bc54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc58:	4770      	bx	lr

0800bc5a <__sfputs_r>:
 800bc5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc5c:	4606      	mov	r6, r0
 800bc5e:	460f      	mov	r7, r1
 800bc60:	4614      	mov	r4, r2
 800bc62:	18d5      	adds	r5, r2, r3
 800bc64:	42ac      	cmp	r4, r5
 800bc66:	d101      	bne.n	800bc6c <__sfputs_r+0x12>
 800bc68:	2000      	movs	r0, #0
 800bc6a:	e007      	b.n	800bc7c <__sfputs_r+0x22>
 800bc6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc70:	463a      	mov	r2, r7
 800bc72:	4630      	mov	r0, r6
 800bc74:	f7ff ffda 	bl	800bc2c <__sfputc_r>
 800bc78:	1c43      	adds	r3, r0, #1
 800bc7a:	d1f3      	bne.n	800bc64 <__sfputs_r+0xa>
 800bc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc80 <_vfiprintf_r>:
 800bc80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc84:	460d      	mov	r5, r1
 800bc86:	b09d      	sub	sp, #116	; 0x74
 800bc88:	4614      	mov	r4, r2
 800bc8a:	4698      	mov	r8, r3
 800bc8c:	4606      	mov	r6, r0
 800bc8e:	b118      	cbz	r0, 800bc98 <_vfiprintf_r+0x18>
 800bc90:	6983      	ldr	r3, [r0, #24]
 800bc92:	b90b      	cbnz	r3, 800bc98 <_vfiprintf_r+0x18>
 800bc94:	f000 fb14 	bl	800c2c0 <__sinit>
 800bc98:	4b89      	ldr	r3, [pc, #548]	; (800bec0 <_vfiprintf_r+0x240>)
 800bc9a:	429d      	cmp	r5, r3
 800bc9c:	d11b      	bne.n	800bcd6 <_vfiprintf_r+0x56>
 800bc9e:	6875      	ldr	r5, [r6, #4]
 800bca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bca2:	07d9      	lsls	r1, r3, #31
 800bca4:	d405      	bmi.n	800bcb2 <_vfiprintf_r+0x32>
 800bca6:	89ab      	ldrh	r3, [r5, #12]
 800bca8:	059a      	lsls	r2, r3, #22
 800bcaa:	d402      	bmi.n	800bcb2 <_vfiprintf_r+0x32>
 800bcac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcae:	f000 fba5 	bl	800c3fc <__retarget_lock_acquire_recursive>
 800bcb2:	89ab      	ldrh	r3, [r5, #12]
 800bcb4:	071b      	lsls	r3, r3, #28
 800bcb6:	d501      	bpl.n	800bcbc <_vfiprintf_r+0x3c>
 800bcb8:	692b      	ldr	r3, [r5, #16]
 800bcba:	b9eb      	cbnz	r3, 800bcf8 <_vfiprintf_r+0x78>
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	4630      	mov	r0, r6
 800bcc0:	f000 f96e 	bl	800bfa0 <__swsetup_r>
 800bcc4:	b1c0      	cbz	r0, 800bcf8 <_vfiprintf_r+0x78>
 800bcc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcc8:	07dc      	lsls	r4, r3, #31
 800bcca:	d50e      	bpl.n	800bcea <_vfiprintf_r+0x6a>
 800bccc:	f04f 30ff 	mov.w	r0, #4294967295
 800bcd0:	b01d      	add	sp, #116	; 0x74
 800bcd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd6:	4b7b      	ldr	r3, [pc, #492]	; (800bec4 <_vfiprintf_r+0x244>)
 800bcd8:	429d      	cmp	r5, r3
 800bcda:	d101      	bne.n	800bce0 <_vfiprintf_r+0x60>
 800bcdc:	68b5      	ldr	r5, [r6, #8]
 800bcde:	e7df      	b.n	800bca0 <_vfiprintf_r+0x20>
 800bce0:	4b79      	ldr	r3, [pc, #484]	; (800bec8 <_vfiprintf_r+0x248>)
 800bce2:	429d      	cmp	r5, r3
 800bce4:	bf08      	it	eq
 800bce6:	68f5      	ldreq	r5, [r6, #12]
 800bce8:	e7da      	b.n	800bca0 <_vfiprintf_r+0x20>
 800bcea:	89ab      	ldrh	r3, [r5, #12]
 800bcec:	0598      	lsls	r0, r3, #22
 800bcee:	d4ed      	bmi.n	800bccc <_vfiprintf_r+0x4c>
 800bcf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcf2:	f000 fb84 	bl	800c3fe <__retarget_lock_release_recursive>
 800bcf6:	e7e9      	b.n	800bccc <_vfiprintf_r+0x4c>
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	9309      	str	r3, [sp, #36]	; 0x24
 800bcfc:	2320      	movs	r3, #32
 800bcfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd02:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd06:	2330      	movs	r3, #48	; 0x30
 800bd08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800becc <_vfiprintf_r+0x24c>
 800bd0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd10:	f04f 0901 	mov.w	r9, #1
 800bd14:	4623      	mov	r3, r4
 800bd16:	469a      	mov	sl, r3
 800bd18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd1c:	b10a      	cbz	r2, 800bd22 <_vfiprintf_r+0xa2>
 800bd1e:	2a25      	cmp	r2, #37	; 0x25
 800bd20:	d1f9      	bne.n	800bd16 <_vfiprintf_r+0x96>
 800bd22:	ebba 0b04 	subs.w	fp, sl, r4
 800bd26:	d00b      	beq.n	800bd40 <_vfiprintf_r+0xc0>
 800bd28:	465b      	mov	r3, fp
 800bd2a:	4622      	mov	r2, r4
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	4630      	mov	r0, r6
 800bd30:	f7ff ff93 	bl	800bc5a <__sfputs_r>
 800bd34:	3001      	adds	r0, #1
 800bd36:	f000 80aa 	beq.w	800be8e <_vfiprintf_r+0x20e>
 800bd3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd3c:	445a      	add	r2, fp
 800bd3e:	9209      	str	r2, [sp, #36]	; 0x24
 800bd40:	f89a 3000 	ldrb.w	r3, [sl]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	f000 80a2 	beq.w	800be8e <_vfiprintf_r+0x20e>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd54:	f10a 0a01 	add.w	sl, sl, #1
 800bd58:	9304      	str	r3, [sp, #16]
 800bd5a:	9307      	str	r3, [sp, #28]
 800bd5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd60:	931a      	str	r3, [sp, #104]	; 0x68
 800bd62:	4654      	mov	r4, sl
 800bd64:	2205      	movs	r2, #5
 800bd66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd6a:	4858      	ldr	r0, [pc, #352]	; (800becc <_vfiprintf_r+0x24c>)
 800bd6c:	f7f4 fa38 	bl	80001e0 <memchr>
 800bd70:	9a04      	ldr	r2, [sp, #16]
 800bd72:	b9d8      	cbnz	r0, 800bdac <_vfiprintf_r+0x12c>
 800bd74:	06d1      	lsls	r1, r2, #27
 800bd76:	bf44      	itt	mi
 800bd78:	2320      	movmi	r3, #32
 800bd7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd7e:	0713      	lsls	r3, r2, #28
 800bd80:	bf44      	itt	mi
 800bd82:	232b      	movmi	r3, #43	; 0x2b
 800bd84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd88:	f89a 3000 	ldrb.w	r3, [sl]
 800bd8c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd8e:	d015      	beq.n	800bdbc <_vfiprintf_r+0x13c>
 800bd90:	9a07      	ldr	r2, [sp, #28]
 800bd92:	4654      	mov	r4, sl
 800bd94:	2000      	movs	r0, #0
 800bd96:	f04f 0c0a 	mov.w	ip, #10
 800bd9a:	4621      	mov	r1, r4
 800bd9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bda0:	3b30      	subs	r3, #48	; 0x30
 800bda2:	2b09      	cmp	r3, #9
 800bda4:	d94e      	bls.n	800be44 <_vfiprintf_r+0x1c4>
 800bda6:	b1b0      	cbz	r0, 800bdd6 <_vfiprintf_r+0x156>
 800bda8:	9207      	str	r2, [sp, #28]
 800bdaa:	e014      	b.n	800bdd6 <_vfiprintf_r+0x156>
 800bdac:	eba0 0308 	sub.w	r3, r0, r8
 800bdb0:	fa09 f303 	lsl.w	r3, r9, r3
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	9304      	str	r3, [sp, #16]
 800bdb8:	46a2      	mov	sl, r4
 800bdba:	e7d2      	b.n	800bd62 <_vfiprintf_r+0xe2>
 800bdbc:	9b03      	ldr	r3, [sp, #12]
 800bdbe:	1d19      	adds	r1, r3, #4
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	9103      	str	r1, [sp, #12]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	bfbb      	ittet	lt
 800bdc8:	425b      	neglt	r3, r3
 800bdca:	f042 0202 	orrlt.w	r2, r2, #2
 800bdce:	9307      	strge	r3, [sp, #28]
 800bdd0:	9307      	strlt	r3, [sp, #28]
 800bdd2:	bfb8      	it	lt
 800bdd4:	9204      	strlt	r2, [sp, #16]
 800bdd6:	7823      	ldrb	r3, [r4, #0]
 800bdd8:	2b2e      	cmp	r3, #46	; 0x2e
 800bdda:	d10c      	bne.n	800bdf6 <_vfiprintf_r+0x176>
 800bddc:	7863      	ldrb	r3, [r4, #1]
 800bdde:	2b2a      	cmp	r3, #42	; 0x2a
 800bde0:	d135      	bne.n	800be4e <_vfiprintf_r+0x1ce>
 800bde2:	9b03      	ldr	r3, [sp, #12]
 800bde4:	1d1a      	adds	r2, r3, #4
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	9203      	str	r2, [sp, #12]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	bfb8      	it	lt
 800bdee:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdf2:	3402      	adds	r4, #2
 800bdf4:	9305      	str	r3, [sp, #20]
 800bdf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bedc <_vfiprintf_r+0x25c>
 800bdfa:	7821      	ldrb	r1, [r4, #0]
 800bdfc:	2203      	movs	r2, #3
 800bdfe:	4650      	mov	r0, sl
 800be00:	f7f4 f9ee 	bl	80001e0 <memchr>
 800be04:	b140      	cbz	r0, 800be18 <_vfiprintf_r+0x198>
 800be06:	2340      	movs	r3, #64	; 0x40
 800be08:	eba0 000a 	sub.w	r0, r0, sl
 800be0c:	fa03 f000 	lsl.w	r0, r3, r0
 800be10:	9b04      	ldr	r3, [sp, #16]
 800be12:	4303      	orrs	r3, r0
 800be14:	3401      	adds	r4, #1
 800be16:	9304      	str	r3, [sp, #16]
 800be18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be1c:	482c      	ldr	r0, [pc, #176]	; (800bed0 <_vfiprintf_r+0x250>)
 800be1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be22:	2206      	movs	r2, #6
 800be24:	f7f4 f9dc 	bl	80001e0 <memchr>
 800be28:	2800      	cmp	r0, #0
 800be2a:	d03f      	beq.n	800beac <_vfiprintf_r+0x22c>
 800be2c:	4b29      	ldr	r3, [pc, #164]	; (800bed4 <_vfiprintf_r+0x254>)
 800be2e:	bb1b      	cbnz	r3, 800be78 <_vfiprintf_r+0x1f8>
 800be30:	9b03      	ldr	r3, [sp, #12]
 800be32:	3307      	adds	r3, #7
 800be34:	f023 0307 	bic.w	r3, r3, #7
 800be38:	3308      	adds	r3, #8
 800be3a:	9303      	str	r3, [sp, #12]
 800be3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be3e:	443b      	add	r3, r7
 800be40:	9309      	str	r3, [sp, #36]	; 0x24
 800be42:	e767      	b.n	800bd14 <_vfiprintf_r+0x94>
 800be44:	fb0c 3202 	mla	r2, ip, r2, r3
 800be48:	460c      	mov	r4, r1
 800be4a:	2001      	movs	r0, #1
 800be4c:	e7a5      	b.n	800bd9a <_vfiprintf_r+0x11a>
 800be4e:	2300      	movs	r3, #0
 800be50:	3401      	adds	r4, #1
 800be52:	9305      	str	r3, [sp, #20]
 800be54:	4619      	mov	r1, r3
 800be56:	f04f 0c0a 	mov.w	ip, #10
 800be5a:	4620      	mov	r0, r4
 800be5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be60:	3a30      	subs	r2, #48	; 0x30
 800be62:	2a09      	cmp	r2, #9
 800be64:	d903      	bls.n	800be6e <_vfiprintf_r+0x1ee>
 800be66:	2b00      	cmp	r3, #0
 800be68:	d0c5      	beq.n	800bdf6 <_vfiprintf_r+0x176>
 800be6a:	9105      	str	r1, [sp, #20]
 800be6c:	e7c3      	b.n	800bdf6 <_vfiprintf_r+0x176>
 800be6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800be72:	4604      	mov	r4, r0
 800be74:	2301      	movs	r3, #1
 800be76:	e7f0      	b.n	800be5a <_vfiprintf_r+0x1da>
 800be78:	ab03      	add	r3, sp, #12
 800be7a:	9300      	str	r3, [sp, #0]
 800be7c:	462a      	mov	r2, r5
 800be7e:	4b16      	ldr	r3, [pc, #88]	; (800bed8 <_vfiprintf_r+0x258>)
 800be80:	a904      	add	r1, sp, #16
 800be82:	4630      	mov	r0, r6
 800be84:	f7fd ffa8 	bl	8009dd8 <_printf_float>
 800be88:	4607      	mov	r7, r0
 800be8a:	1c78      	adds	r0, r7, #1
 800be8c:	d1d6      	bne.n	800be3c <_vfiprintf_r+0x1bc>
 800be8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be90:	07d9      	lsls	r1, r3, #31
 800be92:	d405      	bmi.n	800bea0 <_vfiprintf_r+0x220>
 800be94:	89ab      	ldrh	r3, [r5, #12]
 800be96:	059a      	lsls	r2, r3, #22
 800be98:	d402      	bmi.n	800bea0 <_vfiprintf_r+0x220>
 800be9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be9c:	f000 faaf 	bl	800c3fe <__retarget_lock_release_recursive>
 800bea0:	89ab      	ldrh	r3, [r5, #12]
 800bea2:	065b      	lsls	r3, r3, #25
 800bea4:	f53f af12 	bmi.w	800bccc <_vfiprintf_r+0x4c>
 800bea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800beaa:	e711      	b.n	800bcd0 <_vfiprintf_r+0x50>
 800beac:	ab03      	add	r3, sp, #12
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	462a      	mov	r2, r5
 800beb2:	4b09      	ldr	r3, [pc, #36]	; (800bed8 <_vfiprintf_r+0x258>)
 800beb4:	a904      	add	r1, sp, #16
 800beb6:	4630      	mov	r0, r6
 800beb8:	f7fe fa32 	bl	800a320 <_printf_i>
 800bebc:	e7e4      	b.n	800be88 <_vfiprintf_r+0x208>
 800bebe:	bf00      	nop
 800bec0:	0800d32c 	.word	0x0800d32c
 800bec4:	0800d34c 	.word	0x0800d34c
 800bec8:	0800d30c 	.word	0x0800d30c
 800becc:	0800d1fa 	.word	0x0800d1fa
 800bed0:	0800d204 	.word	0x0800d204
 800bed4:	08009dd9 	.word	0x08009dd9
 800bed8:	0800bc5b 	.word	0x0800bc5b
 800bedc:	0800d200 	.word	0x0800d200

0800bee0 <__swbuf_r>:
 800bee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bee2:	460e      	mov	r6, r1
 800bee4:	4614      	mov	r4, r2
 800bee6:	4605      	mov	r5, r0
 800bee8:	b118      	cbz	r0, 800bef2 <__swbuf_r+0x12>
 800beea:	6983      	ldr	r3, [r0, #24]
 800beec:	b90b      	cbnz	r3, 800bef2 <__swbuf_r+0x12>
 800beee:	f000 f9e7 	bl	800c2c0 <__sinit>
 800bef2:	4b21      	ldr	r3, [pc, #132]	; (800bf78 <__swbuf_r+0x98>)
 800bef4:	429c      	cmp	r4, r3
 800bef6:	d12b      	bne.n	800bf50 <__swbuf_r+0x70>
 800bef8:	686c      	ldr	r4, [r5, #4]
 800befa:	69a3      	ldr	r3, [r4, #24]
 800befc:	60a3      	str	r3, [r4, #8]
 800befe:	89a3      	ldrh	r3, [r4, #12]
 800bf00:	071a      	lsls	r2, r3, #28
 800bf02:	d52f      	bpl.n	800bf64 <__swbuf_r+0x84>
 800bf04:	6923      	ldr	r3, [r4, #16]
 800bf06:	b36b      	cbz	r3, 800bf64 <__swbuf_r+0x84>
 800bf08:	6923      	ldr	r3, [r4, #16]
 800bf0a:	6820      	ldr	r0, [r4, #0]
 800bf0c:	1ac0      	subs	r0, r0, r3
 800bf0e:	6963      	ldr	r3, [r4, #20]
 800bf10:	b2f6      	uxtb	r6, r6
 800bf12:	4283      	cmp	r3, r0
 800bf14:	4637      	mov	r7, r6
 800bf16:	dc04      	bgt.n	800bf22 <__swbuf_r+0x42>
 800bf18:	4621      	mov	r1, r4
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	f000 f93c 	bl	800c198 <_fflush_r>
 800bf20:	bb30      	cbnz	r0, 800bf70 <__swbuf_r+0x90>
 800bf22:	68a3      	ldr	r3, [r4, #8]
 800bf24:	3b01      	subs	r3, #1
 800bf26:	60a3      	str	r3, [r4, #8]
 800bf28:	6823      	ldr	r3, [r4, #0]
 800bf2a:	1c5a      	adds	r2, r3, #1
 800bf2c:	6022      	str	r2, [r4, #0]
 800bf2e:	701e      	strb	r6, [r3, #0]
 800bf30:	6963      	ldr	r3, [r4, #20]
 800bf32:	3001      	adds	r0, #1
 800bf34:	4283      	cmp	r3, r0
 800bf36:	d004      	beq.n	800bf42 <__swbuf_r+0x62>
 800bf38:	89a3      	ldrh	r3, [r4, #12]
 800bf3a:	07db      	lsls	r3, r3, #31
 800bf3c:	d506      	bpl.n	800bf4c <__swbuf_r+0x6c>
 800bf3e:	2e0a      	cmp	r6, #10
 800bf40:	d104      	bne.n	800bf4c <__swbuf_r+0x6c>
 800bf42:	4621      	mov	r1, r4
 800bf44:	4628      	mov	r0, r5
 800bf46:	f000 f927 	bl	800c198 <_fflush_r>
 800bf4a:	b988      	cbnz	r0, 800bf70 <__swbuf_r+0x90>
 800bf4c:	4638      	mov	r0, r7
 800bf4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf50:	4b0a      	ldr	r3, [pc, #40]	; (800bf7c <__swbuf_r+0x9c>)
 800bf52:	429c      	cmp	r4, r3
 800bf54:	d101      	bne.n	800bf5a <__swbuf_r+0x7a>
 800bf56:	68ac      	ldr	r4, [r5, #8]
 800bf58:	e7cf      	b.n	800befa <__swbuf_r+0x1a>
 800bf5a:	4b09      	ldr	r3, [pc, #36]	; (800bf80 <__swbuf_r+0xa0>)
 800bf5c:	429c      	cmp	r4, r3
 800bf5e:	bf08      	it	eq
 800bf60:	68ec      	ldreq	r4, [r5, #12]
 800bf62:	e7ca      	b.n	800befa <__swbuf_r+0x1a>
 800bf64:	4621      	mov	r1, r4
 800bf66:	4628      	mov	r0, r5
 800bf68:	f000 f81a 	bl	800bfa0 <__swsetup_r>
 800bf6c:	2800      	cmp	r0, #0
 800bf6e:	d0cb      	beq.n	800bf08 <__swbuf_r+0x28>
 800bf70:	f04f 37ff 	mov.w	r7, #4294967295
 800bf74:	e7ea      	b.n	800bf4c <__swbuf_r+0x6c>
 800bf76:	bf00      	nop
 800bf78:	0800d32c 	.word	0x0800d32c
 800bf7c:	0800d34c 	.word	0x0800d34c
 800bf80:	0800d30c 	.word	0x0800d30c

0800bf84 <__ascii_wctomb>:
 800bf84:	b149      	cbz	r1, 800bf9a <__ascii_wctomb+0x16>
 800bf86:	2aff      	cmp	r2, #255	; 0xff
 800bf88:	bf85      	ittet	hi
 800bf8a:	238a      	movhi	r3, #138	; 0x8a
 800bf8c:	6003      	strhi	r3, [r0, #0]
 800bf8e:	700a      	strbls	r2, [r1, #0]
 800bf90:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf94:	bf98      	it	ls
 800bf96:	2001      	movls	r0, #1
 800bf98:	4770      	bx	lr
 800bf9a:	4608      	mov	r0, r1
 800bf9c:	4770      	bx	lr
	...

0800bfa0 <__swsetup_r>:
 800bfa0:	4b32      	ldr	r3, [pc, #200]	; (800c06c <__swsetup_r+0xcc>)
 800bfa2:	b570      	push	{r4, r5, r6, lr}
 800bfa4:	681d      	ldr	r5, [r3, #0]
 800bfa6:	4606      	mov	r6, r0
 800bfa8:	460c      	mov	r4, r1
 800bfaa:	b125      	cbz	r5, 800bfb6 <__swsetup_r+0x16>
 800bfac:	69ab      	ldr	r3, [r5, #24]
 800bfae:	b913      	cbnz	r3, 800bfb6 <__swsetup_r+0x16>
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	f000 f985 	bl	800c2c0 <__sinit>
 800bfb6:	4b2e      	ldr	r3, [pc, #184]	; (800c070 <__swsetup_r+0xd0>)
 800bfb8:	429c      	cmp	r4, r3
 800bfba:	d10f      	bne.n	800bfdc <__swsetup_r+0x3c>
 800bfbc:	686c      	ldr	r4, [r5, #4]
 800bfbe:	89a3      	ldrh	r3, [r4, #12]
 800bfc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfc4:	0719      	lsls	r1, r3, #28
 800bfc6:	d42c      	bmi.n	800c022 <__swsetup_r+0x82>
 800bfc8:	06dd      	lsls	r5, r3, #27
 800bfca:	d411      	bmi.n	800bff0 <__swsetup_r+0x50>
 800bfcc:	2309      	movs	r3, #9
 800bfce:	6033      	str	r3, [r6, #0]
 800bfd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bfd4:	81a3      	strh	r3, [r4, #12]
 800bfd6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfda:	e03e      	b.n	800c05a <__swsetup_r+0xba>
 800bfdc:	4b25      	ldr	r3, [pc, #148]	; (800c074 <__swsetup_r+0xd4>)
 800bfde:	429c      	cmp	r4, r3
 800bfe0:	d101      	bne.n	800bfe6 <__swsetup_r+0x46>
 800bfe2:	68ac      	ldr	r4, [r5, #8]
 800bfe4:	e7eb      	b.n	800bfbe <__swsetup_r+0x1e>
 800bfe6:	4b24      	ldr	r3, [pc, #144]	; (800c078 <__swsetup_r+0xd8>)
 800bfe8:	429c      	cmp	r4, r3
 800bfea:	bf08      	it	eq
 800bfec:	68ec      	ldreq	r4, [r5, #12]
 800bfee:	e7e6      	b.n	800bfbe <__swsetup_r+0x1e>
 800bff0:	0758      	lsls	r0, r3, #29
 800bff2:	d512      	bpl.n	800c01a <__swsetup_r+0x7a>
 800bff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bff6:	b141      	cbz	r1, 800c00a <__swsetup_r+0x6a>
 800bff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bffc:	4299      	cmp	r1, r3
 800bffe:	d002      	beq.n	800c006 <__swsetup_r+0x66>
 800c000:	4630      	mov	r0, r6
 800c002:	f7ff fcd5 	bl	800b9b0 <_free_r>
 800c006:	2300      	movs	r3, #0
 800c008:	6363      	str	r3, [r4, #52]	; 0x34
 800c00a:	89a3      	ldrh	r3, [r4, #12]
 800c00c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c010:	81a3      	strh	r3, [r4, #12]
 800c012:	2300      	movs	r3, #0
 800c014:	6063      	str	r3, [r4, #4]
 800c016:	6923      	ldr	r3, [r4, #16]
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	f043 0308 	orr.w	r3, r3, #8
 800c020:	81a3      	strh	r3, [r4, #12]
 800c022:	6923      	ldr	r3, [r4, #16]
 800c024:	b94b      	cbnz	r3, 800c03a <__swsetup_r+0x9a>
 800c026:	89a3      	ldrh	r3, [r4, #12]
 800c028:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c02c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c030:	d003      	beq.n	800c03a <__swsetup_r+0x9a>
 800c032:	4621      	mov	r1, r4
 800c034:	4630      	mov	r0, r6
 800c036:	f000 fa09 	bl	800c44c <__smakebuf_r>
 800c03a:	89a0      	ldrh	r0, [r4, #12]
 800c03c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c040:	f010 0301 	ands.w	r3, r0, #1
 800c044:	d00a      	beq.n	800c05c <__swsetup_r+0xbc>
 800c046:	2300      	movs	r3, #0
 800c048:	60a3      	str	r3, [r4, #8]
 800c04a:	6963      	ldr	r3, [r4, #20]
 800c04c:	425b      	negs	r3, r3
 800c04e:	61a3      	str	r3, [r4, #24]
 800c050:	6923      	ldr	r3, [r4, #16]
 800c052:	b943      	cbnz	r3, 800c066 <__swsetup_r+0xc6>
 800c054:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c058:	d1ba      	bne.n	800bfd0 <__swsetup_r+0x30>
 800c05a:	bd70      	pop	{r4, r5, r6, pc}
 800c05c:	0781      	lsls	r1, r0, #30
 800c05e:	bf58      	it	pl
 800c060:	6963      	ldrpl	r3, [r4, #20]
 800c062:	60a3      	str	r3, [r4, #8]
 800c064:	e7f4      	b.n	800c050 <__swsetup_r+0xb0>
 800c066:	2000      	movs	r0, #0
 800c068:	e7f7      	b.n	800c05a <__swsetup_r+0xba>
 800c06a:	bf00      	nop
 800c06c:	20000010 	.word	0x20000010
 800c070:	0800d32c 	.word	0x0800d32c
 800c074:	0800d34c 	.word	0x0800d34c
 800c078:	0800d30c 	.word	0x0800d30c

0800c07c <abort>:
 800c07c:	b508      	push	{r3, lr}
 800c07e:	2006      	movs	r0, #6
 800c080:	f000 fa4c 	bl	800c51c <raise>
 800c084:	2001      	movs	r0, #1
 800c086:	f7f7 fa8f 	bl	80035a8 <_exit>
	...

0800c08c <__sflush_r>:
 800c08c:	898a      	ldrh	r2, [r1, #12]
 800c08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c092:	4605      	mov	r5, r0
 800c094:	0710      	lsls	r0, r2, #28
 800c096:	460c      	mov	r4, r1
 800c098:	d458      	bmi.n	800c14c <__sflush_r+0xc0>
 800c09a:	684b      	ldr	r3, [r1, #4]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	dc05      	bgt.n	800c0ac <__sflush_r+0x20>
 800c0a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	dc02      	bgt.n	800c0ac <__sflush_r+0x20>
 800c0a6:	2000      	movs	r0, #0
 800c0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0ae:	2e00      	cmp	r6, #0
 800c0b0:	d0f9      	beq.n	800c0a6 <__sflush_r+0x1a>
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0b8:	682f      	ldr	r7, [r5, #0]
 800c0ba:	602b      	str	r3, [r5, #0]
 800c0bc:	d032      	beq.n	800c124 <__sflush_r+0x98>
 800c0be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0c0:	89a3      	ldrh	r3, [r4, #12]
 800c0c2:	075a      	lsls	r2, r3, #29
 800c0c4:	d505      	bpl.n	800c0d2 <__sflush_r+0x46>
 800c0c6:	6863      	ldr	r3, [r4, #4]
 800c0c8:	1ac0      	subs	r0, r0, r3
 800c0ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0cc:	b10b      	cbz	r3, 800c0d2 <__sflush_r+0x46>
 800c0ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0d0:	1ac0      	subs	r0, r0, r3
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0d8:	6a21      	ldr	r1, [r4, #32]
 800c0da:	4628      	mov	r0, r5
 800c0dc:	47b0      	blx	r6
 800c0de:	1c43      	adds	r3, r0, #1
 800c0e0:	89a3      	ldrh	r3, [r4, #12]
 800c0e2:	d106      	bne.n	800c0f2 <__sflush_r+0x66>
 800c0e4:	6829      	ldr	r1, [r5, #0]
 800c0e6:	291d      	cmp	r1, #29
 800c0e8:	d82c      	bhi.n	800c144 <__sflush_r+0xb8>
 800c0ea:	4a2a      	ldr	r2, [pc, #168]	; (800c194 <__sflush_r+0x108>)
 800c0ec:	40ca      	lsrs	r2, r1
 800c0ee:	07d6      	lsls	r6, r2, #31
 800c0f0:	d528      	bpl.n	800c144 <__sflush_r+0xb8>
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	6062      	str	r2, [r4, #4]
 800c0f6:	04d9      	lsls	r1, r3, #19
 800c0f8:	6922      	ldr	r2, [r4, #16]
 800c0fa:	6022      	str	r2, [r4, #0]
 800c0fc:	d504      	bpl.n	800c108 <__sflush_r+0x7c>
 800c0fe:	1c42      	adds	r2, r0, #1
 800c100:	d101      	bne.n	800c106 <__sflush_r+0x7a>
 800c102:	682b      	ldr	r3, [r5, #0]
 800c104:	b903      	cbnz	r3, 800c108 <__sflush_r+0x7c>
 800c106:	6560      	str	r0, [r4, #84]	; 0x54
 800c108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c10a:	602f      	str	r7, [r5, #0]
 800c10c:	2900      	cmp	r1, #0
 800c10e:	d0ca      	beq.n	800c0a6 <__sflush_r+0x1a>
 800c110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c114:	4299      	cmp	r1, r3
 800c116:	d002      	beq.n	800c11e <__sflush_r+0x92>
 800c118:	4628      	mov	r0, r5
 800c11a:	f7ff fc49 	bl	800b9b0 <_free_r>
 800c11e:	2000      	movs	r0, #0
 800c120:	6360      	str	r0, [r4, #52]	; 0x34
 800c122:	e7c1      	b.n	800c0a8 <__sflush_r+0x1c>
 800c124:	6a21      	ldr	r1, [r4, #32]
 800c126:	2301      	movs	r3, #1
 800c128:	4628      	mov	r0, r5
 800c12a:	47b0      	blx	r6
 800c12c:	1c41      	adds	r1, r0, #1
 800c12e:	d1c7      	bne.n	800c0c0 <__sflush_r+0x34>
 800c130:	682b      	ldr	r3, [r5, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d0c4      	beq.n	800c0c0 <__sflush_r+0x34>
 800c136:	2b1d      	cmp	r3, #29
 800c138:	d001      	beq.n	800c13e <__sflush_r+0xb2>
 800c13a:	2b16      	cmp	r3, #22
 800c13c:	d101      	bne.n	800c142 <__sflush_r+0xb6>
 800c13e:	602f      	str	r7, [r5, #0]
 800c140:	e7b1      	b.n	800c0a6 <__sflush_r+0x1a>
 800c142:	89a3      	ldrh	r3, [r4, #12]
 800c144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c148:	81a3      	strh	r3, [r4, #12]
 800c14a:	e7ad      	b.n	800c0a8 <__sflush_r+0x1c>
 800c14c:	690f      	ldr	r7, [r1, #16]
 800c14e:	2f00      	cmp	r7, #0
 800c150:	d0a9      	beq.n	800c0a6 <__sflush_r+0x1a>
 800c152:	0793      	lsls	r3, r2, #30
 800c154:	680e      	ldr	r6, [r1, #0]
 800c156:	bf08      	it	eq
 800c158:	694b      	ldreq	r3, [r1, #20]
 800c15a:	600f      	str	r7, [r1, #0]
 800c15c:	bf18      	it	ne
 800c15e:	2300      	movne	r3, #0
 800c160:	eba6 0807 	sub.w	r8, r6, r7
 800c164:	608b      	str	r3, [r1, #8]
 800c166:	f1b8 0f00 	cmp.w	r8, #0
 800c16a:	dd9c      	ble.n	800c0a6 <__sflush_r+0x1a>
 800c16c:	6a21      	ldr	r1, [r4, #32]
 800c16e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c170:	4643      	mov	r3, r8
 800c172:	463a      	mov	r2, r7
 800c174:	4628      	mov	r0, r5
 800c176:	47b0      	blx	r6
 800c178:	2800      	cmp	r0, #0
 800c17a:	dc06      	bgt.n	800c18a <__sflush_r+0xfe>
 800c17c:	89a3      	ldrh	r3, [r4, #12]
 800c17e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c182:	81a3      	strh	r3, [r4, #12]
 800c184:	f04f 30ff 	mov.w	r0, #4294967295
 800c188:	e78e      	b.n	800c0a8 <__sflush_r+0x1c>
 800c18a:	4407      	add	r7, r0
 800c18c:	eba8 0800 	sub.w	r8, r8, r0
 800c190:	e7e9      	b.n	800c166 <__sflush_r+0xda>
 800c192:	bf00      	nop
 800c194:	20400001 	.word	0x20400001

0800c198 <_fflush_r>:
 800c198:	b538      	push	{r3, r4, r5, lr}
 800c19a:	690b      	ldr	r3, [r1, #16]
 800c19c:	4605      	mov	r5, r0
 800c19e:	460c      	mov	r4, r1
 800c1a0:	b913      	cbnz	r3, 800c1a8 <_fflush_r+0x10>
 800c1a2:	2500      	movs	r5, #0
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	bd38      	pop	{r3, r4, r5, pc}
 800c1a8:	b118      	cbz	r0, 800c1b2 <_fflush_r+0x1a>
 800c1aa:	6983      	ldr	r3, [r0, #24]
 800c1ac:	b90b      	cbnz	r3, 800c1b2 <_fflush_r+0x1a>
 800c1ae:	f000 f887 	bl	800c2c0 <__sinit>
 800c1b2:	4b14      	ldr	r3, [pc, #80]	; (800c204 <_fflush_r+0x6c>)
 800c1b4:	429c      	cmp	r4, r3
 800c1b6:	d11b      	bne.n	800c1f0 <_fflush_r+0x58>
 800c1b8:	686c      	ldr	r4, [r5, #4]
 800c1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d0ef      	beq.n	800c1a2 <_fflush_r+0xa>
 800c1c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c1c4:	07d0      	lsls	r0, r2, #31
 800c1c6:	d404      	bmi.n	800c1d2 <_fflush_r+0x3a>
 800c1c8:	0599      	lsls	r1, r3, #22
 800c1ca:	d402      	bmi.n	800c1d2 <_fflush_r+0x3a>
 800c1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1ce:	f000 f915 	bl	800c3fc <__retarget_lock_acquire_recursive>
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	4621      	mov	r1, r4
 800c1d6:	f7ff ff59 	bl	800c08c <__sflush_r>
 800c1da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1dc:	07da      	lsls	r2, r3, #31
 800c1de:	4605      	mov	r5, r0
 800c1e0:	d4e0      	bmi.n	800c1a4 <_fflush_r+0xc>
 800c1e2:	89a3      	ldrh	r3, [r4, #12]
 800c1e4:	059b      	lsls	r3, r3, #22
 800c1e6:	d4dd      	bmi.n	800c1a4 <_fflush_r+0xc>
 800c1e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1ea:	f000 f908 	bl	800c3fe <__retarget_lock_release_recursive>
 800c1ee:	e7d9      	b.n	800c1a4 <_fflush_r+0xc>
 800c1f0:	4b05      	ldr	r3, [pc, #20]	; (800c208 <_fflush_r+0x70>)
 800c1f2:	429c      	cmp	r4, r3
 800c1f4:	d101      	bne.n	800c1fa <_fflush_r+0x62>
 800c1f6:	68ac      	ldr	r4, [r5, #8]
 800c1f8:	e7df      	b.n	800c1ba <_fflush_r+0x22>
 800c1fa:	4b04      	ldr	r3, [pc, #16]	; (800c20c <_fflush_r+0x74>)
 800c1fc:	429c      	cmp	r4, r3
 800c1fe:	bf08      	it	eq
 800c200:	68ec      	ldreq	r4, [r5, #12]
 800c202:	e7da      	b.n	800c1ba <_fflush_r+0x22>
 800c204:	0800d32c 	.word	0x0800d32c
 800c208:	0800d34c 	.word	0x0800d34c
 800c20c:	0800d30c 	.word	0x0800d30c

0800c210 <std>:
 800c210:	2300      	movs	r3, #0
 800c212:	b510      	push	{r4, lr}
 800c214:	4604      	mov	r4, r0
 800c216:	e9c0 3300 	strd	r3, r3, [r0]
 800c21a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c21e:	6083      	str	r3, [r0, #8]
 800c220:	8181      	strh	r1, [r0, #12]
 800c222:	6643      	str	r3, [r0, #100]	; 0x64
 800c224:	81c2      	strh	r2, [r0, #14]
 800c226:	6183      	str	r3, [r0, #24]
 800c228:	4619      	mov	r1, r3
 800c22a:	2208      	movs	r2, #8
 800c22c:	305c      	adds	r0, #92	; 0x5c
 800c22e:	f7fd fd2b 	bl	8009c88 <memset>
 800c232:	4b05      	ldr	r3, [pc, #20]	; (800c248 <std+0x38>)
 800c234:	6263      	str	r3, [r4, #36]	; 0x24
 800c236:	4b05      	ldr	r3, [pc, #20]	; (800c24c <std+0x3c>)
 800c238:	62a3      	str	r3, [r4, #40]	; 0x28
 800c23a:	4b05      	ldr	r3, [pc, #20]	; (800c250 <std+0x40>)
 800c23c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c23e:	4b05      	ldr	r3, [pc, #20]	; (800c254 <std+0x44>)
 800c240:	6224      	str	r4, [r4, #32]
 800c242:	6323      	str	r3, [r4, #48]	; 0x30
 800c244:	bd10      	pop	{r4, pc}
 800c246:	bf00      	nop
 800c248:	0800c555 	.word	0x0800c555
 800c24c:	0800c577 	.word	0x0800c577
 800c250:	0800c5af 	.word	0x0800c5af
 800c254:	0800c5d3 	.word	0x0800c5d3

0800c258 <_cleanup_r>:
 800c258:	4901      	ldr	r1, [pc, #4]	; (800c260 <_cleanup_r+0x8>)
 800c25a:	f000 b8af 	b.w	800c3bc <_fwalk_reent>
 800c25e:	bf00      	nop
 800c260:	0800c199 	.word	0x0800c199

0800c264 <__sfmoreglue>:
 800c264:	b570      	push	{r4, r5, r6, lr}
 800c266:	2268      	movs	r2, #104	; 0x68
 800c268:	1e4d      	subs	r5, r1, #1
 800c26a:	4355      	muls	r5, r2
 800c26c:	460e      	mov	r6, r1
 800c26e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c272:	f7ff fc09 	bl	800ba88 <_malloc_r>
 800c276:	4604      	mov	r4, r0
 800c278:	b140      	cbz	r0, 800c28c <__sfmoreglue+0x28>
 800c27a:	2100      	movs	r1, #0
 800c27c:	e9c0 1600 	strd	r1, r6, [r0]
 800c280:	300c      	adds	r0, #12
 800c282:	60a0      	str	r0, [r4, #8]
 800c284:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c288:	f7fd fcfe 	bl	8009c88 <memset>
 800c28c:	4620      	mov	r0, r4
 800c28e:	bd70      	pop	{r4, r5, r6, pc}

0800c290 <__sfp_lock_acquire>:
 800c290:	4801      	ldr	r0, [pc, #4]	; (800c298 <__sfp_lock_acquire+0x8>)
 800c292:	f000 b8b3 	b.w	800c3fc <__retarget_lock_acquire_recursive>
 800c296:	bf00      	nop
 800c298:	20000d99 	.word	0x20000d99

0800c29c <__sfp_lock_release>:
 800c29c:	4801      	ldr	r0, [pc, #4]	; (800c2a4 <__sfp_lock_release+0x8>)
 800c29e:	f000 b8ae 	b.w	800c3fe <__retarget_lock_release_recursive>
 800c2a2:	bf00      	nop
 800c2a4:	20000d99 	.word	0x20000d99

0800c2a8 <__sinit_lock_acquire>:
 800c2a8:	4801      	ldr	r0, [pc, #4]	; (800c2b0 <__sinit_lock_acquire+0x8>)
 800c2aa:	f000 b8a7 	b.w	800c3fc <__retarget_lock_acquire_recursive>
 800c2ae:	bf00      	nop
 800c2b0:	20000d9a 	.word	0x20000d9a

0800c2b4 <__sinit_lock_release>:
 800c2b4:	4801      	ldr	r0, [pc, #4]	; (800c2bc <__sinit_lock_release+0x8>)
 800c2b6:	f000 b8a2 	b.w	800c3fe <__retarget_lock_release_recursive>
 800c2ba:	bf00      	nop
 800c2bc:	20000d9a 	.word	0x20000d9a

0800c2c0 <__sinit>:
 800c2c0:	b510      	push	{r4, lr}
 800c2c2:	4604      	mov	r4, r0
 800c2c4:	f7ff fff0 	bl	800c2a8 <__sinit_lock_acquire>
 800c2c8:	69a3      	ldr	r3, [r4, #24]
 800c2ca:	b11b      	cbz	r3, 800c2d4 <__sinit+0x14>
 800c2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2d0:	f7ff bff0 	b.w	800c2b4 <__sinit_lock_release>
 800c2d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c2d8:	6523      	str	r3, [r4, #80]	; 0x50
 800c2da:	4b13      	ldr	r3, [pc, #76]	; (800c328 <__sinit+0x68>)
 800c2dc:	4a13      	ldr	r2, [pc, #76]	; (800c32c <__sinit+0x6c>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800c2e2:	42a3      	cmp	r3, r4
 800c2e4:	bf04      	itt	eq
 800c2e6:	2301      	moveq	r3, #1
 800c2e8:	61a3      	streq	r3, [r4, #24]
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	f000 f820 	bl	800c330 <__sfp>
 800c2f0:	6060      	str	r0, [r4, #4]
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	f000 f81c 	bl	800c330 <__sfp>
 800c2f8:	60a0      	str	r0, [r4, #8]
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	f000 f818 	bl	800c330 <__sfp>
 800c300:	2200      	movs	r2, #0
 800c302:	60e0      	str	r0, [r4, #12]
 800c304:	2104      	movs	r1, #4
 800c306:	6860      	ldr	r0, [r4, #4]
 800c308:	f7ff ff82 	bl	800c210 <std>
 800c30c:	68a0      	ldr	r0, [r4, #8]
 800c30e:	2201      	movs	r2, #1
 800c310:	2109      	movs	r1, #9
 800c312:	f7ff ff7d 	bl	800c210 <std>
 800c316:	68e0      	ldr	r0, [r4, #12]
 800c318:	2202      	movs	r2, #2
 800c31a:	2112      	movs	r1, #18
 800c31c:	f7ff ff78 	bl	800c210 <std>
 800c320:	2301      	movs	r3, #1
 800c322:	61a3      	str	r3, [r4, #24]
 800c324:	e7d2      	b.n	800c2cc <__sinit+0xc>
 800c326:	bf00      	nop
 800c328:	0800cf94 	.word	0x0800cf94
 800c32c:	0800c259 	.word	0x0800c259

0800c330 <__sfp>:
 800c330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c332:	4607      	mov	r7, r0
 800c334:	f7ff ffac 	bl	800c290 <__sfp_lock_acquire>
 800c338:	4b1e      	ldr	r3, [pc, #120]	; (800c3b4 <__sfp+0x84>)
 800c33a:	681e      	ldr	r6, [r3, #0]
 800c33c:	69b3      	ldr	r3, [r6, #24]
 800c33e:	b913      	cbnz	r3, 800c346 <__sfp+0x16>
 800c340:	4630      	mov	r0, r6
 800c342:	f7ff ffbd 	bl	800c2c0 <__sinit>
 800c346:	3648      	adds	r6, #72	; 0x48
 800c348:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c34c:	3b01      	subs	r3, #1
 800c34e:	d503      	bpl.n	800c358 <__sfp+0x28>
 800c350:	6833      	ldr	r3, [r6, #0]
 800c352:	b30b      	cbz	r3, 800c398 <__sfp+0x68>
 800c354:	6836      	ldr	r6, [r6, #0]
 800c356:	e7f7      	b.n	800c348 <__sfp+0x18>
 800c358:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c35c:	b9d5      	cbnz	r5, 800c394 <__sfp+0x64>
 800c35e:	4b16      	ldr	r3, [pc, #88]	; (800c3b8 <__sfp+0x88>)
 800c360:	60e3      	str	r3, [r4, #12]
 800c362:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c366:	6665      	str	r5, [r4, #100]	; 0x64
 800c368:	f000 f847 	bl	800c3fa <__retarget_lock_init_recursive>
 800c36c:	f7ff ff96 	bl	800c29c <__sfp_lock_release>
 800c370:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c374:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c378:	6025      	str	r5, [r4, #0]
 800c37a:	61a5      	str	r5, [r4, #24]
 800c37c:	2208      	movs	r2, #8
 800c37e:	4629      	mov	r1, r5
 800c380:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c384:	f7fd fc80 	bl	8009c88 <memset>
 800c388:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c38c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c390:	4620      	mov	r0, r4
 800c392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c394:	3468      	adds	r4, #104	; 0x68
 800c396:	e7d9      	b.n	800c34c <__sfp+0x1c>
 800c398:	2104      	movs	r1, #4
 800c39a:	4638      	mov	r0, r7
 800c39c:	f7ff ff62 	bl	800c264 <__sfmoreglue>
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	6030      	str	r0, [r6, #0]
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	d1d5      	bne.n	800c354 <__sfp+0x24>
 800c3a8:	f7ff ff78 	bl	800c29c <__sfp_lock_release>
 800c3ac:	230c      	movs	r3, #12
 800c3ae:	603b      	str	r3, [r7, #0]
 800c3b0:	e7ee      	b.n	800c390 <__sfp+0x60>
 800c3b2:	bf00      	nop
 800c3b4:	0800cf94 	.word	0x0800cf94
 800c3b8:	ffff0001 	.word	0xffff0001

0800c3bc <_fwalk_reent>:
 800c3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3c0:	4606      	mov	r6, r0
 800c3c2:	4688      	mov	r8, r1
 800c3c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c3c8:	2700      	movs	r7, #0
 800c3ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3ce:	f1b9 0901 	subs.w	r9, r9, #1
 800c3d2:	d505      	bpl.n	800c3e0 <_fwalk_reent+0x24>
 800c3d4:	6824      	ldr	r4, [r4, #0]
 800c3d6:	2c00      	cmp	r4, #0
 800c3d8:	d1f7      	bne.n	800c3ca <_fwalk_reent+0xe>
 800c3da:	4638      	mov	r0, r7
 800c3dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3e0:	89ab      	ldrh	r3, [r5, #12]
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	d907      	bls.n	800c3f6 <_fwalk_reent+0x3a>
 800c3e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	d003      	beq.n	800c3f6 <_fwalk_reent+0x3a>
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	47c0      	blx	r8
 800c3f4:	4307      	orrs	r7, r0
 800c3f6:	3568      	adds	r5, #104	; 0x68
 800c3f8:	e7e9      	b.n	800c3ce <_fwalk_reent+0x12>

0800c3fa <__retarget_lock_init_recursive>:
 800c3fa:	4770      	bx	lr

0800c3fc <__retarget_lock_acquire_recursive>:
 800c3fc:	4770      	bx	lr

0800c3fe <__retarget_lock_release_recursive>:
 800c3fe:	4770      	bx	lr

0800c400 <__swhatbuf_r>:
 800c400:	b570      	push	{r4, r5, r6, lr}
 800c402:	460e      	mov	r6, r1
 800c404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c408:	2900      	cmp	r1, #0
 800c40a:	b096      	sub	sp, #88	; 0x58
 800c40c:	4614      	mov	r4, r2
 800c40e:	461d      	mov	r5, r3
 800c410:	da08      	bge.n	800c424 <__swhatbuf_r+0x24>
 800c412:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c416:	2200      	movs	r2, #0
 800c418:	602a      	str	r2, [r5, #0]
 800c41a:	061a      	lsls	r2, r3, #24
 800c41c:	d410      	bmi.n	800c440 <__swhatbuf_r+0x40>
 800c41e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c422:	e00e      	b.n	800c442 <__swhatbuf_r+0x42>
 800c424:	466a      	mov	r2, sp
 800c426:	f000 f8fb 	bl	800c620 <_fstat_r>
 800c42a:	2800      	cmp	r0, #0
 800c42c:	dbf1      	blt.n	800c412 <__swhatbuf_r+0x12>
 800c42e:	9a01      	ldr	r2, [sp, #4]
 800c430:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c434:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c438:	425a      	negs	r2, r3
 800c43a:	415a      	adcs	r2, r3
 800c43c:	602a      	str	r2, [r5, #0]
 800c43e:	e7ee      	b.n	800c41e <__swhatbuf_r+0x1e>
 800c440:	2340      	movs	r3, #64	; 0x40
 800c442:	2000      	movs	r0, #0
 800c444:	6023      	str	r3, [r4, #0]
 800c446:	b016      	add	sp, #88	; 0x58
 800c448:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c44c <__smakebuf_r>:
 800c44c:	898b      	ldrh	r3, [r1, #12]
 800c44e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c450:	079d      	lsls	r5, r3, #30
 800c452:	4606      	mov	r6, r0
 800c454:	460c      	mov	r4, r1
 800c456:	d507      	bpl.n	800c468 <__smakebuf_r+0x1c>
 800c458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	6123      	str	r3, [r4, #16]
 800c460:	2301      	movs	r3, #1
 800c462:	6163      	str	r3, [r4, #20]
 800c464:	b002      	add	sp, #8
 800c466:	bd70      	pop	{r4, r5, r6, pc}
 800c468:	ab01      	add	r3, sp, #4
 800c46a:	466a      	mov	r2, sp
 800c46c:	f7ff ffc8 	bl	800c400 <__swhatbuf_r>
 800c470:	9900      	ldr	r1, [sp, #0]
 800c472:	4605      	mov	r5, r0
 800c474:	4630      	mov	r0, r6
 800c476:	f7ff fb07 	bl	800ba88 <_malloc_r>
 800c47a:	b948      	cbnz	r0, 800c490 <__smakebuf_r+0x44>
 800c47c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c480:	059a      	lsls	r2, r3, #22
 800c482:	d4ef      	bmi.n	800c464 <__smakebuf_r+0x18>
 800c484:	f023 0303 	bic.w	r3, r3, #3
 800c488:	f043 0302 	orr.w	r3, r3, #2
 800c48c:	81a3      	strh	r3, [r4, #12]
 800c48e:	e7e3      	b.n	800c458 <__smakebuf_r+0xc>
 800c490:	4b0d      	ldr	r3, [pc, #52]	; (800c4c8 <__smakebuf_r+0x7c>)
 800c492:	62b3      	str	r3, [r6, #40]	; 0x28
 800c494:	89a3      	ldrh	r3, [r4, #12]
 800c496:	6020      	str	r0, [r4, #0]
 800c498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c49c:	81a3      	strh	r3, [r4, #12]
 800c49e:	9b00      	ldr	r3, [sp, #0]
 800c4a0:	6163      	str	r3, [r4, #20]
 800c4a2:	9b01      	ldr	r3, [sp, #4]
 800c4a4:	6120      	str	r0, [r4, #16]
 800c4a6:	b15b      	cbz	r3, 800c4c0 <__smakebuf_r+0x74>
 800c4a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4ac:	4630      	mov	r0, r6
 800c4ae:	f000 f8c9 	bl	800c644 <_isatty_r>
 800c4b2:	b128      	cbz	r0, 800c4c0 <__smakebuf_r+0x74>
 800c4b4:	89a3      	ldrh	r3, [r4, #12]
 800c4b6:	f023 0303 	bic.w	r3, r3, #3
 800c4ba:	f043 0301 	orr.w	r3, r3, #1
 800c4be:	81a3      	strh	r3, [r4, #12]
 800c4c0:	89a0      	ldrh	r0, [r4, #12]
 800c4c2:	4305      	orrs	r5, r0
 800c4c4:	81a5      	strh	r5, [r4, #12]
 800c4c6:	e7cd      	b.n	800c464 <__smakebuf_r+0x18>
 800c4c8:	0800c259 	.word	0x0800c259

0800c4cc <_raise_r>:
 800c4cc:	291f      	cmp	r1, #31
 800c4ce:	b538      	push	{r3, r4, r5, lr}
 800c4d0:	4604      	mov	r4, r0
 800c4d2:	460d      	mov	r5, r1
 800c4d4:	d904      	bls.n	800c4e0 <_raise_r+0x14>
 800c4d6:	2316      	movs	r3, #22
 800c4d8:	6003      	str	r3, [r0, #0]
 800c4da:	f04f 30ff 	mov.w	r0, #4294967295
 800c4de:	bd38      	pop	{r3, r4, r5, pc}
 800c4e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c4e2:	b112      	cbz	r2, 800c4ea <_raise_r+0x1e>
 800c4e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4e8:	b94b      	cbnz	r3, 800c4fe <_raise_r+0x32>
 800c4ea:	4620      	mov	r0, r4
 800c4ec:	f000 f830 	bl	800c550 <_getpid_r>
 800c4f0:	462a      	mov	r2, r5
 800c4f2:	4601      	mov	r1, r0
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c4fa:	f000 b817 	b.w	800c52c <_kill_r>
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d00a      	beq.n	800c518 <_raise_r+0x4c>
 800c502:	1c59      	adds	r1, r3, #1
 800c504:	d103      	bne.n	800c50e <_raise_r+0x42>
 800c506:	2316      	movs	r3, #22
 800c508:	6003      	str	r3, [r0, #0]
 800c50a:	2001      	movs	r0, #1
 800c50c:	e7e7      	b.n	800c4de <_raise_r+0x12>
 800c50e:	2400      	movs	r4, #0
 800c510:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c514:	4628      	mov	r0, r5
 800c516:	4798      	blx	r3
 800c518:	2000      	movs	r0, #0
 800c51a:	e7e0      	b.n	800c4de <_raise_r+0x12>

0800c51c <raise>:
 800c51c:	4b02      	ldr	r3, [pc, #8]	; (800c528 <raise+0xc>)
 800c51e:	4601      	mov	r1, r0
 800c520:	6818      	ldr	r0, [r3, #0]
 800c522:	f7ff bfd3 	b.w	800c4cc <_raise_r>
 800c526:	bf00      	nop
 800c528:	20000010 	.word	0x20000010

0800c52c <_kill_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4d07      	ldr	r5, [pc, #28]	; (800c54c <_kill_r+0x20>)
 800c530:	2300      	movs	r3, #0
 800c532:	4604      	mov	r4, r0
 800c534:	4608      	mov	r0, r1
 800c536:	4611      	mov	r1, r2
 800c538:	602b      	str	r3, [r5, #0]
 800c53a:	f7f7 f825 	bl	8003588 <_kill>
 800c53e:	1c43      	adds	r3, r0, #1
 800c540:	d102      	bne.n	800c548 <_kill_r+0x1c>
 800c542:	682b      	ldr	r3, [r5, #0]
 800c544:	b103      	cbz	r3, 800c548 <_kill_r+0x1c>
 800c546:	6023      	str	r3, [r4, #0]
 800c548:	bd38      	pop	{r3, r4, r5, pc}
 800c54a:	bf00      	nop
 800c54c:	20000d94 	.word	0x20000d94

0800c550 <_getpid_r>:
 800c550:	f7f7 b812 	b.w	8003578 <_getpid>

0800c554 <__sread>:
 800c554:	b510      	push	{r4, lr}
 800c556:	460c      	mov	r4, r1
 800c558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c55c:	f000 f894 	bl	800c688 <_read_r>
 800c560:	2800      	cmp	r0, #0
 800c562:	bfab      	itete	ge
 800c564:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c566:	89a3      	ldrhlt	r3, [r4, #12]
 800c568:	181b      	addge	r3, r3, r0
 800c56a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c56e:	bfac      	ite	ge
 800c570:	6563      	strge	r3, [r4, #84]	; 0x54
 800c572:	81a3      	strhlt	r3, [r4, #12]
 800c574:	bd10      	pop	{r4, pc}

0800c576 <__swrite>:
 800c576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c57a:	461f      	mov	r7, r3
 800c57c:	898b      	ldrh	r3, [r1, #12]
 800c57e:	05db      	lsls	r3, r3, #23
 800c580:	4605      	mov	r5, r0
 800c582:	460c      	mov	r4, r1
 800c584:	4616      	mov	r6, r2
 800c586:	d505      	bpl.n	800c594 <__swrite+0x1e>
 800c588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c58c:	2302      	movs	r3, #2
 800c58e:	2200      	movs	r2, #0
 800c590:	f000 f868 	bl	800c664 <_lseek_r>
 800c594:	89a3      	ldrh	r3, [r4, #12]
 800c596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c59a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c59e:	81a3      	strh	r3, [r4, #12]
 800c5a0:	4632      	mov	r2, r6
 800c5a2:	463b      	mov	r3, r7
 800c5a4:	4628      	mov	r0, r5
 800c5a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5aa:	f000 b817 	b.w	800c5dc <_write_r>

0800c5ae <__sseek>:
 800c5ae:	b510      	push	{r4, lr}
 800c5b0:	460c      	mov	r4, r1
 800c5b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5b6:	f000 f855 	bl	800c664 <_lseek_r>
 800c5ba:	1c43      	adds	r3, r0, #1
 800c5bc:	89a3      	ldrh	r3, [r4, #12]
 800c5be:	bf15      	itete	ne
 800c5c0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5ca:	81a3      	strheq	r3, [r4, #12]
 800c5cc:	bf18      	it	ne
 800c5ce:	81a3      	strhne	r3, [r4, #12]
 800c5d0:	bd10      	pop	{r4, pc}

0800c5d2 <__sclose>:
 800c5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d6:	f000 b813 	b.w	800c600 <_close_r>
	...

0800c5dc <_write_r>:
 800c5dc:	b538      	push	{r3, r4, r5, lr}
 800c5de:	4d07      	ldr	r5, [pc, #28]	; (800c5fc <_write_r+0x20>)
 800c5e0:	4604      	mov	r4, r0
 800c5e2:	4608      	mov	r0, r1
 800c5e4:	4611      	mov	r1, r2
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	602a      	str	r2, [r5, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	f7f7 f803 	bl	80035f6 <_write>
 800c5f0:	1c43      	adds	r3, r0, #1
 800c5f2:	d102      	bne.n	800c5fa <_write_r+0x1e>
 800c5f4:	682b      	ldr	r3, [r5, #0]
 800c5f6:	b103      	cbz	r3, 800c5fa <_write_r+0x1e>
 800c5f8:	6023      	str	r3, [r4, #0]
 800c5fa:	bd38      	pop	{r3, r4, r5, pc}
 800c5fc:	20000d94 	.word	0x20000d94

0800c600 <_close_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4d06      	ldr	r5, [pc, #24]	; (800c61c <_close_r+0x1c>)
 800c604:	2300      	movs	r3, #0
 800c606:	4604      	mov	r4, r0
 800c608:	4608      	mov	r0, r1
 800c60a:	602b      	str	r3, [r5, #0]
 800c60c:	f7f7 f80f 	bl	800362e <_close>
 800c610:	1c43      	adds	r3, r0, #1
 800c612:	d102      	bne.n	800c61a <_close_r+0x1a>
 800c614:	682b      	ldr	r3, [r5, #0]
 800c616:	b103      	cbz	r3, 800c61a <_close_r+0x1a>
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	20000d94 	.word	0x20000d94

0800c620 <_fstat_r>:
 800c620:	b538      	push	{r3, r4, r5, lr}
 800c622:	4d07      	ldr	r5, [pc, #28]	; (800c640 <_fstat_r+0x20>)
 800c624:	2300      	movs	r3, #0
 800c626:	4604      	mov	r4, r0
 800c628:	4608      	mov	r0, r1
 800c62a:	4611      	mov	r1, r2
 800c62c:	602b      	str	r3, [r5, #0]
 800c62e:	f7f7 f80a 	bl	8003646 <_fstat>
 800c632:	1c43      	adds	r3, r0, #1
 800c634:	d102      	bne.n	800c63c <_fstat_r+0x1c>
 800c636:	682b      	ldr	r3, [r5, #0]
 800c638:	b103      	cbz	r3, 800c63c <_fstat_r+0x1c>
 800c63a:	6023      	str	r3, [r4, #0]
 800c63c:	bd38      	pop	{r3, r4, r5, pc}
 800c63e:	bf00      	nop
 800c640:	20000d94 	.word	0x20000d94

0800c644 <_isatty_r>:
 800c644:	b538      	push	{r3, r4, r5, lr}
 800c646:	4d06      	ldr	r5, [pc, #24]	; (800c660 <_isatty_r+0x1c>)
 800c648:	2300      	movs	r3, #0
 800c64a:	4604      	mov	r4, r0
 800c64c:	4608      	mov	r0, r1
 800c64e:	602b      	str	r3, [r5, #0]
 800c650:	f7f7 f809 	bl	8003666 <_isatty>
 800c654:	1c43      	adds	r3, r0, #1
 800c656:	d102      	bne.n	800c65e <_isatty_r+0x1a>
 800c658:	682b      	ldr	r3, [r5, #0]
 800c65a:	b103      	cbz	r3, 800c65e <_isatty_r+0x1a>
 800c65c:	6023      	str	r3, [r4, #0]
 800c65e:	bd38      	pop	{r3, r4, r5, pc}
 800c660:	20000d94 	.word	0x20000d94

0800c664 <_lseek_r>:
 800c664:	b538      	push	{r3, r4, r5, lr}
 800c666:	4d07      	ldr	r5, [pc, #28]	; (800c684 <_lseek_r+0x20>)
 800c668:	4604      	mov	r4, r0
 800c66a:	4608      	mov	r0, r1
 800c66c:	4611      	mov	r1, r2
 800c66e:	2200      	movs	r2, #0
 800c670:	602a      	str	r2, [r5, #0]
 800c672:	461a      	mov	r2, r3
 800c674:	f7f7 f802 	bl	800367c <_lseek>
 800c678:	1c43      	adds	r3, r0, #1
 800c67a:	d102      	bne.n	800c682 <_lseek_r+0x1e>
 800c67c:	682b      	ldr	r3, [r5, #0]
 800c67e:	b103      	cbz	r3, 800c682 <_lseek_r+0x1e>
 800c680:	6023      	str	r3, [r4, #0]
 800c682:	bd38      	pop	{r3, r4, r5, pc}
 800c684:	20000d94 	.word	0x20000d94

0800c688 <_read_r>:
 800c688:	b538      	push	{r3, r4, r5, lr}
 800c68a:	4d07      	ldr	r5, [pc, #28]	; (800c6a8 <_read_r+0x20>)
 800c68c:	4604      	mov	r4, r0
 800c68e:	4608      	mov	r0, r1
 800c690:	4611      	mov	r1, r2
 800c692:	2200      	movs	r2, #0
 800c694:	602a      	str	r2, [r5, #0]
 800c696:	461a      	mov	r2, r3
 800c698:	f7f6 ff90 	bl	80035bc <_read>
 800c69c:	1c43      	adds	r3, r0, #1
 800c69e:	d102      	bne.n	800c6a6 <_read_r+0x1e>
 800c6a0:	682b      	ldr	r3, [r5, #0]
 800c6a2:	b103      	cbz	r3, 800c6a6 <_read_r+0x1e>
 800c6a4:	6023      	str	r3, [r4, #0]
 800c6a6:	bd38      	pop	{r3, r4, r5, pc}
 800c6a8:	20000d94 	.word	0x20000d94

0800c6ac <_init>:
 800c6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ae:	bf00      	nop
 800c6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6b2:	bc08      	pop	{r3}
 800c6b4:	469e      	mov	lr, r3
 800c6b6:	4770      	bx	lr

0800c6b8 <_fini>:
 800c6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ba:	bf00      	nop
 800c6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6be:	bc08      	pop	{r3}
 800c6c0:	469e      	mov	lr, r3
 800c6c2:	4770      	bx	lr
